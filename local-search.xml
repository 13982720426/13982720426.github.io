<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>什么是闭包</title>
    <link href="/2021/05/30/%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85/"/>
    <url>/2021/05/30/%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>所谓闭包，就是<strong>能够访问其他函数内部变量的函数</strong>。<br>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把<strong>闭包简单理解成”定义在一个函数内部的函数”<strong>。<br>所以，在本质上，</strong>闭包就是将函数内部和函数外部连接起来的一座桥梁。</strong></p><h3 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h3><ol><li>读取/设置一个函数内部的私有变量</li><li>让变量的值始终保持在内存中</li></ol><p>来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> add = <span class="hljs-literal">null</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> n = <span class="hljs-number">999</span><br><br>  add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    n += <span class="hljs-number">1</span><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(n)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> f2<br>&#125;<br><br><span class="hljs-keyword">var</span> result = f1()<br><br>result() <span class="hljs-comment">// =&gt; 999</span><br><br>add()<br><br>result() <span class="hljs-comment">// =&gt; 1000</span><br></code></pre></div></td></tr></table></figure><p>上面代码的执行结果，第一次为 999，第二次为 1000。这就证明了，函数 f1 中的局部变量一直保存在内存中，并没有在 f1 被调用后被清除。<br>为什么会这样呢？原因就在于 f1 是 f2 的父函数，而 f2 被赋给了一个全局变量，这导致 f2 始终在内存中，而 f2 的存在依赖于 f1，因此 f1 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<br>这段代码中另一个值得注意的地方，就是”Add=function(){n+=1}”这一行，首先在 nAdd 前面没有使用 var 关键字，因此 Add 是一个全局变量，而不是局部变量。其次，nAdd 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以 Add 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。</p><h3 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h3><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄(IE 的 bug）。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><h4 id="闭包会造成内存泄露？"><a href="#闭包会造成内存泄露？" class="headerlink" title="闭包会造成内存泄露？"></a>闭包会造成内存泄露？</h4><p>错。<br>说这话的人根本不知道什么是内存泄露。内存泄露是指你用不到（访问不到）的变量，依然占居着内存空间，不能被再次利用起来。闭包里面的变量明明就是我们需要的变量（lives），凭什么说是内存泄露？</p><h4 id="这个谣言是如何来的？"><a href="#这个谣言是如何来的？" class="headerlink" title="这个谣言是如何来的？"></a>这个谣言是如何来的？</h4><p>因为 IE。IE 有 bug，IE 在我们使用完闭包之后，依然回收不了闭包里面引用的变量。这是 IE 的问题，不是闭包的问题。参见司徒正美的<a href="https://link.zhihu.com/?target=http://www.cnblogs.com/rubylouvre/p/3345294.html">这篇文章</a>。<br>​</p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br>​</p><h2 id="闭包有哪些坑点？"><a href="#闭包有哪些坑点？" class="headerlink" title="闭包有哪些坑点？"></a>闭包有哪些坑点？</h2><h3 id="坑点-1：-引用的变量可能发生变化"><a href="#坑点-1：-引用的变量可能发生变化" class="headerlink" title="坑点 1： 引用的变量可能发生变化"></a>坑点 1： 引用的变量可能发生变化</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> result = [];<br>      <span class="hljs-keyword">for</span> （<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>； i&lt;<span class="hljs-number">10</span>; i++）&#123;<br>        result.[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.info(i)<br>        &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看样子 result 每个闭包函数对打印对应数字，1,2,3,4,…,10, 实际不是，因为每个闭包函数访问变量 i 是 outer 执行环境下的变量 i，随着循环的结束，i 已经变成 10 了，所以执行每个闭包函数，结果打印 10， 10， …, 10<br>怎么解决这个问题呢？</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> result = [];<br>      <span class="hljs-keyword">for</span> （<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>； i&lt;<span class="hljs-number">10</span>; i++）&#123;<br>        result.[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   <span class="hljs-built_in">console</span>.info(num);    <span class="hljs-comment">// 此时访问的num，是上层函数执行环境的num，数组有10个函数对象，每个对象的执行环境下的number都不一样</span><br>             &#125;<br>        &#125;(i)<br>     &#125;<br>     <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="坑点-2-this-指向问题"><a href="#坑点-2-this-指向问题" class="headerlink" title="坑点 2: this 指向问题"></a>坑点 2: this 指向问题</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> object = &#123;<br>     name: <span class="hljs-string">&#x27;&#x27;</span>object<span class="hljs-string">&quot;，</span><br><span class="hljs-string">     getName： function() &#123;</span><br><span class="hljs-string">        return function() &#123;</span><br><span class="hljs-string">             console.info(this.name)</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">object.getName()()    // underfined</span><br><span class="hljs-string">// 因为里面的闭包函数是在window作用域下执行的，也就是说，this指向windows</span><br></code></pre></div></td></tr></table></figure><h3 id="坑点-3：IE-中内存泄露问题"><a href="#坑点-3：IE-中内存泄露问题" class="headerlink" title="坑点 3：IE 中内存泄露问题"></a>坑点 3：IE 中内存泄露问题</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showId</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>)<br>  el.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    aler(el.id) <span class="hljs-comment">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 改成下面</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showId</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>)<br>  <span class="hljs-keyword">var</span> id = el.id<br>  el.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    aler(id) <span class="hljs-comment">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span><br>  &#125;<br>  el = <span class="hljs-literal">null</span> <span class="hljs-comment">// 主动释放el</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="闭包有哪些技巧？"><a href="#闭包有哪些技巧？" class="headerlink" title="闭包有哪些技巧？"></a>闭包有哪些技巧？</h2><h3 id="技巧-1：-用闭包解决递归调用问题"><a href="#技巧-1：-用闭包解决递归调用问题" class="headerlink" title="技巧 1： 用闭包解决递归调用问题"></a>技巧 1： 用闭包解决递归调用问题</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">factorial</span>(<span class="hljs-params">num</span>) </span>&#123;<br>   <span class="hljs-keyword">if</span>(num&lt;= <span class="hljs-number">1</span>) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> num * factorial(num-<span class="hljs-number">1</span>)<br>   &#125;<br>&#125;<br><span class="hljs-keyword">var</span> anotherFactorial = factorial<br>factorial = <span class="hljs-literal">null</span><br>anotherFactorial(<span class="hljs-number">4</span>)   <span class="hljs-comment">// 报错 ，因为最好是return num* arguments.callee（num-1），arguments.callee指向当前执行函数，但是在严格模式下不能使用该属性也会报错，所以借助闭包来实现</span><br><br><br><span class="hljs-comment">// 使用闭包实现递归</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newFactorial</span> = (<span class="hljs-params"><span class="hljs-keyword">function</span> f(num)&#123;</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-keyword">if</span>(num&lt;<span class="hljs-number">1</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>&#125;</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="hljs-function"><span class="hljs-params">       <span class="hljs-keyword">return</span> num* f(num-<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-params">    &#125;</span></span><br><span class="hljs-function"><span class="hljs-params">&#125;</span>) //这样就没有问题了，实际上起作用的是闭包函数<span class="hljs-title">f</span>，而不是外面的函数<span class="hljs-title">newFactorial</span></span><br></code></pre></div></td></tr></table></figure><h3 id="技巧-2：用闭包模仿块级作用域"><a href="#技巧-2：用闭包模仿块级作用域" class="headerlink" title="技巧 2：用闭包模仿块级作用域"></a>技巧 2：用闭包模仿块级作用域</h3><p>es6 没出来之前，用 var 定义变量存在变量提升问题，eg:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  <span class="hljs-built_in">console</span>.info(i)<br>&#125;<br>alert(i)(<br>  <span class="hljs-comment">// 变量提升，弹出10</span><br><br>  <span class="hljs-comment">//为了避免i的提升可以这样做</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>      <span class="hljs-built_in">console</span>.info(i)<br>    &#125;<br>  &#125;<br>)()<br>alert(i) <span class="hljs-comment">// underfined   因为i随着闭包函数的退出，执行环境销毁，变量回收</span><br></code></pre></div></td></tr></table></figure><p>当然现在大多用 es6 的 let 和 const 定义。<br>​</p><h3 id="两个思考题"><a href="#两个思考题" class="headerlink" title="两个思考题"></a>两个思考题</h3><p>如果能理解这两个思考题，应该就算理解闭包的运行机制了。<br>思考题 1：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;The Window&#x27;</span><br><br><span class="hljs-keyword">var</span> object = &#123;<br>  name: <span class="hljs-string">&#x27;My Object&#x27;</span>,<br><br>  showName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name<br>    &#125;<br>  &#125;,<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(object.showName()())<br></code></pre></div></td></tr></table></figure><p>思考题 2：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;The Window&#x27;</span><br><br><span class="hljs-keyword">var</span> object = &#123;<br>  name: <span class="hljs-string">&#x27;My Object&#x27;</span>,<br><br>  showName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> _this.name<br>    &#125;<br>  &#125;,<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(object.showName()())<br></code></pre></div></td></tr></table></figure><p>思考题答案</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">1.</span> The Window<br><span class="hljs-number">2.</span> My <span class="hljs-built_in">Object</span><br></code></pre></div></td></tr></table></figure><h3 id="关于闭包，面试必问的问题"><a href="#关于闭包，面试必问的问题" class="headerlink" title="关于闭包，面试必问的问题"></a>关于闭包，面试必问的问题</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = []<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  data[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(i)<br>  &#125;<br>&#125;<br><br>data[<span class="hljs-number">0</span>]()<br>data[<span class="hljs-number">1</span>]()<br>data[<span class="hljs-number">2</span>]()<br></code></pre></div></td></tr></table></figure><p>对于上面的输出结果，很显然都是 3。至于为什么都是 3，可以这样来理解：循环结束后，上面的代码等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">data[<span class="hljs-number">0</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(i)<br>&#125;<br>data[<span class="hljs-number">1</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(i)<br>&#125;<br>data[<span class="hljs-number">2</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(i)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>此时 i 的值已经为 3 ，所以当 data[0]、data[1]、data[2] 中任意一个执行时输出结果都为 3。<br>用闭包解决上面的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = []<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  ;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>) </span>&#123;<br>    data[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(i)<br>    &#125;<br>  &#125;)(i)<br><br>  <span class="hljs-comment">// 或者写成下面这种形式</span><br>  <span class="hljs-comment">// data[i] = (function(i) &#123;</span><br>  <span class="hljs-comment">//   return function() &#123;</span><br>  <span class="hljs-comment">//     console.log(i);</span><br>  <span class="hljs-comment">//   &#125;;</span><br>  <span class="hljs-comment">// &#125;)(i);</span><br>&#125;<br><br>data[<span class="hljs-number">0</span>]() <span class="hljs-comment">// =&gt; 0</span><br>data[<span class="hljs-number">1</span>]() <span class="hljs-comment">// =&gt; 1</span><br>data[<span class="hljs-number">2</span>]() <span class="hljs-comment">// =&gt; 2</span><br></code></pre></div></td></tr></table></figure><p>当然更简单的方法就是使用 let。</p><h1 id="JavaScript-闭包-Web-前端工程师面试题讲解"><a href="#JavaScript-闭包-Web-前端工程师面试题讲解" class="headerlink" title="JavaScript 闭包 - Web 前端工程师面试题讲解"></a><a href="https://www.bilibili.com/video/BV1iE411q7Qd">JavaScript 闭包 - Web 前端工程师面试题讲解</a></h1>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>闭包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>var与let、const的区别</title>
    <link href="/2021/05/27/var%E4%B8%8Elet%E3%80%81const%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/05/27/var%E4%B8%8Elet%E3%80%81const%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>什么是变量提升</strong>？<br>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。<br>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。</p></blockquote><h1 id="一、var-声明变量存在变量提升，let-和-const-不存在变量提升"><a href="#一、var-声明变量存在变量提升，let-和-const-不存在变量提升" class="headerlink" title="一、var 声明变量存在变量提升，let 和 const 不存在变量提升"></a>一、var 声明变量存在变量提升，let 和 const 不存在变量提升</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// undefined  ===&gt;  a已声明还没赋值，默认得到undefined值</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span><br><span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">10</span><br><span class="hljs-built_in">console</span>.log(c) <span class="hljs-comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span><br><span class="hljs-keyword">const</span> c = <span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><h2 id="1-const-定义的变量不可以修改，而且必须初始化。"><a href="#1-const-定义的变量不可以修改，而且必须初始化。" class="headerlink" title="1.const 定义的变量不可以修改，而且必须初始化。"></a>1.const 定义的变量不可以修改，而且必须初始化。</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> b = <span class="hljs-number">2</span> <span class="hljs-comment">//正确</span><br><span class="hljs-comment">// const b;//错误，必须初始化</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数外const定义b：&#x27;</span> + b) <span class="hljs-comment">//有输出值</span><br><span class="hljs-comment">// b = 5;</span><br><span class="hljs-comment">// console.log(&#x27;函数外修改const定义b：&#x27; + b);//无法输出</span><br></code></pre></div></td></tr></table></figure><h2 id="2-var-定义的变量可以修改，如果不初始化会输出-undefined，不会报错。"><a href="#2-var-定义的变量可以修改，如果不初始化会输出-undefined，不会报错。" class="headerlink" title="2.var 定义的变量可以修改，如果不初始化会输出 undefined，不会报错。"></a>2.var 定义的变量可以修改，如果不初始化会输出 undefined，不会报错。</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br><span class="hljs-comment">// var a;//不会报错</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数外var定义a：&#x27;</span> + a) <span class="hljs-comment">//可以输出a=1</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>) </span>&#123;<br>  a = <span class="hljs-number">4</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数内var定义a：&#x27;</span> + a) <span class="hljs-comment">//可以输出a=4</span><br>&#125;<br>change()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数调用后var定义a为函数内部修改值：&#x27;</span> + a) <span class="hljs-comment">//可以输出a=4</span><br></code></pre></div></td></tr></table></figure><h2 id="3-let-是块级作用域，函数内部使用-let-定义后，对函数外部无影响。"><a href="#3-let-是块级作用域，函数内部使用-let-定义后，对函数外部无影响。" class="headerlink" title="3.let 是块级作用域，函数内部使用 let 定义后，对函数外部无影响。"></a>3.let 是块级作用域，函数内部使用 let 定义后，对函数外部无影响。</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> c = <span class="hljs-number">3</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数外let定义c：&#x27;</span> + c) <span class="hljs-comment">//输出c=3</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> c = <span class="hljs-number">6</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数内let定义c：&#x27;</span> + c) <span class="hljs-comment">//输出c=6</span><br>&#125;<br>change()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数调用后let定义c不受函数内部定义影响：&#x27;</span> + c) <span class="hljs-comment">//输出c=3</span><br></code></pre></div></td></tr></table></figure><p>再来看这段代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//var a</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(a + <span class="hljs-string">&#x27; now&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>  &#125;<br>&#125;<br><br>fn() <span class="hljs-comment">// a -&gt; undefined</span><br></code></pre></div></td></tr></table></figure><p>我们发现不执行的代码也会影响会执行的代码，因为 var a 会提升到 if 语句的前面</p><blockquote><p>undefined 可以翻译为不明确，not defined 可以翻译为未定义</p></blockquote><p>在 Java 中变量的分为全局变量（成员变量）或者局部变量，在方法体中定义的变量都是局部变量，否则是全局变量（即在方法体外，在类中定义的变量）<br>在 JavaScript 中，在方法体外外用 var 定义的变量其它方法可以共享，在方法中用 var 定义的变量只有该方法内生效。</p><h1 id="二、let、const-都是块级局部变量"><a href="#二、let、const-都是块级局部变量" class="headerlink" title="二、let、const 都是块级局部变量"></a>二、let、const 都是块级局部变量</h1><p>顾名思义，就是只在当前代码块起作用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure><p>const 的特性和 let 完全一样，不同的只是</p><p>1）声明时候必须赋值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a<br></code></pre></div></td></tr></table></figure><p>编译器报错<br><img src="https://cdn.nlark.com/yuque/0/2021/webp/2625525/1622126154420-586059b0-15fd-4cae-b5dc-86d3750ab904.webp#clientId=u949bb5fb-d8ef-4&from=paste&height=55&id=u8a3991e1&margin=%5Bobject%20Object%5D&originHeight=55&originWidth=463&originalType=url&status=done&style=none&taskId=u30769877-2787-4cc6-aa2f-47623fc6170&width=463"><br>控制台报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">SyntaxError</span>: Missing initializer <span class="hljs-keyword">in</span> <span class="hljs-keyword">const</span> declaration<br></code></pre></div></td></tr></table></figure><h2 id="2）只能进行一次赋值，即声明后不能再修改"><a href="#2）只能进行一次赋值，即声明后不能再修改" class="headerlink" title="2）只能进行一次赋值，即声明后不能再修改"></a>2）只能进行一次赋值，即声明后不能再修改</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a=<span class="hljs-number">1</span> a=<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>编译器报错<br><img src="https://cdn.nlark.com/yuque/0/2021/webp/2625525/1622126196415-b1b03abe-b271-4c43-a884-45a314cc48a1.webp#clientId=u949bb5fb-d8ef-4&from=paste&height=148&id=u902c874c&margin=%5Bobject%20Object%5D&originHeight=148&originWidth=570&originalType=url&status=done&style=none&taskId=u9ec7485e-3c66-4020-a02b-53e1d79fbe9&width=570"><br>控制台报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">TypeError</span>: Assignment to constant variable.<br></code></pre></div></td></tr></table></figure><h2 id="3）如果声明的是复合类型数据，可以修改其属性"><a href="#3）如果声明的是复合类型数据，可以修改其属性" class="headerlink" title="3）如果声明的是复合类型数据，可以修改其属性"></a>3）如果声明的是复合类型数据，可以修改其属性</h2><h1 id="三、同一作用域下-let-和-const-不能声明同名变量，而-var-可以"><a href="#三、同一作用域下-let-和-const-不能声明同名变量，而-var-可以" class="headerlink" title="三、同一作用域下 let 和 const 不能声明同名变量，而 var 可以"></a>三、同一作用域下 let 和 const 不能声明同名变量，而 var 可以</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">2</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Uncaught <span class="hljs-built_in">SyntaxError</span>: Identifier <span class="hljs-string">&#x27;a&#x27;</span> has already been declared<br></code></pre></div></td></tr></table></figure><h2 id="let-和-const-的区别："><a href="#let-和-const-的区别：" class="headerlink" title="let 和 const 的区别："></a>let 和 const 的区别：</h2><p><strong>相似：</strong></p><ul><li>都是块级作用域</li><li>都不能和它所在作用域内的其他变量或函数拥有相同的名称</li></ul><p><strong>区别：</strong></p><ul><li>const 声明的常量必须初始化，而 let 声明的变量不用。</li><li>const 定义常量的值不能通过再赋值修改，也不能再次声明。而 let 定义的变量值可以修改。</li></ul><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p>简单的 Demo</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-built_in">console</span>.log(i)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面的代码我们知道打印结果是 0, 1, 2, 3, 4，但是你们有没有想过这个变量 i 的作用域到底是什么呢？<br>有人说在这个 for 循环里呀，但是我这里想说的是这个 i 作用域是在括号()里。正常的代码是这样的：<br>​</p><p>1.首先这个变量_i 的作用域是在()里才有效的，循环体里是不能访问到_i 的 2.每次循环的时候创建一个 i 变量，将括号里的_i 赋值到变量 i 上 3.最后 i++后再将变量 i 的值赋值回_i 上<br>​</p><p>当然这个过程是很复杂的，可以用下面代码理解，但是 JS 的实现机制是很复杂的，这里想要说明的 let i 的作用域有时候并不是我们所理解的那样的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> _i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-keyword">let</span> i = _i<br>  <span class="hljs-built_in">console</span>.log(i)<br>  <span class="hljs-comment">// i++ 先做</span><br>  _i = i<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h1><p>ES6 新增了 let 命令，用于声明变量。其用法类似于 var ，但是所声明的变量只在 let 命令所在的代码块内有效。<br>​</p><ul><li>for 循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = O; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-keyword">let</span> i＝’ abc ’；<br><span class="hljs-built_in">console</span> .log(i);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">abc<br>abc<br>abc<br></code></pre></div></td></tr></table></figure><p>正确运行以上代码将输出 3 次 abc 。这表明函数内部的变量 i 与循环变量土不在同一个作用域，而是有各自单独的作用域。<br>​</p><ul><li>不存在变量提升</li><li>var 命令会发生“变量提升”现象， 即变量可以在声明之前使用，值为 undefined。这种现象多少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</li><li>为了纠正这种现象， let 命令改变了语法行为，它所声明的变量一定要在声明后使用，否则便会报错 。</li></ul><p>var 的情况</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(foo)<br><span class="hljs-keyword">var</span> foo = <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>let 的情况</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(foo)<br><span class="hljs-keyword">let</span> foo = <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>在以上代码中，变量 foo 用 var 命令声明会发生变量提升，即脚本开始运行时，变量 foo 便己经存在，但是没有值，所以会输出 undefined。变量 bar 用 let 命令声明则不会发生变量提升。这表示在声 明它之前，变量 bar 是不存在的，这时如果用到它，就会抛出一个错误 ReferenceError。<br>​</p><ul><li>暂时性死区</li><li>暂时性死区的本质就是，只要进入当前作用域，所要使用的变量就己经存在，但是不可获取，只有等到声明变量的那一行代码出现 ， 才可以获取和使用该变量。</li><li>不允许重复声明</li><li>let 不允许在相同作用域内重复声明同 一个变量。</li></ul><h1 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h1><p>const 声明一个只读的常量。 一旦声明，常量的值就不能改变 。<br>const 实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。<br>对于简单类型的数据（数值、字符串、布尔值〉而言，值就保存在变量指向的内存地址中，因此等同于常量。但对于复合类型的数据（主要是对象和数组）而言，变量指向的内存地址保存的只是一个指针， const 只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，<br>这完全不能控制 。 因此，将一个对象声明为常量时必须非常小心。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>var</tag>
      
      <tag>let</tag>
      
      <tag>const</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON.stringify()与JSON.parse()的区别</title>
    <link href="/2021/05/15/JSON.stringify()%E4%B8%8EJSON.parse()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/05/15/JSON.stringify()%E4%B8%8EJSON.parse()%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、JSON-stringify-与JSON-parse-的区别"><a href="#一、JSON-stringify-与JSON-parse-的区别" class="headerlink" title="一、JSON.stringify()与JSON.parse()的区别"></a>一、JSON.stringify()与JSON.parse()的区别</h1><p>最近做项目，发现JSON.stringify()使用场景真的挺多，我们都知道<strong>JSON.stringify()的作用是将 JavaScript 对象转换为 JSON 字符串，</strong>而<strong>JSON.parse()可以将JSON字符串转为一个对象。</strong><br><strong>简单点说，它们的作用是相对的，我用JSON.stringify()将对象a变成了字符串c，那么我就可以用JSON.parse()将字符串c还原成对象a。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">JSON</span>.stringify(arr);<span class="hljs-comment">//&#x27;[1,2,3]&#x27;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">JSON</span>.stringify(arr);<span class="hljs-comment">//string</span><br><br><span class="hljs-keyword">let</span> string = <span class="hljs-string">&#x27;[1,2,3]&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(string))<span class="hljs-comment">//[1,2,3]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">JSON</span>.parse(string))<span class="hljs-comment">//object</span><br></code></pre></div></td></tr></table></figure><p>在使用<strong>JSON.parse()<strong>需要注意一点，由于此方法是将JSON字符串转换成对象，所以</strong>你的字符串必须符合JSON格式，即键值都必须使用双引号包裹</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;[&quot;1&quot;,&quot;2&quot;]&#x27;</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-string">&quot;[&#x27;1&#x27;,&#x27;2&#x27;]&quot;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(a));<span class="hljs-comment">// Array [1,2]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(b));<span class="hljs-comment">// 报错</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621086076297-88d56312-1e17-40be-a6cb-57bd652f520c.png#clientId=uebe074b5-5cc7-4&from=paste&height=195&id=u31fe0495&margin=%5Bobject%20Object%5D&originHeight=195&originWidth=410&originalType=url&status=done&style=none&taskId=u362845fd-b7bb-499b-83ca-f62bcd533b3&width=410"><br>上面例子中变量b就无法转换，因为格式不符合，那么知道了这些知识点，我们能用来做什么呢？</p><h1 id="二、JSON-stringify-的几种妙用"><a href="#二、JSON-stringify-的几种妙用" class="headerlink" title="二、JSON.stringify()的几种妙用"></a>二、JSON.stringify()的几种妙用</h1><h2 id="1-判断数组是否包含某对象，或者判断对象是否相等。"><a href="#1-判断数组是否包含某对象，或者判断对象是否相等。" class="headerlink" title="1.判断数组是否包含某对象，或者判断对象是否相等。"></a>1.判断数组是否包含某对象，或者判断对象是否相等。</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//判断数组是否包含某对象</span><br><span class="hljs-keyword">let</span> data = [<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;echo&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;听风是风&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;天子笑&#x27;</span>&#125;,<br>    ],<br>    val = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;天子笑&#x27;</span>&#125;;<br><span class="hljs-built_in">JSON</span>.stringify(data).indexOf(<span class="hljs-built_in">JSON</span>.stringify(val)) !== -<span class="hljs-number">1</span>;<span class="hljs-comment">//true</span><br><br><span class="hljs-comment">//判断两数组/对象是否相等</span><br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>    b = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">JSON</span>.stringify(a) === <span class="hljs-built_in">JSON</span>.stringify(b);<span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><h2 id="2-让localStorage-sessionStorage可以存储对象。"><a href="#2-让localStorage-sessionStorage可以存储对象。" class="headerlink" title="2.让localStorage/sessionStorage可以存储对象。"></a>2.让localStorage/sessionStorage可以存储对象。</h2><p>localStorage/sessionStorage默认只能存储字符串，而实际开发中，我们往往需要存储的数据多为对象类型，那么这里我们就可以在存储时利用json.stringify()将对象转为字符串，而在取缓存时，只需配合json.parse()转回对象即可。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//存</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setLocalStorage</span>(<span class="hljs-params">key,val</span>)</span>&#123;<br>    <span class="hljs-built_in">window</span>.localStorage.setItem(key,<span class="hljs-built_in">JSON</span>.stringify(val));<br>&#125;;<br><span class="hljs-comment">//取</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLocalStorage</span>(<span class="hljs-params">key</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> val = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">window</span>.localStorage.getItem(key));<br>    <span class="hljs-keyword">return</span> val;<br>&#125;;<br><span class="hljs-comment">//测试</span><br>setLocalStorage(<span class="hljs-string">&#x27;demo&#x27;</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]);<br><span class="hljs-keyword">let</span>  a = getLocalStorage(<span class="hljs-string">&#x27;demo&#x27;</span>);<span class="hljs-comment">//[1,2,3]</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621086077695-85e57da6-da42-4218-aad3-b930f22150e8.png#clientId=uebe074b5-5cc7-4&from=paste&height=131&id=u0d154632&margin=%5Bobject%20Object%5D&originHeight=131&originWidth=480&originalType=url&status=done&style=none&taskId=u2e90027d-347b-4305-95e8-f78e62052f2&width=480"></p><h2 id="3-实现对象深拷贝"><a href="#3-实现对象深拷贝" class="headerlink" title="3.实现对象深拷贝"></a>3.实现对象深拷贝</h2><p>实际开发中，如果怕影响原数据，我们常深拷贝出一份数据做任意操作，其实使用JSON.stringify()与JSON.parse()来实现深拷贝是很不错的选择。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//深拷贝</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> _data = <span class="hljs-built_in">JSON</span>.stringify(data),<br>        dataClone = <span class="hljs-built_in">JSON</span>.parse(_data);<br>    <span class="hljs-keyword">return</span> dataClone;<br>&#125;;<br><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>    _arr = deepClone(arr);<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(arr,_arr)<span class="hljs-comment">//[2,2,3]  [1,2,3]</span><br></code></pre></div></td></tr></table></figure><h1 id="三、JSON-stringify-与toString-的区别"><a href="#三、JSON-stringify-与toString-的区别" class="headerlink" title="三、JSON.stringify()与toString()的区别"></a>三、JSON.stringify()与toString()的区别</h1><p>这两者虽然都可以将目标值转为字符串，但本质上还是有区别的，比如</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">JSON</span>.stringify(arr);<span class="hljs-comment">//&#x27;[1,2,3]&#x27;</span><br>arr.toString();<span class="hljs-comment">//1,2,3</span><br></code></pre></div></td></tr></table></figure><p>其次，JSON.stringify()的受众更多是对象，而toString()虽然可以将数组转为字符串，但并不能对{name:’天子笑’}这类对象实现你想要的操作，它的受众更多是数字。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JSON</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>antd_pro_shop_admin项目笔记</title>
    <link href="/2021/05/15/antd-pro-shop-admin%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/05/15/antd-pro-shop-admin%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、项目搭建"><a href="#一、项目搭建" class="headerlink" title="一、项目搭建"></a>一、项目搭建</h1><h2 id="1-1-安装脚手架"><a href="#1-1-安装脚手架" class="headerlink" title="1.1 安装脚手架"></a>1.1 安装脚手架</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn create umi<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620995323162-68a0b083-ece6-4b2b-8b0d-36daa8098291.png#clientId=u4de613e7-ed76-4&from=paste&height=263&id=u3ea1dff9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=263&originWidth=565&originalType=binary&size=24386&status=done&style=none&taskId=u97744768-50fe-4132-8afa-89f689a6231&width=565" alt="image.png"></p><h2 id="1-2-选择版本"><a href="#1-2-选择版本" class="headerlink" title="1.2 选择版本"></a>1.2 选择版本</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620995413718-5bc82348-871a-4de9-b66f-f3ab981a1498.png#clientId=u4de613e7-ed76-4&from=paste&height=309&id=u4b5f0a9a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=309&originWidth=558&originalType=binary&size=31989&status=done&style=none&taskId=uc07da9f4-9a9d-4fcb-8c84-6142c7b5aad&width=558" alt="image.png"></p><h2 id="1-3-安装依赖"><a href="#1-3-安装依赖" class="headerlink" title="1.3 安装依赖"></a>1.3 安装依赖</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn<br></code></pre></div></td></tr></table></figure><h2 id="1-4-启动项目"><a href="#1-4-启动项目" class="headerlink" title="1.4 启动项目"></a>1.4 启动项目</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm start<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620998686519-b310d168-8f77-4f4f-a430-5930dc03d3a7.png#clientId=u4de613e7-ed76-4&from=paste&height=272&id=u81cb4066&margin=%5Bobject%20Object%5D&name=image.png&originHeight=272&originWidth=630&originalType=binary&size=21916&status=done&style=none&taskId=u1d860442-c951-4c0e-a38f-f299987a587&width=630" alt="image.png"></p><h2 id="1-5-点击链接进入浏览器"><a href="#1-5-点击链接进入浏览器" class="headerlink" title="1.5 点击链接进入浏览器"></a>1.5 点击链接进入浏览器</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620998751638-14b8d4f9-4999-4960-b0d0-c44de6b60ede.png#clientId=u4de613e7-ed76-4&from=paste&height=978&id=udceab73e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=978&originWidth=1916&originalType=binary&size=110241&status=done&style=none&taskId=u4e2ee6a5-a808-41f2-b751-f333c11a6cd&width=1916" alt="image.png"></p><h1 id="二、初始化项目"><a href="#二、初始化项目" class="headerlink" title="二、初始化项目"></a>二、初始化项目</h1><h2 id="项目接口文档"><a href="#项目接口文档" class="headerlink" title="项目接口文档"></a>项目接口文档</h2><p><a href="https://www.showdoc.com.cn/1207745568269674?page_id=6094279351627422">https://www.showdoc.com.cn/1207745568269674?page_id=6094279351627422</a></p><h2 id="2-1-删掉多余的文件"><a href="#2-1-删掉多余的文件" class="headerlink" title="2.1 删掉多余的文件"></a>2.1 删掉多余的文件</h2><p><strong>在编译器中打开项目</strong><br>删掉\src\pages 中<code>TableList</code>文件夹，<code>Admin.jsx</code>、<code>Welcome.jsx</code>、<code>Welcome.less</code>文件<br>删掉\mock 中<code>listTableList.js</code>文件<br>删掉\config\routes.js 文件夹中，删掉对应不用的路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    component: <span class="hljs-string">&#x27;../layouts/BlankLayout&#x27;</span>,<br>    routes: [<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>        component: <span class="hljs-string">&#x27;../layouts/UserLayout&#x27;</span>,<br>        routes: [<br>          &#123;<br>            name: <span class="hljs-string">&#x27;login&#x27;</span>,<br>            path: <span class="hljs-string">&#x27;/user/login&#x27;</span>,<br>            component: <span class="hljs-string">&#x27;./User/login&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        component: <span class="hljs-string">&#x27;../layouts/SecurityLayout&#x27;</span>,<br>        routes: [<br>          &#123;<br>            path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            component: <span class="hljs-string">&#x27;../layouts/BasicLayout&#x27;</span>,<br>            routes: [<br>              &#123;<br>                path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>              &#125;,<br>              &#123;<br>                component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>              &#125;,<br>            ],<br>          &#125;,<br>          &#123;<br>            component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>  &#125;,<br>]<br></code></pre></div></td></tr></table></figure><h2 id="2-2-更改-Logo-和底部文字替换"><a href="#2-2-更改-Logo-和底部文字替换" class="headerlink" title="2.2 更改 Logo 和底部文字替换"></a>2.2 更改 Logo 和底部文字替换</h2><p>在\src\layouts\BasicLayout.jsx 文件中找到<code>defaultFooterDom</code>更改默认文字，将<code>links=&#123;null&#125;</code>设置为空，不能删掉<code>links=&#123;&#125;</code>否则会编程默认的样子</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> defaultFooterDom = (<br>  &lt;DefaultFooter copyright=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear()&#125;</span> 融职商城`</span>&#125; links=&#123;<span class="hljs-literal">null</span>&#125; /&gt;<br>)<br></code></pre></div></td></tr></table></figure><p>底部文字就更改好了<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621001473729-5a1cd8ff-7b29-4801-9053-bc651b9499a0.png#clientId=u4de613e7-ed76-4&from=paste&height=207&id=ude7af6a7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=207&originWidth=1915&originalType=binary&size=11957&status=done&style=none&taskId=u84b1c93c-25f7-437f-b3f1-823df51c5d8&width=1915" alt="image.png"><br>在\Econfig\defaultSettings.js 中更改<code>title</code>，这里的<code>title</code>是更改的网页标题和左上角文字<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621001434658-83fbb50f-5b07-405c-942d-413ee87ef3bc.png#clientId=u4de613e7-ed76-4&from=paste&height=248&id=uc379e464&margin=%5Bobject%20Object%5D&name=image.png&originHeight=248&originWidth=316&originalType=binary&size=16228&status=done&style=none&taskId=uc8c8a1c8-d9e2-45a0-ade1-e3e12e0b7de&width=316" alt="image.png"><br>在\src\assets 文件夹中提换掉 logo，并在用到的地方重新导入 logo 文件，否则会报错</p><h2 id="2-3-更改刷新时的-logo"><a href="#2-3-更改刷新时的-logo" class="headerlink" title="2.3 更改刷新时的 logo"></a>2.3 更改刷新时的 logo</h2><p>打开控制台，到网络请求，选择所有请求，快速刷新页面会发现这个图标<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621002688764-274ce7d8-ece1-47b3-bed8-a87f1e750e06.png#clientId=u4de613e7-ed76-4&from=paste&height=752&id=u8de5d96b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=752&originWidth=1878&originalType=binary&size=113643&status=done&style=none&taskId=u4e53df56-d01a-464d-94cd-044acc21097&width=1878" alt="image.png"><br>将自己的 logo.png 文件复制到\public 文件下<br>然后在\src\pages\document.ejs 中更改自己的 logo</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div<br>  style=<span class="hljs-string">&quot;</span><br><span class="hljs-string">          display: flex;</span><br><span class="hljs-string">          flex-direction: column;</span><br><span class="hljs-string">          align-items: center;</span><br><span class="hljs-string">          justify-content: center;</span><br><span class="hljs-string">          height: 100%;</span><br><span class="hljs-string">          min-height: 420px;</span><br><span class="hljs-string">        &quot;</span>&gt;<br>  &lt;img src=<span class="hljs-string">&quot;&lt;%= context.config.publicPath +&#x27;logo.png&#x27;%&gt;&quot;</span> alt=<span class="hljs-string">&quot;logo&quot;</span> width=<span class="hljs-string">&quot;256&quot;</span> /&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-loading-warp&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin ant-spin-lg ant-spin-spinning&quot;</span>&gt;<br>      &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot ant-spin-dot-spin&quot;</span>&gt;<br>        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot-item&quot;</span>&gt;&lt;/i&gt;<br>        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot-item&quot;</span>&gt;&lt;/i&gt;<br>        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot-item&quot;</span>&gt;&lt;/i&gt;<br>        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot-item&quot;</span>&gt;&lt;/i&gt;<br>      &lt;/span&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;div style=<span class="hljs-string">&quot;display: flex; align-items: center; justify-content: center&quot;</span>&gt;<br>    &lt;img src=<span class="hljs-string">&quot;&lt;%= context.config.publicPath +&#x27;logo.png&#x27;%&gt;&quot;</span> width=<span class="hljs-string">&quot;32&quot;</span> style=<span class="hljs-string">&quot;margin-right: 8px&quot;</span> /&gt;<br>    融职商城<br>  &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><h2 id="2-4-更改网页标题的-ico"><a href="#2-4-更改网页标题的-ico" class="headerlink" title="2.4 更改网页标题的 ico"></a>2.4 更改网页标题的 ico</h2><h3 id="2-4-1-将图片格式改成-ioc"><a href="#2-4-1-将图片格式改成-ioc" class="headerlink" title="2.4.1 将图片格式改成 ioc"></a>2.4.1 将图片格式改成 ioc</h3><ol><li>第一步我们用<strong>画图</strong>的方式打开原始图片，可以看到这里是一张 png 格式的原始图片，如下图所示：</li><li><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621004331012-681faf70-73fe-4eae-919d-b805ed024698.png#clientId=u4de613e7-ed76-4&from=paste&height=856&id=u6fcca602&margin=%5Bobject%20Object%5D&name=image.png&originHeight=856&originWidth=1520&originalType=binary&size=97261&status=done&style=none&taskId=udb509057-727f-40e9-a3f1-86c55d349a0&width=1520" alt="image.png"></li><li>第二步点击画图中文件图标，选择“另存为-&gt;BMP 图片”</li><li>第四步我们将 BMP 格式的后缀名改为 ico 格式的，弹出框之后，点击确定，可以看到已经成功更改为 ico 格式的图片，需要注意的是有时候直接改后缀名会出现图片默认是白色，点击进去时正常的，不影响程序使用</li></ol><h3 id="2-4-2-更改网页默认的-ico"><a href="#2-4-2-更改网页默认的-ico" class="headerlink" title="2.4.2 更改网页默认的 ico"></a>2.4.2 更改网页默认的 ico</h3><p>在\public 中将自己的 ico 提换掉 favicon.ico</p><h2 id="2-5-删除登录页多余的东西"><a href="#2-5-删除登录页多余的东西" class="headerlink" title="2.5 删除登录页多余的东西"></a>2.5 删除登录页多余的东西</h2><p>在\src\pages\User\login\index.jsx 文件中精简代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; LockOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Alert, Tabs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useIntl, connect, FormattedMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">const</span> LoginMessage = <span class="hljs-function">(<span class="hljs-params">&#123; content &#125;</span>) =&gt;</span> (<br>  &lt;Alert<br>    style=&#123;&#123;<br>      marginBottom: <span class="hljs-number">24</span>,<br>    &#125;&#125;<br>    message=&#123;content&#125;<br>    type=<span class="hljs-string">&quot;error&quot;</span><br>    showIcon<br>  /&gt;<br>)<br><br><span class="hljs-keyword">const</span> Login = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; userLogin = &#123;&#125;, submitting &#125; = props<br>  <span class="hljs-keyword">const</span> &#123; status, <span class="hljs-attr">type</span>: loginType &#125; = userLogin<br>  <span class="hljs-keyword">const</span> [type, setType] = useState(<span class="hljs-string">&#x27;account&#x27;</span>)<br>  <span class="hljs-keyword">const</span> intl = useIntl()<br><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; dispatch &#125; = props<br>    dispatch(&#123;<br>      type: <span class="hljs-string">&#x27;login/login&#x27;</span>,<br>      payload: &#123; ...values, type &#125;,<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=&#123;styles.main&#125;&gt;<br>      &lt;ProForm<br>        initialValues=&#123;&#123;<br>          autoLogin: <span class="hljs-literal">true</span>,<br>        &#125;&#125;<br>        submitter=&#123;&#123;<br>          render: <span class="hljs-function">(<span class="hljs-params">_, dom</span>) =&gt;</span> dom.pop(),<br>          submitButtonProps: &#123;<br>            loading: submitting,<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            style: &#123;<br>              width: <span class="hljs-string">&#x27;100%&#x27;</span>,<br>            &#125;,<br>          &#125;,<br>        &#125;&#125;<br>        onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>          handleSubmit(values)<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve()<br>        &#125;&#125;&gt;<br>        &lt;Tabs activeKey=&#123;type&#125; onChange=&#123;setType&#125;&gt;<br>          &lt;Tabs.TabPane<br>            key=<span class="hljs-string">&quot;account&quot;</span><br>            tab=&#123;intl.formatMessage(&#123;<br>              id: <span class="hljs-string">&#x27;pages.login.accountLogin.tab&#x27;</span>,<br>              defaultMessage: <span class="hljs-string">&#x27;Account password login&#x27;</span>,<br>            &#125;)&#125;<br>          /&gt;<br>        &lt;/Tabs&gt;<br><br>        &#123;status === <span class="hljs-string">&#x27;error&#x27;</span> &amp;&amp; !submitting &amp;&amp; (<br>          &lt;LoginMessage<br>            content=&#123;intl.formatMessage(&#123;<br>              id: <span class="hljs-string">&#x27;pages.login.accountLogin.errorMessage&#x27;</span>,<br>              defaultMessage: <span class="hljs-string">&#x27;Incorrect account or password（admin/ant.design)&#x27;</span>,<br>            &#125;)&#125;<br>          /&gt;<br>        )&#125;<br>        &lt;ProFormText<br>          name=<span class="hljs-string">&quot;userName&quot;</span><br>          fieldProps=&#123;&#123;<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            prefix: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UserOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.prefixIcon&#125;</span> /&gt;</span></span>,<br>          &#125;&#125;<br>          placeholder=&#123;intl.formatMessage(&#123;<br>            id: <span class="hljs-string">&#x27;pages.login.username.placeholder&#x27;</span>,<br>            defaultMessage: <span class="hljs-string">&#x27;Username: admin or user&#x27;</span>,<br>          &#125;)&#125;<br>          rules=&#123;[<br>            &#123;<br>              required: <span class="hljs-literal">true</span>,<br>              message: (<br>                &lt;FormattedMessage<br>                  id=<span class="hljs-string">&quot;pages.login.username.required&quot;</span><br>                  defaultMessage=<span class="hljs-string">&quot;Please enter user name!&quot;</span><br>                /&gt;<br>              ),<br>            &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;ProFormText.Password<br>          name=<span class="hljs-string">&quot;password&quot;</span><br>          fieldProps=&#123;&#123;<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            prefix: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">LockOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.prefixIcon&#125;</span> /&gt;</span></span>,<br>          &#125;&#125;<br>          placeholder=&#123;intl.formatMessage(&#123;<br>            id: <span class="hljs-string">&#x27;pages.login.password.placeholder&#x27;</span>,<br>            defaultMessage: <span class="hljs-string">&#x27;Password: ant.design&#x27;</span>,<br>          &#125;)&#125;<br>          rules=&#123;[<br>            &#123;<br>              required: <span class="hljs-literal">true</span>,<br>              message: (<br>                &lt;FormattedMessage<br>                  id=<span class="hljs-string">&quot;pages.login.password.required&quot;</span><br>                  defaultMessage=<span class="hljs-string">&quot;Please enter password！&quot;</span><br>                /&gt;<br>              ),<br>            &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;div<br>          style=&#123;&#123;<br>            marginBottom: <span class="hljs-number">24</span>,<br>          &#125;&#125;&gt;&lt;/div&gt;<br>      &lt;/ProForm&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<span class="hljs-function">(<span class="hljs-params">&#123; login, loading &#125;</span>) =&gt;</span> (&#123;<br>  userLogin: login,<br>  submitting: loading.effects[<span class="hljs-string">&#x27;login/login&#x27;</span>],<br>&#125;))(Login)<br></code></pre></div></td></tr></table></figure><p>在\src\layouts\UserLayout.jsx 中将默认的 logo 替换成自己的 logo</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../assets/logo.png&#x27;</span><br></code></pre></div></td></tr></table></figure><p>在 UserLayout.jsx 文件删除标签<code>FormattedMessage</code>内<code>defaultMessage=“”</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div className=&#123;styles.desc&#125;&gt;<br>  &lt;FormattedMessage id=<span class="hljs-string">&quot;pages.layouts.userLayout.title&quot;</span> /&gt;<br>&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p>在国际化\src\locales\zh-CN\pages.js 文件中修改 pages.layouts.userLayout.title 的默认文字</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;pages.layouts.userLayout.title&#x27;</span>: <span class="hljs-string">&#x27;融职商城后台管理系统&#x27;</span>,<br></code></pre></div></td></tr></table></figure><h2 id="2-6-删除首页头部多余东西"><a href="#2-6-删除首页头部多余东西" class="headerlink" title="2.6 删除首页头部多余东西"></a>2.6 删除首页头部多余东西</h2><p>在\src\components\GlobalHeader\RightContent.jsx 文件中删除搜索组件<code>HeaderSearch</code>和文档组件<code>Tooltip</code></p><h2 id="2-7-优化登录页"><a href="#2-7-优化登录页" class="headerlink" title="2.7 优化登录页"></a>2.7 优化登录页</h2><h3 id="2-7-1-优化登录页文件"><a href="#2-7-1-优化登录页文件" class="headerlink" title="2.7.1 优化登录页文件"></a>2.7.1 优化登录页文件</h3><p>将登录页移到 pages 下删除 User 文件夹，注意非必要不要随意更改 pages 下的文件夹，因为改动文件夹要配置对应路由<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621012663592-2b6e11f9-08fe-4a02-a092-8a3ef86dc96f.png#clientId=u4de613e7-ed76-4&from=paste&height=195&id=ub076cd51&margin=%5Bobject%20Object%5D&name=image.png&originHeight=195&originWidth=360&originalType=binary&size=8854&status=done&style=none&taskId=u5cbc6b9b-753b-4f7a-91b3-e8e3478b3ba&width=360" alt="image.png"></p><h3 id="2-7-2-配置登录页路由"><a href="#2-7-2-配置登录页路由" class="headerlink" title="2.7.2 配置登录页路由"></a>2.7.2 配置登录页路由</h3><p>在\config\routes.js 将原来 user 的路由修改成 login 的路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>  component: <span class="hljs-string">&#x27;../layouts/LoginLayout&#x27;</span>,<br>  routes: [<br>    &#123;<br>      name: <span class="hljs-string">&#x27;login&#x27;</span>,<br>      path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>      component: <span class="hljs-string">&#x27;./Login&#x27;</span>,<br>    &#125;,<br>  ],<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>同时修改\src\layouts 文件下 UserLayout.jsx less 文件重命名为 LginLayout 的<br>以及修改 UserLayout.jsx 中的样式导入<code>import styles from &#39;./LoginLayout.less&#39;;</code><br>在\src\layouts\SecurityLayout.jsx 中更改重定向的登录路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (!isLogin &amp;&amp; <span class="hljs-built_in">window</span>.location.pathname !== <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`/<span class="hljs-attr">login</span>?$&#123;<span class="hljs-attr">queryString</span>&#125;`&#125; /&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-8-封装网络请求"><a href="#2-8-封装网络请求" class="headerlink" title="2.8 封装网络请求"></a>2.8 封装网络请求</h2><h3 id="2-8-1-添加请求拦截器"><a href="#2-8-1-添加请求拦截器" class="headerlink" title="2.8.1 添加请求拦截器"></a>2.8.1 添加请求拦截器</h3><p><strong>具体如何找请求拦截器</strong> 1.先进入<a href="https://umijs.org/zh-CN">umijs</a>找到<strong>插件</strong>选择<strong>plugin-request</strong>进去找到<a href="https://umijs.org/zh-CN/plugins/plugin-request#request">request</a>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621051841217-6924f9a7-bbca-448c-a09e-34dcd7cb46c6.png#clientId=u79fc6bc8-ff2c-4&from=paste&height=148&id=u33d47bbd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=148&originWidth=1249&originalType=binary&size=18888&status=done&style=none&taskId=ue22fa43b-c8c8-4cf8-8845-0ee898b74f4&width=1249" alt="image.png"> 2.点击参考文档地址找到<a href="https://github.com/umijs/umi-request#interceptor"><strong>Interceptor</strong></a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621051557253-22301f45-88cd-4334-8321-9b60c4656053.png#clientId=u79fc6bc8-ff2c-4&from=paste&height=412&id=u87e50faa&margin=%5Bobject%20Object%5D&name=image.png&originHeight=412&originWidth=1164&originalType=binary&size=34493&status=done&style=none&taskId=u90f3f4cf-a242-46e6-9e8c-f3b4cc656ed&width=1164" alt="image.png"> 3.添加请求头<br>在\src\utils\request.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> request = extend(&#123;<br>  errorHandler,<br>  <span class="hljs-comment">// default error handling</span><br>  credentials: <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-comment">// Does the default request bring cookies</span><br>&#125;)<br><br><span class="hljs-comment">// 请求拦截器，在请求之前添加Header头</span><br>request.interceptors.request.use(<span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取token</span><br>  <span class="hljs-keyword">const</span> token = <span class="hljs-string">&#x27;hello&#x27;</span><br>  <span class="hljs-comment">// 设置Header头</span><br>  <span class="hljs-keyword">const</span> headers = &#123;<br>    Authorization: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;token&#125;</span>`</span>,<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    url,<br>    options: &#123; ...options, headers &#125;,<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request<br></code></pre></div></td></tr></table></figure><h3 id="2-8-2-封装错误信息提示"><a href="#2-8-2-封装错误信息提示" class="headerlink" title="2.8.2 封装错误信息提示"></a>2.8.2 封装错误信息提示</h3><h4 id="1-重新启动项目"><a href="#1-重新启动项目" class="headerlink" title="1.重新启动项目"></a>1.重新启动项目</h4><p><strong>通过</strong><code>**yarn dev**</code><strong>启动项目会关闭 mock，之后就能添加自己的 api</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn dev<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621055060891-822ef533-9e43-4870-984d-ffcb882ca15e.png#clientId=u79fc6bc8-ff2c-4&from=paste&height=179&id=u0891d995&margin=%5Bobject%20Object%5D&name=image.png&originHeight=179&originWidth=475&originalType=binary&size=10389&status=done&style=none&taskId=u69ae0f45-eb73-4eec-87d7-8baafb08129&width=475" alt="image.png"><br>在\package.json 可以查到相关配置</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;start:dev&quot;</span>: <span class="hljs-string">&quot;cross-env REACT_APP_ENV=dev MOCK=none UMI_ENV=dev umi dev&quot;</span>,<br></code></pre></div></td></tr></table></figure><h4 id="2-更改代理"><a href="#2-更改代理" class="headerlink" title="2.更改代理"></a>2.更改代理</h4><p>在\config\proxy.js 中将 dev 的域名改成自己的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">dev: &#123;<br>  <span class="hljs-string">&#x27;/api/&#x27;</span>: &#123;<br>    target: <span class="hljs-string">&#x27;https://api.shop.eduwork.cn/&#x27;</span>,<br>    changeOrigin: <span class="hljs-literal">true</span>,<br>    pathRewrite: &#123;<br>      <span class="hljs-string">&#x27;^&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>在\src\services\user.js 中将接口请求改成<code>request.post(&#39;/api/admin/user&#39;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryCurrent</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// return request(&#x27;/api/currentUser&#x27;);</span><br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/api/admin/user&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-修改错误提示"><a href="#3-修改错误提示" class="headerlink" title="3.修改错误提示"></a>3.修改错误提示</h4><p>在\src\utils\request.js 中，通过<code>async</code> <code>await</code>替换<code>promise</code>完成异步请求<br>async/await 场景：这是一个用同步的思维来解决异步问题的方案，当前端接口调用需要等到接口返回值以后渲染页面时</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> errorHandler = <span class="hljs-keyword">async</span> error =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; response &#125; = error<br><br>  <span class="hljs-keyword">if</span> (response &amp;&amp; response.status) &#123;<br>    <span class="hljs-keyword">let</span> errorText = codeMessage[response.status] || response.statusText<br>    <span class="hljs-keyword">const</span> &#123; status &#125; = response<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.json()<br><br>    <span class="hljs-comment">// 处理422未验证通过的情况</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">422</span>) &#123;<br>      <span class="hljs-keyword">let</span> errs = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> result.errors) &#123;<br>        errs += result.errors[key][<span class="hljs-number">0</span>]<br>      &#125;<br>      errorText += <span class="hljs-string">`[ <span class="hljs-subst">$&#123;errs&#125;</span> ]`</span><br>    &#125;<br>    <span class="hljs-comment">// 处理400的情况</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">400</span>) &#123;<br>      errorText += <span class="hljs-string">`[ <span class="hljs-subst">$&#123;result.message&#125;</span> ]`</span><br>    &#125;<br>    message.error(errorText)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!response) &#123;<br>    message.error(<span class="hljs-string">&#x27;网络发生异常，无法连接服务器&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> response<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-简化接口前缀（初始化项目可不设置）"><a href="#4-简化接口前缀（初始化项目可不设置）" class="headerlink" title="4.简化接口前缀（初始化项目可不设置）"></a>4.简化接口前缀（初始化项目可不设置）</h4><p>在\src\utils\request.js 中的 request 函数添加<code>prefix: &#39;/api&#39;</code>，则可以自动添加前缀简化接口写法<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621057857088-cae9855c-c15f-4411-b7bb-c7963663e66c.png#clientId=u79fc6bc8-ff2c-4&from=paste&height=166&id=u5a31ab0d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=166&originWidth=559&originalType=binary&size=12815&status=done&style=none&taskId=u62aabca7-6d8e-4ade-a2ec-0bf71b6863c&width=559" alt="image.png"><br>在\src\services\user.js 中，前缀则可以少写<code>/api</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryCurrent</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// return request(&#x27;/api/currentUser&#x27;);</span><br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/auth/login&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="三、登录-退出功能"><a href="#三、登录-退出功能" class="headerlink" title="三、登录/退出功能"></a>三、登录/退出功能</h1><h2 id="3-1-登录基本设置"><a href="#3-1-登录基本设置" class="headerlink" title="3.1 登录基本设置"></a>3.1 登录基本设置</h2><p>在 src\pages\Login\index.jsx 登录页简化，</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; LockOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Tabs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">const</span> Login = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; submitting &#125; = props<br><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; dispatch &#125; = props<br>    dispatch(&#123;<br>      type: <span class="hljs-string">&#x27;login/login&#x27;</span>,<br>      payload: &#123; ...values &#125;,<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=&#123;styles.main&#125;&gt;<br>      &lt;ProForm<br>        initialValues=&#123;&#123;<br>          autoLogin: <span class="hljs-literal">true</span>,<br>        &#125;&#125;<br>        submitter=&#123;&#123;<br>          render: <span class="hljs-function">(<span class="hljs-params">_, dom</span>) =&gt;</span> dom.pop(),<br>          submitButtonProps: &#123;<br>            loading: submitting,<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            style: &#123;<br>              width: <span class="hljs-string">&#x27;100%&#x27;</span>,<br>            &#125;,<br>          &#125;,<br>        &#125;&#125;<br>        onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>          handleSubmit(values)<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve()<br>        &#125;&#125;&gt;<br>        &lt;Tabs activeKey=<span class="hljs-string">&quot;account&quot;</span>&gt;<br>          &lt;Tabs.TabPane key=<span class="hljs-string">&quot;account&quot;</span> tab=<span class="hljs-string">&quot;账号密码登录&quot;</span> /&gt;<br>        &lt;/Tabs&gt;<br><br>        &lt;ProFormText<br>          name=<span class="hljs-string">&quot;email&quot;</span><br>          fieldProps=&#123;&#123;<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            prefix: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UserOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.prefixIcon&#125;</span> /&gt;</span></span>,<br>          &#125;&#125;<br>          placeholder=<span class="hljs-string">&quot;邮箱：super@a.com&quot;</span><br>          rules=&#123;[<br>            &#123;<br>              required: <span class="hljs-literal">true</span>,<br>              message: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span>,<br>            &#125;,<br>            &#123;<br>              type: <span class="hljs-string">&#x27;email&#x27;</span>,<br>              message: <span class="hljs-string">&#x27;请输入正确的邮箱格式&#x27;</span>,<br>            &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;ProFormText.Password<br>          name=<span class="hljs-string">&quot;password&quot;</span><br>          fieldProps=&#123;&#123;<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            prefix: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">LockOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.prefixIcon&#125;</span> /&gt;</span></span>,<br>          &#125;&#125;<br>          placeholder=<span class="hljs-string">&quot;密码：123123&quot;</span><br>          rules=&#123;[<br>            &#123;<br>              required: <span class="hljs-literal">true</span>,<br>              message: <span class="hljs-string">&#x27;请输入密码&#x27;</span>,<br>            &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;div<br>          style=&#123;&#123;<br>            marginBottom: <span class="hljs-number">24</span>,<br>          &#125;&#125;&gt;&lt;/div&gt;<br>      &lt;/ProForm&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<span class="hljs-function">(<span class="hljs-params">&#123; login, loading &#125;</span>) =&gt;</span> (&#123;<br>  userLogin: login,<br>  submitting: loading.effects[<span class="hljs-string">&#x27;login/login&#x27;</span>],<br>&#125;))(Login)<br></code></pre></div></td></tr></table></figure><h3 id="3-1-1-用户登录接口文档"><a href="#3-1-1-用户登录接口文档" class="headerlink" title="3.1.1 用户登录接口文档"></a>3.1.1 用户登录接口文档</h3><h5 id="接口描述"><a href="#接口描述" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>用户登录接口</li></ul><h5 id="请求-URL"><a href="#请求-URL" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/auth/login</li></ul><h5 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="Body-请求参数"><a href="#Body-请求参数" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>password</td><td>是</td><td>string</td><td>密码</td></tr></tbody></table><h5 id="返回参数"><a href="#返回参数" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>access_token</td><td>是</td><td>string</td><td>token</td></tr><tr><td>token_type</td><td>是</td><td>string</td><td>token 类型</td></tr><tr><td>expires_in</td><td>是</td><td>int</td><td>过期时间</td></tr></tbody></table><h5 id="返回示例"><a href="#返回示例" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;access_token&quot;</span>: <span class="hljs-string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9hcGkudGVzdFwvYXBpXC9hdXRoXC9sb2dpbiIsImlhdCI6MTYwNzUyMDE0MSwiZXhwIjoxNjA3NTIzNzQxLCJuYmYiOjE2MDc1MjAxNDEsImp0aSI6IktVdWFsTmxnOXYzZmlTZHEiLCJzdWIiOjMsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.BpVdvBjKEhQ2aIZBfkE-SoU2a3UeFkYCKQKh42Ncbio&quot;</span>,<br>    <span class="hljs-string">&quot;token_type&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span>,<br>    <span class="hljs-string">&quot;expires_in&quot;</span>: <span class="hljs-number">3600</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>状态码 422 参数错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;email&quot;</span>: [<br>            <span class="hljs-string">&quot;邮箱 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;password&quot;</span>: [<br>            <span class="hljs-string">&quot;密码 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-1-2-添加登录接口"><a href="#3-1-2-添加登录接口" class="headerlink" title="3.1.2 添加登录接口"></a>3.1.2 添加登录接口</h3><p>在 src\services\login.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeAccountLogin</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/auth/login&#x27;</span>, &#123;<br>    method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    data: params,<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFakeCaptcha</span>(<span class="hljs-params">mobile</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">`/api/login/captcha?mobile=<span class="hljs-subst">$&#123;mobile&#125;</span>`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="1-将token存入localStorage"><a href="#1-将token存入localStorage" class="headerlink" title="1.将token存入localStorage"></a>1.将<code>token</code>存入<code>localStorage</code></h4><p>在\src\models\login.js 判断是否登录，并跳转到首页，将<code>token</code>存入<code>localStorage</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; stringify &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;querystring&#x27;</span><br><span class="hljs-keyword">import</span> &#123; history &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> &#123; fakeAccountLogin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/login&#x27;</span><br><span class="hljs-keyword">import</span> &#123; setAuthority &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/authority&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getPageQuery &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/utils&#x27;</span><br><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><br><span class="hljs-keyword">const</span> Model = &#123;<br>  namespace: <span class="hljs-string">&#x27;login&#x27;</span>,<br>  state: &#123;&#125;,<br>  effects: &#123;<br>    *<span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">&#123; payload &#125;, &#123; call, put &#125;</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">yield</span> call(fakeAccountLogin, payload)<br>      <span class="hljs-comment">// 判断是否登陆成功</span><br>      <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">yield</span> put(&#123;<br>          type: <span class="hljs-string">&#x27;changeLoginStatus&#x27;</span>,<br>          payload: response,<br>        &#125;) <span class="hljs-comment">// Login successfully</span><br><br>        <span class="hljs-comment">// 跳转到首页</span><br>        history.replace(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        message.success(<span class="hljs-string">&#x27;🎉 🎉 🎉  登录成功！&#x27;</span>)<br>      &#125;<br>    &#125;,<br><br>    <span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123; redirect &#125; = getPageQuery() <span class="hljs-comment">// Note: There may be security issues, please note</span><br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.location.pathname !== <span class="hljs-string">&#x27;/user/login&#x27;</span> &amp;&amp; !redirect) &#123;<br>        history.replace(&#123;<br>          pathname: <span class="hljs-string">&#x27;/user/login&#x27;</span>,<br>          search: stringify(&#123;<br>            redirect: <span class="hljs-built_in">window</span>.location.href,<br>          &#125;),<br>        &#125;)<br>      &#125;<br>    &#125;,<br>  &#125;,<br>  reducers: &#123;<br>    <span class="hljs-function"><span class="hljs-title">changeLoginStatus</span>(<span class="hljs-params">state, &#123; payload &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// 将token存入localStorage</span><br>      <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;access_token&#x27;</span>, payload.access_token)<br>      <span class="hljs-keyword">return</span> &#123; ...state &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Model<br></code></pre></div></td></tr></table></figure><h4 id="2-取出token，加在Header头中"><a href="#2-取出token，加在Header头中" class="headerlink" title="2.取出token，加在Header头中"></a>2.取出<code>token</code>，加在<code>Header</code>头中</h4><p>在\src\utils\request.js 取出<code>token</code>，加在<code>Header</code>头中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/** Request 网络请求工具 更详细的 api 文档: https://github.com/umijs/umi-request */</span><br><span class="hljs-keyword">import</span> &#123; extend &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi-request&#x27;</span><br><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><br><span class="hljs-keyword">const</span> codeMessage = &#123;<br>  <span class="hljs-number">200</span>: <span class="hljs-string">&#x27;服务器成功返回请求的数据。&#x27;</span>,<br>  <span class="hljs-number">201</span>: <span class="hljs-string">&#x27;新建数据成功。&#x27;</span>,<br>  <span class="hljs-number">202</span>: <span class="hljs-string">&#x27;一个请求已经进入后台排队（异步任务）。&#x27;</span>,<br>  <span class="hljs-number">204</span>: <span class="hljs-string">&#x27;处理成功。&#x27;</span>,<br>  <span class="hljs-number">400</span>: <span class="hljs-string">&#x27;发出的请求有错误，服务器没有进行新建或修改数据的操作。&#x27;</span>,<br>  <span class="hljs-number">401</span>: <span class="hljs-string">&#x27;用户没有权限（令牌、用户名、密码错误）。&#x27;</span>,<br>  <span class="hljs-number">403</span>: <span class="hljs-string">&#x27;用户得到授权，但是访问是被禁止的。&#x27;</span>,<br>  <span class="hljs-number">404</span>: <span class="hljs-string">&#x27;发出的请求针对的是不存在的记录，服务器没有进行操作。&#x27;</span>,<br>  <span class="hljs-number">406</span>: <span class="hljs-string">&#x27;请求的格式不可得。&#x27;</span>,<br>  <span class="hljs-number">410</span>: <span class="hljs-string">&#x27;请求的资源被永久删除，且不会再得到的。&#x27;</span>,<br>  <span class="hljs-number">422</span>: <span class="hljs-string">&#x27;当创建一个对象时，发生一个验证错误。&#x27;</span>,<br>  <span class="hljs-number">500</span>: <span class="hljs-string">&#x27;服务器发生错误，请检查服务器。&#x27;</span>,<br>  <span class="hljs-number">502</span>: <span class="hljs-string">&#x27;网关错误。&#x27;</span>,<br>  <span class="hljs-number">503</span>: <span class="hljs-string">&#x27;服务不可用，服务器暂时过载或维护。&#x27;</span>,<br>  <span class="hljs-number">504</span>: <span class="hljs-string">&#x27;网关超时。&#x27;</span>,<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@zh</span>-CN 异常处理程序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@en</span>-US Exception handler</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> errorHandler = <span class="hljs-keyword">async</span> error =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; response &#125; = error<br><br>  <span class="hljs-keyword">if</span> (response &amp;&amp; response.status) &#123;<br>    <span class="hljs-keyword">let</span> errorText = codeMessage[response.status] || response.statusText<br>    <span class="hljs-keyword">const</span> &#123; status &#125; = response<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.json()<br>    <span class="hljs-comment">// 处理422未验证通过的情况</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">422</span>) &#123;<br>      <span class="hljs-keyword">let</span> errs = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> result.errors) &#123;<br>        errs += result.errors[key][<span class="hljs-number">0</span>]<br>      &#125;<br>      errorText += <span class="hljs-string">`[ <span class="hljs-subst">$&#123;errs&#125;</span> ]`</span><br>    &#125;<br>    <span class="hljs-comment">// 处理400的情况</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">400</span>) &#123;<br>      errorText += <span class="hljs-string">`[ <span class="hljs-subst">$&#123;result.message&#125;</span> ]`</span><br>    &#125;<br>    message.error(errorText)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!response) &#123;<br>    message.error(<span class="hljs-string">&#x27;网络发生异常，无法连接服务器&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> response<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@en</span>-US Configure the default parameters for request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@zh</span>-CN 配置request请求时的默认参数</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> request = extend(&#123;<br>  errorHandler,<br>  <span class="hljs-comment">// default error handling</span><br>  credentials: <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-comment">// Does the default request bring cookies</span><br>  prefix: <span class="hljs-string">&#x27;/api&#x27;</span>,<br>&#125;)<br><br><span class="hljs-comment">// 请求拦截器，在请求之前添加Header头</span><br>request.interceptors.request.use(<span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取token</span><br>  <span class="hljs-keyword">const</span> token = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;access_token&#x27;</span>) || <span class="hljs-string">&#x27; &#x27;</span><br>  <span class="hljs-comment">// 设置Header头</span><br>  <span class="hljs-keyword">const</span> headers = &#123;<br>    Authorization: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;token&#125;</span>`</span>,<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    url,<br>    options: &#123; ...options, headers &#125;,<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request<br></code></pre></div></td></tr></table></figure><h2 id="3-2-获取用户信息"><a href="#3-2-获取用户信息" class="headerlink" title="3.2 获取用户信息"></a>3.2 获取用户信息</h2><h3 id="3-2-1-登录信息接口文档"><a href="#3-2-1-登录信息接口文档" class="headerlink" title="3.2.1 登录信息接口文档"></a>3.2.1 登录信息接口文档</h3><h5 id="接口描述-1"><a href="#接口描述-1" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>登录信息</li></ul><h5 id="请求-URL-1"><a href="#请求-URL-1" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/user</li></ul><h5 id="请求方式-1"><a href="#请求方式-1" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="返回参数-1"><a href="#返回参数-1" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>主键</td></tr><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>phone</td><td>是</td><td>string</td><td>手机号</td></tr><tr><td>avatar</td><td>是</td><td>string</td><td>头像</td></tr><tr><td>avatar_url</td><td>是</td><td>string</td><td>头像地址</td></tr><tr><td>is_locked</td><td>是</td><td>int</td><td>是否锁定： 0 正常 1 锁定</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>创建时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>更新时间</td></tr></tbody></table><h5 id="返回示例-1"><a href="#返回示例-1" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;super@a.com&quot;</span>,<br>    <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T02:58:08.000000Z&quot;</span>,<br>    <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T04:32:27.000000Z&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-2-添加获取用户登录信息接口"><a href="#3-2-2-添加获取用户登录信息接口" class="headerlink" title="3.2.2 添加获取用户登录信息接口"></a>3.2.2 添加获取用户登录信息接口</h3><p>在\src\services\user.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/api/users&#x27;</span>)<br>&#125;<br><span class="hljs-comment">// 获取当前登录用户信息</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryCurrent</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/user&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryNotices</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/api/notices&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-3-将用户信息存入localstorage"><a href="#3-2-3-将用户信息存入localstorage" class="headerlink" title="3.2.3 将用户信息存入localstorage"></a>3.2.3 将用户信息存入<code>localstorage</code></h3><p>在\src\models\user.js 中判断<code>localstorage</code>是否有用户信息，没有则请求，再将用户信息存入<code>localstorage</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; queryCurrent, query <span class="hljs-keyword">as</span> queryUsers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> UserModel = &#123;<br>  namespace: <span class="hljs-string">&#x27;user&#x27;</span>,<br>  state: &#123;<br>    currentUser: &#123;&#125;,<br>  &#125;,<br>  effects: &#123;<br>    *<span class="hljs-function"><span class="hljs-title">fetch</span>(<span class="hljs-params">_, &#123; call, put &#125;</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">yield</span> call(queryUsers)<br>      <span class="hljs-keyword">yield</span> put(&#123;<br>        type: <span class="hljs-string">&#x27;save&#x27;</span>,<br>        payload: response,<br>      &#125;)<br>    &#125;,<br><br>    <span class="hljs-comment">// 获取用户信息</span><br>    *<span class="hljs-function"><span class="hljs-title">fetchCurrent</span>(<span class="hljs-params">_, &#123; call, put &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// 查看localstorage是否有用户信息，没有再去请求</span><br>      <span class="hljs-keyword">let</span> userInfo = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>))<br>      <span class="hljs-keyword">if</span> (!userInfo) &#123;<br>        userInfo = <span class="hljs-keyword">yield</span> call(queryCurrent)<br>        <span class="hljs-comment">//修复BUG：有时候userInfo返回的是useCache=false被误存入localStorage，错误的userInfo导致页面一直刷新</span><br>        <span class="hljs-keyword">if</span> (userInfo.useCache !== <span class="hljs-literal">false</span>) <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>, <span class="hljs-built_in">JSON</span>.stringify(userInfo))<br>      &#125;<br><br>      <span class="hljs-keyword">yield</span> put(&#123;<br>        type: <span class="hljs-string">&#x27;saveCurrentUser&#x27;</span>,<br>        payload: userInfo,<br>      &#125;)<br>    &#125;,<br>  &#125;,<br>  reducers: &#123;<br>    <span class="hljs-function"><span class="hljs-title">saveCurrentUser</span>(<span class="hljs-params">state, action</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123; ...state, <span class="hljs-attr">currentUser</span>: action.payload || &#123;&#125; &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> UserModel<br></code></pre></div></td></tr></table></figure><h4 id="1-判断用户是否登录"><a href="#1-判断用户是否登录" class="headerlink" title="1.判断用户是否登录"></a>1.判断用户是否登录</h4><p>在\src\layouts\SecurityLayout.jsx 中精简代码，判断用户是否登录<br>//关键代码 <code>const isLogin = currentUser &amp;&amp; currentUser.id;</code>因为后台返回的用户<code>id</code>是<code>id</code>不是<code>userId</code></p><h5 id="返回示例-2"><a href="#返回示例-2" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;super@a.com&quot;</span>,<br>    <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T02:58:08.000000Z&quot;</span>,<br>    <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T04:32:27.000000Z&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageLoading &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Redirect, connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> &#123; stringify &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;querystring&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityLayout</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    isReady: <span class="hljs-literal">false</span>,<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      isReady: <span class="hljs-literal">true</span>,<br>    &#125;)<br>    <span class="hljs-keyword">const</span> &#123; dispatch &#125; = <span class="hljs-built_in">this</span>.props<br><br>    <span class="hljs-keyword">if</span> (dispatch) &#123;<br>      dispatch(&#123;<br>        type: <span class="hljs-string">&#x27;user/fetchCurrent&#x27;</span>,<br>      &#125;)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; isReady &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> &#123; children, loading, currentUser &#125; = <span class="hljs-built_in">this</span>.props <span class="hljs-comment">// You can replace it to your authentication rule (such as check token exists)</span><br>    <span class="hljs-comment">// You can replace it with your own login authentication rules (such as judging whether the token exists)</span><br><br>    <span class="hljs-keyword">const</span> isLogin = currentUser &amp;&amp; currentUser.id<br>    <span class="hljs-keyword">const</span> queryString = stringify(&#123;<br>      redirect: <span class="hljs-built_in">window</span>.location.href,<br>    &#125;)<br><br>    <span class="hljs-keyword">if</span> ((!isLogin &amp;&amp; loading) || !isReady) &#123;<br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PageLoading</span> /&gt;</span></span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!isLogin &amp;&amp; <span class="hljs-built_in">window</span>.location.pathname !== <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`/<span class="hljs-attr">login</span>?$&#123;<span class="hljs-attr">queryString</span>&#125;`&#125; /&gt;</span></span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> children<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<span class="hljs-function">(<span class="hljs-params">&#123; user, loading &#125;</span>) =&gt;</span> (&#123;<br>  currentUser: user.currentUser,<br>  loading: loading.models.user,<br>&#125;))(SecurityLayout)<br></code></pre></div></td></tr></table></figure><h3 id="3-2-4-修改管理员头像"><a href="#3-2-4-修改管理员头像" class="headerlink" title="3.2.4 修改管理员头像"></a>3.2.4 修改管理员头像</h3><p>在\src\components\GlobalHeader\AvatarDropdown.jsx 修改管理员头像，将<code>currentUser.avatar</code>更改为<code>currentUser.avatar_url</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Avatar size=<span class="hljs-string">&quot;small&quot;</span> className=&#123;styles.avatar&#125; src=&#123;currentUser.avatar_url&#125; alt=<span class="hljs-string">&quot;avatar&quot;</span> /&gt;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-5-优化登录，判断登录之后重定向到首页"><a href="#3-2-5-优化登录，判断登录之后重定向到首页" class="headerlink" title="3.2.5 优化登录，判断登录之后重定向到首页"></a>3.2.5 优化登录，判断登录之后重定向到首页</h3><p>在\src\pages\Login\index.jsx 中 优化登录，判断登录之后重定向到首页<br>导入<code>useEffect</code>和<code>history</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect, history &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br></code></pre></div></td></tr></table></figure><p>加入<code>useEffect</code>代替生命周期函数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 判断如果已经登录过，直接去首页</span><br>  <span class="hljs-keyword">const</span> userInfo = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>)<br>  <span class="hljs-keyword">if</span> (userInfo) history.replace(<span class="hljs-string">&#x27;/&#x27;</span>)<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><h3 id="3-2-6-登录-bug"><a href="#3-2-6-登录-bug" class="headerlink" title="3.2.6 登录 bug"></a>3.2.6 登录 bug</h3><p>在在\src\models\user.js 中 将用户数据存入<code>localStorage</code>时，有时候<code>userInfo</code>返回的是<code>useCache=false</code>被误存入<code>localStorage</code>，错误的<code>userInfo</code>导致页面一直刷新</p><h4 id="1-解决"><a href="#1-解决" class="headerlink" title="1.解决"></a>1.解决</h4><p>在接口请求获取<code>userInfo</code>之后判断是否为正确的数据，是才存入<code>localStorage</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (!userInfo) &#123;<br>  userInfo = <span class="hljs-keyword">yield</span> call(queryCurrent);<br>  <span class="hljs-comment">//修复BUG：有时候userInfo返回的是useCache=false被误存入localStorage，错误的userInfo导致页面一直刷新</span><br>  <span class="hljs-keyword">if</span> (userInfo.useCache !== <span class="hljs-literal">false</span>) <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>, <span class="hljs-built_in">JSON</span>.stringify(userInfo));<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-3-退出"><a href="#3-3-退出" class="headerlink" title="3.3 退出"></a>3.3 退出</h2><h3 id="3-3-1-退出接口文档"><a href="#3-3-1-退出接口文档" class="headerlink" title="3.3.1 退出接口文档"></a>3.3.1 退出接口文档</h3><h5 id="接口描述-2"><a href="#接口描述-2" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>退出登录</li></ul><h5 id="请求-URL-2"><a href="#请求-URL-2" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/auth/logout</li></ul><h5 id="请求方式-2"><a href="#请求方式-2" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="请求头部-1"><a href="#请求头部-1" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="返回示例-3"><a href="#返回示例-3" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 请求成功</li></ul><h3 id="3-3-2-添加退出接口"><a href="#3-3-2-添加退出接口" class="headerlink" title="3.3.2 添加退出接口"></a>3.3.2 添加退出接口</h3><p>在\src\services\login.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logout</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/auth/logout&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-3-添加退出方法"><a href="#3-3-3-添加退出方法" class="headerlink" title="3.3.3 添加退出方法"></a>3.3.3 添加退出方法</h3><p>在\src\models\login.js 中导入<code>logout</code>并添加退出方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; history &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> &#123; fakeAccountLogin, logout &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/login&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><br><span class="hljs-keyword">const</span> Model = &#123;<br>  namespace: <span class="hljs-string">&#x27;login&#x27;</span>,<br>  state: &#123;&#125;,<br>  effects: &#123;<br>    *<span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">&#123; payload &#125;, &#123; call, put &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// loading</span><br>      <span class="hljs-keyword">const</span> load = message.loading(<span class="hljs-string">&#x27;登录中...&#x27;</span>)<br><br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">yield</span> call(fakeAccountLogin, payload)<br>      <span class="hljs-comment">// 判断是否登陆成功</span><br>      <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">yield</span> put(&#123;<br>          type: <span class="hljs-string">&#x27;changeLoginStatus&#x27;</span>,<br>          payload: response,<br>        &#125;) <span class="hljs-comment">// Login successfully</span><br><br>        <span class="hljs-comment">// 跳转到首页</span><br>        history.replace(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        message.success(<span class="hljs-string">&#x27;🎉 🎉 🎉  登录成功！&#x27;</span>)<br>      &#125;<br>      load()<br>    &#125;,<br><br>    *<span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params">_, &#123; call &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// loading</span><br>      <span class="hljs-keyword">const</span> load = message.loading(<span class="hljs-string">&#x27;退出中...&#x27;</span>)<br><br>      <span class="hljs-comment">// 请求Api，退出登录</span><br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">yield</span> call(logout)<br><br>      <span class="hljs-comment">// 判断是否成功退出</span><br>      <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-comment">// 删除本地存储的token和userInfo</span><br>        <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;access_token&#x27;</span>)<br>        <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>)<br>        <span class="hljs-comment">// 重定向到登录页</span><br>        history.replace(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>        message.success(<span class="hljs-string">&#x27;🎉 🎉 🎉  退出成功！&#x27;</span>)<br>      &#125;<br>      load()<br>    &#125;,<br>  &#125;,<br>  reducers: &#123;<br>    <span class="hljs-function"><span class="hljs-title">changeLoginStatus</span>(<span class="hljs-params">state, &#123; payload &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// 将token存入localStorage</span><br>      <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;access_token&#x27;</span>, payload.access_token)<br>      <span class="hljs-keyword">return</span> &#123; ...state &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Model<br></code></pre></div></td></tr></table></figure><h1 id="四、首页统计"><a href="#四、首页统计" class="headerlink" title="四、首页统计"></a>四、首页统计</h1><h2 id="4-1-新建统计面板文件"><a href="#4-1-新建统计面板文件" class="headerlink" title="4.1 新建统计面板文件"></a>4.1 新建统计面板文件</h2><p>在 src\pages 文件夹下创建一个文件夹和文件 DashBoard\index.jsx<br>因为只有一个接口请求，而且不需要获取共享数据，就直接在文件里写请求，可以不用<code>models</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Statistic, Card, Row, Col &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ArrowUpOutlined, ArrowDownOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; fetchDashboard &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/dashboard&#x27;</span><br><br><span class="hljs-keyword">const</span> DashBoard = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 定义组件状态，状态改变，重新渲染组件</span><br>  <span class="hljs-keyword">const</span> [data, setData] = useState(&#123;&#125;)<br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，获取统计数据</span><br>    <span class="hljs-keyword">const</span> resData = <span class="hljs-keyword">await</span> fetchDashboard()<br>    <span class="hljs-comment">// 得到数据之后更新组件状态</span><br>    setData(resData)<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;Row gutter=&#123;<span class="hljs-number">16</span>&#125;&gt;<br>        &lt;Col span=&#123;<span class="hljs-number">8</span>&#125;&gt;<br>          &lt;Card&gt;<br>            &lt;Statistic<br>              title=<span class="hljs-string">&quot;用户数量&quot;</span><br>              value=&#123;data.users_count&#125;<br>              precision=&#123;<span class="hljs-number">0</span>&#125;<br>              valueStyle=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#3f8600&#x27;</span> &#125;&#125;<br>              prefix=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ArrowUpOutlined</span> /&gt;</span></span>&#125;<br>            /&gt;<br>          &lt;/Card&gt;<br>        &lt;/Col&gt;<br>        &lt;Col span=&#123;<span class="hljs-number">8</span>&#125;&gt;<br>          &lt;Card&gt;<br>            &lt;Statistic<br>              title=<span class="hljs-string">&quot;订单数量&quot;</span><br>              value=&#123;data.goods_count&#125;<br>              precision=&#123;<span class="hljs-number">0</span>&#125;<br>              valueStyle=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#cf1322&#x27;</span> &#125;&#125;<br>              prefix=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ArrowDownOutlined</span> /&gt;</span></span>&#125;<br>            /&gt;<br>          &lt;/Card&gt;<br>        &lt;/Col&gt;<br>        &lt;Col span=&#123;<span class="hljs-number">8</span>&#125;&gt;<br>          &lt;Card&gt;<br>            &lt;Statistic<br>              title=<span class="hljs-string">&quot;商品数量&quot;</span><br>              value=&#123;data.order_count&#125;<br>              precision=&#123;<span class="hljs-number">0</span>&#125;<br>              valueStyle=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#234abc&#x27;</span> &#125;&#125;<br>              prefix=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ArrowDownOutlined</span> /&gt;</span></span>&#125;<br>            /&gt;<br>          &lt;/Card&gt;<br>        &lt;/Col&gt;<br>      &lt;/Row&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> DashBoard<br></code></pre></div></td></tr></table></figure><h2 id="4-2-添加统计面板路由"><a href="#4-2-添加统计面板路由" class="headerlink" title="4.2 添加统计面板路由"></a>4.2 添加统计面板路由</h2><p>在 config\routes.js 中添加统计面板路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    component: <span class="hljs-string">&#x27;../layouts/BlankLayout&#x27;</span>,<br>    routes: [<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>        component: <span class="hljs-string">&#x27;../layouts/LoginLayout&#x27;</span>,<br>        routes: [<br>          &#123;<br>            name: <span class="hljs-string">&#x27;login&#x27;</span>,<br>            path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>            component: <span class="hljs-string">&#x27;./Login&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        component: <span class="hljs-string">&#x27;../layouts/SecurityLayout&#x27;</span>,<br>        routes: [<br>          &#123;<br>            path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            component: <span class="hljs-string">&#x27;../layouts/BasicLayout&#x27;</span>,<br>            routes: [<br>              &#123;<br>                path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>                redirect: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,<br>              &#125;,<br>              &#123;<br>                name: <span class="hljs-string">&#x27;dashboard&#x27;</span>,<br>                path: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,<br>                icon: <span class="hljs-string">&#x27;PieChartOutlined&#x27;</span>,<br>                component: <span class="hljs-string">&#x27;@/pages/DashBoard&#x27;</span>,<br>              &#125;,<br><br>              &#123;<br>                component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>              &#125;,<br>            ],<br>          &#125;,<br>          &#123;<br>            component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>  &#125;,<br>]<br></code></pre></div></td></tr></table></figure><h2 id="4-3-统计面板接口文档"><a href="#4-3-统计面板接口文档" class="headerlink" title="4.3 统计面板接口文档"></a>4.3 统计面板接口文档</h2><h5 id="接口描述-3"><a href="#接口描述-3" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>首页统计</li></ul><h5 id="请求-URL-3"><a href="#请求-URL-3" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/index</li></ul><h5 id="请求方式-3"><a href="#请求方式-3" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="返回参数-2"><a href="#返回参数-2" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>users_count</td><td>是</td><td>int</td><td>用户数量</td></tr><tr><td>goods_count</td><td>是</td><td>int</td><td>商品数量</td></tr><tr><td>order_count</td><td>是</td><td>int</td><td>订单数据</td></tr></tbody></table><h5 id="返回示例-4"><a href="#返回示例-4" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;users_count&quot;</span>: <span class="hljs-number">7</span>,<br>    <span class="hljs-string">&quot;goods_count&quot;</span>: <span class="hljs-number">237</span>,<br>    <span class="hljs-string">&quot;order_count&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-4-添加统计面板接口"><a href="#4-4-添加统计面板接口" class="headerlink" title="4.4 添加统计面板接口"></a>4.4 添加统计面板接口</h2><p>在 src\services\dashboard.js 添加统计面板接口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取统计面板数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchDashboard</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/index&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="五、用户列表"><a href="#五、用户列表" class="headerlink" title="五、用户列表"></a>五、用户列表</h1><h2 id="5-1-用户基本列表"><a href="#5-1-用户基本列表" class="headerlink" title="5.1 用户基本列表"></a>5.1 用户基本列表</h2><h3 id="5-1-1-用户列表接口文档"><a href="#5-1-1-用户列表接口文档" class="headerlink" title="5.1.1 用户列表接口文档"></a>5.1.1 用户列表接口文档</h3><h5 id="接口描述-4"><a href="#接口描述-4" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>用户列表</li></ul><h5 id="请求-URL-4"><a href="#请求-URL-4" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users</li></ul><h5 id="请求方式-4"><a href="#请求方式-4" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-2"><a href="#请求头部-2" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Query-请求参数"><a href="#Query-请求参数" class="headerlink" title="Query 请求参数"></a>Query 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>current</td><td>否</td><td>int</td><td>分页-当前页</td></tr><tr><td>name</td><td>否</td><td>string</td><td>姓名模糊搜索</td></tr><tr><td>email</td><td>否</td><td>string</td><td>邮箱匹配搜索</td></tr><tr><td>phone</td><td>否</td><td>string</td><td>手机号匹配搜索</td></tr></tbody></table><h5 id="返回参数-3"><a href="#返回参数-3" class="headerlink" title="返回参数"></a>返回参数</h5><p><strong>data</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>主键</td></tr><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>phone</td><td>是</td><td>string</td><td>手机号</td></tr><tr><td>avatar</td><td>是</td><td>string</td><td>头像</td></tr><tr><td>avatar_url</td><td>是</td><td>string</td><td>头像地址</td></tr><tr><td>is_locked</td><td>是</td><td>int</td><td>是否锁定： 0 正常 1 锁定</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>创建时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>更新时间</td></tr></tbody></table><p><strong>meta.pagination</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>total</td><td>是</td><td>int</td><td>数据总数</td></tr><tr><td>count</td><td>是</td><td>int</td><td>当前页数据</td></tr><tr><td>per_page</td><td>是</td><td>int</td><td>每页显示条数</td></tr><tr><td>current_page</td><td>是</td><td>int</td><td>当前页页码</td></tr><tr><td>total_pages</td><td>是</td><td>int</td><td>总页数</td></tr><tr><td>links.previous</td><td>是</td><td>string</td><td>上一页链接</td></tr><tr><td>links.next</td><td>是</td><td>string</td><td>下一页链接</td></tr></tbody></table><h5 id="返回示例-5"><a href="#返回示例-5" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;data&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>            <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;super@a.com&quot;</span>,<br>            <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T02:58:08.000000Z&quot;</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-24T06:40:44.000000Z&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;xx&quot;</span>,<br>            <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;12311@qq.com&quot;</span>,<br>            <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-24T03:47:48.000000Z&quot;</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-24T06:44:43.000000Z&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-string">&quot;meta&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;pagination&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;per_page&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;current_page&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;total_pages&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-string">&quot;links&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;previous&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-string">&quot;next&quot;</span>: <span class="hljs-string">&quot;http://shopapi.mamp/api/admin/users?page=2&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-1-2-添加用户列表接口"><a href="#5-1-2-添加用户列表接口" class="headerlink" title="5.1.2 添加用户列表接口"></a>5.1.2 添加用户列表接口</h3><p>在 src\services\user.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取当前登录用户信息</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryCurrent</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/user&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 获取用户列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUsers</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/users&#x27;</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-1-3-创建基本的用户列表"><a href="#5-1-3-创建基本的用户列表" class="headerlink" title="5.1.3 创建基本的用户列表"></a>5.1.3 创建基本的用户列表</h3><p><a href="https://procomponents.ant.design/components/table">ProTable</a>参考文档<br>在\src\pages\User\index.jsx 中新建用户列表文件和文件，创建基本的 table，根据接口文档写需要的字段</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Avatar, Switch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getUsers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;avatar_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatar_url&#125;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;32&#125;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>&#125; /&gt;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否禁用&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_locked&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;启用&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;禁用&quot;</span><br>          defaultChecked=&#123;record.is_locked === <span class="hljs-number">0</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;&#125;&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-comment">// 获取用户列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getUsers(params)<br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button key=<span class="hljs-string">&quot;button&quot;</span> icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125; type=<span class="hljs-string">&quot;primary&quot;</span>&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h2 id="5-2-禁用和启用"><a href="#5-2-禁用和启用" class="headerlink" title="5.2 禁用和启用"></a>5.2 禁用和启用</h2><h3 id="5-2-1-禁启和启用接口文档"><a href="#5-2-1-禁启和启用接口文档" class="headerlink" title="5.2.1 禁启和启用接口文档"></a>5.2.1 禁启和启用接口文档</h3><h5 id="接口描述-5"><a href="#接口描述-5" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>禁用和启用</li></ul><h5 id="请求-URL-5"><a href="#请求-URL-5" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users/{user}/lock</li></ul><h5 id="请求方式-5"><a href="#请求方式-5" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PATCH</li></ul><h5 id="请求头部-3"><a href="#请求头部-3" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数"><a href="#RESET-参数" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>user</td><td>是</td><td>int</td><td>用户 id</td></tr></tbody></table><h5 id="返回示例-6"><a href="#返回示例-6" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 请求成功</li></ul><h3 id="5-2-2-添加禁用和启用接口"><a href="#5-2-2-添加禁用和启用接口" class="headerlink" title="5.2.2 添加禁用和启用接口"></a>5.2.2 添加禁用和启用接口</h3><p>在\src\services\user.js 中添加禁启用接口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 禁用和启用</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;用户id&#125;</span> <span class="hljs-variable">uid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lockUser</span>(<span class="hljs-params">uid</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/users/<span class="hljs-subst">$&#123;uid&#125;</span>/lock`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-2-3-添加和启用方法"><a href="#5-2-3-添加和启用方法" class="headerlink" title="5.2.3 添加和启用方法"></a>5.2.3 添加和启用方法</h3><p>在\src\pages\User\index.jsx 中，先导入<code>lockUser</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; getUsers, lockUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br></code></pre></div></td></tr></table></figure><p>创建禁启用函数接收用户 id，因为成功后后端返回值是空，所以<code>response.status===undefined</code>判断为空则操作成功</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 禁启用</span><br><span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>  <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>    message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    message.error(<span class="hljs-string">&#x27;操作失败！&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后在<code>columns</code>列表中，找到禁启用字段，使用禁启用函数，同时传出<code>record.id</code>用户 id</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    title:<span class="hljs-string">&quot;是否禁用&quot;</span>,<br>    dataIndex:<span class="hljs-string">&quot;is_locked&quot;</span>,<br>    hideInSearch:<span class="hljs-literal">true</span>,<br>    render:<span class="hljs-function">(<span class="hljs-params">_,record</span>)=&gt;</span> <span class="xml">&lt;Switch</span><br><span class="xml">        checkedChildren=&quot;启用&quot;</span><br><span class="xml">        unCheckedChildren=&quot;禁用&quot;</span><br><span class="xml">        defaultChecked=&#123;record.is_locked === 0&#125;</span><br><span class="xml">        onChange=&#123;()=&gt;&#123;heandleLockUser(record.id)&#125;&#125;</span><br><span class="xml">    /&gt;</span><br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="5-3-添加用户"><a href="#5-3-添加用户" class="headerlink" title="5.3 添加用户"></a>5.3 添加用户</h2><p><a href="https://ant.design/components/modal-cn/">Modal</a>对话框文档 <a href="https://procomponents.ant.design/components/form#%E8%A1%A8%E5%8D%95%E8%81%94%E5%8A%A8">ProForm</a>高级表单文档</p><h3 id="5-3-1-添加用户接口文档"><a href="#5-3-1-添加用户接口文档" class="headerlink" title="5.3.1 添加用户接口文档"></a>5.3.1 添加用户接口文档</h3><h5 id="接口描述-6"><a href="#接口描述-6" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>添加用户</li></ul><p><em>注意： 后台 Api 做了 RBAC 权限验证， 新创建的用户无法登陆， 必须为新创建的用户分配响应的角色或权限才可以</em><br><em>注意： 权限管理暂未开放 Api</em></p><h5 id="请求-URL-6"><a href="#请求-URL-6" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users</li></ul><h5 id="请求方式-6"><a href="#请求方式-6" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="请求头部-4"><a href="#请求头部-4" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Body-请求参数-1"><a href="#Body-请求参数-1" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>password</td><td>是</td><td>string</td><td>密码</td></tr></tbody></table><h5 id="返回示例-7"><a href="#返回示例-7" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 201 创建成功</li><li>状态码 422 参数错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: [<br>            <span class="hljs-string">&quot;昵称 不能为空&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;email&quot;</span>: [<br>            <span class="hljs-string">&quot;邮箱 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;password&quot;</span>: [<br>            <span class="hljs-string">&quot;密码 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-3-2-添加添加用户接口"><a href="#5-3-2-添加添加用户接口" class="headerlink" title="5.3.2 添加添加用户接口"></a>5.3.2 添加添加用户接口</h3><p>在\src\services\user.js 中<br>这里添加用户接口和获取用户列表是同一个接口<code>/admin/users</code>，但是他们的请求方式不一样，添加用户接口用<code>post</code>，而获取用户列表接口是用默认的<code>get</code>方式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addUser</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/users&#x27;</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-3-3-封装添加用户模态框"><a href="#5-3-3-封装添加用户模态框" class="headerlink" title="5.3.3 封装添加用户模态框"></a>5.3.3 封装添加用户模态框</h3><h4 id="1-封装添加用户模态框组件Create"><a href="#1-封装添加用户模态框组件Create" class="headerlink" title="1.封装添加用户模态框组件Create"></a>1.封装添加用户模态框组件<code>Create</code></h4><p>在\src\pages\User 文件夹下新建公共文件夹和<code>Create.jsx</code>文件 \src\pages\User\components\Create.jsx<br><code>Create</code>组件在父组件中使用，并用<code>props</code>接收父组件传的方法和实例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> Create = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef &#125; = props<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加用户</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;表单数据&#125;</span> <span class="hljs-variable">values</span></span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> createUser = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，添加用户</span><br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> addUser(values)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;添加成功！&#x27;</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=<span class="hljs-string">&quot;添加用户&quot;</span><br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &lt;ProForm<br>        onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>          createUser(values)<br>        &#125;&#125;&gt;<br>        &lt;ProFormText<br>          name=<span class="hljs-string">&quot;name&quot;</span><br>          label=<span class="hljs-string">&quot;昵称&quot;</span><br>          placeholder=<span class="hljs-string">&quot;请输入昵称&quot;</span><br>          rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入昵称&#x27;</span> &#125;]&#125;<br>        /&gt;<br>        &lt;ProFormText<br>          name=<span class="hljs-string">&quot;email&quot;</span><br>          label=<span class="hljs-string">&quot;邮箱&quot;</span><br>          placeholder=<span class="hljs-string">&quot;请输入邮箱&quot;</span><br>          rules=&#123;[<br>            &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span> &#125;,<br>            &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span> &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;ProFormText.Password<br>          name=<span class="hljs-string">&quot;password&quot;</span><br>          label=<span class="hljs-string">&quot;密码&quot;</span><br>          placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span><br>          rules=&#123;[<br>            &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入密码&#x27;</span> &#125;,<br>            &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;密码最小6位&#x27;</span> &#125;,<br>          ]&#125;<br>        /&gt;<br>      &lt;/ProForm&gt;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Create<br></code></pre></div></td></tr></table></figure><h4 id="2-调用封装的Create组件"><a href="#2-调用封装的Create组件" class="headerlink" title="2.调用封装的Create组件"></a>2.调用封装的<code>Create</code>组件</h4><p>这里是使用<code>Create</code>组件，并且将方法和实例传给子组件，在父组件里只做简单的显示关闭操作，不做过多的逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Create isModalVisible=&#123;isModalVisible&#125; isShowModal=&#123;isShowModal&#125; actionRef=&#123;actionRef&#125; /&gt;<br></code></pre></div></td></tr></table></figure><p>在\src\pages\User\index.jsx，在父组件中导入<code>import Create from &#39;./components/Create&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Avatar, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getUsers, lockUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> Create <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Create&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取用户列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getUsers(params)<br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 禁启用</span><br>  <span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function"><span class="hljs-params">show</span> =&gt;</span> &#123;<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;avatar_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatar_url&#125;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;32&#125;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>&#125; /&gt;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否禁用&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_locked&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;启用&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;禁用&quot;</span><br>          defaultChecked=&#123;record.is_locked === <span class="hljs-number">0</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br>      &lt;Create isModalVisible=&#123;isModalVisible&#125; isShowModal=&#123;isShowModal&#125; actionRef=&#123;actionRef&#125; /&gt;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h2 id="5-4-编辑用户"><a href="#5-4-编辑用户" class="headerlink" title="5.4 编辑用户"></a>5.4 编辑用户</h2><h3 id="5-4-1-更新用户信息和用户详情接口文档"><a href="#5-4-1-更新用户信息和用户详情接口文档" class="headerlink" title="5.4.1 更新用户信息和用户详情接口文档"></a>5.4.1 更新用户信息和用户详情接口文档</h3><h5 id="接口描述-7"><a href="#接口描述-7" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>更新用户信息</li></ul><h5 id="请求-URL-7"><a href="#请求-URL-7" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users/{users}</li></ul><h5 id="请求方式-7"><a href="#请求方式-7" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PUT</li></ul><h5 id="REST-请求参数"><a href="#REST-请求参数" class="headerlink" title="REST 请求参数"></a>REST 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>users</td><td>是</td><td>int</td><td>用户 id</td></tr></tbody></table><h5 id="Body-请求参数-2"><a href="#Body-请求参数-2" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr></tbody></table><h5 id="返回示例-8"><a href="#返回示例-8" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 201 创建成功</li><li>状态码 422 参数错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: [<br>            <span class="hljs-string">&quot;昵称 不能为空&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;email&quot;</span>: [<br>            <span class="hljs-string">&quot;邮箱 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;password&quot;</span>: [<br>            <span class="hljs-string">&quot;密码 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接口描述-8"><a href="#接口描述-8" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>用户详情</li></ul><h5 id="请求-URL-8"><a href="#请求-URL-8" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users/{user}</li></ul><h5 id="请求方式-8"><a href="#请求方式-8" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-5"><a href="#请求头部-5" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数-1"><a href="#RESET-参数-1" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>user</td><td>是</td><td>string</td><td>用户 id</td></tr></tbody></table><h5 id="返回参数-4"><a href="#返回参数-4" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>主键</td></tr><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>phone</td><td>是</td><td>string</td><td>手机号</td></tr><tr><td>avatar</td><td>是</td><td>string</td><td>头像</td></tr><tr><td>avatar_url</td><td>是</td><td>string</td><td>头像地址</td></tr><tr><td>is_locked</td><td>是</td><td>int</td><td>是否锁定： 0 正常 1 锁定</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>创建时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>更新时间</td></tr></tbody></table><h5 id="返回示例-9"><a href="#返回示例-9" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;super@a.com&quot;</span>,<br>    <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T02:58:08.000000Z&quot;</span>,<br>    <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T04:32:27.000000Z&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-4-2-添加更新用户信息和用户详情接口"><a href="#5-4-2-添加更新用户信息和用户详情接口" class="headerlink" title="5.4.2 添加更新用户信息和用户详情接口"></a>5.4.2 添加更新用户信息和用户详情接口</h3><p>在\src\services\user.js 中添加更新用户和用户详情接口，虽然这两个接口请求是同一个，但是他们的传参方式和参数是不一样的。<br><code>updateUser</code>是<code>put</code>方法，用于更新数据，需要传编辑的用户 id 和修改的参数，<br><code>showUser</code>是<code>get</code>方法，用于设置编辑栏上的默认值，只需要传编辑用户 id，后端返回改用户具体参数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateUser</span>(<span class="hljs-params">editId, params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.put(<span class="hljs-string">`/admin/users/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>, &#123; params &#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">editId</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showUser</span>(<span class="hljs-params">editId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">`/admin/users/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-4-3-封装编辑用户模态框"><a href="#5-4-3-封装编辑用户模态框" class="headerlink" title="5.4.3 封装编辑用户模态框"></a>5.4.3 封装编辑用户模态框</h3><h4 id="1-封装编辑模态框组件-Edit"><a href="#1-封装编辑模态框组件-Edit" class="headerlink" title="1.封装编辑模态框组件 Edit"></a>1.封装编辑模态框组件 Edit</h4><p>在\src\pages\User\components 文件夹下创建编辑用户组件<code>Edit.jsx</code>，先导入接口请求方法<code>import &#123; showUser, updateUser &#125; from &#39;@/services/user&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> Edit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加用户</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;表单数据&#125;</span> <span class="hljs-variable">values</span></span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> editUser = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，更新用户</span><br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;更新成功！&#x27;</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=<span class="hljs-string">&quot;编辑用户&quot;</span><br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;initialValues === <span class="hljs-literal">undefined</span> ? (<br>        &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>      ) : (<br>        &lt;ProForm<br>          initialValues=&#123;initialValues&#125;<br>          onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>            editUser(values)<br>          &#125;&#125;&gt;<br>          &lt;ProFormText<br>            name=<span class="hljs-string">&quot;name&quot;</span><br>            label=<span class="hljs-string">&quot;昵称&quot;</span><br>            placeholder=<span class="hljs-string">&quot;请输入昵称&quot;</span><br>            rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入昵称&#x27;</span> &#125;]&#125;<br>          /&gt;<br>          &lt;ProFormText<br>            name=<span class="hljs-string">&quot;email&quot;</span><br>            label=<span class="hljs-string">&quot;邮箱&quot;</span><br>            placeholder=<span class="hljs-string">&quot;请输入邮箱&quot;</span><br>            rules=&#123;[<br>              &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span> &#125;,<br>              &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span> &#125;,<br>            ]&#125;<br>          /&gt;<br>        &lt;/ProForm&gt;<br>      )&#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Edit<br></code></pre></div></td></tr></table></figure><p>其中加入了<code>antd</code>的骨架框，原因是页面渲染比接口请求快，在获取用户详情之前页面就渲染完了，导致编辑栏上没有得到该被编辑用户的数据，加入骨架框起到缓冲作用。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621443253764-18ae7b8e-90db-433d-8917-67c3ad549ba2.png#clientId=u76ffcb00-d6fc-4&from=paste&height=292&id=fwwDs&margin=%5Bobject%20Object%5D&name=image.png&originHeight=292&originWidth=527&originalType=binary&size=15903&status=done&style=none&taskId=ub7c5cca0-015f-4df4-991d-46b3a3aed8a&width=527" alt="image.png"><br>同时给骨架框和编辑表单添加了三元运算符，避免两个同时被渲染，判断接口请求接收到用户详情之后骨架框消失，编辑表单出现。一下是主要代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br><br>useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 发送请求，获取用户详情</span><br>  <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>    setinitialValues(&#123;<br>      name: response.name,<br>      email: response.email,<br>    &#125;)<br>  &#125;<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  initialValues === <span class="hljs-literal">undefined</span> ? (<br>    &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>  ) : (<br>    &lt;ProForm<br>      initialValues=&#123;initialValues&#125;<br>      onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>        editUser(values)<br>      &#125;&#125;&gt;<br>      &lt;ProFormText<br>        name=<span class="hljs-string">&quot;name&quot;</span><br>        label=<span class="hljs-string">&quot;昵称&quot;</span><br>        placeholder=<span class="hljs-string">&quot;请输入昵称&quot;</span><br>        rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入昵称&#x27;</span> &#125;]&#125;<br>      /&gt;<br>      &lt;ProFormText<br>        name=<span class="hljs-string">&quot;email&quot;</span><br>        label=<span class="hljs-string">&quot;邮箱&quot;</span><br>        placeholder=<span class="hljs-string">&quot;请输入邮箱&quot;</span><br>        rules=&#123;[<br>          &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span> &#125;,<br>          &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span> &#125;,<br>        ]&#125;<br>      /&gt;<br>    &lt;/ProForm&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-调用封装的Edit组件"><a href="#2-调用封装的Edit组件" class="headerlink" title="2.调用封装的Edit组件"></a>2.调用封装的<code>Edit</code>组件</h4><p>在\src\pages\User\index.jsx 中，导入编辑组件<code>import Edit from &#39;./components/Edit&#39;;</code><br>调用了<code>Edit</code>组件并且多传一个被编辑用户 id <code>editId=&#123;editId&#125;</code>给子组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Avatar, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getUsers, lockUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> Create <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Create&#x27;</span><br><span class="hljs-keyword">import</span> Edit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Edit&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [isModalVisibleEdit, setisModalVisibleEdit] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取用户列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getUsers(params)<br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 禁启用</span><br>  <span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function"><span class="hljs-params">show</span> =&gt;</span> &#123;<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-comment">// 控制编辑用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModalEdit = <span class="hljs-function">(<span class="hljs-params">show, id</span>) =&gt;</span> &#123;<br>    setisModalVisibleEdit(show)<br>    setEditId(id)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;avatar_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatar_url&#125;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;32&#125;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>&#125; /&gt;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否禁用&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_locked&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;启用&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;禁用&quot;</span><br>          defaultChecked=&#123;record.is_locked === <span class="hljs-number">0</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModalEdit(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br>      &lt;Create isModalVisible=&#123;isModalVisible&#125; isShowModal=&#123;isShowModal&#125; actionRef=&#123;actionRef&#125; /&gt;<br><br>      &#123;!isModalVisibleEdit ? (<br>        <span class="hljs-string">&#x27;&#x27;</span><br>      ) : (<br>        &lt;Edit<br>          isModalVisible=&#123;isModalVisibleEdit&#125;<br>          isShowModal=&#123;isShowModalEdit&#125;<br>          actionRef=&#123;actionRef&#125;<br>          editId=&#123;editId&#125;<br>        /&gt;<br>      )&#125;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><p>其中关键代码<br>这里设置了编辑模态框的打开或者关闭，并且设置被编辑用户 id，传给<code>Edit</code>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [isModalVisibleEdit, setisModalVisibleEdit] = useState(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>);<br><br><br><br><span class="hljs-comment">// 控制编辑用户模态框显示和隐藏</span><br><span class="hljs-keyword">const</span> isShowModalEdit = <span class="hljs-function">(<span class="hljs-params">show, id</span>) =&gt;</span> &#123;<br>  setisModalVisibleEdit(show);<br>  setEditId(id);<br>&#125;;<br><br><br><br>  &#123;<br>    title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>    render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModalEdit(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>  &#125;,<br></code></pre></div></td></tr></table></figure><p>这里也设置了三目运算，主要原因是因为每次编辑都会有不同的用户 id，在编辑组件时挂载时，触发<code>Edit</code>子组件的生命周期请求用户 id，编辑组件关闭时卸载生命周期</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//关键代码,  isModalVisibleEdit编辑模态框显示时，挂载生命周期获取用户详情，编辑模态框关闭时卸载生命周期函数</span><br>useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 发送请求，获取用户详情</span><br>  <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>    setinitialValues(&#123;<br>      name: response.name,<br>      email: response.email,<br>    &#125;)<br>  &#125;<br>&#125;, [])<br><br>&#123;<br>  !isModalVisibleEdit ? (<br>    <span class="hljs-string">&#x27;&#x27;</span><br>  ) : (<br>    &lt;Edit<br>      isModalVisible=&#123;isModalVisibleEdit&#125;<br>      isShowModal=&#123;isShowModalEdit&#125;<br>      actionRef=&#123;actionRef&#125;<br>      editId=&#123;editId&#125;<br>    /&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-5-封装编辑和添加用户"><a href="#5-5-封装编辑和添加用户" class="headerlink" title="5.5 封装编辑和添加用户"></a>5.5 封装编辑和添加用户</h2><p>1.在\src\pages\User\components 文件夹中，复制<code>Edit.jsx</code>并重命名<code>CreateOrEdit.jsx</code>，将<code>Create</code>组件和<code>Edit</code>组件合并在一起，通过有<code>editId</code>判断是编辑。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>用户`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;name&quot;</span><br>              label=<span class="hljs-string">&quot;昵称&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入昵称&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入昵称&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;email&quot;</span><br>              label=<span class="hljs-string">&quot;邮箱&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入邮箱&quot;</span><br>              rules=&#123;[<br>                &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span> &#125;,<br>                &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span> &#125;,<br>              ]&#125;<br>            /&gt;<br>            &#123;<br>              <span class="hljs-comment">// 只有添加用户才有密码框</span><br>              editId !== <span class="hljs-literal">undefined</span> ? (<br>                <span class="hljs-string">&#x27;&#x27;</span><br>              ) : (<br>                &lt;ProFormText.Password<br>                  name=<span class="hljs-string">&quot;password&quot;</span><br>                  label=<span class="hljs-string">&quot;密码&quot;</span><br>                  placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span><br>                  rules=&#123;[<br>                    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入密码&#x27;</span> &#125;,<br>                    &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;密码最小6位&#x27;</span> &#125;,<br>                  ]&#125;<br>                /&gt;<br>              )<br>            &#125;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><p>2.在\src\pages\User\index.jsx 中导入<code>import CreateOrEdit from &#39;./components/CreateOrEdit&#39;;``CreateOrEdit</code>组件，将编辑和添加用户的方法改成相同的，并用过是否有<code>editId</code>来判断是编辑（有 id 是编辑）还是添加。最后删除掉\src\pages\User\components 文件夹中的<code>Create.jsx</code>和<code>Edit.jsx</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Avatar, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getUsers, lockUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> CreateOrEdit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/CreateOrEdit&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取用户列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getUsers(params)<br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 禁启用</span><br>  <span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建/添加用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function">(<span class="hljs-params">show, id = <span class="hljs-literal">undefined</span></span>) =&gt;</span> &#123;<br>    setEditId(id)<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;avatar_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatar_url&#125;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;32&#125;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>&#125; /&gt;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否禁用&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_locked&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;启用&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;禁用&quot;</span><br>          defaultChecked=&#123;record.is_locked === <span class="hljs-number">0</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModal(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br><br>      &#123;<br>        <span class="hljs-comment">// 模态框隐藏的时候，不挂载组件，显示的时候挂载组件，这是为了触发子组件的生命周期</span><br>        !isModalVisible ? (<br>          <span class="hljs-string">&#x27;&#x27;</span><br>        ) : (<br>          &lt;CreateOrEdit<br>            isModalVisible=&#123;isModalVisible&#125;<br>            isShowModal=&#123;isShowModal&#125;<br>            actionRef=&#123;actionRef&#125;<br>            editId=&#123;editId&#125;<br>          /&gt;<br>        )<br>      &#125;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h1 id="六、商品列表"><a href="#六、商品列表" class="headerlink" title="六、商品列表"></a>六、商品列表</h1><h2 id="6-1-商品基本列表"><a href="#6-1-商品基本列表" class="headerlink" title="6.1 商品基本列表"></a>6.1 商品基本列表</h2><h3 id="6-1-1-商品列表接口"><a href="#6-1-1-商品列表接口" class="headerlink" title="6.1.1 商品列表接口"></a>6.1.1 商品列表接口</h3><h5 id="接口描述-9"><a href="#接口描述-9" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>商品列表</li></ul><h5 id="请求-URL-9"><a href="#请求-URL-9" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods</li></ul><h5 id="请求方式-9"><a href="#请求方式-9" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-6"><a href="#请求头部-6" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Query-请求参数-1"><a href="#Query-请求参数-1" class="headerlink" title="Query 请求参数"></a>Query 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>current</td><td>否</td><td>int</td><td>分页-当前页</td></tr><tr><td>title</td><td>否</td><td>string</td><td>商品名模糊搜索</td></tr><tr><td>category_id</td><td>否</td><td>int</td><td>分类</td></tr><tr><td>is_on</td><td>否</td><td>int</td><td>是否上架 0 不上架 1 上架</td></tr><tr><td>is_recommend</td><td>否</td><td>int</td><td>是否推荐 0 不推荐 1 推荐</td></tr><tr><td>include</td><td>否</td><td>string</td><td>包含额外的数据： category 分类，user 用户， comments 评论</td></tr></tbody></table><p><em>inlude 可以返回额外的数据， 多个使用，分隔， 比如：include=category,user,comments</em></p><h5 id="返回参数-5"><a href="#返回参数-5" class="headerlink" title="返回参数"></a>返回参数</h5><p><strong>data</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>自增长主键 ID</td></tr><tr><td>user_id</td><td>是</td><td>int</td><td>创建者</td></tr><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>sales</td><td>是</td><td>int</td><td>销量</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>cover_url</td><td>是</td><td>string</td><td>封面图 url</td></tr><tr><td>pics</td><td>是</td><td>array</td><td>小图集</td></tr><tr><td>pics_url</td><td>是</td><td>array</td><td>小图集 url</td></tr><tr><td>is_on</td><td>是</td><td>int</td><td>是否上架 0 不上架 1 上架</td></tr><tr><td>is_recommend</td><td>是</td><td>int</td><td>是否推荐 0 不推荐 1 推荐</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>注册时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>修改时间</td></tr></tbody></table><p><strong>meta.pagination</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>total</td><td>是</td><td>int</td><td>数据总数</td></tr><tr><td>count</td><td>是</td><td>int</td><td>当前页数据</td></tr><tr><td>per_page</td><td>是</td><td>int</td><td>每页显示条数</td></tr><tr><td>current_page</td><td>是</td><td>int</td><td>当前页页码</td></tr><tr><td>total_pages</td><td>是</td><td>int</td><td>总页数</td></tr><tr><td>links.previous</td><td>是</td><td>string</td><td>上一页链接</td></tr><tr><td>links.next</td><td>是</td><td>string</td><td>下一页链接</td></tr></tbody></table><h5 id="返回示例-10"><a href="#返回示例-10" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;data&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;电脑11111电脑&quot;</span>,<br>            <span class="hljs-string">&quot;category_id&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;这是一个电脑1111&quot;</span>,<br>            <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>,<br>            <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">999</span>,<br>            <span class="hljs-string">&quot;sales&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;cover&quot;</span>: <span class="hljs-string">&quot;100x100.jpg&quot;</span>,<br>            <span class="hljs-string">&quot;cover_url&quot;</span>: <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/100x100.jpg&quot;</span>,<br>            <span class="hljs-string">&quot;pics&quot;</span>: [<br>                <span class="hljs-string">&quot;a.png&quot;</span>,<br>                <span class="hljs-string">&quot;b.png&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;pics_url&quot;</span>: [<br>                <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/a.png&quot;</span>,<br>                <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/b.png&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;details&quot;</span>: <span class="hljs-string">&quot;这是一个电脑这是一个电脑这是一个电脑这是一个电脑&quot;</span>,<br>            <span class="hljs-string">&quot;is_on&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;is_recommend&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T07:38:37.000000Z&quot;</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T10:13:45.000000Z&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;电脑2&quot;</span>,<br>            <span class="hljs-string">&quot;category_id&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;这是一个电脑&quot;</span>,<br>            <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>,<br>            <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">999</span>,<br>            <span class="hljs-string">&quot;sales&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;cover&quot;</span>: <span class="hljs-string">&quot;/imgs/img1.png&quot;</span>,<br>            <span class="hljs-string">&quot;cover_url&quot;</span>: <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com//imgs/img1.png&quot;</span>,<br>            <span class="hljs-string">&quot;pics&quot;</span>: [<br>                <span class="hljs-string">&quot;a.png&quot;</span>,<br>                <span class="hljs-string">&quot;b.png&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;pics_url&quot;</span>: [<br>                <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/a.png&quot;</span>,<br>                <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/b.png&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;details&quot;</span>: <span class="hljs-string">&quot;这是一个电脑这是一个电脑这是一个电脑这是一个电脑&quot;</span>,<br>            <span class="hljs-string">&quot;is_on&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;is_recommend&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T07:38:45.000000Z&quot;</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T07:38:45.000000Z&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-string">&quot;meta&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;pagination&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;per_page&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;current_page&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;total_pages&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-string">&quot;links&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;previous&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-string">&quot;next&quot;</span>: <span class="hljs-string">&quot;http://api.test/api/admin/goods?page=2&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-1-2-添加商品列表接口"><a href="#6-1-2-添加商品列表接口" class="headerlink" title="6.1.2 添加商品列表接口"></a>6.1.2 添加商品列表接口</h3><p>在\src\services 文件夹中复制<code>user.jsx</code>文件夹并重命名<code>goods.jsx</code><br>根据接口文档添加商品列表接口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-1-3-创建基本商品列表页面"><a href="#6-1-3-创建基本商品列表页面" class="headerlink" title="6.1.3 创建基本商品列表页面"></a>6.1.3 创建基本商品列表页面</h3><p>在\src\pages 文件夹中，复制<code>User</code>文件夹并重命名<code>Goods</code>，<br>修改基本页面，添加商品图片预览，<br>其中<code>valueType</code>是设置筛选的单选按钮，<code>valueEnum</code>是选项，可以枚举也可以直接列出来，<a href="https://procomponents.ant.design/components/table#valuetype---%E9%80%89%E6%8B%A9%E7%B1%BB">选择类</a>参考文档</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>valueEnum: &#123;<br>  <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已推荐&#x27;</span> &#125;,<br>  <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未推荐&#x27;</span> &#125;,<br>&#125;,<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Image, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getGoods &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/goods&#x27;</span><br><span class="hljs-keyword">import</span> CreateOrEdit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/CreateOrEdit&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取商品列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getGoods(params)<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 禁启用</span><br>  <span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建/添加用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function">(<span class="hljs-params">show, id = <span class="hljs-literal">undefined</span></span>) =&gt;</span> &#123;<br>    setEditId(id)<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;商品图&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;cover_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Image<br>          width=&#123;<span class="hljs-number">64</span>&#125;<br>          src=&#123;record.cover_url&#125;<br>          placeholder=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">preview</span>=<span class="hljs-string">&#123;false&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.cover_url&#125;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;200&#125;</span> /&gt;</span></span>&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;标题&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;title&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;价格&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;price&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;库存&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;stock&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;销量&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;sales&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br><br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否上架&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_on&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;已上架&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;未上架&quot;</span><br>          defaultChecked=&#123;record.is_on === <span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>      valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>      valueEnum: &#123;<br>        <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已上架&#x27;</span> &#125;,<br>        <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未上架&#x27;</span> &#125;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否推荐&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_recommend&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;已推荐&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;未推荐&quot;</span><br>          defaultChecked=&#123;record.is_recommend === <span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>      valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>      valueEnum: &#123;<br>        <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已推荐&#x27;</span> &#125;,<br>        <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未推荐&#x27;</span> &#125;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModal(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br><br>      &#123;<br>        <span class="hljs-comment">// 模态框隐藏的时候，不挂载组件，显示的时候挂载组件，这是为了触发子组件的生命周期</span><br>        !isModalVisible ? (<br>          <span class="hljs-string">&#x27;&#x27;</span><br>        ) : (<br>          &lt;CreateOrEdit<br>            isModalVisible=&#123;isModalVisible&#125;<br>            isShowModal=&#123;isShowModal&#125;<br>            actionRef=&#123;actionRef&#125;<br>            editId=&#123;editId&#125;<br>          /&gt;<br>        )<br>      &#125;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h2 id="6-2-是否上架-推荐商品"><a href="#6-2-是否上架-推荐商品" class="headerlink" title="6.2 是否上架/推荐商品"></a>6.2 是否上架/推荐商品</h2><h3 id="6-2-1-商品上架和下架接口文档"><a href="#6-2-1-商品上架和下架接口文档" class="headerlink" title="6.2.1 商品上架和下架接口文档"></a>6.2.1 商品上架和下架接口文档</h3><h5 id="接口描述-10"><a href="#接口描述-10" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>上架和下架</li></ul><h5 id="请求-URL-10"><a href="#请求-URL-10" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods/{good}/on</li></ul><h5 id="请求方式-10"><a href="#请求方式-10" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PATCH</li></ul><h5 id="请求头部-7"><a href="#请求头部-7" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数-2"><a href="#RESET-参数-2" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>good</td><td>是</td><td>int</td><td>商品 id</td></tr></tbody></table><h5 id="返回示例-11"><a href="#返回示例-11" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 请求成功</li></ul><h3 id="6-2-2-商品推荐和不推荐接口文档"><a href="#6-2-2-商品推荐和不推荐接口文档" class="headerlink" title="6.2.2 商品推荐和不推荐接口文档"></a>6.2.2 商品推荐和不推荐接口文档</h3><h5 id="接口描述-11"><a href="#接口描述-11" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>推荐和不推荐</li></ul><h5 id="请求-URL-11"><a href="#请求-URL-11" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods/{good}/recommend</li></ul><h5 id="请求方式-11"><a href="#请求方式-11" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PATCH</li></ul><h5 id="请求头部-8"><a href="#请求头部-8" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数-3"><a href="#RESET-参数-3" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>good</td><td>是</td><td>int</td><td>商品 id</td></tr></tbody></table><h5 id="返回示例-12"><a href="#返回示例-12" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 请求成功</li></ul><h3 id="6-2-3-添加是否上架-推荐商品接口"><a href="#6-2-3-添加是否上架-推荐商品接口" class="headerlink" title="6.2.3 添加是否上架/推荐商品接口"></a>6.2.3 添加是否上架/推荐商品接口</h3><p>在\src\services\goods.js 中添加是否上架/推荐商品接口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架和下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isOn</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/on`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 推荐和不推荐商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRecommend</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/recommend`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-2-4-添加是否上架-推荐商品方法"><a href="#6-2-4-添加是否上架-推荐商品方法" class="headerlink" title="6.2.4 添加是否上架/推荐商品方法"></a>6.2.4 添加是否上架/推荐商品方法</h3><p>在\src\pages\Goods\index.jsx 中,先导入接口<code>import &#123; getGoods, isOn, isRecommend &#125; from &#39;@/services/goods&#39;;</code><br>修改并添加是否上架/推荐商品方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Image, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getGoods, isOn, isRecommend &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/goods&#x27;</span><br><span class="hljs-keyword">import</span> CreateOrEdit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/CreateOrEdit&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取商品列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getGoods(params)<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 是否上架商品</span><br>  <span class="hljs-keyword">const</span> heandleIsOn = <span class="hljs-keyword">async</span> goodsId =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> isOn(goodsId)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 是否推荐商品</span><br>  <span class="hljs-keyword">const</span> heandleIsRecommend = <span class="hljs-keyword">async</span> goodsId =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> isRecommend(goodsId)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建/添加用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function">(<span class="hljs-params">show, id = <span class="hljs-literal">undefined</span></span>) =&gt;</span> &#123;<br>    setEditId(id)<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;商品图&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;cover_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Image<br>          width=&#123;<span class="hljs-number">64</span>&#125;<br>          src=&#123;record.cover_url&#125;<br>          placeholder=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">preview</span>=<span class="hljs-string">&#123;false&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.cover_url&#125;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;200&#125;</span> /&gt;</span></span>&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;标题&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;title&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;价格&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;price&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;库存&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;stock&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;销量&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;sales&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br><br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否上架&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_on&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;已上架&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;未上架&quot;</span><br>          defaultChecked=&#123;record.is_on === <span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleIsOn(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>      valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>      valueEnum: &#123;<br>        <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已上架&#x27;</span> &#125;,<br>        <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未上架&#x27;</span> &#125;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否推荐&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_recommend&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;已推荐&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;未推荐&quot;</span><br>          defaultChecked=&#123;record.is_recommend === <span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleIsRecommend(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>      valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>      valueEnum: &#123;<br>        <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已推荐&#x27;</span> &#125;,<br>        <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未推荐&#x27;</span> &#125;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModal(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;商品列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br><br>      &#123;<br>        <span class="hljs-comment">// 模态框隐藏的时候，不挂载组件，显示的时候挂载组件，这是为了触发子组件的生命周期</span><br>        !isModalVisible ? (<br>          <span class="hljs-string">&#x27;&#x27;</span><br>        ) : (<br>          &lt;CreateOrEdit<br>            isModalVisible=&#123;isModalVisible&#125;<br>            isShowModal=&#123;isShowModal&#125;<br>            actionRef=&#123;actionRef&#125;<br>            editId=&#123;editId&#125;<br>          /&gt;<br>        )<br>      &#125;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h2 id="6-3-新建商品页面"><a href="#6-3-新建商品页面" class="headerlink" title="6.3 新建商品页面"></a>6.3 新建商品页面</h2><h3 id="6-3-1-添加商品接口文档"><a href="#6-3-1-添加商品接口文档" class="headerlink" title="6.3.1 添加商品接口文档"></a>6.3.1 添加商品接口文档</h3><h5 id="接口描述-12"><a href="#接口描述-12" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>添加商品</li></ul><h5 id="请求-URL-12"><a href="#请求-URL-12" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods</li></ul><h5 id="请求方式-12"><a href="#请求方式-12" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="请求头部-9"><a href="#请求头部-9" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Body-请求参数-3"><a href="#Body-请求参数-3" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>pics</td><td>否</td><td>array</td><td>小图集</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr></tbody></table><h5 id="返回示例-13"><a href="#返回示例-13" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 201 创建成功</li><li>状态码 400 请求错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;分类不存在&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br><br>&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;分类被禁用&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br><br>&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;只能向2级分类添加商品&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br><br>状态码 <span class="hljs-number">422</span> 参数错误<br>&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>: [<br>            <span class="hljs-string">&quot;标题 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;category_id&quot;</span>: [<br>            <span class="hljs-string">&quot;category id 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;description&quot;</span>: [<br>            <span class="hljs-string">&quot;描述 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;price&quot;</span>: [<br>            <span class="hljs-string">&quot;price 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;stock&quot;</span>: [<br>            <span class="hljs-string">&quot;stock 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;cover&quot;</span>: [<br>            <span class="hljs-string">&quot;cover 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;pics&quot;</span>: [<br>            <span class="hljs-string">&quot;pics 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;details&quot;</span>: [<br>            <span class="hljs-string">&quot;details 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-3-2-编辑添加商品页面"><a href="#6-3-2-编辑添加商品页面" class="headerlink" title="6.3.2 编辑添加商品页面"></a>6.3.2 编辑添加商品页面</h3><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，<a href="https://procomponents.ant.design/components/field-set">ProFormFields</a> 表单项 参考文档。<br>只是简单完成添加商品必须的页面</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123;<br>  ProFormText,<br>  ProFormTextArea,<br>  ProFormDigit,<br>  ProFormUploadButton,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormUploadButton<br>              label=<span class="hljs-string">&quot;上传封面图&quot;</span><br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              action=<span class="hljs-string">&quot;upload.do&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;详情&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>            /&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h2 id="6-4-处理商品分类"><a href="#6-4-处理商品分类" class="headerlink" title="6.4 处理商品分类"></a>6.4 处理商品分类</h2><h3 id="6-4-1-商品分类接口文档"><a href="#6-4-1-商品分类接口文档" class="headerlink" title="6.4.1 商品分类接口文档"></a>6.4.1 商品分类接口文档</h3><h5 id="接口描述-13"><a href="#接口描述-13" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>分类列表</li></ul><h5 id="请求-URL-13"><a href="#请求-URL-13" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/category</li></ul><h5 id="请求方式-13"><a href="#请求方式-13" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-10"><a href="#请求头部-10" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Query-请求参数-2"><a href="#Query-请求参数-2" class="headerlink" title="Query 请求参数"></a>Query 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>type</td><td>否</td><td>string</td><td>all 查所有分类，包含禁用的。不传则只返回非禁用的</td></tr></tbody></table><h5 id="返回参数-6"><a href="#返回参数-6" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>主键</td></tr><tr><td>pid</td><td>是</td><td>int</td><td>父级</td></tr><tr><td>name</td><td>是</td><td>string</td><td>名称</td></tr><tr><td>level</td><td>是</td><td>int</td><td>层级</td></tr><tr><td>status</td><td>是</td><td>int</td><td>状态： 0 正常 1 禁用</td></tr><tr><td>children</td><td>否</td><td>array</td><td>子类</td></tr></tbody></table><h5 id="返回示例-14"><a href="#返回示例-14" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">;[<br>  &#123;<br>    id: <span class="hljs-number">1</span>,<br>    pid: <span class="hljs-number">0</span>,<br>    name: <span class="hljs-string">&#x27;电子数码&#x27;</span>,<br>    level: <span class="hljs-number">1</span>,<br>    status: <span class="hljs-number">1</span>,<br>    children: [<br>      &#123;<br>        id: <span class="hljs-number">3</span>,<br>        pid: <span class="hljs-number">1</span>,<br>        name: <span class="hljs-string">&#x27;手机&#x27;</span>,<br>        level: <span class="hljs-number">2</span>,<br>        status: <span class="hljs-number">1</span>,<br>        children: [<br>          &#123;<br>            id: <span class="hljs-number">5</span>,<br>            pid: <span class="hljs-number">3</span>,<br>            name: <span class="hljs-string">&#x27;华为&#x27;</span>,<br>            level: <span class="hljs-number">3</span>,<br>            status: <span class="hljs-number">1</span>,<br>          &#125;,<br>          &#123;<br>            id: <span class="hljs-number">6</span>,<br>            pid: <span class="hljs-number">3</span>,<br>            name: <span class="hljs-string">&#x27;小米&#x27;</span>,<br>            level: <span class="hljs-number">3</span>,<br>            status: <span class="hljs-number">1</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>      &#123;<br>        id: <span class="hljs-number">4</span>,<br>        pid: <span class="hljs-number">1</span>,<br>        name: <span class="hljs-string">&#x27;电脑&#x27;</span>,<br>        level: <span class="hljs-number">2</span>,<br>        status: <span class="hljs-number">1</span>,<br>        children: [<br>          &#123;<br>            id: <span class="hljs-number">7</span>,<br>            pid: <span class="hljs-number">4</span>,<br>            name: <span class="hljs-string">&#x27;戴尔&#x27;</span>,<br>            level: <span class="hljs-number">3</span>,<br>            status: <span class="hljs-number">1</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    id: <span class="hljs-number">2</span>,<br>    pid: <span class="hljs-number">0</span>,<br>    name: <span class="hljs-string">&#x27;服装衣帽&#x27;</span>,<br>    level: <span class="hljs-number">1</span>,<br>    status: <span class="hljs-number">1</span>,<br>    children: [<br>      &#123;<br>        id: <span class="hljs-number">9</span>,<br>        pid: <span class="hljs-number">2</span>,<br>        name: <span class="hljs-string">&#x27;男装&#x27;</span>,<br>        level: <span class="hljs-number">2</span>,<br>        status: <span class="hljs-number">1</span>,<br>        children: [],<br>      &#125;,<br>      &#123;<br>        id: <span class="hljs-number">10</span>,<br>        pid: <span class="hljs-number">2</span>,<br>        name: <span class="hljs-string">&#x27;女装&#x27;</span>,<br>        level: <span class="hljs-number">2</span>,<br>        status: <span class="hljs-number">1</span>,<br>        children: [],<br>      &#125;,<br>    ],<br>  &#125;,<br>]<br></code></pre></div></td></tr></table></figure><h3 id="6-4-2-添加分类列表接口–非禁用的分类"><a href="#6-4-2-添加分类列表接口–非禁用的分类" class="headerlink" title="6.4.2 添加分类列表接口–非禁用的分类"></a>6.4.2 添加分类列表接口–非禁用的分类</h3><p>在 src\services 中新建一个<code>category.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取分类列表-非禁用的分类</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCategory</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/category&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-4-3-添加商品分类Select组件"><a href="#6-4-3-添加商品分类Select组件" class="headerlink" title="6.4.3 添加商品分类Select组件"></a>6.4.3 添加商品分类<code>Select</code>组件</h3><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中<br>设置<code>options</code>为空，储存后端返回的数据 <code>const [options, setOptions] = useState([]);</code><br>在生命周期函数中<code>useEffect</code>请求查询分类数据</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 查询分类数据</span><br>  <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>  <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>  <span class="hljs-comment">// 发送请求，获取用户详情</span><br>  <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>    <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>    setinitialValues(&#123;<br>      name: response.name,<br>      email: response.email,<br>    &#125;)<br>  &#125;<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><p>其中需要加 <a href="https://ant.design/components/cascader-cn/#components-cascader-demo-lazy">Cascader</a> 级联选择，还要加<code>ProForm.Item</code>标签包裹<code>Cascader</code>，设置分类的<code>name</code>和<code>rules</code>等，<a href="https://procomponents.ant.design/components/field-set/#proformfields-%E8%A1%A8%E5%8D%95%E9%A1%B9">ProFormFields</a>表单项参考文档。<br>同时，后端返回来的字段和<code>Cascader</code>官方的文档字段不一样时，查看 API 文档<code>fieldNames</code>属性可以自定义字段</p><table><thead><tr><th><strong>fieldNames</strong></th><th>自定义 options 中 label name children 的字段</th><th>object</th><th>{ label: label, value: value, children: children }</th></tr></thead></table><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item name=<span class="hljs-string">&quot;category_id&quot;</span> label=<span class="hljs-string">&quot;分类&quot;</span> rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>  &lt;Cascader<br>    fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>    options=&#123;options&#125;<br>    placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>  /&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><p>然后导入<code>import &#123; getCategory &#125; from &#39;@/services/category&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123;<br>  ProFormText,<br>  ProFormTextArea,<br>  ProFormDigit,<br>  ProFormUploadButton,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormUploadButton<br>              label=<span class="hljs-string">&quot;上传封面图&quot;</span><br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              action=<span class="hljs-string">&quot;upload.do&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;详情&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>            /&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h2 id="6-5-封装-OSS-上传"><a href="#6-5-封装-OSS-上传" class="headerlink" title="6.5 封装 OSS 上传"></a>6.5 封装 OSS 上传</h2><h3 id="6-5-1-获取阿里云-OSS-Token-接口文档"><a href="#6-5-1-获取阿里云-OSS-Token-接口文档" class="headerlink" title="6.5.1 获取阿里云 OSS Token 接口文档"></a>6.5.1 获取阿里云 OSS Token 接口文档</h3><h5 id="接口描述-14"><a href="#接口描述-14" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>获取阿里云 OSS Token，用于前端直传文件使用</li></ul><h5 id="请求-URL-14"><a href="#请求-URL-14" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/auth/oss/token</li></ul><h5 id="请求方式-14"><a href="#请求方式-14" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-11"><a href="#请求头部-11" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="返回参数-7"><a href="#返回参数-7" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>accessid</td><td>是</td><td>string</td><td>accessid</td></tr><tr><td>host</td><td>是</td><td>string</td><td>host</td></tr><tr><td>policy</td><td>是</td><td>string</td><td>policy</td></tr><tr><td>signature</td><td>是</td><td>string</td><td>signature</td></tr><tr><td>expire</td><td>是</td><td>int</td><td>expire</td></tr><tr><td>callback</td><td>是</td><td>string</td><td>callback</td></tr><tr><td>callback-var</td><td>是</td><td>string</td><td>callback-var</td></tr><tr><td>dir</td><td>是</td><td>string</td><td>dir</td></tr></tbody></table><h5 id="返回示例-15"><a href="#返回示例-15" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;accessid&quot;</span>: <span class="hljs-string">&quot;C4jYcNjUFLSKHToP&quot;</span>,<br>    <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;http:/laravel_shop_api.luwnto.oss-cn-beijing.aliyuncs.com/&quot;</span>,<br>    <span class="hljs-string">&quot;policy&quot;</span>: <span class="hljs-string">&quot;eyJleHBpcmF0aW9uIjoiMjAyMC0xMi0yM1QwMToyMzo1OFoiLCJjb25kaXRpb25zIjpbWyJjb250ZW50LWxlbmd0aC1yYW5nZSIsMCwxMDQ4NTc2MDAwXSxbInN0YXJ0cy13aXRoIiwiJGtleSIsIiJdXX0=&quot;</span>,<br>    <span class="hljs-string">&quot;signature&quot;</span>: <span class="hljs-string">&quot;Vx3jPcUQXVQ7rKSJvYRHyYCS5pA=&quot;</span>,<br>    <span class="hljs-string">&quot;expire&quot;</span>: <span class="hljs-number">1608686638</span>,<br>    <span class="hljs-string">&quot;callback&quot;</span>: <span class="hljs-string">&quot;eyJjYWxsYmFja1VybCI6IiIsImNhbGxiYWNrQm9keSI6ImJ1Y2tldD0ke2J1Y2tldH0mZXRhZz0ke2V0YWd9JmZpbGVuYW1lPSR7b2JqZWN0fSZzaXplPSR7c2l6ZX0mbWltZVR5cGU9JHttaW1lVHlwZX0maGVpZ2h0PSR7aW1hZ2VJbmZvLmhlaWdodH0md2lkdGg9JHtpbWFnZUluZm8ud2lkdGh9JmZvcm1hdD0ke2ltYWdlSW5mby5mb3JtYXR9IiwiY2FsbGJhY2tCb2R5VHlwZSI6ImFwcGxpY2F0aW9uXC94LXd3dy1mb3JtLXVybGVuY29kZWQifQ==&quot;</span>,<br>    <span class="hljs-string">&quot;callback-var&quot;</span>: [],<br>    <span class="hljs-string">&quot;dir&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-5-2-添加阿里云-OSS-Token-接口"><a href="#6-5-2-添加阿里云-OSS-Token-接口" class="headerlink" title="6.5.2 添加阿里云 OSS Token 接口"></a>6.5.2 添加阿里云 OSS Token 接口</h3><p>在\src\services 文件夹中新建一个<code>commom.js</code>​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取oss上传策略和签名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ossConfig</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/auth/oss/token&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-5-3-初步封装公共AliyunOSSUpload组件"><a href="#6-5-3-初步封装公共AliyunOSSUpload组件" class="headerlink" title="6.5.3 初步封装公共AliyunOSSUpload组件"></a>6.5.3 初步封装公共<code>AliyunOSSUpload</code>组件</h3><p>在 src\components 中新建<code>AliyunOSSUpload</code>文件夹<code>index.jsx</code>文件<br><a href="https://ant.design/components/upload-cn/#components-upload-demo-upload-with-aliyun-oss">Upload</a>参考文档</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Form, Upload, message, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; UploadOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ossConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/commom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AliyunOSSUpload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    OSSData: &#123;&#125;,<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>  &#125;<br><br>  <span class="hljs-comment">// 初始化获取oss上传签名</span><br>  init = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> OSSData = <span class="hljs-keyword">await</span> ossConfig()<br><br>      <span class="hljs-built_in">this</span>.setState(&#123;<br>        OSSData,<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      message.error(error)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 文件上传过程中触发的回调函数，直到上传完成</span><br>  onChange = <span class="hljs-function">(<span class="hljs-params">&#123; fileList &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; onChange &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Aliyun OSS:&#x27;</span>, fileList)<br>    <span class="hljs-keyword">if</span> (onChange) &#123;<br>      onChange([...fileList])<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 额外的上传参数</span><br>  getExtraData = <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      key: file.url,<br>      OSSAccessKeyId: OSSData.accessid, <span class="hljs-comment">// 注意查看后端返回的字段是否和官方的OSSData一致</span><br>      policy: OSSData.policy,<br>      Signature: OSSData.signature,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 选择文件之后，上传文件之前，执行的回调</span><br>  beforeUpload = <span class="hljs-keyword">async</span> file =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> expire = OSSData.expire * <span class="hljs-number">1000</span><br><br>    <span class="hljs-keyword">if</span> (expire &lt; <span class="hljs-built_in">Date</span>.now()) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> suffix = file.name.slice(file.name.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>))<br>    <span class="hljs-keyword">const</span> filename = <span class="hljs-built_in">Date</span>.now() + suffix<br>    file.url = OSSData.dir + filename<br><br>    <span class="hljs-keyword">return</span> file<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; value &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">const</span> props = &#123;<br>      name: <span class="hljs-string">&#x27;file&#x27;</span>,<br>      fileList: value,<br>      action: <span class="hljs-built_in">this</span>.state.OSSData.host,<br>      onChange: <span class="hljs-built_in">this</span>.onChange,<br>      <span class="hljs-comment">// onRemove: this.onRemove,</span><br>      data: <span class="hljs-built_in">this</span>.getExtraData,<br>      beforeUpload: <span class="hljs-built_in">this</span>.beforeUpload,<br>      listType: <span class="hljs-string">&#x27;picture&#x27;</span>,<br>      maxCount: <span class="hljs-number">1</span>,<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;Upload &#123;...props&#125;&gt;<br>        &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;Click to Upload&lt;/Button&gt;<br>      &lt;/Upload&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中注意额外上传的参数，后端返回的字段是否和阿里云 OSS 字段一致，</p><h3 id="6-5-4-在新建商品模态框中使用AliyunOSSUpload组件"><a href="#6-5-4-在新建商品模态框中使用AliyunOSSUpload组件" class="headerlink" title="6.5.4 在新建商品模态框中使用AliyunOSSUpload组件"></a>6.5.4 在新建商品模态框中使用<code>AliyunOSSUpload</code>组件</h3><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，先导入<code>AliyunOSSUpload</code>，最后在上传封面图标签后添加<code>&lt;AliyunOSSUpload /&gt;</code>标签</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123;<br>  ProFormText,<br>  ProFormTextArea,<br>  ProFormDigit,<br>  ProFormUploadButton,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormUploadButton<br>              label=<span class="hljs-string">&quot;上传封面图&quot;</span><br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              action=<span class="hljs-string">&quot;upload.do&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>            /&gt;<br><br>            &lt;AliyunOSSUpload /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;详情&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>            /&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h3 id="6-5-5-简单封装优化AliyunOSSUpload组件"><a href="#6-5-5-简单封装优化AliyunOSSUpload组件" class="headerlink" title="6.5.5 简单封装优化AliyunOSSUpload组件"></a>6.5.5 简单封装优化<code>AliyunOSSUpload</code>组件</h3><h4 id="1-将原来上传图片的ProFormUploadButton组件替换成AliyunOSSUpload组件"><a href="#1-将原来上传图片的ProFormUploadButton组件替换成AliyunOSSUpload组件" class="headerlink" title="1.将原来上传图片的ProFormUploadButton组件替换成AliyunOSSUpload组件"></a>1.将原来上传图片的<code>ProFormUploadButton</code>组件替换成<code>AliyunOSSUpload</code>组件</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，将原来上传图片的<code>ProFormUploadButton</code>组件替换为<code>AliyunOSSUpload</code>组件，添加验证规则并写成双标签，将在其中显示的内容写入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;cover&quot;</span><br>  label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>  &lt;AliyunOSSUpload&gt;点击上传商品主图&lt;/AliyunOSSUpload&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><h4 id="2-修改OSSData文件上传路径，简单封装优化AliyunOSSUpload组件"><a href="#2-修改OSSData文件上传路径，简单封装优化AliyunOSSUpload组件" class="headerlink" title="2.修改OSSData文件上传路径，简单封装优化AliyunOSSUpload组件"></a>2.修改<code>OSSData</code>文件上传路径，简单封装优化<code>AliyunOSSUpload</code>组件</h4><p>在\src\components\AliyunOSSUpload\index.jsx 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Upload, message, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; UploadOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ossConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/commom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AliyunOSSUpload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    OSSData: &#123;&#125;,<br>  &#125;<br><br>  <span class="hljs-comment">// 组件挂载完成后，进行初始化，获取oss配置</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>  &#125;<br><br>  <span class="hljs-comment">// 初始化获取oss上传签名</span><br>  init = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> OSSData = <span class="hljs-keyword">await</span> ossConfig()<br><br>      <span class="hljs-built_in">this</span>.setState(&#123;<br>        OSSData,<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      message.error(error)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 文件上传过程中触发的回调函数，直到上传完成</span><br>  onChange = <span class="hljs-function">(<span class="hljs-params">&#123; file &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (file.status === <span class="hljs-string">&#x27;done&#x27;</span>) message.success(<span class="hljs-string">&#x27;上传成功！&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// 额外的上传参数</span><br>  getExtraData = <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      key: file.key,<br>      OSSAccessKeyId: OSSData.accessid, <span class="hljs-comment">// 注意查看后端返回的字段是否和官方的OSSData一致</span><br>      policy: OSSData.policy,<br>      Signature: OSSData.signature,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 选择文件之后，上传文件之前，执行的回调</span><br>  beforeUpload = <span class="hljs-keyword">async</span> file =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> expire = OSSData.expire * <span class="hljs-number">1000</span><br><br>    <span class="hljs-comment">// 如果签名过期了就重新获取</span><br>    <span class="hljs-keyword">if</span> (expire &lt; <span class="hljs-built_in">Date</span>.now()) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> dir = <span class="hljs-string">&#x27;react/&#x27;</span> <span class="hljs-comment">// 定义上传的目录</span><br><br>    <span class="hljs-keyword">const</span> suffix = file.name.slice(file.name.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>))<br>    <span class="hljs-keyword">const</span> filename = OSSData.dir + dir + <span class="hljs-built_in">Date</span>.now() + suffix<br>    file.key = OSSData.dir + dir + filename <span class="hljs-comment">// 在getExtraData 函数中会用到，在云存储的文件的 key</span><br>    file.url = OSSData.host + OSSData.dir + dir + filename <span class="hljs-comment">// 上传完成后，用于显示内容</span><br><br>    <span class="hljs-keyword">return</span> file<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; value &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">const</span> props = &#123;<br>      name: <span class="hljs-string">&#x27;file&#x27;</span>,<br>      fileList: value,<br>      action: <span class="hljs-built_in">this</span>.state.OSSData.host,<br>      onChange: <span class="hljs-built_in">this</span>.onChange,<br>      <span class="hljs-comment">// onRemove: this.onRemove,</span><br>      data: <span class="hljs-built_in">this</span>.getExtraData,<br>      beforeUpload: <span class="hljs-built_in">this</span>.beforeUpload,<br>      listType: <span class="hljs-string">&#x27;picture&#x27;</span>,<br>      maxCount: <span class="hljs-number">1</span>,<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>      &lt;Upload &#123;...props&#125;&gt;<br>        &#123;<span class="hljs-comment">/* 将Button标签放在在AliyunOSSUpload组件里写，这里直接使用&#123;this.props.children&#125;，会报错 */</span>&#125;<br>        &#123;<span class="hljs-comment">/* 这里的解决方案是，Button标签封装在AliyunOSSUpload组件内部，其他函数使用AliyunOSSUpload组件时，只需要将AliyunOSSUpload写成双标签，里边写显示的文字 */</span>&#125;<br>        &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;&#123;<span class="hljs-built_in">this</span>.props.children&#125;&lt;/Button&gt;<br>      &lt;/Upload&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>修复上传主图，显示默认文字 bug</strong><br>其中<code>Upload</code>内部直接写<code>&#123;this.props.children&#125;</code>获取父组件的内容，无法渲染会报错，最后只需要在父组件中将<code>AliyunOSSUpload</code>写成双标签，里边写显示的文字。将<code>Button</code>封装在<code>AliyunOSSUpload</code>组件内部，自取显示内容即可解决</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Upload &#123;...props&#125;&gt;<br>  &#123;<span class="hljs-comment">/* 将Button标签放在在AliyunOSSUpload组件里写，这里直接使用&#123;this.props.children&#125;，会报错 */</span>&#125;<br>  &#123;<span class="hljs-comment">/* 这里的解决方案是，Button标签封装在AliyunOSSUpload组件内部，其他函数使用AliyunOSSUpload组件时，只需要将AliyunOSSUpload写成双标签，里边写显示的文字 */</span>&#125;<br>  &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;&#123;<span class="hljs-built_in">this</span>.props.children&#125;&lt;/Button&gt;<br>&lt;/Upload&gt;<br></code></pre></div></td></tr></table></figure><p>后期富文本编辑器将<strong>显示默认文字 bug</strong>解决了，可以将<code>button</code>封装在<code>AliyunOSSUpload</code></p><h4 id="3-限制上传文件类型为图片"><a href="#3-限制上传文件类型为图片" class="headerlink" title="3.限制上传文件类型为图片"></a>3.限制上传文件类型为图片</h4><p>在\src\components\AliyunOSSUpload\index.jsx 中，解构<code>accept</code>，并且设置<code>accept</code>的值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; value, accept &#125; = <span class="hljs-built_in">this</span>.props;<br>  <span class="hljs-keyword">const</span> props = &#123;<br>    accept: accept || <span class="hljs-string">&#x27;&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;file&#x27;</span>,<br>    fileList: value,<br>    action: <span class="hljs-built_in">this</span>.state.OSSData.host,<br>    onChange: <span class="hljs-built_in">this</span>.onChange,<br>    <span class="hljs-comment">// onRemove: this.onRemove,</span><br>    data: <span class="hljs-built_in">this</span>.getExtraData,<br>    beforeUpload: <span class="hljs-built_in">this</span>.beforeUpload,<br>    listType: <span class="hljs-string">&#x27;picture&#x27;</span>,<br>    maxCount: <span class="hljs-number">1</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Upload &#123;...props&#125;&gt;<br>      &#123;<span class="hljs-comment">/* 将Button标签放在在AliyunOSSUpload组件里写，这里直接使用&#123;this.props.children&#125;，会报错 */</span>&#125;<br>      &#123;<span class="hljs-comment">/* 这里的解决方案是，Button标签封装在AliyunOSSUpload组件内部，其他函数使用AliyunOSSUpload组件时，只需要将AliyunOSSUpload写成双标签，里边写显示的文字 */</span>&#125;<br>      &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;&#123;<span class="hljs-built_in">this</span>.props.children&#125;&lt;/Button&gt;<br>    &lt;/Upload&gt;<br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，<code>AliyunOSSUpload</code>标签中设置<code>accept</code>属性，<br><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept">accept</a>参考文档，<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept">详情</a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;cover&quot;</span><br>  label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>  &lt;AliyunOSSUpload accept=<span class="hljs-string">&quot;image/*&quot;</span>&gt;点击上传商品主图&lt;/AliyunOSSUpload&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><p>但是其中也有一个 bug，<code>ProForm.Item</code>组件和我们封装的<code>AliyunOSSUpload</code>组件(或者第三方组件)并不关联，<code>ProForm.Item</code>当进行表单验证的时候，并没有包括<code>AliyunOSSUpload</code>。所以当文件上传成功之后，把文件的 key，设置成表单某个字段的值。</p><h4 id="4-关联ProForm-Item和AliyunOSSUpload，完成图片验证"><a href="#4-关联ProForm-Item和AliyunOSSUpload，完成图片验证" class="headerlink" title="4.关联ProForm.Item和AliyunOSSUpload，完成图片验证"></a>4.关联<code>ProForm.Item</code>和<code>AliyunOSSUpload</code>，完成图片验证</h4><h4 id="使用通用方式完成文件验证以及解除组件受控"><a href="#使用通用方式完成文件验证以及解除组件受控" class="headerlink" title="使用通用方式完成文件验证以及解除组件受控"></a>使用通用方式完成文件验证以及解除组件受控</h4><p>通过 <a href="https://ant.design/components/form-cn/#components-form-demo-control-hooks">Form.useForm</a> 对表单数据域进行交互。<br>在\src\pages\Goods\components\CreateOrEdit.jsx 中，为<code>ProForm</code>标签添加<code>form=&#123;formObj&#125;</code>控制实例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm<br>        form=&#123;formObj&#125;<br>        initialValues=&#123;initialValues&#125;<br>        onFinish=&#123;<span class="hljs-function">(<span class="hljs-params">values</span>) =&gt;</span> &#123;<br>          handleSubmit(values);<br>        &#125;&#125;<br>      &gt;<br></code></pre></div></td></tr></table></figure><p>定义<code>Form</code>实例和<code>setCoverKey</code>方法，用于当文件上传之后设置<code>cover</code>字段的<code>value</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义Form实例，用来操作表单</span><br><span class="hljs-keyword">const</span> [formObj] = ProForm.useForm()<br><br><span class="hljs-comment">// 文件上传成功后，设置cover字段的value</span><br><span class="hljs-keyword">const</span> setCoverKey = <span class="hljs-function"><span class="hljs-params">fileKey</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">cover</span>: fileKey &#125;)<br></code></pre></div></td></tr></table></figure><p>在<code>AliyunOSSUpload</code>组件中传入<code>setCoverKey</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span>&gt;<br>  点击上传商品主图<br>&lt;/AliyunOSSUpload&gt;<br></code></pre></div></td></tr></table></figure><p>在\src\components\AliyunOSSUpload\index.jsx 中设置上传文件的回调函数，将文件的<code>key</code>设置成文件某个字段的值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 文件上传过程中触发的回调函数，直到上传完成</span><br>onChange = <span class="hljs-function">(<span class="hljs-params">&#123; file &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (file.status === <span class="hljs-string">&#x27;done&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 上传成功之后，把文件的key，设置成表单某个字段的值</span><br>    <span class="hljs-built_in">this</span>.props.setCoverKey(file.key)<br>    message.success(<span class="hljs-string">&#x27;上传成功&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当点击上传文件时会报错<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622121030697-e1898d39-f9a8-4f0f-9b23-5f055fe79f41.png#clientId=u1314c606-21ea-4&from=paste&height=855&id=ued8660b4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=855&originWidth=1151&originalType=binary&size=76930&status=done&style=none&taskId=ube7311d5-7a2f-4889-95ac-3428b202387&width=1151" alt="image.png"><br>原因是当我们文件上传过程中触发的回调函数时通过 <code> // 文件上传成功后，设置cover字段的value const setCoverKey = (fileKey) =&gt; formObj.setFieldsValue(&#123; cover: fileKey &#125;);</code>设置了<code>ProForm.Item</code>中<code>name=&quot;cover&quot;</code>的值，<code>ProForm.Item</code>组件和<code>AliyunOSSUpload</code>组件形成了受控组件，<code>value</code>值被设置了，但是上传过程中触发的回调函数检测到文件还没有，拿不到文件就会报错。<br>查看<a href="https://ant.design/components/form-cn/#Form.Item">Form.Item</a>的 api 就有介绍<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622123548883-f5da8b27-70a4-455b-b39e-ac08b831ea6e.png#clientId=u1314c606-21ea-4&from=paste&height=343&id=uc94ee111&margin=%5Bobject%20Object%5D&name=image.png&originHeight=343&originWidth=1206&originalType=binary&size=61746&status=done&style=none&taskId=u0c1c7d0a-41dc-4b6d-b04f-3d07f9e95ad&width=1206" alt="image.png"><br><strong>解决办法</strong>：用<code>div</code>标签将<code>AliyunOSSUpload</code>组件包裹，<code>div</code>成为<code>ProForm.Item</code>的第一个子组件，他们两个形成受控组件，<code>div</code>受它控制。<code>AliyunOSSUpload</code>组件可以验证但是不受控，就解决了这个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123;<br>  ProFormText,<br>  ProFormTextArea,<br>  ProFormDigit,<br>  ProFormUploadButton,<br>  UploadOutlined,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 定义Form实例，用来操作表单</span><br>  <span class="hljs-keyword">const</span> [formObj] = ProForm.useForm()<br><br>  <span class="hljs-comment">// 文件上传成功后，设置cover字段的value</span><br>  <span class="hljs-keyword">const</span> setCoverKey = <span class="hljs-function"><span class="hljs-params">fileKey</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">cover</span>: fileKey &#125;)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            form=&#123;formObj&#125;<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br><br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>              &lt;div&gt;<br>                &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span>&gt;<br>                  点击上传商品主图<br>                &lt;/AliyunOSSUpload&gt;<br>              &lt;/div&gt;<br>            &lt;/ProForm.Item&gt;<br><br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;详情&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>            /&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h2 id="6-6-使用富文本编辑器"><a href="#6-6-使用富文本编辑器" class="headerlink" title="6.6 使用富文本编辑器"></a>6.6 使用富文本编辑器</h2><h3 id="6-6-1-安装富文本编辑器"><a href="#6-6-1-安装富文本编辑器" class="headerlink" title="6.6.1 安装富文本编辑器"></a>6.6.1 安装富文本编辑器</h3><p>富文本编辑器文档在<a href="https://ant.design/index-cn">antd</a>官网=&gt;组件=&gt;社区精选组件可以找到<br>​</p><p>我们选择的是<a href="https://github.com/margox/braft-editor">braft-editor</a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn add braft-editor<br></code></pre></div></td></tr></table></figure><h3 id="6-6-2-封装富文本编辑器"><a href="#6-6-2-封装富文本编辑器" class="headerlink" title="6.6.2 封装富文本编辑器"></a>6.6.2 封装富文本编辑器</h3><h4 id="1-简单封装文本编辑器"><a href="#1-简单封装文本编辑器" class="headerlink" title="1.简单封装文本编辑器"></a>1.简单封装文本编辑器</h4><p>在\src\components 文件夹中，新建<code>Editor</code>文件夹，并在<code>Editor</code>下新建 i<code>ndex.jsx</code>和<code>index.less</code>文件<br>在\src\components\Editor\index.less 中设置基本样式</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.my-component &#123;<br>  border: 1px solid #d1d1d1;<br>  border-radius: 5px;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>参考<a href="https://www.yuque.com/braft-editor/be/lzwpnr">braft-editor</a>官方手册将<code>EditorDemo</code>拷贝，将不用的暂时注释掉，并引入样式<code>import &#39;./index.less&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// 引入编辑器组件</span><br><span class="hljs-keyword">import</span> BraftEditor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-editor&#x27;</span><br><span class="hljs-comment">// 引入编辑器样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EditorDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-comment">// 创建一个空的editorState作为初始值</span><br>    editorState: BraftEditor.createEditorState(<span class="hljs-literal">null</span>),<br>  &#125;<br><br>  <span class="hljs-comment">// async componentDidMount() &#123;</span><br>  <span class="hljs-comment">//   // 假设此处从服务端获取html格式的编辑器内容</span><br>  <span class="hljs-comment">//   const htmlContent = await fetchEditorContent();</span><br>  <span class="hljs-comment">//   // 使用BraftEditor.createEditorState将html字符串转换为编辑器需要的editorStat</span><br>  <span class="hljs-comment">//   this.setState(&#123;</span><br>  <span class="hljs-comment">//     editorState: BraftEditor.createEditorState(htmlContent),</span><br>  <span class="hljs-comment">//   &#125;);</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-comment">// submitContent = async () =&gt; &#123;</span><br>  <span class="hljs-comment">//   // 在编辑器获得焦点时按下ctrl+s会执行此方法</span><br>  <span class="hljs-comment">//   // 编辑器内容提交到服务端之前，可直接调用editorState.toHTML()来获取HTML格式的内容</span><br>  <span class="hljs-comment">//   const htmlContent = this.state.editorState.toHTML();</span><br>  <span class="hljs-comment">//   const result = await saveEditorContent(htmlContent);</span><br>  <span class="hljs-comment">// &#125;;</span><br><br>  handleEditorChange = <span class="hljs-function"><span class="hljs-params">editorState</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123; editorState &#125;)<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; editorState &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&quot;my-component&quot;</span>&gt;<br>        &lt;BraftEditor<br>          value=&#123;editorState&#125;<br>          onChange=&#123;<span class="hljs-built_in">this</span>.handleEditorChange&#125;<br>          <span class="hljs-comment">// onSave=&#123;this.submitContent&#125;</span><br>        /&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-使用富文本编辑器"><a href="#2-使用富文本编辑器" class="headerlink" title="2.使用富文本编辑器"></a>2.使用富文本编辑器</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中引入<code>import Editor from &#39;@/components/Editor&#39;;</code><br>将原来商品详情<code>ProFormTextArea</code>组件的换成<code>ProForm.Item</code>组件并使用 <code>&lt;Editor /&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;details&quot;</span><br>  label=<span class="hljs-string">&quot;商品详情&quot;</span><br>  placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;&gt;<br>  &lt;Editor /&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><h4 id="3-处理富文本编辑器表单验证"><a href="#3-处理富文本编辑器表单验证" class="headerlink" title="3.处理富文本编辑器表单验证"></a>3.处理富文本编辑器表单验证</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，给<code>Editor</code>传入一个设置<code>details</code>字段的<code>value</code>的方法<br>将富文本输入的内容设置成<code>details</code>字段的<code>value</code>，并添加这个方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 文件上传成功后，设置details字段的value</span><br><span class="hljs-keyword">const</span> setDetails = <span class="hljs-function"><span class="hljs-params">content</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">details</span>: content &#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">    &lt;ProForm.Item<br>      name=<span class="hljs-string">&quot;details&quot;</span><br>      label=<span class="hljs-string">&quot;商品详情&quot;</span><br>      rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>    &gt;<br>      &lt;Editor setDetails=&#123;setDetails&#125; /&gt;<br>    &lt;/ProForm.Item&gt;<br>  &lt;/ProForm&gt;<br>)<br></code></pre></div></td></tr></table></figure><p>在\src\components\Editor\index.jsx 中，接调用 editorState.toHTML()来获取 HTML 格式的内容，调用父组件的函数，将编辑器输入的内容传递回去</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">handleEditorChange = <span class="hljs-function"><span class="hljs-params">editorState</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 更新编辑器的状态</span><br>  <span class="hljs-built_in">this</span>.setState(&#123; editorState &#125;)<br>  <span class="hljs-comment">// 要判断输入的内容，如果有内容设置输入的内容；如果没有内容设置成空字符串</span><br>  <span class="hljs-comment">// 为什么要这样判断，因为即使是空内容editorState.toHTML()也是一对空标签，不能直接给表单使用</span><br>  <span class="hljs-keyword">if</span> (!editorState.isEmpty()) &#123;<br>    <span class="hljs-comment">// 可直接调用editorState.toHTML()来获取HTML格式的内容</span><br>    <span class="hljs-keyword">const</span> content = editorState.toHTML()<br>    <span class="hljs-comment">// 调用父组件的函数，将编辑器输入的内容传递回去</span><br>    <span class="hljs-built_in">this</span>.props.setDetails(content)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">this</span>.props.setDetails(<span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中当富文本获取到焦点时，并没有写入任何内容，但是<code>editorState.toHTML()</code>也是一对空标签<code>&lt;p&gt;&lt;/p&gt;</code>，不能直接给表单使用<br>调用<code>editorState.isEmpty()</code>会判断是否为空，没有写入任何内容会返回 true，并设置成空字符串<br>​</p><h3 id="6-6-3-富文本编辑器集成阿里-OSS-上传"><a href="#6-6-3-富文本编辑器集成阿里-OSS-上传" class="headerlink" title="6.6.3 富文本编辑器集成阿里 OSS 上传"></a>6.6.3 富文本编辑器集成阿里 OSS 上传</h3><h4 id="1-自定义控件–插入图片"><a href="#1-自定义控件–插入图片" class="headerlink" title="1.自定义控件–插入图片"></a>1.自定义控件–插入图片</h4><p>集成<a href="https://braft.margox.cn/demos/antd-upload">Ant Design</a>上传组件<br>在\src\components\Editor\index.jsx 中，引入自定义控件–插入图片的例子，适当修改。<br>在<code>AliyunOSSUpload</code>组件添加<code>insertImage</code>方法，图片上传完成后执行此方法，将<code>url</code>传给父组件用来在编译器中显示图片。<code>showUploadList</code>用来控制是否展示文件列表 <a href="https://ant.design/components/upload-cn/#API"><strong>showUploadList</strong></a><strong>文档</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// 引入编辑器组件</span><br><span class="hljs-keyword">import</span> BraftEditor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-editor&#x27;</span><br><span class="hljs-comment">// 引入编辑器样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ContentUtils &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-utils&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EditorDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-comment">// 创建一个空的editorState作为初始值</span><br>    editorState: BraftEditor.createEditorState(<span class="hljs-literal">null</span>),<br>  &#125;<br><br>  <span class="hljs-comment">// async componentDidMount() &#123;</span><br>  <span class="hljs-comment">//   // 假设此处从服务端获取html格式的编辑器内容</span><br>  <span class="hljs-comment">//   const htmlContent = await fetchEditorContent();</span><br>  <span class="hljs-comment">//   // 使用BraftEditor.createEditorState将html字符串转换为编辑器需要的editorStat</span><br>  <span class="hljs-comment">//   this.setState(&#123;</span><br>  <span class="hljs-comment">//     editorState: BraftEditor.createEditorState(htmlContent),</span><br>  <span class="hljs-comment">//   &#125;);</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-comment">// 编辑器内容改变的时候执行</span><br>  handleEditorChange = <span class="hljs-function"><span class="hljs-params">editorState</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 更新编辑器的状态</span><br>    <span class="hljs-built_in">this</span>.setState(&#123; editorState &#125;)<br>    <span class="hljs-comment">// 要判断输入的内容，如果有内容设置输入的内容；如果没有内容设置成空字符串</span><br>    <span class="hljs-comment">// 为什么要这样判断，因为即使是空内容editorState.toHTML()也是一对空标签，不能直接给表单使用</span><br>    <span class="hljs-keyword">if</span> (!editorState.isEmpty()) &#123;<br>      <span class="hljs-comment">// 可直接调用editorState.toHTML()来获取HTML格式的内容</span><br>      <span class="hljs-keyword">const</span> content = editorState.toHTML()<br>      <span class="hljs-comment">// 调用父组件的函数，将编辑器输入的内容传递回去</span><br>      <span class="hljs-built_in">this</span>.props.setDetails(content)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.props.setDetails(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 图片上传完成后执行此方法，用来在编译器中显示图片</span><br>  insertImage = <span class="hljs-function"><span class="hljs-params">url</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      editorState: ContentUtils.insertMedias(<span class="hljs-built_in">this</span>.state.editorState, [<br>        &#123;<br>          type: <span class="hljs-string">&#x27;IMAGE&#x27;</span>,<br>          url,<br>        &#125;,<br>      ]),<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 自定义控件--插入图片</span><br>    <span class="hljs-keyword">const</span> extendControls = [<br>      &#123;<br>        key: <span class="hljs-string">&#x27;antd-uploader&#x27;</span>,<br>        type: <span class="hljs-string">&#x27;component&#x27;</span>,<br>        component: (<br>          &lt;AliyunOSSUpload insertImage=&#123;<span class="hljs-built_in">this</span>.insertImage&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">false</span>&#125;&gt;<br>            &#123;<span class="hljs-comment">/* 这里的按钮最好加上type=&quot;button&quot;，以避免在表单容器中触发表单提交，用Antd的Button组件则无需如此 */</span>&#125;<br>            &lt;button<br>              type=<span class="hljs-string">&quot;button&quot;</span><br>              className=<span class="hljs-string">&quot;control-item button upload-button&quot;</span><br>              data-title=<span class="hljs-string">&quot;插入图片&quot;</span>&gt;<br>              插入图片<br>            &lt;/button&gt;<br>          &lt;/AliyunOSSUpload&gt;<br>        ),<br>      &#125;,<br>    ]<br><br>    <span class="hljs-keyword">const</span> &#123; editorState &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&quot;my-component&quot;</span>&gt;<br>        &lt;BraftEditor<br>          value=&#123;editorState&#125;<br>          onChange=&#123;<span class="hljs-built_in">this</span>.handleEditorChange&#125;<br>          extendControls=&#123;extendControls&#125;<br>        /&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-添加富文本图片显示，修复显示默认文字-bug"><a href="#2-添加富文本图片显示，修复显示默认文字-bug" class="headerlink" title="2.添加富文本图片显示，修复显示默认文字 bug"></a>2.添加富文本图片显示，修复显示默认文字 bug</h4><p>在\src\components\AliyunOSSUpload\index.jsx 中，<code>insertImage(file.url)</code>在文件上传完成之后，如果需要 url，那么返回 url 给父组件。<br>添加解构<code>showUploadList</code>，默认展示文件列表，<br>修复直接使用{this.props.children}，会报错的 bug</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Upload, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ossConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/commom&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AliyunOSSUpload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    OSSData: &#123;&#125;,<br>  &#125;<br><br>  <span class="hljs-comment">// 组件挂载完成后，进行初始化获取oss配置</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>  &#125;<br><br>  <span class="hljs-comment">// 初始化获取oss上传签名</span><br>  init = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> OSSData = <span class="hljs-keyword">await</span> ossConfig()<br><br>      <span class="hljs-built_in">this</span>.setState(&#123;<br>        OSSData,<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      message.error(error)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 文件上传过程中触发的回调函数，直到上传完成</span><br>  onChange = <span class="hljs-function">(<span class="hljs-params">&#123; file &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (file.status === <span class="hljs-string">&#x27;done&#x27;</span>) &#123;<br>      <span class="hljs-keyword">const</span> &#123; setCoverKey, insertImage &#125; = <span class="hljs-built_in">this</span>.props<br>      <span class="hljs-keyword">if</span> (setCoverKey) &#123;<br>        <span class="hljs-comment">// 上传成功之后，把文件的key，设置成表单某个字段的值</span><br>        setCoverKey(file.key)<br>      &#125;<br><br>      <span class="hljs-comment">// 上传完成之后，如果需要url，那么返回url给父组件</span><br>      <span class="hljs-keyword">if</span> (insertImage) &#123;<br>        insertImage(file.url)<br>      &#125;<br><br>      message.success(<span class="hljs-string">&#x27;上传成功&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 额外的上传参数</span><br>  getExtraData = <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      key: file.key,<br>      OSSAccessKeyId: OSSData.accessid, <span class="hljs-comment">// 注意查看后端返回的字段是否和官方的OSSData一致</span><br>      policy: OSSData.policy,<br>      Signature: OSSData.signature,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 选择文件之后，上传文件之前，执行的回调</span><br>  beforeUpload = <span class="hljs-keyword">async</span> file =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> expire = OSSData.expire * <span class="hljs-number">1000</span><br><br>    <span class="hljs-comment">// 如果签名过期了就重新获取</span><br>    <span class="hljs-keyword">if</span> (expire &lt; <span class="hljs-built_in">Date</span>.now()) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> dir = <span class="hljs-string">&#x27;react/&#x27;</span> <span class="hljs-comment">// 定义上传的目录</span><br><br>    <span class="hljs-keyword">const</span> suffix = file.name.slice(file.name.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>))<br>    <span class="hljs-keyword">const</span> filename = OSSData.dir + dir + <span class="hljs-built_in">Date</span>.now() + suffix<br>    file.key = OSSData.dir + dir + filename <span class="hljs-comment">// 在getExtraData 函数中会用到，在云存储的文件的 key</span><br>    file.url = OSSData.host + OSSData.dir + dir + filename <span class="hljs-comment">// 上传完成后，用于显示内容</span><br><br>    <span class="hljs-keyword">return</span> file<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; value, accept, showUploadList &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">const</span> props = &#123;<br>      accept: accept || <span class="hljs-string">&#x27;&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;file&#x27;</span>,<br>      fileList: value,<br>      action: <span class="hljs-built_in">this</span>.state.OSSData.host,<br>      onChange: <span class="hljs-built_in">this</span>.onChange,<br>      <span class="hljs-comment">// onRemove: this.onRemove,</span><br>      data: <span class="hljs-built_in">this</span>.getExtraData,<br>      beforeUpload: <span class="hljs-built_in">this</span>.beforeUpload,<br>      listType: <span class="hljs-string">&#x27;picture&#x27;</span>,<br>      maxCount: <span class="hljs-number">1</span>,<br>      showUploadList,<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>      &lt;Upload &#123;...props&#125;&gt;<br>        &#123;<span class="hljs-comment">/* 将Button标签放在在AliyunOSSUpload组件里写，这里直接使用&#123;this.props.children&#125;，会报错 */</span>&#125;<br>        &#123;<span class="hljs-comment">/* 这里的解决方案是，Button标签封装在AliyunOSSUpload组件内部，其他函数使用AliyunOSSUpload组件时，只需要将AliyunOSSUpload写成双标签，里边写显示的文字 */</span>&#125;<br>        &#123;<span class="hljs-comment">/* &lt;Button icon=&#123;&lt;UploadOutlined /&gt;&#125;&gt;&#123;this.props.children&#125;&lt;/Button&gt; */</span>&#125;<br>        &#123;<span class="hljs-comment">/* 修复直接使用&#123;this.props.children&#125;，会报错的bug */</span>&#125;<br>        &#123;<span class="hljs-built_in">this</span>.props.children&#125;<br>      &lt;/Upload&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，给<code>AliyunOSSUpload</code>组件传值<code>showUploadList=&#123;true&#125;</code>显示文件图片，并将<code>Button</code>在<code>AliyunOSSUpload</code>中写</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText, ProFormTextArea, ProFormDigit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; UploadOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><span class="hljs-keyword">import</span> Editor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Editor&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 定义Form实例，用来操作表单</span><br>  <span class="hljs-keyword">const</span> [formObj] = ProForm.useForm()<br><br>  <span class="hljs-comment">// 文件上传成功后，设置cover字段的value</span><br>  <span class="hljs-keyword">const</span> setCoverKey = <span class="hljs-function"><span class="hljs-params">fileKey</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">cover</span>: fileKey &#125;)<br><br>  <span class="hljs-comment">// 文件上传成功后，设置details字段的value</span><br>  <span class="hljs-keyword">const</span> setDetails = <span class="hljs-function"><span class="hljs-params">content</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">details</span>: content &#125;)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            form=&#123;formObj&#125;<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br><br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>              &lt;div&gt;<br>                &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>                  &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;点击上传商品主图&lt;/Button&gt;<br>                &lt;/AliyunOSSUpload&gt;<br>              &lt;/div&gt;<br>            &lt;/ProForm.Item&gt;<br><br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Editor setDetails=&#123;setDetails&#125; /&gt;<br>            &lt;/ProForm.Item&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h2 id="6-7-添加商品"><a href="#6-7-添加商品" class="headerlink" title="6.7 添加商品"></a>6.7 添加商品</h2><h3 id="6-7-1-添加商品接口文档"><a href="#6-7-1-添加商品接口文档" class="headerlink" title="6.7.1 添加商品接口文档"></a>6.7.1 添加商品接口文档</h3><h5 id="接口描述-15"><a href="#接口描述-15" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>添加商品</li></ul><h5 id="请求-URL-15"><a href="#请求-URL-15" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods</li></ul><h5 id="请求方式-15"><a href="#请求方式-15" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="请求头部-12"><a href="#请求头部-12" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Body-请求参数-4"><a href="#Body-请求参数-4" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>pics</td><td>否</td><td>array</td><td>小图集</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr></tbody></table><h5 id="返回示例-16"><a href="#返回示例-16" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 201 创建成功</li><li>状态码 400 请求错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>: [<br>            <span class="hljs-string">&quot;标题 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;category_id&quot;</span>: [<br>            <span class="hljs-string">&quot;category id 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;description&quot;</span>: [<br>            <span class="hljs-string">&quot;描述 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;price&quot;</span>: [<br>            <span class="hljs-string">&quot;price 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;stock&quot;</span>: [<br>            <span class="hljs-string">&quot;stock 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;cover&quot;</span>: [<br>            <span class="hljs-string">&quot;cover 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;pics&quot;</span>: [<br>            <span class="hljs-string">&quot;pics 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;details&quot;</span>: [<br>            <span class="hljs-string">&quot;details 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-7-2-添加添加商品接口"><a href="#6-7-2-添加添加商品接口" class="headerlink" title="6.7.2 添加添加商品接口"></a>6.7.2 添加添加商品接口</h3><p>在\src\services\goods.js 中，添加商品接口和获取商品列表接口是同一个接口，但是获取商品列表是<code>get</code>请求，添加商品是<code>post</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架和下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isOn</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/on`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 推荐和不推荐商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRecommend</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/recommend`</span>)<br>&#125;<br><br><span class="hljs-comment">// 添加商品</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，引入<code>import &#123; addGoods &#125; from &#39;@/services/goods&#39;;</code>添加商品接口<br>在提交表单时，执行添加</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br><span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>  <span class="hljs-built_in">console</span>.log(values)<br>  <span class="hljs-keyword">let</span> response = []<br>  <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-comment">// 执行添加</span><br>    <span class="hljs-comment">// 发送请求，添加商品</span><br>    response = <span class="hljs-keyword">await</span> addGoods(&#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 执行编辑</span><br>    <span class="hljs-comment">// 发送请求，更新商品</span><br>    <span class="hljs-comment">// response = await updateUser(editId, values);</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>    message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>    <span class="hljs-comment">// 刷新表格数据</span><br>    actionRef.current.reload()<br>    <span class="hljs-comment">// 关闭模态框</span><br>    isShowModal(<span class="hljs-literal">false</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622267547002-39018e6f-c9c3-43ab-bd26-4f99fa84e9ef.png#clientId=u07f7d054-2036-4&from=paste&height=306&id=u983b8f51&margin=%5Bobject%20Object%5D&name=image.png&originHeight=306&originWidth=672&originalType=binary&size=19356&status=done&style=none&taskId=u1ef4a3f6-2392-467e-b148-1a2ada35a53&width=672" alt="image.png"><br>其中我们要添加<code>category_id</code>二级分类的商品在 <code>response = await addGoods(&#123; ...values, category_id: values.category_id[1] &#125;);</code>中，我们先将<code>...values</code>展开，随后再处理二级分类的商品</p><h2 id="6-8-修改商品"><a href="#6-8-修改商品" class="headerlink" title="6.8 修改商品"></a>6.8 修改商品</h2><h3 id="6-8-1-商品详情接口文档、修改商品接口文档"><a href="#6-8-1-商品详情接口文档、修改商品接口文档" class="headerlink" title="6.8.1 商品详情接口文档、修改商品接口文档"></a>6.8.1 商品详情接口文档、修改商品接口文档</h3><h5 id="接口描述-16"><a href="#接口描述-16" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>商品详情</li></ul><h5 id="请求-URL-16"><a href="#请求-URL-16" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods/{good}</li></ul><h5 id="请求方式-16"><a href="#请求方式-16" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-13"><a href="#请求头部-13" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="REST-参数"><a href="#REST-参数" class="headerlink" title="REST 参数"></a>REST 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>good</td><td>是</td><td>int</td><td>商品 ID</td></tr></tbody></table><h5 id="Query-请求参数-3"><a href="#Query-请求参数-3" class="headerlink" title="Query 请求参数"></a>Query 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>include</td><td>否</td><td>string</td><td>包含额外的数据： category 分类，user 用户， comments 评论</td></tr></tbody></table><p><em>inlude 可以返回额外的数据， 多个使用 ， 分隔， 比如： include=category,user,comments</em></p><h5 id="返回参数-8"><a href="#返回参数-8" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>user_id</td><td>是</td><td>int</td><td>创建者</td></tr><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>sales</td><td>是</td><td>int</td><td>销量</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>cover_url</td><td>是</td><td>string</td><td>封面图 url</td></tr><tr><td>pics</td><td>是</td><td>array</td><td>小图集</td></tr><tr><td>pics_url</td><td>是</td><td>array</td><td>小图集 url</td></tr><tr><td>is_on</td><td>是</td><td>int</td><td>是否上架 0 不上架 1 上架</td></tr><tr><td>is_recommend</td><td>是</td><td>int</td><td>是否推荐 0 不推荐 1 推荐</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr><tr><td>category</td><td>否</td><td>object</td><td>额外的 分类 数据，使用 include 才会返回</td></tr><tr><td>user</td><td>否</td><td>object</td><td>额外的 用户 数据，使用 include 才会返回</td></tr><tr><td>comments</td><td>否</td><td>object</td><td>额外的 评论 数数，使用 include 才会返回</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>添加时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>修改时间</td></tr></tbody></table><h5 id="返回示例-17"><a href="#返回示例-17" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;电脑11111电脑&quot;</span>,<br>    <span class="hljs-string">&quot;category_id&quot;</span>: <span class="hljs-number">7</span>,<br>    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;这是一个电脑1111&quot;</span>,<br>    <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>,<br>    <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">999</span>,<br>    <span class="hljs-string">&quot;sales&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;cover&quot;</span>: <span class="hljs-string">&quot;100x100.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;cover_url&quot;</span>: <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/100x100.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;pics&quot;</span>: [<br>        <span class="hljs-string">&quot;a.png&quot;</span>,<br>        <span class="hljs-string">&quot;b.png&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;pics_url&quot;</span>: [<br>        <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/a.png&quot;</span>,<br>        <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/b.png&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;details&quot;</span>: <span class="hljs-string">&quot;这是一个电脑这是一个电脑这是一个电脑这是一个电脑&quot;</span>,<br>    <span class="hljs-string">&quot;is_on&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;is_recommend&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T07:38:37.000000Z&quot;</span>,<br>    <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T10:13:45.000000Z&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接口描述-17"><a href="#接口描述-17" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>修改商品</li></ul><h5 id="请求-URL-17"><a href="#请求-URL-17" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods/{good}</li></ul><h5 id="请求方式-17"><a href="#请求方式-17" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PUT</li></ul><h5 id="请求头部-14"><a href="#请求头部-14" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数-4"><a href="#RESET-参数-4" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>good</td><td>是</td><td>int</td><td>商品 id</td></tr></tbody></table><h5 id="Body-请求参数-5"><a href="#Body-请求参数-5" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>pics</td><td>否</td><td>array</td><td>小图集</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr></tbody></table><h5 id="返回示例-18"><a href="#返回示例-18" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 成功</li><li>状态码 400 请求错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;分类不存在&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;分类被禁用&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;只能向2级分类添加商品&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ul><li>状态码 422 参数错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>: [<br>            <span class="hljs-string">&quot;标题 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;category_id&quot;</span>: [<br>            <span class="hljs-string">&quot;category id 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;description&quot;</span>: [<br>            <span class="hljs-string">&quot;描述 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;price&quot;</span>: [<br>            <span class="hljs-string">&quot;price 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;stock&quot;</span>: [<br>            <span class="hljs-string">&quot;stock 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;cover&quot;</span>: [<br>            <span class="hljs-string">&quot;cover 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;pics&quot;</span>: [<br>            <span class="hljs-string">&quot;pics 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;details&quot;</span>: [<br>            <span class="hljs-string">&quot;details 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-8-2-添加商品详情接口、修改商品接口"><a href="#6-8-2-添加商品详情接口、修改商品接口" class="headerlink" title="6.8.2 添加商品详情接口、修改商品接口"></a>6.8.2 添加商品详情接口、修改商品接口</h3><p>在\src\services\goods.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架和下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isOn</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/on`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 推荐和不推荐商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRecommend</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/recommend`</span>)<br>&#125;<br><br><span class="hljs-comment">// 添加商品</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 商品详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">editId</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showGoods</span>(<span class="hljs-params">editId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;editId&#125;</span>?include=category`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateGoods</span>(<span class="hljs-params">editId, params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.put(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中商品详情接口，由于有二级列表所以要加上<code>?include=category</code></p><h3 id="6-8-3-获取商品详情数据并提交修改"><a href="#6-8-3-获取商品详情数据并提交修改" class="headerlink" title="6.8.3 获取商品详情数据并提交修改"></a>6.8.3 获取商品详情数据并提交修改</h3><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中先引入<code>import &#123; addGoods, showGoods, updateGoods &#125; from &#39;@/services/goods&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText, ProFormTextArea, ProFormDigit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader, Button, Image &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; UploadOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; addGoods, showGoods, updateGoods &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/goods&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><span class="hljs-keyword">import</span> Editor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Editor&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setInitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 定义Form实例，用来操作表单</span><br>  <span class="hljs-keyword">const</span> [formObj] = ProForm.useForm()<br><br>  <span class="hljs-comment">// 文件上传成功后，设置cover字段的value</span><br>  <span class="hljs-keyword">const</span> setCoverKey = <span class="hljs-function"><span class="hljs-params">fileKey</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">cover</span>: fileKey &#125;)<br><br>  <span class="hljs-comment">// 文件上传成功后，设置details字段的value</span><br>  <span class="hljs-keyword">const</span> setDetails = <span class="hljs-function"><span class="hljs-params">content</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">details</span>: content &#125;)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取商品详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showGoods(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      <span class="hljs-keyword">const</span> &#123; pid, id &#125; = response.category<br>      <span class="hljs-keyword">const</span> defaultCategory = pid === <span class="hljs-number">0</span> ? [id] : [pid, id]<br>      setInitialValues(&#123; ...response, <span class="hljs-attr">category_id</span>: defaultCategory &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加商品</span><br>      response = <span class="hljs-keyword">await</span> addGoods(&#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新商品</span><br>      response = <span class="hljs-keyword">await</span> updateGoods(editId, &#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            form=&#123;formObj&#125;<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br><br>            &lt;ProFormText name=<span class="hljs-string">&quot;cover&quot;</span> hidden=&#123;<span class="hljs-literal">true</span>&#125; /&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>              &lt;div&gt;<br>                &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>                  &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;点击上传商品主图&lt;/Button&gt;<br>                &lt;/AliyunOSSUpload&gt;<br>                &#123;!initialValues.cover_url ? (<br>                  <span class="hljs-string">&#x27;&#x27;</span><br>                ) : (<br>                  &lt;Image width=&#123;<span class="hljs-number">200</span>&#125; src=&#123;initialValues.cover_url&#125; /&gt;<br>                )&#125;<br>              &lt;/div&gt;<br>            &lt;/ProForm.Item&gt;<br><br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Editor setDetails=&#123;setDetails&#125; content=&#123;initialValues.details&#125; /&gt;<br>            &lt;/ProForm.Item&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h4 id="1-获取商品列表，处理商品分类"><a href="#1-获取商品列表，处理商品分类" class="headerlink" title="1.获取商品列表，处理商品分类"></a>1.获取商品列表，处理商品分类</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中<br>后端字段和前端设置的字段一样能够直接赋值，所以先将数据<code>...response</code>展开。后单独设置<code>category_id: defaultCategory</code>，因为有二级菜单，后端用的数组表示，所以解构<code>response.category</code>分别将二级菜单<code>pid</code>，一级菜单<code>id</code>填入数组赋值给<code>category_id</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送请求，获取商品详情</span><br><span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showGoods(editId)<br>  <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>  <span class="hljs-keyword">const</span> &#123; pid, id &#125; = response.category<br>  <span class="hljs-keyword">const</span> defaultCategory = pid === <span class="hljs-number">0</span> ? [id] : [pid, id]<br>  setInitialValues(&#123; ...response, <span class="hljs-attr">category_id</span>: defaultCategory &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-处理图片获取"><a href="#2-处理图片获取" class="headerlink" title="2.处理图片获取"></a>2.处理图片获取</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中,<br>先处理图片显示，用三目运算符判断原来是否有图片，没有则为空，有则添加图片<code>&lt;Image width=&#123;200&#125; src=&#123;initialValues.cover_url&#125; /&gt;</code><br>但是我们在点击上传图片时需要上传<code>cover</code>，当我们添加新图片时<code>cover</code>会被重新设置，所以将它隐藏起来<br><code>&lt;ProFormText name=&quot;cover&quot; hidden=&#123;true&#125; /&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProFormText name=<span class="hljs-string">&quot;cover&quot;</span> hidden=&#123;<span class="hljs-literal">true</span>&#125; /&gt;<br>&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;cover&quot;</span><br>  label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>&gt;<br>  &lt;div&gt;<br>    &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;点击上传商品主图&lt;/Button&gt;<br>    &lt;/AliyunOSSUpload&gt;<br>    &#123;!initialValues.cover_url ? (<br>      <span class="hljs-string">&#x27;&#x27;</span><br>    ) : (<br>      &lt;Image width=&#123;<span class="hljs-number">200</span>&#125; src=&#123;initialValues.cover_url&#125; /&gt;<br>    )&#125;<br>  &lt;/div&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><h4 id="3-处理富文本显示"><a href="#3-处理富文本显示" class="headerlink" title="3.处理富文本显示"></a>3.处理富文本显示</h4><p>在 src\pages\Goods\components\CreateOrEdit.jsx 中，在<code>Editor</code>组件设置<code>content</code>接收到原来的值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Editor setDetails=&#123;setDetails&#125; content=&#123;initialValues.details&#125; /&gt;<br></code></pre></div></td></tr></table></figure><p>在\src\components\Editor\index.jsx 中，，设置显示富文本的内容</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// 引入编辑器组件</span><br><span class="hljs-keyword">import</span> BraftEditor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-editor&#x27;</span><br><span class="hljs-comment">// 引入编辑器样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ContentUtils &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-utils&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EditorDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-comment">// 创建一个空的editorState作为初始值</span><br>    editorState: BraftEditor.createEditorState(<span class="hljs-built_in">this</span>.props.content ?? <span class="hljs-literal">null</span>),<br>  &#125;<br><br>  <span class="hljs-comment">// 编辑器内容改变的时候执行</span><br>  handleEditorChange = <span class="hljs-function"><span class="hljs-params">editorState</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 更新编辑器的状态</span><br>    <span class="hljs-built_in">this</span>.setState(&#123; editorState &#125;)<br>    <span class="hljs-comment">// 要判断输入的内容，如果有内容设置输入的内容；如果没有内容设置成空字符串</span><br>    <span class="hljs-comment">// 为什么要这样判断，因为即使是空内容editorState.toHTML()也是一对空标签，不能直接给表单使用</span><br>    <span class="hljs-keyword">if</span> (!editorState.isEmpty()) &#123;<br>      <span class="hljs-comment">// 可直接调用editorState.toHTML()来获取HTML格式的内容</span><br>      <span class="hljs-keyword">const</span> content = editorState.toHTML()<br>      <span class="hljs-comment">// 调用父组件的函数，将编辑器输入的内容传递回去</span><br>      <span class="hljs-built_in">this</span>.props.setDetails(content)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.props.setDetails(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 图片上传完成后执行此方法，用来在编译器中显示图片</span><br>  insertImage = <span class="hljs-function"><span class="hljs-params">url</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      editorState: ContentUtils.insertMedias(<span class="hljs-built_in">this</span>.state.editorState, [<br>        &#123;<br>          type: <span class="hljs-string">&#x27;IMAGE&#x27;</span>,<br>          url,<br>        &#125;,<br>      ]),<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 自定义控件--插入图片</span><br>    <span class="hljs-keyword">const</span> extendControls = [<br>      &#123;<br>        key: <span class="hljs-string">&#x27;antd-uploader&#x27;</span>,<br>        type: <span class="hljs-string">&#x27;component&#x27;</span>,<br>        component: (<br>          &lt;AliyunOSSUpload insertImage=&#123;<span class="hljs-built_in">this</span>.insertImage&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">false</span>&#125;&gt;<br>            &#123;<span class="hljs-comment">/* 这里的按钮最好加上type=&quot;button&quot;，以避免在表单容器中触发表单提交，用Antd的Button组件则无需如此 */</span>&#125;<br>            &lt;button<br>              type=<span class="hljs-string">&quot;button&quot;</span><br>              className=<span class="hljs-string">&quot;control-item button upload-button&quot;</span><br>              data-title=<span class="hljs-string">&quot;插入图片&quot;</span>&gt;<br>              插入图片<br>            &lt;/button&gt;<br>          &lt;/AliyunOSSUpload&gt;<br>        ),<br>      &#125;,<br>    ]<br><br>    <span class="hljs-keyword">const</span> &#123; editorState &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&quot;my-component&quot;</span>&gt;<br>        &lt;BraftEditor<br>          value=&#123;editorState&#125;<br>          onChange=&#123;<span class="hljs-built_in">this</span>.handleEditorChange&#125;<br>          extendControls=&#123;extendControls&#125;<br>        /&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中<code>editorState: BraftEditor.createEditorState(this.props.content ?? null),</code>是关键代码，</p><p><code>this.props.content ?? null</code>是三目运算符简写，如果<code>this.props.content</code>有值就传值显示在富文本上，没有就<code>null</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">state = &#123;<br>  <span class="hljs-comment">// 创建一个空的editorState作为初始值</span><br>  editorState: BraftEditor.createEditorState(<span class="hljs-built_in">this</span>.props.content ?? <span class="hljs-literal">null</span>),<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-提交表单更新商品"><a href="#4-提交表单更新商品" class="headerlink" title="4.提交表单更新商品"></a>4.提交表单更新商品</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，添加<code>updateGoods</code>接口</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> (values) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = [];<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加商品</span><br>      response = <span class="hljs-keyword">await</span> addGoods(&#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新商品</span><br>      response = <span class="hljs-keyword">await</span> updateGoods(editId, &#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-keyword">type</span>&#125;</span>成功！`</span>);<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload();<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>);<br>    &#125;<br>  &#125;;<br></code></pre></div></td></tr></table></figure><p>todo</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd Pro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>errorBoundary错误边界</title>
    <link href="/2021/05/13/errorBoundary%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C/"/>
    <url>/2021/05/13/errorBoundary%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h2><p>错误边界：用来捕获后代组件错误，渲染出备用页面<br>​</p><p>子组件出现错误，导致组件不可控，出现穿透影响其他组件显示<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620891793939-814a3455-ac2e-45eb-9d24-eb78ca4677df.png#clientId=ud80257e6-e9cf-4&from=paste&height=384&id=u362f825b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=384&originWidth=1290&originalType=binary&size=453765&status=done&style=none&taskId=u67a5be2c-356d-4896-a5fc-de771370360&width=1290" alt="image.png"></p><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><p>只能捕获后代组件生命周期产生的错误，比如<code>render</code>里产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误<br>​</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>在父组件中设置<code>getDerivedStateFromError</code>，当后代组件出现错误时，<code>getDerivedStateFromError</code>就会触发，并且携带错误信息。（常常调用API中的数据时会出错）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React，&#123;Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> Children <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./children&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>state = &#123;<span class="hljs-attr">hasError</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;<br><br>    <span class="hljs-comment">// 生命周期函数，一旦后台组件报错，就会触发</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">getDerivedStateFromError</span>(<span class="hljs-params">error</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(error);<br>      <span class="hljs-comment">// 在render之前触发</span><br>      <span class="hljs-comment">// 返回新的state</span><br>      <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span> &#125;;<br>  &#125;<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;h3&gt;我是Parent组件&lt;/h3&gt;<br>      &#123;<span class="hljs-built_in">this</span>.state.hasError ? <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>请求繁忙，请稍后再试...<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span> : <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Children</span> /&gt;</span></span>&#125;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p><code>getDerivedStateFromError</code>配合<code>componentDidCatch</code>使用，<code>componentDidCatch</code>是出现错误时执行，一般用于统计并记录错误的信息</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 生命周期函数，一旦后台组件报错，就会触发</span><br><span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">getDerivedStateFromError</span>(<span class="hljs-params">error</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(error);<br>    <span class="hljs-comment">// 在render之前触发</span><br>    <span class="hljs-comment">// 返回新的state</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span>&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">componentDidCatch</span>(<span class="hljs-params">error, info</span>)</span> &#123;<br>    <span class="hljs-comment">// 统计页面的错误,发送请求发送到后台去</span><br>    <span class="hljs-built_in">console</span>.log(error, info);<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>错误边界</tag>
      
      <tag>组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组件间的通信方式总结</title>
    <link href="/2021/05/13/%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2021/05/13/%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="组件间的关系"><a href="#组件间的关系" class="headerlink" title="组件间的关系:"></a>组件间的关系:</h2><ul><li><strong>父子组件</strong></li><li><strong>兄弟组件(非嵌套组件)</strong></li><li><strong>祖孙组件(跨级组件)</strong></li></ul><h2 id="几种通信方式："><a href="#几种通信方式：" class="headerlink" title="几种通信方式："></a>几种通信方式：</h2><ol><li><strong>props</strong>:<ol><li><code>childen props</code></li><li><code>render props</code></li></ol></li><li><strong>消息订阅-发布</strong>：<code>pubs-sub</code>、<code>event</code>等</li><li><strong>集中式管理</strong>：<code>redux</code>、<code>dva</code>等</li><li><strong>conText</strong>：生产者-消费者模式</li></ol><h2 id="比较好的搭配方式："><a href="#比较好的搭配方式：" class="headerlink" title="比较好的搭配方式："></a>比较好的搭配方式：</h2><p><strong>父子组件</strong>：<code>props</code><br><strong>兄弟组件</strong>：消息订阅-发布、集中式管理<br>**祖孙组件(跨级组件)**：消息订阅-发布、集中式管理、<code>conText</code>(开发用的少，封装插件用的多)<br>​</p>]]></content>
    
    
    <categories>
      
      <category>组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>组件</tag>
      
      <tag>通信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Antd Pro 快速上手</title>
    <link href="/2021/05/07/Antd%20Pro%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <url>/2021/05/07/Antd%20Pro%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<p>Antd Pro官网<a href="https://pro.ant.design/docs/getting-started-cn">https://pro.ant.design/docs/getting-started-cn</a></p><h2 id="第一步，安装-umi"><a href="#第一步，安装-umi" class="headerlink" title="第一步，安装 umi"></a>第一步，安装 umi</h2><p><code>yarn create umi</code></p><h2 id="第二步，选择-ant-design-pro"><a href="#第二步，选择-ant-design-pro" class="headerlink" title="第二步，选择 ant-design-pro"></a>第二步，选择 ant-design-pro</h2><p><code>ant-design-pro </code><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620363053142-3ecfe8fa-5853-4fbd-a60e-0c803f88ea0d.png#clientId=uebac18f4-dbcb-4&from=paste&height=308&id=uac99949c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=308&originWidth=723&originalType=binary&size=34564&status=done&style=none&taskId=u13af6859-cfb9-4785-b5b3-e5f1ce86d6a&width=723" alt="image.png"><br>根据需求选择不同的版本、语言、完整区块或核心脚手架</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">success Installed <span class="hljs-string">&quot;create-umi@0.26.0&quot;</span> <span class="hljs-keyword">with</span> binaries:<br>      - create-umi<br>? Select the boilerplate type ant-design-pro<br><br>? ? Be the first to experience the <span class="hljs-keyword">new</span> umi@<span class="hljs-number">3</span> ? Pro V4<br>? ? Which language <span class="hljs-keyword">do</span> you want to use? JavaScript<br>? ? Do you need all the blocks or a simple scaffold? complete<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620363334538-4e1f62b4-024c-46ae-961f-016f35ad995b.png#clientId=uebac18f4-dbcb-4&from=paste&height=380&id=u6c4ab34f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=380&originWidth=723&originalType=binary&size=48746&status=done&style=none&taskId=u74320950-d639-4bd7-bff5-48e0366e982&width=723" alt="image.png"></p><h2 id="第三步，安装依赖包"><a href="#第三步，安装依赖包" class="headerlink" title="第三步，安装依赖包"></a>第三步，安装依赖包</h2><p>推荐使用<code>yarn install </code>，如果安装失败 清理缓存<code>yarn cache clean</code>，重新安装多试几次<br><code>yarn install </code><br>安装完成<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620364412433-a0fbda2e-cad0-4e62-a5d9-c0a131e45a7f.png#clientId=uebac18f4-dbcb-4&from=paste&height=348&id=ue0103481&margin=%5Bobject%20Object%5D&name=image.png&originHeight=348&originWidth=717&originalType=binary&size=47155&status=done&style=none&taskId=u273cdc48-904a-46cb-a8a1-c4585953c84&width=717" alt="image.png"><br>启动<br><code>yarn start</code>   </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn run v1<span class="hljs-number">.22</span><span class="hljs-number">.5</span><br>$ cross-env UMI_ENV=dev umi dev<br>Starting the development server...<br><br>√ Webpack<br>  Compiled successfully <span class="hljs-keyword">in</span> <span class="hljs-number">47.</span>11s<br><br> DONE  Compiled successfully <span class="hljs-keyword">in</span> 47119ms                              下午<span class="hljs-number">1</span>:<span class="hljs-number">28</span>:<span class="hljs-number">37</span><br><br><br>  App running at:<br>  - Local:   http:<span class="hljs-comment">//localhost:8001 (copied to clipboard)</span><br>  - Network: http:<span class="hljs-comment">//192.168.43.198:8001</span><br></code></pre></div></td></tr></table></figure><p>点击<a href="http://localhost:8001/">http://localhost:8001</a>进入<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620365347570-94ccfe46-b7e6-4dc1-98a0-caaf4053969a.png#clientId=uebac18f4-dbcb-4&from=paste&height=1006&id=uaa9c11dd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1006&originWidth=1901&originalType=binary&size=166904&status=done&style=none&taskId=u68d647f6-675d-4ade-b0cc-9b74827ab1e&width=1901" alt="image.png"></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>我们已经为你生成了一个完整的开发框架，提供了涵盖中后台开发的各类功能和坑位，下面是整个项目的目录结构。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">├── config                   # umi 配置，包含路由，构建等配置<br>├── mock                     # 本地模拟数据<br>├── public<br>│   └── favicon.png          # Favicon<br>├── src<br>│   ├── assets               # 本地静态资源<br>│   ├── components           # 业务通用组件<br>│   ├── e2e                  # 集成测试用例<br>│   ├── layouts              # 通用布局<br>│   ├── models               # 全局 dva model<br>│   ├── pages                # 业务页面入口和常用模板<br>│   ├── services             # 后台接口服务<br>│   ├── utils                # 工具库<br>│   ├── locales              # 国际化资源<br>│   ├── global.less          # 全局样式<br>│   └── global.ts            # 全局 JS<br>├── tests                    # 测试工具<br>├── README.md<br>└── package.json<br></code></pre></div></td></tr></table></figure><h3 id="页面代码结构推荐"><a href="#页面代码结构推荐" class="headerlink" title="页面代码结构推荐"></a>页面代码结构推荐</h3><p>为了让项目代码组织更加规范，让开发能够更方便的定位到相关页面组件代码，我们定义了一套规范，该规范当前只作为推荐的指导，并非强制。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">src<br>├── components<br>└── pages<br>    ├── Welcome        <span class="hljs-comment">// 路由组件下不应该再包含其他路由组件，基于这个约定就能清楚的区分路由组件和非路由组件了</span><br>    |   ├── components <span class="hljs-comment">// 对于复杂的页面可以再自己做更深层次的组织，但建议不要超过三层</span><br>    |   ├── Form.tsx<br>    |   ├── index.tsx  <span class="hljs-comment">// 页面组件的代码</span><br>    |   └── index.less <span class="hljs-comment">// 页面样式</span><br>    ├── Order          <span class="hljs-comment">// 路由组件下不应该再包含其他路由组件，基于这个约定就能清楚的区分路由组件和非路由组件了</span><br>    |   ├── index.tsx<br>    |   └── index.less<br>    ├── user           <span class="hljs-comment">// 一系列页面推荐通过小写的单一字母做 group 目录</span><br>    |   ├── components <span class="hljs-comment">// group 下公用的组件集合</span><br>    |   ├── Login      <span class="hljs-comment">// group 下的页面 Login</span><br>    |   ├── Register   <span class="hljs-comment">// group 下的页面 Register</span><br>    |   └── util.ts    <span class="hljs-comment">// 这里可以有一些共用方法之类，不做推荐和约束，看业务场景自行做组织</span><br>    └── *              <span class="hljs-comment">// 其它页面组件代码</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UmiJS</tag>
      
      <tag>Antd</tag>
      
      <tag>Antd Pro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在React中antd实现前端在线解析csv文件</title>
    <link href="/2021/05/06/%E5%9C%A8React%E4%B8%ADantd%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E5%9C%A8%E7%BA%BF%E8%A7%A3%E6%9E%90csv%E6%96%87%E4%BB%B6/"/>
    <url>/2021/05/06/%E5%9C%A8React%E4%B8%ADantd%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E5%9C%A8%E7%BA%BF%E8%A7%A3%E6%9E%90csv%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-在本地新建一个-csv文件"><a href="#1-在本地新建一个-csv文件" class="headerlink" title="1.在本地新建一个.csv文件"></a>1.在本地新建一个.csv文件</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620230292970-83538686-34c1-4ecc-a87e-ef8672bf09b4.png#clientId=ufe86c338-c935-4&from=paste&height=285&id=uf8151a50&margin=%5Bobject%20Object%5D&name=image.png&originHeight=304&originWidth=812&originalType=binary&size=38517&status=done&style=none&taskId=u466fec12-80f5-4c74-b6cd-d72bbb4ec8a&width=762" alt="image.png"></p><h2 id="2-实现代码"><a href="#2-实现代码" class="headerlink" title="2.实现代码"></a>2.实现代码</h2><p>安装<code>papaparse</code>和<code>jschardet</code>插件，<code>npm install papapars</code>、<code>npm install jschardet</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Upload, Button, Icon &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><span class="hljs-keyword">import</span> Papa <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;papaparse&#x27;</span>; <span class="hljs-comment">// 解析scv插件 市面上使用较多的</span><br><span class="hljs-keyword">import</span> jschardet <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jschardet&#x27;</span>; <span class="hljs-comment">// 编码识别</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Csv</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>    <span class="hljs-built_in">this</span>.state = &#123;<br>      csvParseData: [],<br>    &#125;;<br>  &#125;<br>  <span class="hljs-comment">// 检查编排</span><br>  checkEncoding = <span class="hljs-function">(<span class="hljs-params">base64Str</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//这种方式得到的是一种二进制串</span><br>    <span class="hljs-keyword">const</span> str = atob(base64Str.split(<span class="hljs-string">&quot;;base64,&quot;</span>)[<span class="hljs-number">1</span>]); <span class="hljs-comment">// atob  方法 Window 对象 定义和用法 atob() 方法用于解码使用 base-64 编码的字符</span><br>    <span class="hljs-comment">//要用二进制格式</span><br>    <span class="hljs-keyword">let</span> encoding = jschardet.detect(str);<br>    encoding = encoding.encoding;<br>    <span class="hljs-comment">// 有时候会识别错误</span><br>    <span class="hljs-keyword">if</span>(encoding == <span class="hljs-string">&quot;windows-1252&quot;</span>)&#123;<br>      encoding = <span class="hljs-string">&quot;ANSI&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> encoding;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> _this = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">const</span> props = &#123;<br>      beforeUpload: <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> fReader = <span class="hljs-keyword">new</span> FileReader();<br>        fReader.readAsDataURL(file); <span class="hljs-comment">//  readAsDataURL 读取本地文件 得到的是一个base64值</span><br>        fReader.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>)</span>&#123;<span class="hljs-comment">// 读取文件成功</span><br>          <span class="hljs-keyword">const</span> data = evt.target.result;<br>          <span class="hljs-keyword">const</span> encoding = _this.checkEncoding(data);<br>          <span class="hljs-comment">//papaparse.js 用来解析转换成二维数组</span><br>          Papa.parse(file, &#123;<br>            encoding: encoding,<br>            complete: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">results</span>) </span>&#123;        <span class="hljs-comment">// UTF8 \r\n与\n混用时有可能会出问题</span><br>              <span class="hljs-keyword">const</span> res = results.data;<br>              <span class="hljs-keyword">if</span>(res[res.length - <span class="hljs-number">1</span>] === <span class="hljs-string">&quot;&quot;</span>)&#123;    <span class="hljs-comment">//去除最后的空行 有些解析数据尾部会多出空格</span><br>                res.pop();<br>              &#125;<br>              <span class="hljs-comment">// 当前res 就是二维数组的值 数据拿到了 那么在前端如何处理渲染 就根据需求再做进一步操作了</span><br>              _this.setState(res);<br>              <span class="hljs-built_in">console</span>.log(res)<br>            &#125;<br>          &#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;Upload &#123;...props&#125;&gt;<br>        &lt;Button&gt;<br>          &lt;Icon type=<span class="hljs-string">&quot;upload&quot;</span> /&gt; 点击上传csv<br>        &lt;/Button&gt;<br>      &lt;/Upload&gt;<br>    );<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-获取结果"><a href="#3-获取结果" class="headerlink" title="3.获取结果"></a>3.获取结果</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620230653971-df05dd7f-67c9-462c-b843-17e4c4451006.png#clientId=ufe86c338-c935-4&from=paste&height=262&id=u93bb8177&margin=%5Bobject%20Object%5D&name=image.png&originHeight=262&originWidth=591&originalType=binary&size=32406&status=done&style=none&taskId=u2df8a61a-af48-4a59-a221-c6914b2c20c&width=591" alt="image.png"><br><strong>如上图就是最终拿到的值 和我们新建测试的csv文件数据是一致的 中文也没有出现乱码 前端解析csv也就实现了</strong></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd</tag>
      
      <tag>React</tag>
      
      <tag>csv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个tcp连接能发几个http请求</title>
    <link href="/2021/05/05/%E4%B8%80%E4%B8%AAtcp%E8%BF%9E%E6%8E%A5%E8%83%BD%E5%8F%91%E5%87%A0%E4%B8%AAhttp%E8%AF%B7%E6%B1%82/"/>
    <url>/2021/05/05/%E4%B8%80%E4%B8%AAtcp%E8%BF%9E%E6%8E%A5%E8%83%BD%E5%8F%91%E5%87%A0%E4%B8%AAhttp%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>如果是http1.0，一个tcp连接只能发一个http请求，因为是HTTP/1.1开始才有Connection 头，引入了持续连接的概念，只要不断开，就能够持续发。所以一个tcp连接能发多个http请求。</p><p>HTTP/1.0 :一个tcp连接只能发一个http请求。每次服务端返回响应后TCP连接会断开。<br>HTTP/1.1: 默认开启Connection: keep-alive，一个TCP连接可以发多个http请求，但是多个请求是串行执行。（注意区别TCP的keep-alive）<br>HTTP/2: 引入了多路复用技术 和二进制分帧，同个域名下的请求只需要占用一个 TCP 连接，请求和响应是并行执行。</p><p>如果是HTTP 1.0 版本协议，一般情况下，不支持长连接，因此在每次请求发送完毕之后，TCP连接即会断开，因此一个TCP发送一个HTTP请求，但是有一种情况可以将一条TCP连接保持在活跃状态，那就是通过Connection和Keep-Alive首部，在请求头带上Connection: Keep-Alive，并且可以通过Keep-Alive通用首部中指定的，用逗号分隔的选项调节keep-alive的行为，如果客户端和服务端都支持，那么其实也可以发送多条，不过此方式也有限制，可以关注《HTTP 权威指南》4.5.5 节对于Keep-Alive连接的限制和规则；<br>而如果是HTTP 1.1 版本协议，支持了长连接，因此只要TCP连接不断开，便可以一直发送HTTP请求，持续不断，没有上限；<br>同样，如果是HTTP 2.0 版本协议，支持多用复用，一个TCP连接是可以并发多个HTTP请求的，同样也是支持长连接，因此只要不断开TCP的连接，HTTP请求数也是可以没有上限地持续发送，</p>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
      <tag>TCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅了解_React为何需要设定唯一key值</title>
    <link href="/2021/05/05/%E6%B5%85%E4%BA%86%E8%A7%A3-React%E4%B8%BA%E4%BD%95%E9%9C%80%E8%A6%81%E8%AE%BE%E5%AE%9A%E5%94%AF%E4%B8%80key%E5%80%BC/"/>
    <url>/2021/05/05/%E6%B5%85%E4%BA%86%E8%A7%A3-React%E4%B8%BA%E4%BD%95%E9%9C%80%E8%A6%81%E8%AE%BE%E5%AE%9A%E5%94%AF%E4%B8%80key%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="一、React规范"><a href="#一、React规范" class="headerlink" title="一、React规范"></a>一、React规范</h3><h4 id="1-1-react-key的作用"><a href="#1-1-react-key的作用" class="headerlink" title="1.1 react key的作用"></a>1.1 react key的作用</h4><p>当渲染重复数据的时候,React.diff会根据生成的key进行虚拟DOM渲染, 所以我们需要在遍历的地方都要加上key,例如map、for等等<br>同样, antd作为react的UI组件库, 有些地方也需要遵循react的key规范.例如 antd-table 在渲染前要求: 在 Table 中，dataSource 和 columns 里的数据值都需要指定 key 值。对于 dataSource 默认将每列数据的 key 属性作为唯一的标识。</p><h4 id="1-2-antd-table-key缺失"><a href="#1-2-antd-table-key缺失" class="headerlink" title="1.2 antd-table key缺失"></a>1.2 antd-table key缺失</h4><p>如果你的数据没有这个属性，务必使用 rowKey 来指定数据列的主键。若没有指定，控制台会出现以下的提示，表格组件也会出现各类奇怪的错误。<br>Each record in table should have a uniquekeyprop,or setrowKeyto an unique primary key.<br>虽然只是一个警告，但是这个会给页面table表格带来无法预测的错误</p><h4 id="1-3-antd-table-key相同"><a href="#1-3-antd-table-key相同" class="headerlink" title="1.3 antd-table key相同"></a>1.3 antd-table key相同</h4><p>这种情况感觉到的错误会比较明显:<strong>因为你在一个列上的操作,在相同key上的列也会响应！</strong><br>当鼠标滑过其中一个列并高亮的时候, 另一个列也会被高亮</p><h3 id="二、添加Key值"><a href="#二、添加Key值" class="headerlink" title="二、添加Key值"></a>二、添加Key值</h3><p>我们知道了为什么添加key, 以及不添加key值会出现什么情况</p><h4 id="2-1-完善dataSource和columns"><a href="#2-1-完善dataSource和columns" class="headerlink" title="2.1 完善dataSource和columns"></a>2.1 完善dataSource和columns</h4><p>每一行(dataSource)和每一列(columns)都应该要有一个唯一key值, 渲染的时候react才能准确知道是否需要修改.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> columns = [&#123;<br>    key: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    title: <span class="hljs-string">&#x27;歌曲名字&#x27;</span>,<br>    dataIndex: <span class="hljs-string">&#x27;title&#x27;</span><br>&#125;]<br><br><span class="hljs-keyword">let</span> dataSource = [&#123;<br>    key: <span class="hljs-number">1</span>,<br>    title: <span class="hljs-string">&#x27;哑巴&#x27;</span><br>&#125;]<br><br>&lt;Table<br>    columns=&#123;columns&#125;<br>    dataSource=&#123;dataSource&#125;<br>/&gt;<br><br></code></pre></div></td></tr></table></figure><h4 id="2-2-直接在table上加上每一列key值-rowKey"><a href="#2-2-直接在table上加上每一列key值-rowKey" class="headerlink" title="2.2 直接在table上加上每一列key值:rowKey"></a>2.2 直接在table上加上每一列key值:rowKey</h4><p>但是注意: 这个key也是要求唯一的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Table<br>    rowKey=&#123;<span class="hljs-function">(<span class="hljs-params">record, index</span>) =&gt;</span> <span class="hljs-string">`complete<span class="hljs-subst">$&#123;record.id&#125;</span><span class="hljs-subst">$&#123;index&#125;</span>`</span>&#125;<br>    ...<br>/&gt;<br></code></pre></div></td></tr></table></figure><p>具体的可以查看官方文档:<a href="https://ant.design/components/table-cn/#Note">《antd-table》</a></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UmiJS踩坑笔记</title>
    <link href="/2021/04/28/UmiJS%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/28/UmiJS%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="UmiJS踩坑笔记"><a href="#UmiJS踩坑笔记" class="headerlink" title="UmiJS踩坑笔记"></a>UmiJS踩坑笔记</h1><p><a href="https://umijs.org/zh-CN">UmiJS</a>官方网站</p><h2 id="UmiJS快速上手"><a href="#UmiJS快速上手" class="headerlink" title="UmiJS快速上手"></a>UmiJS快速上手</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1619615607819-3f8fffc7-323e-40f6-a748-4dc4ea86931c.png#clientId=u83cb3f88-d331-4&from=drop&id=u5afa3aa7&margin=%5Bobject%20Object%5D&name=UmiJS%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B1.png&originHeight=673&originWidth=531&originalType=binary&size=60366&status=done&style=none&taskId=ud835d141-fb42-432c-a714-1716b4c9270" alt="UmiJS快速上手1.png"></p><h2 id="官方未介绍目录结构"><a href="#官方未介绍目录结构" class="headerlink" title="官方未介绍目录结构"></a>官方未介绍目录结构</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1619615627002-2ae8f20c-fb55-40ab-a9d3-f01729f8bbe5.png#clientId=u83cb3f88-d331-4&from=drop&id=Q9Mfl&margin=%5Bobject%20Object%5D&name=%E5%AE%98%E6%96%B9%E6%9C%AA%E4%BB%8B%E7%BB%8D%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png&originHeight=210&originWidth=276&originalType=binary&size=29616&status=done&style=none&taskId=uec1d5b9f-1429-48bc-b5ee-853604d1238" alt="官方未介绍的目录结构.png"></p><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1619615653598-9a2bca24-9270-4dfd-a96b-ab6b0290f88c.png#clientId=u83cb3f88-d331-4&from=drop&id=u901e1e7e&margin=%5Bobject%20Object%5D&name=%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE.png&originHeight=581&originWidth=807&originalType=binary&size=88764&status=done&style=none&taskId=u3a7b0986-0e23-4043-addb-c3898e019e1" alt="常用配置.png"></p><h2 id="第一坑"><a href="#第一坑" class="headerlink" title="第一坑:"></a>第一坑:</h2><p>问题场景</p><h3 id="使用-umijs-umi-app-为模板，创建一个项目："><a href="#使用-umijs-umi-app-为模板，创建一个项目：" class="headerlink" title="使用 @umijs/umi-app 为模板，创建一个项目："></a>使用 @umijs/umi-app 为模板，创建一个项目：</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">yarn <span class="hljs-keyword">create</span> <span class="hljs-variable">@umijs</span><span class="hljs-operator">/</span>umi<span class="hljs-operator">-</span>app<br></code></pre></div></td></tr></table></figure><p>创建失败，报如下错误：</p><p>yarn create @umijs/umi-app 报错：文件名、目录名或卷标语法不正确。</p><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">think</span>@<span class="hljs-string">think-PC</span> <span class="hljs-string">MINGW64</span> /<span class="hljs-string">e</span>/<span class="hljs-string">zny-projects</span>/<span class="hljs-string">demo01-umi</span><br><span class="hljs-string"></span>$ <span class="hljs-string">yarn</span> <span class="hljs-string">create</span> @<span class="hljs-string">umijs</span>/<span class="hljs-string">umi-app</span><br><span class="hljs-string">yarn</span> <span class="hljs-string">create</span> <span class="hljs-string">v1</span>.<span class="hljs-string">22</span>.<span class="hljs-string">4</span><br><span class="hljs-string"></span>[<span class="hljs-string">1</span>/<span class="hljs-string">4</span>] <span class="hljs-string">Resolving</span> <span class="hljs-string">packages</span>...<br>[<span class="hljs-string">2</span>/<span class="hljs-string">4</span>] <span class="hljs-string">Fetching</span> <span class="hljs-string">packages</span>...<br><span class="hljs-string">info</span> <span class="hljs-string">fsevents</span>@<span class="hljs-string">2</span>.<span class="hljs-string">1</span>.<span class="hljs-string">2</span>: <span class="hljs-string">The</span> <span class="hljs-string">platform</span> <span class="hljs-string">&quot;win32&quot;</span> <span class="hljs-string">is</span> <span class="hljs-string">incompatible</span> <span class="hljs-string">with</span> <span class="hljs-string">this</span> <span class="hljs-string">module</span>.<br><span class="hljs-string">info</span> <span class="hljs-string">&quot;fsevents@2.1.2&quot;</span> <span class="hljs-string">is</span> <span class="hljs-string">an</span> <span class="hljs-string">optional</span> <span class="hljs-string">dependency</span> <span class="hljs-string">and</span> <span class="hljs-string">failed</span> <span class="hljs-string">compatibility</span> <span class="hljs-string">check</span>. <span class="hljs-string">Excluding</span> <span class="hljs-string">it</span> <span class="hljs-string">from</span> <span class="hljs-string">installation</span>.<br>[<span class="hljs-string">3</span>/<span class="hljs-string">4</span>] <span class="hljs-string">Linking</span> <span class="hljs-string">dependencies</span>...<br><span class="hljs-string">warning</span> <span class="hljs-string">&quot;@umijs/create-umi-app &gt; @umijs/utils &gt; @babel/register@7.8.6&quot;</span> <span class="hljs-string">has</span> <span class="hljs-string">unmet</span> <span class="hljs-string">peer</span> <span class="hljs-string">dependency</span> <span class="hljs-string">&quot;@babel/core@^7.0.0-0&quot;</span>.<br>[<span class="hljs-string">4</span>/<span class="hljs-string">4</span>] <span class="hljs-string">Building</span> <span class="hljs-string">fresh</span> <span class="hljs-string">packages</span>...<br><span class="hljs-string">success</span> <span class="hljs-string">Installed</span> <span class="hljs-string">&quot;@umijs/create-umi-app@3.0.12&quot;</span> <span class="hljs-string">with</span> <span class="hljs-string">binaries</span>:<br>      - <span class="hljs-built_in">create-umi-app</span><br><span class="hljs-built_in">文件名、目录名或卷标语法不正确。</span><br><span class="hljs-built_in">error</span> <span class="hljs-string">Command</span> <span class="hljs-string">failed</span>.<br><span class="hljs-string">Exit</span> <span class="hljs-string">code</span>: <span class="hljs-string">1</span><br><span class="hljs-string">Command</span>: <span class="hljs-string">D</span>:\<span class="hljs-string">Develop</span>\<span class="hljs-string">nodejs</span>\<span class="hljs-string">node_global</span>\<span class="hljs-string">bin</span>\<span class="hljs-built_in">create-umi-app</span><br><span class="hljs-built_in">Arguments:</span><br><span class="hljs-built_in">Directory:</span> <span class="hljs-string">E</span>:\<span class="hljs-string">zny-projects</span>\<span class="hljs-string">demo01-umi</span><br><span class="hljs-string">Output</span>:<br><br><span class="hljs-string">info</span> <span class="hljs-string">Visit</span> <span class="hljs-string">https</span>://<span class="hljs-string">yarnpkg</span>.<span class="hljs-string">com</span>/<span class="hljs-string">en</span>/<span class="hljs-string">docs</span>/<span class="hljs-string">cli</span>/<span class="hljs-string">create</span> <span class="hljs-string">for</span> <span class="hljs-string">documentation</span> <span class="hljs-string">about</span> <span class="hljs-string">this</span> <span class="hljs-string">command</span>.<br></code></pre></div></td></tr></table></figure><h3 id="解决：参考-https-github-com-yaoningvital-blog-issues-207"><a href="#解决：参考-https-github-com-yaoningvital-blog-issues-207" class="headerlink" title="解决：参考 https://github.com/yaoningvital/blog/issues/207"></a>解决：参考 <a href="https://github.com/yaoningvital/blog/issues/207">https://github.com/yaoningvital/blog/issues/207</a></h3><h4 id="1、我是用-npm-安装的-yarn-："><a href="#1、我是用-npm-安装的-yarn-：" class="headerlink" title="1、我是用 npm 安装的 yarn ："></a>1、我是用 npm 安装的 yarn ：</h4><p><code>npm i yarn tyarn -g</code></p><h4 id="2、我重新设定了-npm-全局包的安装位置-和-缓存位置。"><a href="#2、我重新设定了-npm-全局包的安装位置-和-缓存位置。" class="headerlink" title="2、我重新设定了 npm 全局包的安装位置 和 缓存位置。"></a>2、我重新设定了 npm 全局包的安装位置 和 缓存位置。</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 查看 npm 全局包的安装位置</span><br>npm config get prefix    <span class="hljs-comment">// D:\Develop\nodejs\node_global</span><br><span class="hljs-comment">// 查看 npm 缓存位置</span><br>npm config get cache   <span class="hljs-comment">// D:\Develop\nodejs\node_cache</span><br></code></pre></div></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/17041261/77241598-5e534680-6c2f-11ea-9266-55213f7e8ace.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354317219-b0c1900f-d228-4cfd-8c09-f0e7bf3247b4.png#clientId=ud2174ff5-2007-4&from=paste&height=215&id=ua885d2a1&margin=%5Bobject%20Object%5D&originHeight=215&originWidth=362&originalType=url&status=done&style=none&taskId=u4605e564-37d4-4b61-80bc-4a808e97f89&width=362"></a></p><h4 id="3、查看-yarn-命令的目录："><a href="#3、查看-yarn-命令的目录：" class="headerlink" title="3、查看 yarn 命令的目录："></a>3、查看 yarn 命令的目录：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn <span class="hljs-built_in">global</span> bin <br><span class="hljs-comment">// D:\Develop\nodejs\node_global\bin</span><br></code></pre></div></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/17041261/77241622-b7bb7580-6c2f-11ea-82b6-2b8647d98d59.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354317246-c1dad564-34e5-40ca-8696-b19567c78b33.png#clientId=ud2174ff5-2007-4&from=paste&height=99&id=ud9b1e309&margin=%5Bobject%20Object%5D&originHeight=99&originWidth=333&originalType=url&status=done&style=none&taskId=u336a4b32-60ab-4af6-ba0f-edec767eec2&width=333"></a></p><h4 id="4、将获取到的-yarn-命令的目录配置到环境变量-Path-上。"><a href="#4、将获取到的-yarn-命令的目录配置到环境变量-Path-上。" class="headerlink" title="4、将获取到的 yarn 命令的目录配置到环境变量 Path 上。"></a>4、将获取到的 yarn 命令的目录配置到环境变量 Path 上。</h4><p><a href="https://user-images.githubusercontent.com/17041261/77241558-97d78200-6c2e-11ea-9d16-7768b6498f9b.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354318302-73a57f4b-1d54-46c6-b884-2df930e624e2.png#clientId=ud2174ff5-2007-4&from=paste&height=726&id=u0ebe29a1&margin=%5Bobject%20Object%5D&originHeight=726&originWidth=642&originalType=url&status=done&style=none&taskId=ucb8a706d-2fad-4d28-bce3-35bcf7d4d76&width=642"></a><br>到这一步之后，我再尝试执行命令<code>yarn create @umijs/umi-app</code>，问题并没有解决，还是报同样的错误。</p><h4 id="5、查看-yarn-的全局安装位置："><a href="#5、查看-yarn-的全局安装位置：" class="headerlink" title="5、查看 yarn 的全局安装位置："></a>5、查看 yarn 的全局安装位置：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn <span class="hljs-built_in">global</span> bin <br><span class="hljs-comment">// D:\Develop\nodejs\node_global\bin</span><br></code></pre></div></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/17041261/77241671-88593880-6c30-11ea-90d1-2e56ccd5d0a2.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354317996-2ea0b9d7-507e-4dea-aaf6-e0ee2ef37bf6.png#clientId=ud2174ff5-2007-4&from=paste&height=105&id=uae18da4c&margin=%5Bobject%20Object%5D&originHeight=105&originWidth=388&originalType=url&status=done&style=none&taskId=u481a446c-d2b6-4323-9355-c13c89e86ce&width=388"></a><br>可以发现，yarn 的全局安装位置 和 bin 的位置不一致。</p><h4 id="6、修改-yarn-的全局安装位置"><a href="#6、修改-yarn-的全局安装位置" class="headerlink" title="6、修改 yarn 的全局安装位置"></a>6、修改 yarn 的全局安装位置</h4><p>将 yarn 的全局安装位置 修改为和 npm 的一致。<br>因为我的 npm 的位置是 “D:\Develop\nodejs”，那么我在 “D:\Develop” 下创建一个 yarn 文件夹，在 yarn 文件夹下再创建一个 global 文件夹和一个 cache 文件夹。<br>然后执行下面的命令，来设置 yarn 的全局安装位置和 缓存位置：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn config set <span class="hljs-built_in">global</span>-folder <span class="hljs-string">&quot;D:\Develop\yarn\global&quot;</span><br>yarn config set cache-folder <span class="hljs-string">&quot;D:\Develop\yarn\cache&quot;</span><br></code></pre></div></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/17041261/77241766-01a55b00-6c32-11ea-975e-142238576a38.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354318206-a4447745-bf56-4489-9eef-fbb2f29eb2a5.png#clientId=ud2174ff5-2007-4&from=paste&height=166&id=u303b2fc3&margin=%5Bobject%20Object%5D&originHeight=166&originWidth=482&originalType=url&status=done&style=none&taskId=ueeb844d7-3608-4be1-bfa0-12e86f3cfb1&width=482"></a><a href="https://user-images.githubusercontent.com/17041261/77241782-24377400-6c32-11ea-8cfb-7d44bb437e61.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354319864-35bece77-a4c7-4a1b-b18a-f900067ce972.png#clientId=ud2174ff5-2007-4&from=paste&height=168&id=u39b3e83e&margin=%5Bobject%20Object%5D&originHeight=168&originWidth=482&originalType=url&status=done&style=none&taskId=u25081924-59c8-43d2-89c9-f1fc6f3effe&width=482"></a></p><h4 id="7、再查看-yarn-的全局安装位置-和缓存位置"><a href="#7、再查看-yarn-的全局安装位置-和缓存位置" class="headerlink" title="7、再查看 yarn 的全局安装位置 和缓存位置"></a>7、再查看 yarn 的全局安装位置 和缓存位置</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$ yarn <span class="hljs-built_in">global</span> dir<br><span class="hljs-comment">// D:\Develop\yarn\global</span><br><br><br>$ yarn cache dir<br><span class="hljs-comment">// D:\Develop\yarn\cache\v6</span><br></code></pre></div></td></tr></table></figure><p>说明上一步的修改操作成功。</p><h4 id="8、再执行yarn-create-umijs-umi-app"><a href="#8、再执行yarn-create-umijs-umi-app" class="headerlink" title="8、再执行yarn create @umijs/umi-app"></a>8、再执行yarn create @umijs/umi-app</h4><p>再执行 ：<br><code>yarn create @umijs/umi-app</code><br>操作成功：<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354320114-d0e48a33-0a61-4733-ad7c-7c8496f85e58.png#clientId=ud2174ff5-2007-4&from=paste&height=752&id=u2098019d&margin=%5Bobject%20Object%5D&originHeight=752&originWidth=981&originalType=url&status=done&style=none&taskId=u34227728-c3be-4875-9885-39d6803a4bf&width=981"></p><h2 id="第二坑："><a href="#第二坑：" class="headerlink" title="第二坑："></a>第二坑：</h2><h3 id="在yarn-build打包好，准备在serve服务器上本地验证"><a href="#在yarn-build打包好，准备在serve服务器上本地验证" class="headerlink" title="在yarn build打包好，准备在serve服务器上本地验证"></a>在<code>yarn build</code>打包好，准备在<code>serve</code>服务器上本地验证</h3><p>umi官方文档显示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">本地验证<br>发布之前，可以通过 serve 做本地验证，<br><br><br>$ yarn <span class="hljs-built_in">global</span> add serve<br>$ serve ./dist<br><br>   ┌────────────────────────────────────────────────────┐<br>   │                                                    │<br>   │   Serving!                                         │<br>   │                                                    │<br>   │   - Local:            http:<span class="hljs-comment">//localhost:5000        │</span><br>   │   - On Your Network:  http:<span class="hljs-comment">//192.168.12.34:5000    │</span><br>   │                                                    │<br>   │   Copied local address to clipboard!               │<br>   │                                                    │<br>   └────────────────────────────────────────────────────┘<br></code></pre></div></td></tr></table></figure><p>结果在vscode下报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">PS E:\前端自学\react1\融职商场后台管理\umijs\myapp&gt; serve --version<br>serve : 无法将“serve”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，    <br>如果包括路径，请确保路径正确，然后再试一次。<br>所在位置 行:<span class="hljs-number">1</span> 字符: <span class="hljs-number">1</span><br>+ serve --version<br>+ ~~~~~<br>    + CategoryInfo          : ObjectNotFound: (serve:<span class="hljs-built_in">String</span>) [], CommandNotFoundException     <br>    + FullyQualifiedErrorId : CommandNotFoundException<br></code></pre></div></td></tr></table></figure><h3 id="解决：最后在改在CMD命令行里执行成功"><a href="#解决：最后在改在CMD命令行里执行成功" class="headerlink" title="解决：最后在改在CMD命令行里执行成功"></a>解决：最后在改在CMD命令行里执行成功</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Microsoft Windows [版本 <span class="hljs-number">10.0</span><span class="hljs-number">.19041</span><span class="hljs-number">.685</span>]<br>(c) <span class="hljs-number">2020</span> Microsoft Corporation. 保留所有权利。<br><br>E:\前端自学\react1\融职商场后台管理\umijs\myapp&gt;serve ./dist<br><br>   ┌────────────────────────────────────────────────────┐<br>   │                                                    │<br>   │   Serving!                                         │<br>   │                                                    │<br>   │   - Local:            http:<span class="hljs-comment">//localhost:5000        │</span><br>   │   - On Your Network:  http:<span class="hljs-comment">//192.168.43.198:5000   │</span><br>   │                                                    │<br>   │   Copied local address to clipboard!               │<br>   │                                                    │<br>   └────────────────────────────────────────────────────┘<br></code></pre></div></td></tr></table></figure><h2 id="第三坑："><a href="#第三坑：" class="headerlink" title="第三坑："></a>第三坑：</h2><h3 id="配置publicPath、outputPath"><a href="#配置publicPath、outputPath" class="headerlink" title="配置publicPath、outputPath"></a>配置<code>publicPath</code>、<code>outputPath</code></h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">publicPath:<span class="hljs-string">&#x27;https://xxx.com/cdn/&#x27;</span>,<br>outputPath:<span class="hljs-string">&#x27;build&#x27;</span>,<br></code></pre></div></td></tr></table></figure><p><code>publicPath</code>:暂时无效果<br><code>outputPath</code>:未新建并打包到<code>build</code></p><h3 id="解决：重新启动项目，需要多试几次publicPath、outputPath，"><a href="#解决：重新启动项目，需要多试几次publicPath、outputPath，" class="headerlink" title="解决：重新启动项目，需要多试几次publicPath、outputPath，"></a>解决：重新启动项目，需要多试几次<code>publicPath</code>、<code>outputPath</code>，</h3><h2 id="第四坑："><a href="#第四坑：" class="headerlink" title="第四坑："></a>第四坑：</h2><h3 id="使用dva插件时，执行命令umi-dva-list-model时："><a href="#使用dva插件时，执行命令umi-dva-list-model时：" class="headerlink" title="使用dva插件时，执行命令umi dva list model时："></a>使用<code>dva</code>插件时，执行命令<code>umi dva list model</code>时：</h3><p>umi : 无法将“umi”项识别为 cmdlet、函数、脚本文件或可运行程序的名称</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">umi : 无法将“umi”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。<br>+ umi dva list model<br>+ ~~~<br>    + CategoryInfo          : ObjectNotFound: (umi:<span class="hljs-built_in">String</span>) [], CommandNotFoundException<br>    + FullyQualifiedErrorId : CommandNotFoundException<br></code></pre></div></td></tr></table></figure><h3 id="解决：umi-dva-list-model命令前加上yarn，"><a href="#解决：umi-dva-list-model命令前加上yarn，" class="headerlink" title="解决：umi dva list model命令前加上yarn，"></a>解决：<code>umi dva list model</code>命令前加上<code>yarn</code>，</h3><p>使用<code>npm</code>也不行。<br>执行结果如下：<br><code>yarn umi dva list model </code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn run v1<span class="hljs-number">.22</span><span class="hljs-number">.5</span><br>$ E:\umijs\myapp\node_modules\.bin\umi dva list model<br><br>  Models <span class="hljs-keyword">in</span> your project:<br><br><br>  Totally <span class="hljs-number">0.</span><br><br>Done <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span>92s.<br></code></pre></div></td></tr></table></figure><p>umijsDemo <a href="https://github.com/13982720426/UmiJS-Learning-record.git">https://github.com/13982720426/UmiJS-Learning-record.git</a></p><h2 id="第五坑："><a href="#第五坑：" class="headerlink" title="第五坑："></a>第五坑：</h2><h3 id="使用umi-ui时配置UMI-UI-1-umi-dev"><a href="#使用umi-ui时配置UMI-UI-1-umi-dev" class="headerlink" title="使用umi-ui时配置UMI_UI=1 umi dev"></a>使用umi-ui时配置UMI_UI=1 umi dev</h3><p>在umi_ui\package.json中配置了</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;start:umi-ui&quot;</span>: <span class="hljs-string">&quot;UMI_UI=1 umi dev&quot;</span>,<br></code></pre></div></td></tr></table></figure><p>但是使用<code>yarn start:umi-ui</code>启动时 ‘UMI_UI’ 不是内部或外部命令，也不是可运行的程序</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn run v1<span class="hljs-number">.22</span><span class="hljs-number">.5</span><br>$ UMI_UI=<span class="hljs-number">1</span> umi dev<br><span class="hljs-string">&#x27;UMI_UI&#x27;</span> 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。<br>error Command failed <span class="hljs-keyword">with</span> exit code <span class="hljs-number">1.</span><br>info Visit https:<span class="hljs-comment">//yarnpkg.com/en/docs/cli/run for documentation about this command.</span><br></code></pre></div></td></tr></table></figure><h3 id="解决：最后直接使用yarn-start命令"><a href="#解决：最后直接使用yarn-start命令" class="headerlink" title="解决：最后直接使用yarn start命令"></a>解决：最后直接使用<code>yarn start</code>命令</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn run v1<span class="hljs-number">.22</span><span class="hljs-number">.5</span><br>$ umi dev<br>🚀 Starting Umi UI using umi@<span class="hljs-number">3.4</span><span class="hljs-number">.14</span>...<br>🌈 Umi UI mini Ready on port <span class="hljs-number">3000.</span><br>Starting the development server...<br><br>√ Webpack<br>  Compiled successfully <span class="hljs-keyword">in</span> <span class="hljs-number">4.</span>46s<br><br> DONE  Compiled successfully <span class="hljs-keyword">in</span> 4461ms                                                                                                            下午<span class="hljs-number">9</span>:<span class="hljs-number">00</span>:<span class="hljs-number">37</span><br><br>  App running at:<br>  - Local:   http:<span class="hljs-comment">//localhost:8000 (copied to clipboard)</span><br>  - Network: http:<span class="hljs-comment">//192.168.43.198:8000</span><br> WAIT  Compiling...                                                                                                                               下午<span class="hljs-number">9</span>:<span class="hljs-number">00</span>:<span class="hljs-number">37</span><br><br>√ Webpack<br>  Compiled successfully <span class="hljs-keyword">in</span> <span class="hljs-number">252.</span>95ms<br><br> DONE  Compiled successfully <span class="hljs-keyword">in</span> 253ms   <br></code></pre></div></td></tr></table></figure><p>打开浏览器结果成功了<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620306125136-3308a634-5ac9-4ddb-aa45-58e65e8319d6.png#clientId=u6cfb84fd-a9b2-4&from=paste&height=515&id=u6091b497&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1030&originWidth=1920&originalType=binary&size=72547&status=done&style=none&taskId=u6a22e13d-26c9-4c6f-bc19-1310cbbdd2a&width=960" alt="浏览器运行成功.png"></p><p>点击右下角悬浮球，就出现了控制台<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620306502779-d8e2c5ba-5ab5-4f3b-b5a6-b927bad01c3a.png#clientId=u6cfb84fd-a9b2-4&from=paste&height=509&id=u4044a1d4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=684&originWidth=1009&originalType=binary&size=55596&status=done&style=none&taskId=ub258df9a-0821-4105-b907-72122d217fe&width=750.4921875" alt="打开umi-ui控制台.png"></p><p>umi-uiDome <a href="https://github.com/13982720426/umi-ui.git">https://github.com/13982720426/umi-ui.git</a></p><h2 id="第六坑："><a href="#第六坑：" class="headerlink" title="第六坑："></a>第六坑：</h2><h3 id="antd-pro结合uimjs使用，安装工作台模板时报错"><a href="#antd-pro结合uimjs使用，安装工作台模板时报错" class="headerlink" title="antd pro结合uimjs使用，安装工作台模板时报错"></a>antd pro结合uimjs使用，安装工作台模板时报错</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620554810078-4732a126-1597-4c36-a85b-e3d73e289c1e.png#clientId=ue197a22d-e4ed-4&from=paste&height=795&id=u0f63c27e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=795&originWidth=1041&originalType=binary&size=157913&status=done&style=none&taskId=u2f8c00ab-9f8d-4a0f-8c2c-2beddbe4466&width=1041" alt="image.png"><br>终端显示<code>Execute task error Error: Error: Command failed: npm install -d bizcharts@^3.5.3-beta.0 prop-types@^15.5.10 --registry=[https://registry.npm.taobao.org](https://registry.npm.taobao.org) --save</code><br>安装失败</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Bundle <span class="hljs-keyword">with</span> webpack <span class="hljs-number">5.</span>..<br>Execute task error <span class="hljs-built_in">Error</span>: <span class="hljs-built_in">Error</span>: Command failed: npm install -d bizcharts@^<span class="hljs-number">3.5</span><span class="hljs-number">.3</span>-beta<span class="hljs-number">.0</span> prop-types@^<span class="hljs-number">15.5</span><span class="hljs-number">.10</span> --registry=https:<span class="hljs-comment">//registry.npm.taobao.org --save</span><br><span class="hljs-literal">undefined</span><br><span class="hljs-literal">undefined</span><br></code></pre></div></td></tr></table></figure><h3 id="解决：在终端使用cnpm手动安装"><a href="#解决：在终端使用cnpm手动安装" class="headerlink" title="解决：在终端使用cnpm手动安装"></a>解决：在终端使用cnpm手动安装</h3><p><code>cnpm install -d bizcharts@^3.5.3-beta.0 prop-types@^15.5.10 --registry=[https://registry.npm.taobao.org](https://registry.npm.taobao.org) --save</code><br>安装成功</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>/<span class="hljs-number">2</span>] prop-types@^<span class="hljs-number">15.5</span><span class="hljs-number">.10</span> installed at node_modules\_prop-types@<span class="hljs-number">15.7</span><span class="hljs-number">.2</span>@prop-types<br>[<span class="hljs-number">2</span>/<span class="hljs-number">2</span>] bizcharts@^<span class="hljs-number">3.5</span><span class="hljs-number">.3</span>-beta<span class="hljs-number">.0</span> installed at node_modules\_bizcharts@<span class="hljs-number">3.5</span><span class="hljs-number">.9</span>@bizcharts<br>Recently updated (since <span class="hljs-number">2021</span>-<span class="hljs-number">05</span>-<span class="hljs-number">02</span>): <span class="hljs-number">9</span> packages (detail see file E:\前端自学\react1\融职商场后台管理\antd_pro_simple\node_modules\.recently_updates.txt)  <br>  Today:<br>    → bizcharts@<span class="hljs-number">3.5</span><span class="hljs-number">.9</span> › @antv/g2@<span class="hljs-number">3.5</span><span class="hljs-number">.15</span> › venn.js@<span class="hljs-number">0.2</span><span class="hljs-number">.20</span> › fmin@<span class="hljs-number">0.0</span><span class="hljs-number">.2</span> › tape@<span class="hljs-number">4.13</span><span class="hljs-number">.3</span> › string.prototype.trim@<span class="hljs-number">1.2</span><span class="hljs-number">.4</span> › es-abstract@<span class="hljs-number">1.18</span><span class="hljs-number">.0</span> › es-to-primitive@<span class="hljs-number">1.2</span><span class="hljs-number">.1</span> › is-symbol@^<span class="hljs-number">1.0</span><span class="hljs-number">.2</span>(<span class="hljs-number">1.0</span><span class="hljs-number">.4</span>) (<span class="hljs-number">03</span>:<span class="hljs-number">12</span>:<span class="hljs-number">11</span>)<br>All packages installed (<span class="hljs-number">117</span> packages installed <span class="hljs-keyword">from</span> npm registry, used 8s(network 8s), speed <span class="hljs-number">816.</span>88kB/s, json <span class="hljs-number">113</span>(<span class="hljs-number">383.</span>88kB), tarball <span class="hljs-number">5.</span>97MB)<br></code></pre></div></td></tr></table></figure><h2 id="第七坑："><a href="#第七坑：" class="headerlink" title="第七坑："></a>第七坑：</h2><h3 id="在mock文件夹中，无法直接打印数据在浏览器上显示"><a href="#在mock文件夹中，无法直接打印数据在浏览器上显示" class="headerlink" title="在mock文件夹中，无法直接打印数据在浏览器上显示"></a>在mock文件夹中，无法直接打印数据在浏览器上显示</h3><p>官方文档解释很少，在<code>express</code>第四版上查看<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620666389853-f734fd75-4f0e-494c-9220-68989d491061.png#clientId=u2ebfdb81-5df4-4&from=paste&height=462&id=ue6d064e4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=462&originWidth=607&originalType=binary&size=37678&status=done&style=none&taskId=u1f60bb4f-ed44-4499-9558-3eee42d51fc&width=607" alt="image.png"><br>mock类似后端，无法直接在浏览器中consloe.log(req)打印出数据</p><h3 id="解决：查看express官网，进去v4版本Request目录"><a href="#解决：查看express官网，进去v4版本Request目录" class="headerlink" title="解决：查看express官网，进去v4版本Request目录"></a>解决：查看<a href="https://www.expressjs.com.cn/4x/api.html">express</a>官网，进去v4版本Request目录</h3><p>在Request目录下按住 ctrl+f 搜索 app.post<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620667002424-8dc60de2-b10d-4e74-be83-dd4266c657be.png#clientId=u2ebfdb81-5df4-4&from=paste&height=521&id=ue76268fb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=521&originWidth=1236&originalType=binary&size=129622&status=done&style=none&taskId=u9b56d5b2-1a25-46bc-8d3d-050726a6cfe&width=1236" alt="image.png"><br>得知在<code>req.body</code>可以获取到mock中的数据，并能通过<code>console.log(req.body)</code>打印到浏览器上</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-keyword">var</span> app = express()<br><br>app.use(express.json()) <span class="hljs-comment">// for parsing application/json</span><br>app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;)) <span class="hljs-comment">// for parsing application/x-www-form-urlencoded</span><br><br>app.post(<span class="hljs-string">&#x27;/profile&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(req.body)<br>  res.json(req.body)<br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UmiJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React-Hooks</title>
    <link href="/2021/04/26/React-Hooks/"/>
    <url>/2021/04/26/React-Hooks/</url>
    
    <content type="html"><![CDATA[<p>在 React 的世界中，有容器组件和 UI 组件之分，在 React Hooks 出现之前，UI 组件我们可以使用函数，无状态组件来展示 UI，而对于容器组件，函数组件就显得无能为力，我们依赖于类组件来获取数据，处理数据，并向下传递参数给 UI 组件进行渲染。在我看来，使用 React Hooks 相比于从前的类组件有以下几点好处：</p><ol><li>代码可读性更强，原本同一块功能的代码逻辑被拆分在了不同的生命周期函数中，容易使开发者不利于维护和迭代，通过 React Hooks 可以将功能代码聚合，方便阅读维护</li><li>组件树层级变浅，在原本的代码中，我们经常使用 HOC/render props 等方式来复用组件的状态，增强功能等，无疑增加了组件树层数及渲染，而在 React Hooks 中，这些功能都可以通过强大的自定义的 Hooks 来实现</li></ol><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="第一步：安装node-js"><a href="#第一步：安装node-js" class="headerlink" title="第一步：安装node.js"></a>第一步：安装node.js</h3><p>官网下载安装<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><h3 id="第二步：安装create-react-app脚手架工具"><a href="#第二步：安装create-react-app脚手架工具" class="headerlink" title="第二步：安装create-react-app脚手架工具"></a>第二步：安装create-react-app脚手架工具</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">cnpm <span class="hljs-keyword">install</span> -g create-react-app<br></code></pre></div></td></tr></table></figure><h3 id="第三步：创建react项目"><a href="#第三步：创建react项目" class="headerlink" title="第三步：创建react项目"></a>第三步：创建react项目</h3><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">demo01</span><br></code></pre></div></td></tr></table></figure><p>在<code>npm start</code>启动项目时可能会出错</p><p>删除node_modules文件夹，在项目下的命令行输出入<code>cnpm install</code>重新安装依赖包</p><h3 id="第四步：精简代码"><a href="#第四步：精简代码" class="headerlink" title="第四步：精简代码"></a>第四步：精简代码</h3><p>vscode打开项目，精简代码</p><p>demo01\src\Example.js新建一个文件</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1619433406968-7ac16ccc-f4b6-46b3-85c0-18c6c370c43d.png#clientId=uc8289952-89bf-4&from=ui&id=uaf31030f&margin=%5Bobject%20Object%5D&name=image-20210206164703130.png&originHeight=356&originWidth=1237&originalType=binary&size=42622&status=done&style=none&taskId=u0dd03524-250c-4cfe-8d7d-f24c4a54ce6" alt="image-20210206164703130.png"></p><p>Example.js中原来react写法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props)<br>    <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div&gt;<br>        &lt;p&gt; You clicked &#123;<span class="hljs-built_in">this</span>.state.count&#125; times&lt;/p&gt;<br>        &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.addCount.bind(<span class="hljs-built_in">this</span>)&#125;&gt;Click me&lt;/button&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">addCount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">count</span>: <span class="hljs-built_in">this</span>.state.count + <span class="hljs-number">1</span> &#125;)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>并在inde.js中调用<code>import Example from &#39;./Example&#39;</code>以及<code>&lt;Example&gt;</code></p><p>hooks写法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//函数执行几次？ n+1次 因为useState执行时有缓存，不会将count重新设置成0，会继续累加</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数执行&#x27;</span>)<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt; You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;<br>      &gt;<br>        Click me<br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example<br></code></pre></div></td></tr></table></figure><p>useState有两个参数<code>[count,setCount]</code>,  count就是元素的状态，setCount是更新元素状态的方法，<br><code>const [count, setCount] = useState(0)</code>//是ES6解构赋值写法，useState(0)等于{ count: 0 }</p><p>Example()函数执行几次？ n+1次 因为React底层做了处理，useState执行时有缓存，将上一次执行的状态保存，不会将count重新设置成0，会继续累加</p><p>hooks是react新特性，react16.8以上才可以用</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620837974413-7e5a0df2-d39d-4d56-984c-3a947b560d9b.png#clientId=u27aee433-b580-4&from=paste&height=626&id=u1d574cbd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=626&originWidth=597&originalType=binary&size=131735&status=done&style=none&taskId=u1b437a1a-bf49-4539-8716-517cd30fb86&width=597" alt="image.png"></p><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p>在demo01\src\Example2.js中，先写一个错误例子<code>useState</code>不能用在条件语句中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">let</span> showSex = <span class="hljs-literal">true</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [age, setAge] = useState(<span class="hljs-number">18</span>)<br>  <span class="hljs-keyword">if</span> (showSex) &#123;<br>    <span class="hljs-keyword">const</span> [sex, setSex] = useState(<span class="hljs-string">&#x27;男&#x27;</span>)<span class="hljs-comment">//useState不能用在条件语句中</span><br>    showSex = <span class="hljs-literal">false</span><br>  &#125;<br>  <span class="hljs-keyword">const</span> [work, setWork] = useState(<span class="hljs-string">&#x27;程序员&#x27;</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;JS今年：&#123;age&#125;&lt;/p&gt;<br>      &lt;p&gt;性别：&#123;sex&#125;&lt;/p&gt;<br>      &lt;p&gt;工作：&#123;work&#125;&lt;/p&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example2<br></code></pre></div></td></tr></table></figure><p>正确写法<strong>就是React Hooks不能出现在条件判断语句中，因为它必须有完全一样的渲染顺序</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [age, setAge] = useState(<span class="hljs-number">18</span>)<br>  <span class="hljs-keyword">const</span> [sex, setSex] = useState(<span class="hljs-string">&#x27;男&#x27;</span>)<br>  <span class="hljs-keyword">const</span> [work, setWork] = useState(<span class="hljs-string">&#x27;程序员&#x27;</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;JS今年：&#123;age&#125;&lt;/p&gt;<br>      &lt;p&gt;性别：&#123;sex&#125;&lt;/p&gt;<br>      &lt;p&gt;工作：&#123;work&#125;&lt;/p&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example2<br></code></pre></div></td></tr></table></figure><h2 id="useEffect代替常用生命周期函数"><a href="#useEffect代替常用生命周期函数" class="headerlink" title="useEffect代替常用生命周期函数"></a>useEffect代替常用生命周期函数</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620838071339-fdcbd33f-d03d-4af1-acea-6e8ea66c6b7a.png#clientId=u27aee433-b580-4&from=paste&height=520&id=u264d2652&margin=%5Bobject%20Object%5D&name=image.png&originHeight=520&originWidth=521&originalType=binary&size=119902&status=done&style=none&taskId=u2a1d051c-d6f3-44c5-b983-3081a6b5ddf&width=521" alt="image.png"><br>useEffect是异步</p><h3 id="原始的方式"><a href="#原始的方式" class="headerlink" title="原始的方式"></a>原始的方式</h3><p>先用原始的方式把计数器的Demo增加两个生命周期函数<code>componentDidMount</code>和<code>componentDidUpdate</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props)<br>    <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`componentDidMount=&gt;You clicked <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.state.count&#125;</span> times`</span>)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">componentDidUpdate</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`componentDidUpdate=&gt;You clicked <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.state.count&#125;</span> times`</span>)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div&gt;<br>        &lt;p&gt; You clicked &#123;<span class="hljs-built_in">this</span>.state.count&#125; times&lt;/p&gt;<br>        &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.addCount.bind(<span class="hljs-built_in">this</span>)&#125;&gt;Click me&lt;/button&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">addCount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">count</span>: <span class="hljs-built_in">this</span>.state.count + <span class="hljs-number">1</span> &#125;)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="useEffect-实现-componentDidUpdate生命周期函数"><a href="#useEffect-实现-componentDidUpdate生命周期函数" class="headerlink" title="useEffect 实现 componentDidUpdate生命周期函数"></a>useEffect 实现 componentDidUpdate生命周期函数</h3><p><code>useEffect</code>不传参数时，监听所有的状态，类似<code>componentDidUpdate</code>，只要页面的state或者model中的state中定义的变量值发生改变,这个方法就会执行</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;componentDidUpdate&#x27;</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="useEffect-实现-componentDidMonut生命周期函数"><a href="#useEffect-实现-componentDidMonut生命周期函数" class="headerlink" title="useEffect 实现 componentDidMonut生命周期函数"></a>useEffect 实现 componentDidMonut生命周期函数</h3><p><code>useEffect</code>传第二个参数时[ ]，第二个参数是要监听哪些状态的改变，类似<code>componentDidMonut</code>，组件挂在完成后执行</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;componentDidMonut&#x27;</span>)<br>&#125;,[])<br></code></pre></div></td></tr></table></figure><h3 id="使用React-Hooks的情况下"><a href="#使用React-Hooks的情况下" class="headerlink" title="使用React Hooks的情况下"></a>使用<code>React Hooks</code>的情况下</h3><p>我们可以使用下面的代码来完成上边代码的生命周期效果，代码如下（修改了以前的diamond）： 记得要先引入<code>useEffect</code>后，才可以正常使用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState , useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ count , setCount ] = useState(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//---关键代码---------start-------</span><br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`useEffect=&gt;You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>)<br>    &#125;)<br><span class="hljs-comment">//useEffect不传参数时，类似componentDidUpdate，useEffect传第二个参数时，类似componentDidMonut</span><br><span class="hljs-comment">//      useEffect(()=&gt;&#123;</span><br><span class="hljs-comment">//       console.log(`useEffect=&gt;You clicked $&#123;count&#125; times`)</span><br><span class="hljs-comment">//   &#125;,[])</span><br>  <br>    <span class="hljs-comment">//---关键代码---------end-------</span><br><br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>            &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>&#123;setCount(count+<span class="hljs-number">1</span>)&#125;&#125;&gt;click me&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example;<br></code></pre></div></td></tr></table></figure><h3 id="useEffect两个注意点"><a href="#useEffect两个注意点" class="headerlink" title="useEffect两个注意点"></a>useEffect两个注意点</h3><ol><li>React首次渲染和之后的每次渲染都会调用一遍<code>useEffect</code>函数，而之前我们要用两个生命周期函数分别表示首次渲染(componentDidMonut)和更新导致的重新渲染(componentDidUpdate)。</li><li>useEffect中定义的函数的执行不会阻碍浏览器更新视图，也就是说这些函数时异步执行的，而<code>componentDidMonut</code>和<code>componentDidUpdate</code>中的代码都是同步执行的。个人认为这个有好处也有坏处吧，比如我们要根据页面的大小，然后绘制当前弹出窗口的大小，如果时异步的就不好操作了。</li></ol><h3 id="useEffect-实现-componentWillUnmount生命周期函数"><a href="#useEffect-实现-componentWillUnmount生命周期函数" class="headerlink" title="useEffect 实现 componentWillUnmount生命周期函数"></a>useEffect 实现 componentWillUnmount生命周期函数</h3><p>在useEffect函数里<code>return ( )=&gt;&#123; &#125;</code>再return一个函数，这个函数会在组件卸载之前执行类似<code>componentWillUnmount</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-comment">//返回的是一个函数，这个函数会在组件卸载之前执行类似componentWillUnmount</span><br><span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;componentWillUnmount.....&#x27;</span>);<br>&#125;<br>&#125;, []);<br></code></pre></div></td></tr></table></figure><p>在写React应用的时候，在组件中经常用到<code>componentWillUnmount</code>生命周期函数（组件将要被卸载时执行）。比如我们的定时器要清空，避免发生内存泄漏;比如登录状态要取消掉，避免下次进入信息出错。定时器没有关闭等</p><h4 id="useEffect关闭定时器"><a href="#useEffect关闭定时器" class="headerlink" title="useEffect关闭定时器"></a>useEffect关闭定时器</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">React.useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-keyword">let</span> timer=<span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    setCount(<span class="hljs-function"><span class="hljs-params">count</span>=&gt;</span>count+<span class="hljs-number">1</span>)<br>  &#125;, <span class="hljs-number">1000</span>);<br>  <span class="hljs-comment">//返回的是一个函数，这个函数会在组件卸载之前执行</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">clearInterval</span>(timer)<br>  &#125;<br>&#125;,[])<br></code></pre></div></td></tr></table></figure><h4 id="useEffect解绑副作用"><a href="#useEffect解绑副作用" class="headerlink" title="useEffect解绑副作用"></a>useEffect解绑副作用</h4><p>学习<code>React Hooks</code> 时，我们要改掉生命周期函数的概念（人往往有先入为主的毛病，所以很难改掉），因为<code>Hooks</code>叫它副作用，所以<code>componentWillUnmount</code>也可以理解成解绑副作用。这里为了演示用<code>useEffect</code>来实现类似<code>componentWillUnmount</code>效果，先安装<code>React-Router</code>路由,进入项目根本录，使用<code>npm</code>进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install --save react-router-dom<br></code></pre></div></td></tr></table></figure><p>然后打开<code>Example.js</code>文件，进行改写代码，先引入对应的<code>React-Router</code>组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; BrowserRouter <span class="hljs-keyword">as</span> Router, Route, Link &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span><br></code></pre></div></td></tr></table></figure><p>在文件中编写两个新组件，因为这两个组件都非常的简单，所以就不单独建立一个新的文件来写了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSPang.com<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">List</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>List-Page<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>有了这两个组件后，接下来可以编写路由配置，在以前的计数器代码中直接增加就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>        &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>        &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>&#123;setCount(count+<span class="hljs-number">1</span>)&#125;&#125;&gt;click me&lt;/button&gt;<br><br>        &lt;Router&gt;<br>            &lt;ul&gt;<br>                &lt;li&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span> &lt;/li&gt;<br>                &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/list/&quot;</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span> &lt;/li&gt;<br>            &lt;/ul&gt;<br>            &lt;Route path=<span class="hljs-string">&quot;/&quot;</span> exact component=&#123;Index&#125; /&gt;<br>            &lt;Route path=<span class="hljs-string">&quot;/list/&quot;</span> component=&#123;List&#125; /&gt;<br>        &lt;/Router&gt;<br>    &lt;/div&gt;<br>)<br></code></pre></div></td></tr></table></figure><p>然后到浏览器中查看一下，看看组件和路由是否可用。如果可用，我们现在可以调整<code>useEffect</code>了。在两个新组件中分别加入<code>useEffect()</code>函数:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;useEffect=&gt;老弟，你来了！Index页面&#x27;</span>)<br>        )<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSPang.com<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">List</span>(<span class="hljs-params"></span>) </span>&#123;<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;useEffect=&gt;老弟，你来了！List页面&#x27;</span>)<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>List-Page<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时候我们点击<code>Link</code>进入任何一个组件，在浏览器中都会打印出对应的一段话。这时候可以用<strong>返回一个函数的形式进行解绑</strong>，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;useEffect=&gt;老弟你来了！Index页面&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;老弟，你走了!Index页面&#x27;</span>)<br>        &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSPang.com<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>  &#125;<br></code></pre></div></td></tr></table></figure><p>这时候你在浏览器中预览，我们仿佛实现了<code>componentWillUnmount</code>方法。但这只是好像实现了，当点击计数器按钮时，你会发现<code>老弟，你走了!Index页面</code>，也出现了。这到底是怎么回事那？其实每次状态发生变化，<code>useEffect</code>都进行了解绑。</p><h4 id="useEffect的第二个参数"><a href="#useEffect的第二个参数" class="headerlink" title="useEffect的第二个参数"></a>useEffect的第二个参数</h4><p>那到底要如何实现类似<code>componentWillUnmount</code>的效果那?这就需要请出<code>useEffect</code>的第二个参数，它是一个数组，数组中可以写入很多状态对应的变量，意思是当状态值发生变化时，我们才进行解绑。但是当传空数组<code>[]</code>时，就是当组件将被销毁时才进行解绑，这也就实现了<code>componentWillUnmount</code>的生命周期函数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;useEffect=&gt;老弟你来了！Index页面&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;老弟，你走了!Index页面&#x27;</span>)<br>        &#125;<br>    &#125;,[])<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSPang.com<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>为了更加深入了解第二个参数的作用，把计数器的代码也加上<code>useEffect</code>和解绑方法，并加入第二个参数为空数组。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ count , setCount ] = useState(<span class="hljs-number">0</span>);<br><br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`useEffect=&gt;You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;====================&#x27;</span>)<br>        &#125;<br>    &#125;,[])<br><br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>            &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>&#123;setCount(count+<span class="hljs-number">1</span>)&#125;&#125;&gt;click me&lt;/button&gt;<br><br>            &lt;Router&gt;<br>                &lt;ul&gt;<br>                    &lt;li&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span> &lt;/li&gt;<br>                    &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/list/&quot;</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span> &lt;/li&gt;<br>                &lt;/ul&gt;<br>                &lt;Route path=<span class="hljs-string">&quot;/&quot;</span> exact component=&#123;Index&#125; /&gt;<br>                &lt;Route path=<span class="hljs-string">&quot;/list/&quot;</span> component=&#123;List&#125; /&gt;<br>            &lt;/Router&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时候的代码是不能执行解绑副作用函数的。但是如果我们想每次<code>count</code>发生变化，我们都进行解绑，只需要在第二个参数的数组里加入<code>count</code>变量就可以了。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ count , setCount ] = useState(<span class="hljs-number">0</span>);<br><br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`useEffect=&gt;You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;====================&#x27;</span>)<br>        &#125;<br>    &#125;,[count])<br><br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>            &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>&#123;setCount(count+<span class="hljs-number">1</span>)&#125;&#125;&gt;click me&lt;/button&gt;<br><br>            &lt;Router&gt;<br>                &lt;ul&gt;<br>                    &lt;li&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span> &lt;/li&gt;<br>                    &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/list/&quot;</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span> &lt;/li&gt;<br>                &lt;/ul&gt;<br>                &lt;Route path=<span class="hljs-string">&quot;/&quot;</span> exact component=&#123;Index&#125; /&gt;<br>                &lt;Route path=<span class="hljs-string">&quot;/list/&quot;</span> component=&#123;List&#125; /&gt;<br>            &lt;/Router&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时候只要<code>count</code>状态发生变化，都会执行解绑副作用函数，浏览器的控制台也就打印出了一串<code>=================</code>。</p><h2 id="useContext-让父子组件传值更简单"><a href="#useContext-让父子组件传值更简单" class="headerlink" title="useContext 让父子组件传值更简单"></a>useContext 让父子组件传值更简单</h2><p>有了<code>useState</code>和<code>useEffect</code>已经可以实现大部分的业务逻辑了，但是<code>React Hooks</code>中还是有很多好用的<code>Hooks</code>函数的，比如<code>useContext</code>和<code>useReducer</code>。</p><p>在用类声明组件时，父子组件的传值是通过组件属性和<code>props</code>进行的，那现在使用方法(Function)来声明组件，已经没有了<code>constructor</code>构造函数也就没有了props的接收，那父子组件的传值就成了一个问题。<code>React Hooks</code> 为我们准备了<code>useContext</code>。这节课就学习一下<code>useContext</code>，它可以帮助我们跨越组件层级直接传递变量，实现共享。需要注意的是<code>useContext</code>和<code>redux</code>的作用是不同的，一个解决的是组件之间值传递的问题，一个是应用中统一管理状态的问题，但通过和<code>useReducer</code>的配合使用，可以实现类似<code>Redux</code>的作用。</p><p>这就好比玩游戏时有很多英雄，英雄的最总目的都是赢得比赛，但是作用不同，有负责输出的，有负责抗伤害的，有负责治疗的。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620885452357-4883a907-5a9b-4e79-ac57-f7f5d72478d7.png#clientId=u27aee433-b580-4&from=paste&height=723&id=u1cfe21a1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=723&originWidth=848&originalType=binary&size=153410&status=done&style=none&taskId=u60181efe-1980-41ac-9f3d-79ce2166371&width=848" alt="image.png"></p><blockquote><p><code>Context</code>的作用就是对它所包含的组件树提供全局共享数据的一种技术。</p></blockquote><h3 id="createContext-函数创建context"><a href="#createContext-函数创建context" class="headerlink" title="createContext 函数创建context"></a>createContext 函数创建context</h3><p>直接在<code>src</code>目录下新建一个文件<code>Example4.js</code>,然后拷贝<code>Example.js</code>里的代码，并进行修改，删除路由部分和副作用的代码，只留计数器的核心代码就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState , useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example4</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ count , setCount ] = useState(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>            &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>&#123;setCount(count+<span class="hljs-number">1</span>)&#125;&#125;&gt;click me&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example4;<br></code></pre></div></td></tr></table></figure><p>然后修改一下<code>index.js</code>让它渲染这个<code>Example4.js</code>组件，修改的代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> Example <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Example4&#x27;</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Example</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>));<br></code></pre></div></td></tr></table></figure><p>之后在<code>Example4.js</code>中引入<code>createContext</code>函数，并使用得到一个组件，然后在<code>return</code>方法中进行使用。先看代码，然后我再解释。<br>创建<code>Context</code>容器对象要在祖组件和后代组件都能调用的地方<br><code>const CountContext = createContext()//CountContext首字母大写，因为是组件</code><br>在祖组件中使用<code>&lt;CountContext.Provider value=&#123;count&#125;&gt; &lt;/CountContext.Provider&gt;</code>，将<code>count</code>传递给后代组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState , createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-comment">//===关键代码</span><br><span class="hljs-keyword">const</span> CountContext = createContext()<span class="hljs-comment">//CountContext首字母大写，因为是组件</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example4</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ count , setCount ] = useState(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>            &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>&#123;setCount(count+<span class="hljs-number">1</span>)&#125;&#125;&gt;click me&lt;/button&gt;<br>            &#123;<span class="hljs-comment">/*======关键代码 */</span>&#125;<br>            &lt;CountContext.Provider value=&#123;count&#125;&gt;<br>            &lt;/CountContext.Provider&gt;<br><br>        &lt;/div&gt;<br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example4;<br></code></pre></div></td></tr></table></figure><p>这段代码就相当于把<code>count</code>变量允许跨层级实现传递和使用了（也就是实现了上下文），当父组件的<code>count</code>变量发生变化时，子组件也会发生变化。接下来我们就看看一个<code>React Hooks</code>的组件如何接收到这个变量。</p><h3 id="useContext-接收上下文变量"><a href="#useContext-接收上下文变量" class="headerlink" title="useContext 接收上下文变量"></a>useContext 接收上下文变量</h3><p>已经有了上下文变量，剩下的就时如何接收了，接收这个直接使用useContext就可以，但是在使用前需要新进行引入<code>useContext</code>（不引入是没办法使用的）。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState , createContext , useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>引入后写一个<code>Counter</code>组件，只是显示上下文中的<code>count</code>变量代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> count = useContext(CountContext)  <span class="hljs-comment">//一句话就可以得到count</span><br>    <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>得到后就可以显示出来了，但是要记得在<code>&lt;CountContext.Provider&gt;</code>的闭合标签中,代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;CountContext.Provider value=&#123;count&#125;&gt;<br>    &lt;Counter /&gt;<br>&lt;/CountContext.Provider&gt;<br></code></pre></div></td></tr></table></figure><p>其实<code>useContext</code>的用法比以前时简单很多，既然简单，就没必要讲解的那么难，希望小伙伴这节课都能get到知识点，完善自己的知识体系。</p><h2 id="useReducer介绍和简单使用"><a href="#useReducer介绍和简单使用" class="headerlink" title="useReducer介绍和简单使用"></a>useReducer介绍和简单使用</h2><p>上节课学习了<code>useContext</code>函数，那这节课开始学习一下<code>useReducer</code>，因为他们两个很像，并且合作可以完成类似的Redux库的操作。在开发中使用<code>useReducer</code>可以让代码具有更好的可读性和可维护性，并且会给测试提供方便。那我们彻底的学习一下<code>useReducer</code>。这节课我们只是简单的学习一下<code>useReducer</code>语法和使用方法，尽量避免<code>Redux</code>的一些操作。这样讲更容易让不了解<code>Redux</code>的小伙伴接受。</p><h3 id="reducer到底是什么？"><a href="#reducer到底是什么？" class="headerlink" title="reducer到底是什么？"></a>reducer到底是什么？</h3><p>为了更好的理解<code>useReducer</code>，所以先要了解JavaScript里的<code>Redcuer</code>是什么。它的兴起是从<code>Redux</code>广泛使用开始的，但不仅仅存在<code>Redux</code>中，可以使用JavaScript来完成<code>Reducer</code>操作。那<code>reducer</code>其实就是一个函数，这个函数接收两个参数，一个是状态，一个用来控制业务逻辑的判断参数。我们举一个最简单的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countReducer</span>(<span class="hljs-params">state, action</span>) </span>&#123;<br>    <span class="hljs-keyword">switch</span>(action.type) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;add&#x27;</span>:<br>            <span class="hljs-keyword">return</span> state + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sub&#x27;</span>:<br>            <span class="hljs-keyword">return</span> state - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">default</span>: <br>            <span class="hljs-keyword">return</span> state;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面的代码就是Reducer，你主要理解的就是这种形式和两个参数的作用，一个参数是状态，一个参数是如何控制状态。</p><h3 id="useReducer的使用"><a href="#useReducer的使用" class="headerlink" title="useReducer的使用"></a>useReducer的使用</h3><p>了解reducer的含义后，就可以讲useReducer了，它也是React hooks提供的函数，可以增强我们的<code>Reducer</code>，实现类似Redux的功能。我们新建一个<code>Example5.js</code>的文件，然后用useReducer实现计数器的加减双向操作。（此部分代码的介绍可以看视频来学习）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ReducerDemo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ count , dispatch ] =useReducer(<span class="hljs-function">(<span class="hljs-params">state,action</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">switch</span>(action)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;add&#x27;</span>:<br>                <span class="hljs-keyword">return</span> state+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sub&#x27;</span>:<br>                <span class="hljs-keyword">return</span> state-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> state<br>        &#125;<br>    &#125;,<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> (<br>       &lt;div&gt;<br>           &lt;h2&gt;现在的分数是&#123;count&#125;&lt;/h2&gt;<br>           &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>dispatch(<span class="hljs-string">&#x27;add&#x27;</span>)&#125;&gt;Increment&lt;/button&gt;<br>           &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>dispatch(<span class="hljs-string">&#x27;sub&#x27;</span>)&#125;&gt;Decrement&lt;/button&gt;<br>       &lt;/div&gt;<br>    )<br><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ReducerDemo<br></code></pre></div></td></tr></table></figure><p>这段代码是useReducer的最简单实现了，这时候可以在浏览器中实现了计数器的增加减少。</p><p>修改<code>index.js</code>文件，让<code>ReducerDemo</code>组件起作用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> Example <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Example5&#x27;</span><br><br><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Example</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>));<br></code></pre></div></td></tr></table></figure><p>这节课就先到这里，小伙伴们一定对<code>useReducer</code>有所了解啦，那下节课我们在来用一个具体的例子，实现类似<code>Redux</code>的用法。</p><h3 id="useReducer代替Redux小案例-1"><a href="#useReducer代替Redux小案例-1" class="headerlink" title="useReducer代替Redux小案例-1"></a>useReducer代替Redux小案例-1</h3><p>使用<code>useContext</code>和<code>useReducer</code>是可以实现类似<code>Redux</code>的效果，并且一些简单的个人项目，完全可以用下面的方案代替Redux，这种做法要比Redux简单一些。因为<code>useContext</code>和<code>useReducer</code>在前两节课已经学习过了，所以我们这节课把精力就放在如何模拟出<code>Redux</code>的效果。如果你目前还不能掌握基本的语法，可以再复习一下前两节的知识点。</p><blockquote><p>本节课程参考了掘金上缪宇的文章 ，文章地址:<a href="https://juejin.im/post/5ceb37c851882520724c7504">https://juejin.im/post/5ceb37c851882520724c7504</a></p></blockquote><h4 id="理论上的可行性"><a href="#理论上的可行性" class="headerlink" title="理论上的可行性"></a>理论上的可行性</h4><p>我们先从理论层面看看替代<code>Redux</code>的可能性，其实如果你对两个函数有所了解，只要我们巧妙的结合，这种替代方案是完全可行的。</p><p><code>useContext</code>：可访问全局状态，避免一层层的传递状态。这符合<code>Redux</code>其中的一项规则，就是状态全局化，并能统一管理。</p><p><code>useReducer</code>：通过action的传递，更新复杂逻辑的状态，主要是可以实现类似<code>Redux</code>中的<code>Reducer</code>部分，实现业务逻辑的可行性。</p><p>经过我们在理论上的分析是完全可行的，接下来我们就用一个简单实例来看一下具体的实现方法。那这节课先实现<code>useContext</code>部分（也就是状态共享），下节再继续讲解<code>useReducer</code>部分（控制业务逻辑）。</p><h4 id="编写基本UI组件"><a href="#编写基本UI组件" class="headerlink" title="编写基本UI组件"></a>编写基本UI组件</h4><p>既然是一个实例，就需要有些界面的东西，小伙伴们不要觉的烦。在<code>/src</code>目录下新建一个文件夹<code>Example6</code>，有了文件夹后，在文件夹下面建立一个<code>showArea.js</code>文件。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ShowArea</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:</span>&#x27;<span class="hljs-attr">blue</span>&#x27;&#125;&#125;&gt;</span>字体颜色为blue<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ShowArea<br></code></pre></div></td></tr></table></figure><p>显示区域写完后，新建一个<code>Buttons.js</code>文件，用来编写按钮，这个是两个按钮，一个红色一个黄色。先不写其他任何业务逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Buttons</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;button&gt;红色&lt;/button&gt;<br>            &lt;button&gt;黄色&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Buttons<br></code></pre></div></td></tr></table></figure><p>然后再编写一个组合他们的<code>Example6.js</code>组件，引入两个新编写的组件<code>ShowArea</code>和<code>Buttons</code>，并用<code>&lt;div&gt;</code>标签给包裹起来。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ShowArea <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ShowArea&#x27;</span>;<br><span class="hljs-keyword">import</span> Buttons <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Buttons&#x27;</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example6</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>                &lt;ShowArea /&gt;<br>                &lt;Buttons /&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example6<br></code></pre></div></td></tr></table></figure><p>这步做完，需要到<code>/src</code>目录下的<code>index.js</code>中引入一下<code>Example6.js</code>文件，引入后React才能正确渲染出刚写的UI组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> Example <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Example6/Example6&#x27;</span><br><br><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Example</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>));<br></code></pre></div></td></tr></table></figure><p>做完这步可以简单的预览一下UI效果，虽然很丑，但是只要能满足学习需求就可以了。我们虽然都是前端，但是在学习时没必要追求漂亮的页面，关键时把知识点弄明白。我们写这么多文件，也就是要为接下来的知识点服务，其实这些组件都是陪衬罢了。</p><h4 id="编写颜色共享组件color-js"><a href="#编写颜色共享组件color-js" class="headerlink" title="编写颜色共享组件color.js"></a>编写颜色共享组件<code>color.js</code></h4><p>有了UI组件后，就可以写一些业务逻辑了，这节课我们先实现状态共享，这个就是利用<code>useContext</code>。建立一个<code>color.js</code>文件，然后写入下面的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ColorContext = createContext(&#123;&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> Color = <span class="hljs-function"><span class="hljs-params">props</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;ColorContext.Provider value=&#123;&#123;<span class="hljs-attr">color</span>:<span class="hljs-string">&quot;blue&quot;</span>&#125;&#125;&gt;<br>            &#123;props.children&#125;<br>        &lt;/ColorContext.Provider&gt;<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码中引入了<code>createContext</code>用来创建共享上下文<code>ColorContext</code>组件，然后我们要用<code>&#123;props.children&#125;</code>来显示对应的子组件。详细解释我在视频中讲解吧。</p><p>有了这个组件后，我们就可以把<code>Example6.js</code>进行改写，让她可以共享状态。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> ShowArea <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ShowArea&#x27;</span>;<br><span class="hljs-keyword">import</span> Buttons <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Buttons&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Color &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./color&#x27;</span>;   <span class="hljs-comment">//引入Color组件</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example6</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;Color&gt;<br>                &lt;ShowArea /&gt;<br>                &lt;Buttons /&gt;<br>            &lt;/Color&gt;<br><br>        &lt;/div&gt;<br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example6<br></code></pre></div></td></tr></table></figure><p>然后再改写<code>showArea.js</code>文件，我们会引入<code>useContext</code>和在<code>color.js</code>中声明的<code>ColorContext</code>，让组件可以接收全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React , &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; ColorContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./color&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ShowArea</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> &#123;color&#125; = useContext(ColorContext)<br>    <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:color&#125;&#125;</span>&gt;</span>字体颜色为&#123;color&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ShowArea<br></code></pre></div></td></tr></table></figure><p>这时候就通过<code>useContext</code>实现了状态的共享，可以到浏览器中看一下效果。然后我们下节课再实现复杂逻辑状态的变化。</p><h3 id="useReducer代替Redux小案例-2"><a href="#useReducer代替Redux小案例-2" class="headerlink" title="useReducer代替Redux小案例-2"></a>useReducer代替Redux小案例-2</h3><h4 id="在color-js中添加Reducer"><a href="#在color-js中添加Reducer" class="headerlink" title="在color.js中添加Reducer"></a>在color.js中添加Reducer</h4><p>颜色（state）管理的代码我们都放在了<code>color.js</code>中，所以在文件里添加一个reducer，用于处理颜色更新的逻辑。先声明一个reducer的函数，它就是JavaScript中的普通函数，在讲<code>useReducer</code>的时候已经详细讲过了。有了reducer后，在Color组件里使用<code>useReducer</code>,这样Color组件就有了那个共享状态和处理业务逻辑的能力，跟以前使用的<code>Redux</code>几乎一样了。之后修改一下共享状态。我们来看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; createContext,useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ColorContext = createContext(&#123;&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> UPDATE_COLOR = <span class="hljs-string">&quot;UPDATE_COLOR&quot;</span><br><br><span class="hljs-keyword">const</span> reducer= <span class="hljs-function">(<span class="hljs-params">state,action</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">switch</span>(action.type)&#123;<br>        <span class="hljs-keyword">case</span> UPDATE_COLOR:<br>            <span class="hljs-keyword">return</span> action.color<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> state<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> Color = <span class="hljs-function"><span class="hljs-params">props</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> [color,dispatch]=useReducer(reducer,<span class="hljs-string">&#x27;blue&#x27;</span>)<br>    <span class="hljs-keyword">return</span> (<br>        &lt;ColorContext.Provider value=&#123;&#123;color,dispatch&#125;&#125;&gt;<br>            &#123;props.children&#125;<br>        &lt;/ColorContext.Provider&gt;<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意，这时候我们共享出去的状态变成了color和dispatch,如果不共享出去dispatch，你是没办法完成按钮的相应事件的。</p><h4 id="通过dispatch修改状态"><a href="#通过dispatch修改状态" class="headerlink" title="通过dispatch修改状态"></a>通过dispatch修改状态</h4><p>目前程序已经有了处理共享状态的业务逻辑能力，接下来就可以在<code>buttons.js</code>使用<code>dispatch</code>来完成按钮的相应操作了。先引入<code>useContext</code>、<code>ColorContext</code>和<code>UPDATE_COLOR</code>，然后写<code>onClick</code>事件就可以了。代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React ,&#123;useContext&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;ColorContext,UPDATE_COLOR&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./color&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Buttons</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> &#123; dispatch &#125; = useContext(ColorContext)<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>&#123;dispatch(&#123;<span class="hljs-attr">type</span>:UPDATE_COLOR,<span class="hljs-attr">color</span>:<span class="hljs-string">&quot;red&quot;</span>&#125;)&#125;&#125;&gt;红色&lt;/button&gt;<br>            &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>&#123;dispatch(&#123;<span class="hljs-attr">type</span>:UPDATE_COLOR,<span class="hljs-attr">color</span>:<span class="hljs-string">&quot;yellow&quot;</span>&#125;)&#125;&#125;&gt;黄色&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Buttons<br></code></pre></div></td></tr></table></figure><p>这样代码就编写完成了，用<code>useContext</code>和<code>useReducer</code>实现了Redux的效果，这个代码编写过程比Redux要简单，但是也是有一定难度的。希望第一次接触的小伙伴能自己动手写5遍以上，把这种模式掌握好。</p><h2 id="useMemo优化React-Hooks程序性能"><a href="#useMemo优化React-Hooks程序性能" class="headerlink" title="useMemo优化React Hooks程序性能"></a>useMemo优化React Hooks程序性能</h2><p><code>useMemo</code>主要用来解决使用React hooks产生的无用渲染的性能问题。使用function的形式来声明组件，失去了<code>shouldCompnentUpdate</code>（在组件更新之前）这个生命周期，也就是说我们没有办法通过组件更新前条件来决定组件是否更新。而且在函数组件中，也不再区分<code>mount</code>和<code>update</code>两个状态，这意味着函数组件的每一次调用都会执行内部的所有逻辑，就带来了非常大的性能损耗。<code>useMemo</code>和<code>useCallback</code>都是解决上述性能问题的，这节课先学习<code>useMemo</code>.</p><h3 id="性能问题展示案例"><a href="#性能问题展示案例" class="headerlink" title="性能问题展示案例"></a>性能问题展示案例</h3><p>先编写一下刚才所说的性能问题，建立两个组件,一个父组件一个子组件，组件上由两个按钮，一个是小红，一个是志玲，点击哪个，那个就像我们走来了。在<code>/src</code>文件夹下，新建立一个<code>Example7</code>的文件夹，在文件夹下建立一个<code>Example7.js</code>文件.然后先写第一个父组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React , &#123;useState,useMemo&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example7</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [xiaohong , setXiaohong] = useState(<span class="hljs-string">&#x27;小红待客状态&#x27;</span>)<br>    <span class="hljs-keyword">const</span> [zhiling , setZhiling] = useState(<span class="hljs-string">&#x27;志玲待客状态&#x27;</span>)<br>    <span class="hljs-keyword">return</span> (<br>        &lt;&gt;<br>            &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>&#123;setXiaohong(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime())&#125;&#125;&gt;小红&lt;/button&gt;<br>            &lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>&#123;setZhiling(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()+<span class="hljs-string">&#x27;,志玲向我们走来了&#x27;</span>)&#125;&#125;&gt;志玲&lt;/button&gt;<br>            &lt;ChildComponent name=&#123;xiaohong&#125;&gt;&#123;zhiling&#125;&lt;/ChildComponent&gt;<br>        &lt;/&gt;<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>父组件调用了子组件，子组件我们输出两个姑娘的状态，显示在界面上。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChildComponent</span>(<span class="hljs-params">&#123;name,children&#125;</span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeXiaohong</span>(<span class="hljs-params">name</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;她来了，她来了。小红向我们走来了&#x27;</span>)<br>        <span class="hljs-keyword">return</span> name+<span class="hljs-string">&#x27;,小红向我们走来了&#x27;</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> actionXiaohong = changeXiaohong(name)<br>    <span class="hljs-keyword">return</span> (<br>        &lt;&gt;<br>            &lt;div&gt;&#123;actionXiaohong&#125;&lt;/div&gt;<br>            &lt;div&gt;&#123;children&#125;&lt;/div&gt;<br>        &lt;/&gt;<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后再导出父组件，让<code>index.js</code>可以渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example7<br></code></pre></div></td></tr></table></figure><p>这时候你会发现在浏览器中点击<code>志玲</code>按钮，小红对应的方法都会执行，结果虽然没变，但是每次都执行，这就是性能的损耗。目前只有子组件，业务逻辑也非常简单，如果是一个后台查询，这将产生严重的后果。所以这个问题必须解决。当我们点击<code>志玲</code>按钮时，小红对应的<code>changeXiaohong</code>方法不能执行，只有在点击<code>小红</code>按钮时才能执行。</p><h3 id="useMemo-优化性能"><a href="#useMemo-优化性能" class="headerlink" title="useMemo 优化性能"></a>useMemo 优化性能</h3><p>其实只要使用<code>useMemo</code>，然后给她传递第二个参数，参数匹配成功，才会执行。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChildComponent</span>(<span class="hljs-params">&#123;name,children&#125;</span>)</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeXiaohong</span>(<span class="hljs-params">name</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;她来了，她来了。小红向我们走来了&#x27;</span>)<br>        <span class="hljs-keyword">return</span> name+<span class="hljs-string">&#x27;,小红向我们走来了&#x27;</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> actionXiaohong = useMemo(<span class="hljs-function">()=&gt;</span>changeXiaohong(name),[name]) <br>    <span class="hljs-keyword">return</span> (<br>        &lt;&gt;<br>            &lt;div&gt;&#123;actionXiaohong&#125;&lt;/div&gt;<br>            &lt;div&gt;&#123;children&#125;&lt;/div&gt;<br>        &lt;/&gt;<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时在浏览器中点击一下<code>志玲</code>按钮，<code>changeXiaohong</code>就不再执行了。也节省了性能的消耗。案例只是让你更好理解，你还要从程序本身看到优化的作用。好的程序员对自己写的程序都是会进行不断优化的，这种没必要的性能浪费也是绝对不允许的，所以<code>useMemo</code>的使用在工作中还是比较多的。希望小伙伴们可以掌握。</p><h3 id="useRef获取DOM元素和保存变量"><a href="#useRef获取DOM元素和保存变量" class="headerlink" title="useRef获取DOM元素和保存变量"></a>useRef获取DOM元素和保存变量</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620868911084-e2962f91-eb6a-49df-b223-285f0dfb893e.png#clientId=u27aee433-b580-4&from=paste&height=235&id=u0e1c6e04&margin=%5Bobject%20Object%5D&name=image.png&originHeight=235&originWidth=445&originalType=binary&size=45666&status=done&style=none&taskId=u32ead6cc-3632-497c-893d-3d21a7eec32&width=445" alt="image.png"></p><p><code>useRef</code>在工作中虽然用的不多，但是也不能缺少。它有两个主要的作用:</p><ul><li>用<code>useRef</code>获取React JSX中的DOM元素，获取后你就可以控制DOM的任何东西了。但是一般不建议这样来作，React界面的变化可以通过状态来控制。</li><li>用<code>useRef</code>来保存变量，这个在工作中也很少能用到，我们有了<code>useContext</code>这样的保存其实意义不大，但是这是学习，也要把这个特性讲一下。</li></ul><p>界面上有一个文本框，在文本框的旁边有一个按钮，当我们点击按钮时，在控制台打印出<code>input</code>的DOM元素，并进行复制到DOM中的value上。这一切都是通过<code>useRef</code>来实现。</p><p>在<code>/src</code>文件夹下新建一个<code>Example8.js</code>文件，然后先引入useRef，编写业务逻辑代码如下:</p><p>当点击按钮时，你可以看到在浏览器中的控制台完整的打印出了DOM的所有东西，并且界面上的<code>&lt;input/&gt;</code>框的value值也输出了我们写好的<code>Hello ,JSPang</code>。这一切说明我们可以使用useRef获取DOM元素，并且可以通过useRef控制DOM的属性和值。</p><p>这个操作在实际开发中用的并不多，但我们还是要讲解一下。就是<code>useRef</code>可以保存React中的变量。我们这里就写一个文本框，文本框用来改变<code>text</code>状态。又用<code>useRef</code>把<code>text</code>状态进行保存，最后打印在控制台上。写这段代码你会觉的很绕，其实显示开发中没必要这样写，用一个state状态就可以搞定，这里只是为了展示知识点。</p><p>接着上面的代码来写，就没必要重新写一个文件了。先用<code>useState</code>声明了一个<code>text</code>状态和<code>setText</code>函数。然后编写界面，界面就是一个文本框。然后输入的时候不断变化。</p><p>这时想每次<code>text</code>发生状态改变，保存到一个变量中或者说是<code>useRef</code>中，这时候就可以使用<code>useRef</code>了。先声明一个<code>textRef</code>变量，他其实就是<code>useRef</code>函数。然后使用<code>useEffect</code>函数实现每次状态变化都进行变量修改，并打印。最后的全部代码如下。</p><p>这时候就可以实现每次状态修改，同时保存到<code>useRef</code>中了。也就是我们说的保存变量的功能。那<code>useRef</code>的主要功能就是获得DOM和变量保存，我们都已经讲过了。你的编码能力有增加了一些，让我们一起加油。</p><h3 id="useRef获取DOM元素"><a href="#useRef获取DOM元素" class="headerlink" title="useRef获取DOM元素"></a>useRef获取DOM元素</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example8</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>)<br>    <span class="hljs-keyword">const</span> onButtonClick=<span class="hljs-function">()=&gt;</span>&#123; <br>        inputEl.current.value=<span class="hljs-string">&quot;Hello ,JSPang&quot;</span><br>        <span class="hljs-built_in">console</span>.log(inputEl) <span class="hljs-comment">//输出获取到的DOM节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;&gt;<br>            &#123;<span class="hljs-comment">/*保存input的ref到inputEl */</span>&#125;<br>            &lt;input ref=&#123;inputEl&#125; type=<span class="hljs-string">&quot;text&quot;</span>/&gt;<br>            &lt;button onClick = &#123;onButtonClick&#125;&gt;在input上展示文字&lt;/button&gt;<br>        &lt;/&gt;<br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example8<br></code></pre></div></td></tr></table></figure><h3 id="useRef保存普通变量"><a href="#useRef保存普通变量" class="headerlink" title="useRef保存普通变量"></a>useRef保存普通变量</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef ,useState,useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example8</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>)<br>    <span class="hljs-keyword">const</span> onButtonClick=<span class="hljs-function">()=&gt;</span>&#123; <br>        inputEl.current.value=<span class="hljs-string">&quot;Hello ,useRef&quot;</span><br>        <span class="hljs-built_in">console</span>.log(inputEl)<br>    &#125;<br>    <span class="hljs-keyword">const</span> [text, setText] = useState(<span class="hljs-string">&#x27;jspang&#x27;</span>)<br>    <span class="hljs-keyword">return</span> (<br>        &lt;&gt;<br>            &#123;<span class="hljs-comment">/*保存input的ref到inputEl */</span>&#125;<br>            &lt;input ref=&#123;inputEl&#125; type=<span class="hljs-string">&quot;text&quot;</span>/&gt;<br>            &lt;button onClick = &#123;onButtonClick&#125;&gt;在input上展示文字&lt;/button&gt;<br>            &lt;br/&gt;<br>            &lt;br/&gt;<br>            &lt;input value=&#123;text&#125; onChange=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;setText(e.target.value)&#125;&#125; /&gt;<br><br>        &lt;/&gt;<br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example8<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef ,useState,useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example8</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>)<br>    <span class="hljs-keyword">const</span> onButtonClick=<span class="hljs-function">()=&gt;</span>&#123; <br>        inputEl.current.value=<span class="hljs-string">&quot;Hello ,useRef&quot;</span><br>        <span class="hljs-built_in">console</span>.log(inputEl)<br>    &#125;<br>    <span class="hljs-comment">//-----------关键代码--------start</span><br>    <span class="hljs-keyword">const</span> [text, setText] = useState(<span class="hljs-string">&#x27;jspang&#x27;</span>)<br>    <span class="hljs-keyword">const</span> textRef = useRef()<br><br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        textRef.current = text;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;textRef.current:&#x27;</span>, textRef.current)<br>    &#125;)<br>    <span class="hljs-comment">//----------关键代码--------------end</span><br>    <span class="hljs-keyword">return</span> (<br>        &lt;&gt;<br>            &#123;<span class="hljs-comment">/*保存input的ref到inputEl */</span>&#125;<br>            &lt;input ref=&#123;inputEl&#125; type=<span class="hljs-string">&quot;text&quot;</span>/&gt;<br>            &lt;button onClick = &#123;onButtonClick&#125;&gt;在input上展示文字&lt;/button&gt;<br>            &lt;br/&gt;<br>            &lt;br/&gt;<br>            &lt;input value=&#123;text&#125; onChange=&#123;<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;setText(e.target.value)&#125;&#125; /&gt;<br>        &lt;/&gt;<br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example8<br></code></pre></div></td></tr></table></figure><h2 id="自定义Hooks函数获取窗口大小"><a href="#自定义Hooks函数获取窗口大小" class="headerlink" title="自定义Hooks函数获取窗口大小"></a>自定义Hooks函数获取窗口大小</h2><p>其实自定义Hooks函数和用Hooks创建组件很相似，跟我们平时用JavaScript写函数几乎一模一样，可能就是多了些<code>React Hooks</code>的特性，自定义Hooks函数偏向于功能，而组件偏向于界面和业务逻辑。由于差别不大，所以使用起来也是很随意的。如果是小型项目是可以的，但是如果项目足够复杂，这会让项目结构不够清晰。所以学习自定义Hooks函数还是很有必要的。</p><h3 id="编写自定义函数"><a href="#编写自定义函数" class="headerlink" title="编写自定义函数"></a>编写自定义函数</h3><p>在实际开发中，为了界面更加美观。获取浏览器窗口的尺寸是一个经常使用的功能，这样经常使用的功能，就可以封装成一个自定义<code>Hooks</code>函数，记住一定要用use开头，这样才能区分出什么是组件，什么是自定义函数。</p><p>新建一个文件<code>Example9.js</code>,然后编写一个useWinSize,编写时我们会用到<code>useState</code>、<code>useEffect</code>和<code>useCallback</code>所以先用<code>import</code>进行引入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState ,useEffect ,useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>然后编写函数，函数中先用useState设置<code>size</code>状态，然后编写一个每次修改状态的方法<code>onResize</code>，这个方法使用<code>useCallback</code>，目的是为了缓存方法(useMemo是为了缓存变量)。 然后在第一次进入方法时用<code>useEffect</code>来注册<code>resize</code>监听时间。为了防止一直监听所以在方法移除时，使用return的方式移除监听。最后返回size变量就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useWinSize</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ size , setSize] = useState(&#123;<br>        width:<span class="hljs-built_in">document</span>.documentElement.clientWidth,<br>        height:<span class="hljs-built_in">document</span>.documentElement.clientHeight<br>    &#125;)<br><br>    <span class="hljs-keyword">const</span> onResize = useCallback(<span class="hljs-function">()=&gt;</span>&#123;<br>        setSize(&#123;<br>            width: <span class="hljs-built_in">document</span>.documentElement.clientWidth,<br>            height: <span class="hljs-built_in">document</span>.documentElement.clientHeight<br>        &#125;)<br>    &#125;,[]) <br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>,onResize)<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>,onResize)<br>        &#125;<br>    &#125;,[])<br><br>    <span class="hljs-keyword">return</span> size;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这就是一个自定义函数，其实和我们以前写的JS函数没什么区别，所以这里也不做太多的介绍。</p><h3 id="编写组件并使用自定义函数"><a href="#编写组件并使用自定义函数" class="headerlink" title="编写组件并使用自定义函数"></a>编写组件并使用自定义函数</h3><p>自定义<code>Hooks</code>函数已经写好了，可以直接进行使用，用法和<code>JavaScript</code>的普通函数用起来是一样的。直接在<code>Example9</code>组件使用<code>useWinSize</code>并把结果实时展示在页面上。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example9</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    <span class="hljs-keyword">const</span> size = useWinSize()<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;页面Size:&#123;size.width&#125;x&#123;size.height&#125;&lt;/div&gt;<br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example9<br></code></pre></div></td></tr></table></figure><p>之后就可以在浏览器中预览一下结果，可以看到当我们放大缩小浏览器窗口时，页面上的结果都会跟着进行变化。说明自定义的函数起到了作用。</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React-Hooks</tag>
      
      <tag>生命周期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React路由传参</title>
    <link href="/2021/04/26/React%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82/"/>
    <url>/2021/04/26/React%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82/</url>
    
    <content type="html"><![CDATA[<h1 id="react路由传参-3种方式"><a href="#react路由传参-3种方式" class="headerlink" title="react路由传参(3种方式)"></a>react路由传参(3种方式)</h1><h2 id="1-params传参-刷新页面后参数不消失，参数会在地址栏显示"><a href="#1-params传参-刷新页面后参数不消失，参数会在地址栏显示" class="headerlink" title="1.params传参(刷新页面后参数不消失，参数会在地址栏显示)"></a>1.params传参(刷新页面后参数不消失，参数会在地址栏显示)</h2><p>路由页面: </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Route path= <span class="hljs-string">&#x27;/link/:id&#x27;</span>  component=&#123;Demo&#125;&gt;&lt;<span class="hljs-regexp">/Route&gt;  /</span><span class="hljs-regexp">/注意要配置/</span>:id路由跳转并传递参数。<br></code></pre></div></td></tr></table></figure><p>链接方式: </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Link to=&#123;<span class="hljs-string">&#x27;/link/&#x27;</span>+<span class="hljs-string">&#x27;xxx&#x27;</span>&#125;&gt;首页&lt;/Link&gt;   <br><span class="hljs-comment">//或</span><br>&lt;Link to=&#123;&#123;<span class="hljs-attr">pathname</span>:<span class="hljs-string">&#x27;/link/&#x27;</span>+<span class="hljs-string">&#x27;xxx&#x27;</span>&#125;&#125;&gt;首页&lt;/Link&gt;<br></code></pre></div></td></tr></table></figure><p>js方式: </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.history.push(<span class="hljs-regexp">/link/</span><span class="hljs-string">&quot;+&#x27;xxx&#x27;)</span><br><span class="hljs-string">//或</span><br><span class="hljs-string">this.props.history.push(&#123;pathname:&#x27;/link/+&#x27;xxx&#x27;&#125;)</span><br></code></pre></div></td></tr></table></figure><p>获取参数: </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.match.params.id <span class="hljs-comment">//注意这里是match而非history</span><br></code></pre></div></td></tr></table></figure><h2 id="2-query传参-刷新页面后参数消失"><a href="#2-query传参-刷新页面后参数消失" class="headerlink" title="2.query传参(刷新页面后参数消失)"></a>2.query传参(刷新页面后参数消失)</h2><p>路由页面:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Route path=<span class="hljs-string">&#x27;/demo&#x27;</span> component=&#123;Demo&#125;&gt;&lt;<span class="hljs-regexp">/Route&gt;/</span><span class="hljs-regexp">/无需配置路由跳转并传递参数</span><br></code></pre></div></td></tr></table></figure><p>链接方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Link to=&#123;&#123;<span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/link &quot;,query:&#123; id:22, name:&#x27;</span>dahuang<span class="hljs-string">&quot;&#125;&#125;&#125;&gt;XX&lt;/Link&gt;</span><br></code></pre></div></td></tr></table></figure><p>js方式: </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.history.push(&#123;<span class="hljs-attr">pathname</span>:<span class="hljs-string">&#x27;/demo&#x27;</span>,<span class="hljs-attr">query</span>:&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">22</span>,<span class="hljs-attr">namer</span>:<span class="hljs-string">&#x27;dahuang&#x27;</span>&#125;&#125;)<br></code></pre></div></td></tr></table></figure><p>获取参数:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.location.query.name<br></code></pre></div></td></tr></table></figure><h2 id="3-state传参-刷新页面后参数不消失，state传的参数是加密的"><a href="#3-state传参-刷新页面后参数不消失，state传的参数是加密的" class="headerlink" title="3.state传参(刷新页面后参数不消失，state传的参数是加密的)"></a>3.state传参(刷新页面后参数不消失，state传的参数是加密的)</h2><p>路由页面:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Route path=<span class="hljs-string">&#x27;/link&#x27;</span> component=&#123;Demo&#125;&gt;&lt;<span class="hljs-regexp">/Route&gt; /</span><span class="hljs-regexp">/无需配置路由跳转并传递参数</span><br></code></pre></div></td></tr></table></figure><p>链接方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Link to=&#123;&#123;<span class="hljs-attr">pathname</span>:<span class="hljs-string">&#x27;/link&quot;,state:&#123;id:12,name:&#x27;</span>dahuang<span class="hljs-string">&#x27;&#125;&#125;&#125;&gt;XX&lt;/Link&gt;</span><br></code></pre></div></td></tr></table></figure><p>js方式: </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.history.push(&#123;<span class="hljs-attr">pathname</span>:<span class="hljs-string">&#x27;/demo&#x27;</span>,<span class="hljs-attr">state</span>:&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">12</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;dahuang&#x27;</span>&#125;&#125;)<br></code></pre></div></td></tr></table></figure><p>获取参数: </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.location.state.name<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>React路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sass和Less</title>
    <link href="/2021/04/26/Sass%E5%92%8CLess/"/>
    <url>/2021/04/26/Sass%E5%92%8CLess/</url>
    
    <content type="html"><![CDATA[<h1 id="Sass和Less"><a href="#Sass和Less" class="headerlink" title="Sass和Less"></a>Sass和Less</h1><p>Sass和Less都属于CSS预处理器，CSS 预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，如：变量、语句、函数、继承等概念。将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行CSS的编码工作。</p><p><p>   官网地址： <a href="http://lesscss.org/">http://lesscss.org/</a></p><p>   VSCode插件：Easy LESS</p><p>   官网地址： <a href="https://sass-lang.com/">https://sass-lang.com/</a></p><p>   VSCode插件：Easy Sass</p><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><p>在Sass和Less文件夹中新建一个style2.scss文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box&#123;<br>    width: 200px;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>输入样式，会自动转换生成style2.css文件和压缩文件style2.min.css</p><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">//单行注释不会被编译</span><br><br><span class="hljs-comment">/*  </span><br><span class="hljs-comment">多行注释会被编译</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$number:123px;<br>.box2&#123;<br>    width:$number;<br>    height:$number;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-插值"><a href="#3-插值" class="headerlink" title="3.插值"></a>3.插值</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$number:123px;<br>$key:margin;<br>$i:<span class="hljs-number">2</span>;<br>.box#&#123;$i&#125;&#123;<br>    width:$number;<br>    height:$number;<br>    #&#123;$key&#125;:auto;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-作用域"><a href="#4-作用域" class="headerlink" title="4.作用域"></a>4.作用域</h3><p>高输出123px；宽输出456px；有顺序要求</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$number:123px;<br>.box3<br>&#123;<br>    height: $number;<br>    $number:456px;<br>    width: $number;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-选择器嵌套"><a href="#5-选择器嵌套" class="headerlink" title="5.选择器嵌套"></a>5.选择器嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-伪类嵌套"><a href="#6-伪类嵌套" class="headerlink" title="6.伪类嵌套"></a>6.伪类嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>    &amp;:hover&#123;<span class="hljs-comment">//不加&amp;符号会有空格</span><br>        color:red<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-属性嵌套"><a href="#7-属性嵌套" class="headerlink" title="7.属性嵌套"></a>7.属性嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>    &amp;:hover&#123;<span class="hljs-comment">//不加&amp;符号会有空格</span><br>        color:red;<br>        font:&#123;<br>            size:10px;<br>            weight:bold;<br>            family:宋体<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="8-运算"><a href="#8-运算" class="headerlink" title="8.运算"></a>8.运算</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$num:100px;<br>.box4&#123;<br>    width:$num*<span class="hljs-number">3</span>;<br>    height: $num+10px;<br>    <span class="hljs-comment">// height: $num+10em;//单位不同不能计算</span><br>    font:20px / <span class="hljs-number">1.5</span>;<span class="hljs-comment">//斜杠默认是分割</span><br>    padding:(20px / <span class="hljs-number">1.5</span>);<span class="hljs-comment">//加上括号可以计算</span><br>    color:#010203 * 2;//颜色也能进行运算<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">//自定义函数</span><br>@<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">$n,$m</span>)</span>&#123;<br>    @<span class="hljs-keyword">return</span> $n + $m;<br>&#125;<br>.box5&#123;<br>    width:round(<span class="hljs-number">3.</span>4px);<br>    height: percentage(<span class="hljs-number">0.2</span>);<span class="hljs-comment">//百分比</span><br>    margin: random();<span class="hljs-comment">//随机数可以产生</span><br>    padding: sqrt(<span class="hljs-number">25</span>%);<span class="hljs-comment">//不能开方</span><br>    font-size: sum(4px,5px);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="10-混入"><a href="#10-混入" class="headerlink" title="10.混入"></a>10.混入</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">@mixin show &#123;<span class="hljs-comment">//只混入 不渲染</span><br>    display: inline;<br>&#125;<br>@mixin <span class="hljs-function"><span class="hljs-title">hide</span>(<span class="hljs-params">$color</span>)</span> &#123;<span class="hljs-comment">//也能传参</span><br>    display: block;<br>    color: $color;<br>&#125;<br>.box6&#123;<br>    width: 100px;<br>    @include show;<br>    @include hide(red)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="11-无命名空间"><a href="#11-无命名空间" class="headerlink" title="11.无命名空间"></a>11.无命名空间</h3><h3 id="12-继承"><a href="#12-继承" class="headerlink" title="12.继承"></a>12.继承</h3><p>继承和混入很像，只是最后生成的代码是分开，还是分组的形式</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">%line&#123;<span class="hljs-comment">//.换成百分号就不会被渲染出来</span><br>    display: inline;<br>&#125;<br>.box7&#123;<br>    @extend %line;<br>&#125;<br>.box8&#123;<br>    @extend %line;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="13-合并"><a href="#13-合并" class="headerlink" title="13.合并"></a>13.合并</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$background:(<br>    a:url(a.png),<br>    b:url(b.png)<br>);<br>$transform:(<br>    a:scale(<span class="hljs-number">2</span>),<br>    b:rotate(30deg)<br>);<br>.box9&#123;<br>    background: map-values($background);<span class="hljs-comment">//逗号隔开效果</span><br>    transform:zip(map-values($transform)...);<span class="hljs-comment">//空格隔开效果</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="14-媒体查询"><a href="#14-媒体查询" class="headerlink" title="14.媒体查询"></a>14.媒体查询</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box10&#123;<br>    width:100px;<br>    @media all and (min-width:768px) &#123;<br>        width:600px;<br>    &#125;<br>    @media all and (min-width:1440px) &#123;<br>        width:900px;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="15-条件"><a href="#15-条件" class="headerlink" title="15.条件"></a>15.条件</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$count:<span class="hljs-number">3</span>;<br>.box11&#123;<br>    @<span class="hljs-keyword">if</span>($count &gt; <span class="hljs-number">4</span>)&#123;<br>        width:100px + $count;<br>    &#125;<br>    @<span class="hljs-keyword">else</span>&#123;<br>        width: 10px + $count;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="16-循环"><a href="#16-循环" class="headerlink" title="16.循环"></a>16.循环</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@<span class="hljs-keyword">for</span> $i <span class="hljs-keyword">from</span> <span class="hljs-number">0</span> through <span class="hljs-number">2</span>&#123;<br>    .box-#&#123;$i&#125;&#123;<br>        width: 100px + $i;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="17-导入"><a href="#17-导入" class="headerlink" title="17.导入"></a>17.导入</h3><p>在Sass和Less中新建一个文件reset.scss</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">*&#123;<span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;padding: <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//写入样式</span><br>img&#123;<span class="hljs-attr">display</span>: block;&#125;<br><br></code></pre></div></td></tr></table></figure><p>在Sass和Less\style2.scss中引入reset.scss</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./reset.scss&#x27;</span><br></code></pre></div></td></tr></table></figure><h2 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h2><p>在Sass和Less文件夹中新建一个style.less文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box&#123;<br>    width: 100px;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>输入样式，会自动转换生成style.css文件</p><h3 id="1-注释-1"><a href="#1-注释-1" class="headerlink" title="1.注释"></a>1.注释</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">//单行注释不会被编译</span><br><br><span class="hljs-comment">/*  </span><br><span class="hljs-comment">多行注释会被编译</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h3 id="2-变量-1"><a href="#2-变量-1" class="headerlink" title="2.变量"></a>2.变量</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@number:123px;<br>.box2&#123;<br>    width:@number;<br>    height:@number;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-插值-1"><a href="#3-插值-1" class="headerlink" title="3.插值"></a>3.插值</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@number:123px;<br>@key:margin;<br>@i:<span class="hljs-number">2</span>;<br>.box@&#123;i&#125;&#123;<br>    width:@number;<br>    height:@number;<br>    @&#123;key&#125;:auto;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-作用域-1"><a href="#4-作用域-1" class="headerlink" title="4.作用域"></a>4.作用域</h3><p>宽高输出的都是456px；作用域有就近原则，局部变量优先找同区块的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@number:123px;<br>.box3<br>&#123;<br>    height:@number;<br>    @number:456px;<br>    width:@number;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-选择器嵌套-1"><a href="#5-选择器嵌套-1" class="headerlink" title="5.选择器嵌套"></a>5.选择器嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-伪类嵌套-1"><a href="#6-伪类嵌套-1" class="headerlink" title="6.伪类嵌套"></a>6.伪类嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>    &amp;:hover&#123;<span class="hljs-comment">//不加&amp;符号会有空格</span><br>        color:red<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-无属性嵌套"><a href="#7-无属性嵌套" class="headerlink" title="7.无属性嵌套"></a>7.无属性嵌套</h3><h3 id="8-运算-1"><a href="#8-运算-1" class="headerlink" title="8.运算"></a>8.运算</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@num:100px;<br>.box4&#123;<br>    width:@num*<span class="hljs-number">3</span>;<br>    height: @num+10em;<br>    margin: 10em+@num;<span class="hljs-comment">//单位不同时，按照第一个计算</span><br>    font:20px / <span class="hljs-number">1.5</span>;<span class="hljs-comment">//斜杠默认是分割</span><br>    padding:(20px / <span class="hljs-number">1.5</span>);<span class="hljs-comment">//加上括号可以被计算转译</span><br>    padding:~<span class="hljs-string">&#x27;20px / 1.5&#x27;</span>;<span class="hljs-comment">//加上~&#x27; &#x27;防止转译，直接变成除(但是我不加的时候暂时也没有转译)</span><br>    color:#010203 * 2;//颜色也能进行<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-函数-1"><a href="#9-函数-1" class="headerlink" title="9.函数"></a>9.函数</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box5&#123;<br>    width:round(<span class="hljs-number">3.</span>4px);<br>    height: percentage(<span class="hljs-number">0.2</span>);<span class="hljs-comment">//百分比</span><br>    margin: random();<span class="hljs-comment">//随机数不能产生</span><br>    padding: sqrt(<span class="hljs-number">25</span>%);<span class="hljs-comment">//开方</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="10-混入-1"><a href="#10-混入-1" class="headerlink" title="10.混入"></a>10.混入</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.show&#123;<span class="hljs-comment">//不加括号会生成，再混入</span><br>    display: block;<br>&#125;<br>.hide(@color)&#123;<span class="hljs-comment">//加括号不生成，直接混入,还能传参</span><br>    display: inline;<br>&#125;<br>.box6&#123;<br>    width: 100px;<br>    .show;<br>    .hide(blue);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="11-命名空间"><a href="#11-命名空间" class="headerlink" title="11.命名空间"></a>11.命名空间</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">#<span class="hljs-function"><span class="hljs-title">nm</span>(<span class="hljs-params"></span>)</span>&#123;<br>    .show&#123;<span class="hljs-attr">display</span>: inline-block;&#125;<br>&#125;<br>.box7&#123;<br>    #nm.show;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="12-继承-1"><a href="#12-继承-1" class="headerlink" title="12.继承"></a>12.继承</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.line&#123;<br>    display: inline;<br>&#125;<br>.box7&#123;<br>    &amp;:extend(.line);<br>&#125;<br>.box8&#123;<br>    &amp;:extend(.line);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="13-合并-1"><a href="#13-合并-1" class="headerlink" title="13.合并"></a>13.合并</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.box9&#123;<br>    background+: url(a.png);<br>    background+: url(b.png);<span class="hljs-comment">//+号是用空格的形式隔开</span><br>    transform+_: scale(<span class="hljs-number">2</span>);<br>    transform+_: rotate(30deg);<span class="hljs-comment">//+_号是用空格隔开</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="14-媒体查询-1"><a href="#14-媒体查询-1" class="headerlink" title="14.媒体查询"></a>14.媒体查询</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box10&#123;<br>    width:100px;<br>    @media all and (min-width:768px) &#123;<br>        width:600px;<br>    &#125;<br>    @media all and (min-width:1440px) &#123;<br>        width:900px;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="15-条件-1"><a href="#15-条件-1" class="headerlink" title="15.条件"></a>15.条件</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@count:<span class="hljs-number">5</span>;<br>.get(@cn) <span class="hljs-function"><span class="hljs-title">when</span>(<span class="hljs-params">@cn &gt; <span class="hljs-number">4</span></span>)</span>&#123;<br>    width: 100px + @cn;<br>&#125;<br>.get(@cn) when (@cn &lt; <span class="hljs-number">4</span>)&#123;<br>    width: 10px + @cn;<br>&#125;<br>.box11&#123;<br>    .get(@count)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="16-循环-1"><a href="#16-循环-1" class="headerlink" title="16.循环"></a>16.循环</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@count2:<span class="hljs-number">0</span>;<br>.get2(@cn) when (@cn&lt;<span class="hljs-number">3</span>)&#123;<span class="hljs-comment">//用递归</span><br>    .get2((@cn+<span class="hljs-number">1</span>));<br>    .box-@&#123;cn&#125;&#123;<br>        width: 100px + @cn;<br>    &#125;<br>&#125;<br>.get2(@count2);<br><br><br></code></pre></div></td></tr></table></figure><h3 id="17-导入-1"><a href="#17-导入-1" class="headerlink" title="17.导入"></a>17.导入</h3><p>在Sass和Less中新建一个文件reset.less</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">*&#123;<span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;padding: <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//写入样式</span><br></code></pre></div></td></tr></table></figure><p>在Sass和Less\style.less中引入reset.less</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./reset.less&#x27;</span>;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sass</tag>
      
      <tag>Less</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【置顶】这是第一条博客，欢迎大家来到我的博客，请尽情留言吧！</title>
    <link href="/2021/04/25/hello-world/"/>
    <url>/2021/04/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>这里是留言板！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
