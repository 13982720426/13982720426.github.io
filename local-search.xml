<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅拷贝与深拷贝</title>
    <link href="/2022/03/14/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <url>/2022/03/14/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h1><p>在了解深浅拷贝之前应该了解JavaScript的数据类型</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型分为<strong>基本数据类型</strong>(String, Number, Boolean, Null, Undefined, Symbo, Symbol (ES6), BigInt (ES2020))和<strong>引用数据类型</strong> (Object、Array、Function)。</p><p>基本数据类型的特点：直接存储在栈(stack)中的数据<br>引用数据类型的特点：存储的是该对象在栈中引用，真实的数据存放在堆内存里</p><p>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。<br>当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。<br><a href="http://imgs.jackhoo.icu/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D1.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1647242821047-a62446af-91b6-4ced-9c95-9094895b001b.png#clientId=u685f2570-4891-4&crop=0&crop=0&crop=1&crop=1&id=U1CNA&name=image.png&originHeight=347&originWidth=459&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39529&status=done&style=none&taskId=ud27d7dfd-e5b4-4cf1-8c88-d392403ecfd&title=" alt="image.png"></a></p><h2 id="深拷贝和浅拷贝的定义"><a href="#深拷贝和浅拷贝的定义" class="headerlink" title="深拷贝和浅拷贝的定义"></a>深拷贝和浅拷贝的定义</h2><p>深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的。</p><ul><li>浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址，所以<strong>如果其中一个对象改变了这个地址，就会影响到另一个对象</strong>。</li><li>深拷贝是将一个对象从内存中完整的拷贝一份出来，从堆内存中开辟一个新的区域存放新对象，且<strong>修改新对象不会影响原对象</strong>。</li></ul><p>浅拷贝：<a href="http://imgs.jackhoo.icu/%E6%B5%85%E6%8B%B7%E8%B4%9D.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1647242823104-8ae96ae3-0a89-4485-819f-2e136a97bb06.png#clientId=u685f2570-4891-4&crop=0&crop=0&crop=1&crop=1&id=ATOtC&name=image.png&originHeight=618&originWidth=1338&originalType=binary&ratio=1&rotation=0&showTitle=false&size=129327&status=done&style=none&taskId=u780214db-6a5f-4649-856d-7f5a1cfcb7e&title=" alt="image.png"></a></p><blockquote><p>浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。</p></blockquote><p>深拷贝：<br><a href="http://imgs.jackhoo.icu/%E6%B7%B1%E6%8B%B7%E8%B4%9D.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1647242823072-2c67e918-e63c-4fd8-8d0e-9b9f703471b2.png#clientId=u685f2570-4891-4&crop=0&crop=0&crop=1&crop=1&id=K7MxW&name=image.png&originHeight=738&originWidth=1356&originalType=binary&ratio=1&rotation=0&showTitle=false&size=162470&status=done&style=none&taskId=u94af4371-ca06-4be7-a590-a298c9e946d&title=" alt="image.png"></a></p><blockquote><p>深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p></blockquote><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>当我们把一个对象赋值给一个新的变量时，<strong>赋的其实是该对象的在栈中的地址，而不是堆中的数据</strong>。<br>赋值是将某一数值或对象赋给某个变量的过程，分为下面 2 部分</p><ul><li>基本数据类型：赋值，赋值之后两个变量互不影响</li><li>引用数据类型：赋<strong>址</strong>，两个变量具有相同的引用，指向同一个对象，相互之间有影响</li></ul><p>对基本类型进行赋值操作，两个变量互不影响。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&quot;muyiy&quot;</span>;<br><span class="hljs-keyword">let</span> b = a;<br><span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">// muyiy</span><br><br>a = <span class="hljs-string">&quot;change&quot;</span>;<br><span class="hljs-built_in">console</span>.log(a);<span class="hljs-comment">// change</span><br><span class="hljs-built_in">console</span>.log(b);<span class="hljs-comment">// muyiy</span><br></code></pre></div></td></tr></table></figure><p>对引用类型进行赋<strong>址</strong>操作，两个对象指向的同一个内存地址，修改引用值会对另一个影响</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>  <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span>,<br>&#125;<br><span class="hljs-keyword">let</span> person2 = person1<br>person2.name = <span class="hljs-string">&#x27;李四&#x27;</span><br><span class="hljs-built_in">console</span>.log(person1, person2)<br><span class="hljs-comment">// &#123;name: &#x27;李四&#x27;, age: 18, sex: &#x27;male&#x27;, height: 180, weight: 140&#125;</span><br><span class="hljs-comment">// &#123;name: &#x27;李四&#x27;, age: 18, sex: &#x27;male&#x27;, height: 180, weight: 140&#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝会重新在堆中创建内存，拷贝前后对象的基本数据类型互不影响，但拷贝前后对象的引用类型因共享同一块内存，会相互影响。<br>简单来说可以理解为浅拷贝只解决了第一层的问题，拷贝第一层的<strong>基本类型值</strong>，以及第一层的<strong>引用类型地址</strong>。<br>遍历对象，将每一个属性和值分别赋值给一个空对象。但是浅拷贝没有处理引用值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>  <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span>,<br>&#125;<br><span class="hljs-keyword">let</span> person2 = &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> person1) &#123;<br>  person2[key] = person1[key]<br>&#125;<br>person2.name = <span class="hljs-string">&#x27;李四&#x27;</span><br><span class="hljs-built_in">console</span>.log(person1, person2)<br><span class="hljs-comment">// &#123;name: &#x27;张三&#x27;, age: 18, sex: &#x27;male&#x27;, height: 180, weight: 140&#125;</span><br><span class="hljs-comment">// &#123;name: &#x27;李四&#x27;, age: 18, sex: &#x27;male&#x27;, height: 180, weight: 140&#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="浅拷贝的问题"><a href="#浅拷贝的问题" class="headerlink" title="浅拷贝的问题"></a>浅拷贝的问题</h3><ul><li>没有处理引用值，引用值还是指向同一个地址。</li><li>如果原型上还有其他属性，浅拷贝也会拷贝下来<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.num = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>  <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span>,<br>  <span class="hljs-attr">son</span>: &#123;<br>    <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Jenney&#x27;</span>,<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">let</span> person2 = &#123;&#125;<br><span class="hljs-comment">//浅拷贝</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> person1) &#123;<br>  person2[key] = person1[key]<br>&#125;<br>person2.name = <span class="hljs-string">&#x27;李四&#x27;</span><br>person2.son.second = <span class="hljs-string">&#x27;Lucy&#x27;</span><br><span class="hljs-built_in">console</span>.log(person1, person2)<br><span class="hljs-comment">// age: 18</span><br><span class="hljs-comment">// height: 180</span><br><span class="hljs-comment">// name: &quot;张三&quot;</span><br><span class="hljs-comment">// sex: &quot;male&quot;</span><br><span class="hljs-comment">// son: &#123;first: &#x27;Jenney&#x27;, second: &#x27;Lucy&#x27;&#125;</span><br><span class="hljs-comment">// weight: 140</span><br><span class="hljs-comment">// [[Prototype]]: Object</span><br><span class="hljs-comment">//    num: 1</span><br><br><span class="hljs-comment">// age: 18</span><br><span class="hljs-comment">// height: 180</span><br><span class="hljs-comment">// name: &quot;李四&quot;</span><br><span class="hljs-comment">// num: 1</span><br><span class="hljs-comment">// sex: &quot;male&quot;</span><br><span class="hljs-comment">// son: &#123;first: &#x27;Jenney&#x27;, second: &#x27;Lucy&#x27;&#125;</span><br><span class="hljs-comment">// weight: 140</span><br><span class="hljs-comment">// [[Prototype]]: Object</span><br><span class="hljs-comment">//     num: 1</span><br></code></pre></div></td></tr></table></figure><h3 id="实现浅拷贝"><a href="#实现浅拷贝" class="headerlink" title="实现浅拷贝"></a>实现浅拷贝</h3><h4 id="用-for-in-实现浅拷贝"><a href="#用-for-in-实现浅拷贝" class="headerlink" title="用 for in 实现浅拷贝"></a>用 for in 实现浅拷贝</h4>传入拷贝源和目标对象，考虑排除原型上的对象<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.num = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>  <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span>,<br>  <span class="hljs-attr">son</span>: &#123;<br>    <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Jenney&#x27;</span>,<br>  &#125;,<br>&#125;<br><span class="hljs-comment">//浅拷贝</span><br><span class="hljs-keyword">let</span> person2 = clone(person1)<br>person2.name = <span class="hljs-string">&#x27;李四&#x27;</span><br>person2.son.second = <span class="hljs-string">&#x27;Lucy&#x27;</span><br><span class="hljs-built_in">console</span>.log(person1, person2)<br><br><span class="hljs-comment">//浅拷贝</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span>(<span class="hljs-params">origin, target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> tar = target || &#123;&#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> origin)<br>    <span class="hljs-keyword">if</span> (origin.hasOwnProperty(key)) &#123;<span class="hljs-comment">//排除原型,只打印自身属性</span><br>      tar[key] = origin[key]<br>    &#125;<br>  <span class="hljs-keyword">return</span> tar<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Object-assign-推荐"><a href="#Object-assign-推荐" class="headerlink" title="Object.assign()(推荐)"></a><code>Object.assign()</code>(推荐)</h4>for in 方法做浅拷贝过于繁琐。ES6 给我们提供了新的语法糖，通过 <code>Object.assgin()</code> 可以实现<strong>浅拷贝</strong>。<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 语法1</span><br>obj2 = <span class="hljs-built_in">Object</span>.assgin(obj2, obj1);<br><br><span class="hljs-comment">// 语法2</span><br><span class="hljs-built_in">Object</span>.assign(目标对象, 源对象<span class="hljs-number">1</span>, 源对象<span class="hljs-number">2.</span>..);<br></code></pre></div></td></tr></table></figure></li></ul><p><strong>解释</strong>：将obj1 拷贝给 obj2。执行完毕后，obj2 的值会被更新。<br><strong>作用</strong>：将 obj1 的值追加到 obj2 中。如果对象里的属性名相同，会被覆盖。<br>从语法2中可以看出，<code>Object.assign()</code> 可以将多个“源对象”拷贝到“目标对象”中。<br><code>Object.assign()</code> 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。<br>但是 <code>Object.assign()</code>进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj1 = &#123; <span class="hljs-attr">person</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kobe&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">41</span>&#125;,<span class="hljs-attr">sports</span>:<span class="hljs-string">&#x27;basketball&#x27;</span> &#125;;<br><span class="hljs-keyword">let</span> obj2 = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, obj1);<br>obj2.person.name = <span class="hljs-string">&quot;wade&quot;</span>;<br>obj2.sports = <span class="hljs-string">&#x27;football&#x27;</span><br><span class="hljs-built_in">console</span>.log(obj1); <span class="hljs-comment">// &#123; person: &#123; name: &#x27;wade&#x27;, age: 41 &#125;, sports: &#x27;basketball&#x27; &#125;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>注意：当object只有一层的时候，是深拷贝</p></blockquote><h4 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符..."></a>展开运算符<code>...</code></h4><p>展开运算符是一个 es6 / es2015特性，它提供了一种非常方便的方式来执行浅拷贝，这与 <code>Object.assign ()</code>的功能相同。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj1 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xiaoming&#x27;</span>, <span class="hljs-attr">address</span>: &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">100</span> &#125; &#125;<br><span class="hljs-keyword">let</span> obj2 = &#123; ...obj1 &#125;<br>obj1.address.x = <span class="hljs-number">200</span><br>obj1.name = <span class="hljs-string">&#x27;小明&#x27;</span><br><span class="hljs-built_in">console</span>.log(obj1)<span class="hljs-comment">//&#123;name: &quot;小明&quot;, address: &#123;x: 200, y: 100&#125;&#125;</span><br><span class="hljs-built_in">console</span>.log(obj2)<span class="hljs-comment">//&#123;name: &quot;xiaoming&quot;, address: &#123;x: 200, y: 100&#125;&#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深拷贝：从堆内存中开辟一个新的区域存放新对象，对象中的子对象进行递归拷贝,拷贝前后的两个对象互不影响。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 深拷贝</span><br><span class="hljs-keyword">let</span> obj1 = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;浪里行舟&#x27;</span>,<br>    <span class="hljs-attr">arr</span> : [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<span class="hljs-number">4</span>],<br>&#125;;<br><span class="hljs-keyword">let</span> obj4=deepClone(obj1)<br>obj4.name = <span class="hljs-string">&quot;阿浪&quot;</span>;<br>obj4.arr[<span class="hljs-number">1</span>] = [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>] ; <span class="hljs-comment">// 新对象跟原对象不共享内存</span><br><span class="hljs-comment">// 这是个深拷贝的方法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> obj; <br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Date</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(obj);<br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">RegExp</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(obj);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&quot;object&quot;</span>) <span class="hljs-keyword">return</span> obj;<br>    <span class="hljs-keyword">let</span> cloneObj = <span class="hljs-keyword">new</span> obj.constructor();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>      <span class="hljs-keyword">if</span> (obj.hasOwnProperty(key)) &#123;<br>        <span class="hljs-comment">// 实现一个递归拷贝</span><br>        cloneObj[key] = deepClone(obj[key]);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cloneObj;<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;obj1&#x27;</span>,obj1) <span class="hljs-comment">// obj1 &#123; name: &#x27;浪里行舟&#x27;, arr: [ 1, [ 2, 3 ], 4 ] &#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;obj4&#x27;</span>,obj4) <span class="hljs-comment">// obj4 &#123; name: &#x27;阿浪&#x27;, arr: [ 1, [ 5, 6, 7 ], 4 ] &#125;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="实现深拷贝"><a href="#实现深拷贝" class="headerlink" title="实现深拷贝"></a>实现深拷贝</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>递归方法实现深度克隆原理：<strong>遍历对象、数组直到里边都是基本数据类型，然后再去复制，就是深度拷贝</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">origin, target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> target = target || &#123;&#125;,<br>    toStr = <span class="hljs-built_in">Object</span>.prototype.toString<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> origin) &#123;<br>    <span class="hljs-keyword">if</span> (origin.hasOwnProperty(key)) &#123; <span class="hljs-comment">//排除原型上的对象</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> origin[key] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; origin[key] !== <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//对象或数组且不为空</span><br>        toStr.call(origin[key]) === <span class="hljs-string">&#x27;[object Array]&#x27;</span> <span class="hljs-comment">//判断object是否为数组</span><br>          ? (target[key] = []) <span class="hljs-comment">//生成空数组，为了下边的递归</span><br>          : (target[key] = &#123;&#125;)<br>        deepClone(origin[key], target[key])<span class="hljs-comment">//递归，进行深度拷贝，直到全是原始值</span><br>      &#125; <span class="hljs-keyword">else</span> target[key] = origin[key] <span class="hljs-comment">//原始值之间复制不深拷贝</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> target<br>&#125;<br></code></pre></div></td></tr></table></figure><p>有种特殊情况需注意就是对象存在<strong>循环引用</strong>的情况，即对象的属性直接的引用了自身的情况，解决循环引用问题，我们可以额外开辟一个存储空间，来存储当前对象和拷贝对象的对应关系，当需要拷贝当前对象时，先去存储空间中找，有没有拷贝过这个对象，如果有的话直接返回，如果没有的话继续拷贝，这样就巧妙化解的循环引用的问题。使用WeakMap代替Map，如果是WeakMap的话，就是弱引用关系，当下一次垃圾回收机制执行时，这块内存就会被释放掉。</p><h3 id="JSON-parse-JSON-stringify-（不推荐）"><a href="#JSON-parse-JSON-stringify-（不推荐）" class="headerlink" title="JSON.parse(JSON.stringify())（不推荐）"></a><code>JSON.parse(JSON.stringify())</code>（不推荐）</h3><p>用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。但是无法拷贝其他引用类型、拷贝函数、循环引用等情况<br><strong>这种方法虽然可以实现数组或对象深拷贝,但不能处理函数和正则</strong>，因为这两者基于JSON.stringify和JSON.parse处理后，得到的正则就不再是正则（变为空对象），得到的函数就不再是函数（变为null）了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.num = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>  <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span>,<br>  <span class="hljs-attr">children</span>: &#123;<br>    <span class="hljs-attr">first</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张一&#x27;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>    &#125;,<br>    <span class="hljs-attr">second</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张二&#x27;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">car</span>: [<span class="hljs-string">&#x27;Benz&#x27;</span>, <span class="hljs-string">&#x27;Mazda&#x27;</span>],<br>&#125;<br><br><span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(person1)<br><span class="hljs-keyword">let</span> person2 = <span class="hljs-built_in">JSON</span>.parse(str)<br><br>person2.name = <span class="hljs-string">&#x27;李四&#x27;</span><br>person2.children.third = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">9</span>,<br>&#125;<br>person2.car.push(<span class="hljs-string">&#x27;BYD&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person1, person2)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浅拷贝</tag>
      
      <tag>深拷贝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型、构造器、隐式原型、原型链</title>
    <link href="/2022/03/14/%E5%8E%9F%E5%9E%8B%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8%E3%80%81%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2022/03/14/%E5%8E%9F%E5%9E%8B%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8%E3%80%81%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="原型、构造器、隐式原型、原型链"><a href="#原型、构造器、隐式原型、原型链" class="headerlink" title="原型、构造器、隐式原型、原型链"></a>原型、构造器、隐式原型、原型链</h1><p>实例、构造函数、原型之间，形成一个环形指向它们的指向关系是：<br>由构造函数 new 出实例，然后实例的隐式原型（<code>__proto__</code>）指向构造函数的显示原型（<code>prototype</code>）。</p><p>如果原型是另一个类型的实例呢？<br><strong>那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例和原型之间构造了一条原型链。这就是原型链的基本构想。</strong></p><h2 id="原型prototype"><a href="#原型prototype" class="headerlink" title="原型prototype"></a>原型prototype</h2><p><strong>原型对象prototype其实是构造函数(function对象)的一个属性，但是他也是一个对象</strong><br>只要创建一个函数，就会按照特定的规则为这个函数创建一个 prototype 属性（指向原型对象）。<br>默认情况下，所有原型对象自动获得一个名为 <code>constructor</code> 的属性，指回与之关联的构造函数。  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-comment">//prototype</span><br><span class="hljs-built_in">console</span>.log(Test.prototype) <span class="hljs-comment">//&#123;constructor: ƒ&#125;</span><br></code></pre></div></td></tr></table></figure><p><strong>prototype是定义构造函数构造出的每个对象的公共祖先，所有被该构造函数构造出来的对象都可以继承原型上的属性和方法</strong><br>对象自己身上有的就不会访问原型上的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Handphone</span>(<span class="hljs-params">color, brand</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.color = color<br>  <span class="hljs-built_in">this</span>.brand = brand<br>  <span class="hljs-built_in">this</span>.screen = <span class="hljs-string">&#x27;18:9&#x27;</span><br>&#125;<br>Handphone.prototype.rom = <span class="hljs-string">&#x27;64G&#x27;</span><br>Handphone.prototype.ram = <span class="hljs-string">&#x27;6G&#x27;</span><br>Handphone.prototype.screen = <span class="hljs-string">&#x27;16:9&#x27;</span><br><span class="hljs-keyword">let</span> hp1 = <span class="hljs-keyword">new</span> Handphone(<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;小米&#x27;</span>)<br><span class="hljs-keyword">let</span> hp2 = <span class="hljs-keyword">new</span> Handphone(<span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-string">&#x27;红米&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(hp1.rom) <span class="hljs-comment">//64D</span><br><span class="hljs-built_in">console</span>.log(hp2.ram) <span class="hljs-comment">//6G</span><br><span class="hljs-built_in">console</span>.log(hp1.screen) <span class="hljs-comment">//18:9 //自己身上有的就访问自己的，不会访问祖先的</span><br><span class="hljs-built_in">console</span>.log(hp2.screen) <span class="hljs-comment">//18:9</span><br></code></pre></div></td></tr></table></figure><p>推荐固定的值或者方法写在原型上，需要变化或者传参配置的值写在构造函数内部，这样可以减少代码冗余</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Handphone</span>(<span class="hljs-params">color, brand</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.color = color<br>     <span class="hljs-built_in">this</span>.brand = brand<br>   &#125;<br>   <span class="hljs-comment">// Handphone.prototype.rom = &#x27;64G&#x27;</span><br>   <span class="hljs-comment">// Handphone.prototype.ram = &#x27;6G&#x27;</span><br>   <span class="hljs-comment">// Handphone.prototype.screen = &#x27;16:9&#x27;</span><br>   <span class="hljs-comment">// Handphone.prototype.call = function () &#123;</span><br>   <span class="hljs-comment">//   console.log(&#x27;I am calling&#x27;)</span><br>   <span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//开发中一般写在一起</span><br>   Handphone.prototype = &#123;<br>     <span class="hljs-attr">rom</span>: <span class="hljs-string">&#x27;64G&#x27;</span>,<br>     <span class="hljs-attr">ram</span>: <span class="hljs-string">&#x27;6G&#x27;</span>,<br>     <span class="hljs-attr">screen</span>: <span class="hljs-string">&#x27;16:9&#x27;</span>,<br>     <span class="hljs-attr">call</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am calling&#x27;</span>)<br>     &#125;,<br>   &#125;<br>   <span class="hljs-keyword">let</span> hp1 = <span class="hljs-keyword">new</span> Handphone(<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;小米&#x27;</span>)<br>   <span class="hljs-keyword">let</span> hp2 = <span class="hljs-keyword">new</span> Handphone(<span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-string">&#x27;红米&#x27;</span>)<br>hp2.call() <span class="hljs-comment">//I am calling</span><br><br></code></pre></div></td></tr></table></figure><p><strong>通过实例化对象不能增删改祖先prototype上的值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>Test.prototype.name = <span class="hljs-string">&#x27;TEST&#x27;</span><br><span class="hljs-keyword">let</span> test = <span class="hljs-keyword">new</span> Test()<br><span class="hljs-built_in">console</span>.log(Test.prototype) <span class="hljs-comment">//&#123;name: &#x27;TEST&#x27;, constructor: ƒ&#125;</span><br>test.job = <span class="hljs-number">123</span><br><span class="hljs-built_in">console</span>.log(Test.prototype, test)<br><span class="hljs-comment">//&#123;name: &#x27;TEST&#x27;, constructor: ƒ&#125;</span><br><span class="hljs-comment">//Test &#123;job: 123&#125;</span><br>test.name = test<br><span class="hljs-built_in">console</span>.log(Test.prototype, test)<br><span class="hljs-comment">//&#123;name: &#x27;TEST&#x27;, constructor: ƒ&#125;</span><br><span class="hljs-comment">//Test &#123;job: 123, name: Test&#125;</span><br><span class="hljs-keyword">delete</span> test.name<br><span class="hljs-built_in">console</span>.log(Test.prototype, test)<br><span class="hljs-comment">//&#123;name: &#x27;TEST&#x27;, constructor: ƒ&#125;</span><br><span class="hljs-comment">//Test &#123;job: 123&#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="构造器constructor"><a href="#构造器constructor" class="headerlink" title="构造器constructor"></a>构造器constructor</h2><p><strong>constructor默认指向构造函数本身</strong><br>在自定义构造函数时，原型对象默认只会获得 <code>constructor</code> 属性，其他的所有方法都继承自 Object。<br>构造函数有一个 prototype 属性引用其原型对象，而这个原型对象也有一个 constructor 属性，引用这个构造函数。换句话说，两者循环引用  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Handphone</span>(<span class="hljs-params">color, brand</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.color = color<br>  <span class="hljs-built_in">this</span>.brand = brand<br>&#125;<br><span class="hljs-built_in">console</span>.log(Handphone.prototype) <span class="hljs-comment">//&#123;constructor: ƒ&#125;</span><br><span class="hljs-comment">// &#123;constructor: ƒ&#125;</span><br><span class="hljs-comment">//    constructor: ƒ Handphone(color, brand)</span><br><span class="hljs-comment">//    [[Prototype]]: Object</span><br><br><span class="hljs-built_in">console</span>.log(Handphone.prototype.constructor === Handphone)<br><br></code></pre></div></td></tr></table></figure><p>可以通过原型内部的constructor更改构造函数的constructor</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Telephone</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Handphone</span>(<span class="hljs-params">color, brand</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.color = color<br>  <span class="hljs-built_in">this</span>.brand = brand<br>&#125;<br>Handphone.prototype = &#123;<br>  <span class="hljs-attr">constructor</span>: Telephone,<br>&#125;<br><span class="hljs-built_in">console</span>.log(Handphone.prototype)<br><span class="hljs-comment">// &#123;constructor: ƒ&#125;</span><br><span class="hljs-comment">//   constructor: ƒ Telephone()</span><br><span class="hljs-comment">//   [[Prototype]]: Object</span><br></code></pre></div></td></tr></table></figure><h2 id="proto-Prototype"><a href="#proto-Prototype" class="headerlink" title="__proto__( [[Prototype]] )"></a><code>__proto__</code>( <code>[[Prototype]]</code> )</h2><p><code>__proto__</code>只是一个容器，实例对象通过<code>__proto__</code>这个键名指向原型对象prototype</p><h3 id="实例的-proto-构造函数的prototype"><a href="#实例的-proto-构造函数的prototype" class="headerlink" title="实例的__proto__=== 构造函数的prototype"></a>实例的<code>__proto__</code>=== 构造函数的prototype</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-built_in">console</span>.log(Car.prototype === car.__proto__) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><p><strong><code>__proto__</code>是实例化以后的结果，<code>__proto__</code>属于实例化对象</strong><br>构造函数被实例化时会产生一个this，this默认有一个<code>__proto__</code>属性，指向他的原型。<br>如果this中没有找到对应的属性，就会沿着<code>__proto__</code>找原型里的属性</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// var this = &#123;</span><br>  <span class="hljs-comment">//   __proto__: Car.prototype, //产生的this里边默认有__proto__属性，指向他的原型</span><br>  <span class="hljs-comment">// 如果this中没有对应的属性，就会根据__proto__向上找原型里的属性</span><br>  <span class="hljs-comment">// &#125;</span><br>&#125;<br>Car.prototype.name = <span class="hljs-string">&#x27;Benz&#x27;</span><br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car() <span class="hljs-comment">//构造函数被实例化时，内部产生一个this</span><br><span class="hljs-built_in">console</span>.log(car.name) <span class="hljs-comment">//Benz</span><br></code></pre></div></td></tr></table></figure><p><code>__proto__</code>只是一个内部属性，也可以改</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>Person.prototype.name = <span class="hljs-string">&#x27;张三&#x27;</span><br><span class="hljs-keyword">let</span> p1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> Person()<br><span class="hljs-built_in">console</span>.log(person.name) <span class="hljs-comment">//张三</span><br>person.__proto__ = p1<br><span class="hljs-built_in">console</span>.log(person.name) <span class="hljs-comment">//李四</span><br></code></pre></div></td></tr></table></figure><h3 id="实例化前后赋值prototype"><a href="#实例化前后赋值prototype" class="headerlink" title="实例化前后赋值prototype"></a>实例化前后赋值prototype</h3><h4 id="实例化之前赋值prototype可以修改"><a href="#实例化之前赋值prototype可以修改" class="headerlink" title="实例化之前赋值prototype可以修改"></a>实例化之前赋值prototype可以修改</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Car.prototype.name = <span class="hljs-string">&#x27;Mazda&#x27;</span><br>Car.prototype.name = <span class="hljs-string">&#x27;Benz&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-built_in">console</span>.log(car.name) <span class="hljs-comment">//Benz</span><br></code></pre></div></td></tr></table></figure><h4 id="实例化之后赋值prototype可以修改"><a href="#实例化之后赋值prototype可以修改" class="headerlink" title="实例化之后赋值prototype可以修改"></a>实例化之后赋值prototype可以修改</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Car.prototype.name = <span class="hljs-string">&#x27;Mazda&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br>Car.prototype.name = <span class="hljs-string">&#x27;Benz&#x27;</span><br><span class="hljs-built_in">console</span>.log(car.name) <span class="hljs-comment">//Benz</span><br></code></pre></div></td></tr></table></figure><h3 id="实例化前后重写prototype"><a href="#实例化前后重写prototype" class="headerlink" title="实例化前后重写prototype"></a>实例化前后重写prototype</h3><h4 id="实例化之前重写可以修改prototype属性"><a href="#实例化之前重写可以修改prototype属性" class="headerlink" title="实例化之前重写可以修改prototype属性"></a>实例化之前重写可以修改prototype属性</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Car.prototype.name = <span class="hljs-string">&#x27;Benz&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>Car.prototype = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Mazkda&#x27;</span> &#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-built_in">console</span>.log(car.name) <span class="hljs-comment">//Mazkda</span><br></code></pre></div></td></tr></table></figure><h4 id="实例化之后重写的prototype属性不能影响实例化对象"><a href="#实例化之后重写的prototype属性不能影响实例化对象" class="headerlink" title="实例化之后重写的prototype属性不能影响实例化对象"></a>实例化之后重写的prototype属性不能影响实例化对象</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Car.prototype.name = <span class="hljs-string">&#x27;Benz&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br>Car.prototype = &#123;<br>  <span class="hljs-comment">//这是实例化之后重写的，不能影响实例的值</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Mazkda&#x27;</span>,<br>&#125;<br><span class="hljs-built_in">console</span>.log(car.name) <span class="hljs-comment">//Benz</span><br><span class="hljs-comment">//实例化时</span><br><span class="hljs-comment">// function Car() &#123;</span><br><span class="hljs-comment">//   let this = &#123;</span><br><span class="hljs-comment">//     __proto__: (Car.prototype = &#123;</span><br><span class="hljs-comment">//       name: &#x27;Benz&#x27;,</span><br><span class="hljs-comment">//     &#125;),</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><p>实例化对象的constructor指向的是构造函数，<strong>constructor保存的是实例化之前的东西</strong>,<br><strong>实例化之后再重写prototype(属于未实例化/实例化之前)</strong> 就会被放到.prototype.constructor<br>所以实例化之后再重写prototype，此时重写的是实例化之前Car.prototype.constructor的prototype，对实例化对象无影响</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Car.prototype.name = <span class="hljs-string">&#x27;Benz&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-comment">//相当于与上一次实例化之后在重写prototype(属于未实例化/实例化之前)</span><br><span class="hljs-comment">//(属于未实例化/实例化之前)就被放到Car.prototype.constructor里</span><br>Car.prototype = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Mazkda&#x27;</span>, <span class="hljs-comment">//此时重写的是实例化之前Car.prototype.constructor的prototype</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(car)<br><span class="hljs-comment">// Car &#123;&#125;</span><br><span class="hljs-comment">//    [[Prototype]]: Object</span><br><span class="hljs-comment">//    name: &quot;Benz&quot;</span><br><span class="hljs-comment">//    constructor: ƒ Car() //constructor保存的是实例化之前的东西</span><br><span class="hljs-comment">//       arguments: null</span><br><span class="hljs-comment">//       caller: null</span><br><span class="hljs-comment">//       length: 0</span><br><span class="hljs-comment">//       name: &quot;Car&quot;</span><br><span class="hljs-comment">//       prototype: &#123;name: &#x27;Mazkda&#x27;&#125;</span><br><span class="hljs-built_in">console</span>.log(car.name) <span class="hljs-comment">//Benz</span><br><span class="hljs-comment">//实例化对象的constructor指向的是Car构造函数</span><br><span class="hljs-built_in">console</span>.log(car.constructor.prototype) <span class="hljs-comment">//&#123;name: &#x27;Mazkda&#x27;&#125;</span><br><span class="hljs-comment">// function Car() &#123;</span><br><span class="hljs-comment">//   let this = &#123;</span><br><span class="hljs-comment">//     __proto__: (Car.prototype = &#123;</span><br><span class="hljs-comment">//       name: &#x27;Benz&#x27;,</span><br><span class="hljs-comment">//     &#125;),</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//Car.prototype.constructor -&gt; Car() -&gt; prototype -&gt; name : Benz</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">plus1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    a++<br>    <span class="hljs-built_in">console</span>.log(a)<br>  &#125;<br>  <span class="hljs-keyword">return</span> plus1<br>&#125;<br><span class="hljs-keyword">let</span> plus = test()<br>plus() <span class="hljs-comment">//2</span><br>plus() <span class="hljs-comment">//3</span><br>plus() <span class="hljs-comment">//4</span><br></code></pre></div></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>如果原型是另一个类型的实例呢？<br><strong>那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例和原型之间构造了一条原型链。这就是原型链的基本构想。</strong> </p><p>沿着<code>__proto__</code>( <code>[[Prototype]] </code>)去找原型里的属性，一层一层继承原型的属性这条链就是原型链。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Professor.prototype.tSkill = <span class="hljs-string">&#x27;JAVA&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Professor</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> professor = <span class="hljs-keyword">new</span> Professor()<br><br>Teacher.prototype = professor<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.mSkill = <span class="hljs-string">&#x27;JS&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> teacher = <span class="hljs-keyword">new</span> Teacher()<br><br>Student.prototype = teacher<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.pSkill = <span class="hljs-string">&#x27;HTML&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> student = <span class="hljs-keyword">new</span> Student()<br><br><span class="hljs-built_in">console</span>.log(student)<br><span class="hljs-comment">// Student &#123;pSkill: &#x27;HTML&#x27;&#125;</span><br><span class="hljs-comment">//    [Prototype]]: Professor</span><br><span class="hljs-comment">//       mSkill: &quot;JS&quot;</span><br><span class="hljs-comment">//       [[Prototype]]: Professor</span><br><span class="hljs-comment">//          [[Prototype]]: Object</span><br><span class="hljs-comment">//              tSkill: &quot;JAVA&quot;</span><br><span class="hljs-comment">//              constructor: ƒ Professor()</span><br><span class="hljs-comment">//              [[Prototype]]: Object</span><br></code></pre></div></td></tr></table></figure><h3 id="原型链的顶端是Object-prototype"><a href="#原型链的顶端是Object-prototype" class="headerlink" title="原型链的顶端是Object.prototype"></a>原型链的顶端是Object.prototype</h3><p>Object.prototype里边保存了toString方法<br>Object.prototype.__proto__是null</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__ === <span class="hljs-literal">null</span>) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><p>如果是<strong>引用值，子级可以更改/添加父级或者祖先的属性(不推荐)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Professor.prototype.tSkill = <span class="hljs-string">&#x27;JAVA&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Professor</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> professor = <span class="hljs-keyword">new</span> Professor()<br><br>Teacher.prototype = professor<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.mSkill = <span class="hljs-string">&#x27;JS&#x27;</span><br>  <span class="hljs-built_in">this</span>.success = &#123;<br>    <span class="hljs-attr">alibaba</span>: <span class="hljs-string">&#x27;10&#x27;</span>,<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> teacher = <span class="hljs-keyword">new</span> Teacher()<br><br>Student.prototype = teacher<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.pSkill = <span class="hljs-string">&#x27;THML&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> student = <span class="hljs-keyword">new</span> Student()<br><br>student.success.baidu = <span class="hljs-string">&#x27;1&#x27;</span><br>student.success.alibaba = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-built_in">console</span>.log(teacher, student)<br><span class="hljs-comment">// Professor &#123;mSkill: &#x27;JS&#x27;, success: &#123;…&#125;&#125;</span><br><span class="hljs-comment">//    mSkill: &quot;JS&quot;</span><br><span class="hljs-comment">//    success: &#123;alibaba: &#x27;1&#x27;, baidu: &#x27;1&#x27;&#125;</span><br><span class="hljs-comment">//    [[Prototype]]: Professor</span><br><br><span class="hljs-comment">// Student &#123;pSkill: &#x27;THML&#x27;&#125;</span><br><span class="hljs-comment">//    pSkill: &quot;THML&quot;</span><br><span class="hljs-comment">//    [[Prototype]]: Professor</span><br><span class="hljs-comment">//        mSkill: &quot;JS&quot;</span><br><span class="hljs-comment">//        success: &#123;alibaba: &#x27;1&#x27;, baidu: &#x27;1&#x27;&#125;</span><br><span class="hljs-comment">//        [[Prototype]]: Professor</span><br></code></pre></div></td></tr></table></figure><p>如果是<strong>原始值，子级不能修改/增加父级或者祖先的属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Professor.prototype.tSkill = <span class="hljs-string">&#x27;JAVA&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Professor</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> professor = <span class="hljs-keyword">new</span> Professor()<br><br>Teacher.prototype = professor<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.mSkill = <span class="hljs-string">&#x27;JS&#x27;</span><br>  <span class="hljs-built_in">this</span>.students = <span class="hljs-number">500</span><br>&#125;<br><span class="hljs-keyword">let</span> teacher = <span class="hljs-keyword">new</span> Teacher()<br><br>Student.prototype = teacher<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.pSkill = <span class="hljs-string">&#x27;THML&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> student = <span class="hljs-keyword">new</span> Student()<br><br>student.students++<br><span class="hljs-built_in">console</span>.log(teacher, student)<br><span class="hljs-comment">// Professor &#123;mSkill: &#x27;JS&#x27;, students: 500&#125;</span><br><span class="hljs-comment">//    mSkill: &quot;JS&quot;</span><br><span class="hljs-comment">//    students: 500</span><br><span class="hljs-comment">//    [[Prototype]]: Professor</span><br><br><span class="hljs-comment">// Student &#123;pSkill: &#x27;THML&#x27;, students: 501&#125;</span><br><span class="hljs-comment">//    pSkill: &quot;THML&quot;</span><br><span class="hljs-comment">//    students: 501</span><br><span class="hljs-comment">//    [[Prototype]]: Professor</span><br><span class="hljs-comment">//        mSkill: &quot;JS&quot;</span><br><span class="hljs-comment">//        students: 500</span><br><span class="hljs-comment">//        [[Prototype]]: Professor</span><br></code></pre></div></td></tr></table></figure><h3 id="this谁用指向谁"><a href="#this谁用指向谁" class="headerlink" title="this谁用指向谁"></a>this谁用指向谁</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.brand = <span class="hljs-string">&#x27;Benz&#x27;</span><br>&#125;<br>Car.prototype = &#123;<br>  <span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;Mazda&#x27;</span>,<br>  <span class="hljs-attr">intro</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是&#x27;</span> + <span class="hljs-built_in">this</span>.brand)<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-comment">//实例化时构造函数内部产生空this，然后执行代码将数据给this。</span><br><span class="hljs-comment">//构造函数中有brand就用自己的，没有intro就在原型上找</span><br><span class="hljs-comment">// function Car() &#123;</span><br><span class="hljs-comment">//   let this=&#123;</span><br><span class="hljs-comment">//     barnd:&#x27;Benz&#x27;</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// Car.prototype = &#123;</span><br><span class="hljs-comment">//   brand: &#x27;Mazda&#x27;,</span><br><span class="hljs-comment">//   intro: function () &#123;...&#125;,</span><br><span class="hljs-comment">// &#125;</span><br>car.intro() <span class="hljs-comment">//我是Benz</span><br>Car.prototype.intro() <span class="hljs-comment">//我是Mazda. //this谁用指向谁</span><br></code></pre></div></td></tr></table></figure><h3 id="不是所有的对象都继承于Object-prototype。"><a href="#不是所有的对象都继承于Object-prototype。" class="headerlink" title="不是所有的对象都继承于Object.prototype。"></a>不是所有的对象都继承于Object.prototype。</h3><p><code>Object.create(null)</code>创建的实例对象不继承Object.prototype。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>)<br>obj.num = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(obj) <span class="hljs-comment">//&#123;num: 1&#125; //不继承Object.prototype</span><br><span class="hljs-comment">// obj.toString() //obj.toString is not a function //也没有toString方法</span><br><span class="hljs-keyword">let</span> obj1 = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">2</span>,<br>&#125;<br>obj.__proto__ = obj1 <span class="hljs-comment">//没有继承Object.prototype的情况下，手动设置__proto__是无用的，无法访问</span><br><span class="hljs-built_in">console</span>.log(obj.count) <span class="hljs-comment">//undefined</span><br></code></pre></div></td></tr></table></figure><p><strong>默认情况下，所有引用类型都继承自 Object，这也是通过原型链实现的</strong>。<br><strong>任何函数的默认原型都是一个 Object 的实例，这意味着这个实例有一个内部指针指向 Object.prototype</strong>。<br>这也是为什么自定义类型能够继承包括 toString()、valueOf()在内的所有默 认方法的原因。</p><p>原始值是没有属性，所以undefined和null没有toString方法<br>undefined和null不能经过包装类，没有原型</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(num.toString()) <span class="hljs-comment">//打印出字符串 1</span><br><span class="hljs-comment">//这里原始值可以使用toString是因为进行了包装类new Number(1)所以才有toString()</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原型</tag>
      
      <tag>构造器</tag>
      
      <tag>隐式原型</tag>
      
      <tag>原型链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浮动</title>
    <link href="/2022/03/07/%E6%B5%AE%E5%8A%A8/"/>
    <url>/2022/03/07/%E6%B5%AE%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><p>文本主要内容</p><ul><li>标准文档流 <ul><li>标准文档流的特性</li><li>元素</li><li>行内元素和块级元素的相互转换</li></ul></li><li>浮动的性质</li><li>浮动的清除</li></ul><h2 id="标准文档流"><a href="#标准文档流" class="headerlink" title="标准文档流"></a>标准文档流</h2><p>宏观地讲，我们的web页面和photoshop等设计软件有本质的区别：web页面的制作，是个“流”，必须从上而下，像“织毛衣”。而设计软件，想往哪里画个东西，都能画。</p><h3 id="标准文档流的特性"><a href="#标准文档流的特性" class="headerlink" title="标准文档流的特性"></a>标准文档流的特性</h3><h4 id="空白折叠现象："><a href="#空白折叠现象：" class="headerlink" title="空白折叠现象："></a>空白折叠现象：</h4><p>无论多少个空格、换行、tab，都会折叠为一个空格。<br>比如，如果我们想让img标签之间没有空隙，必须紧密连接：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=&quot;images/<span class="hljs-number">0</span><span class="hljs-selector-class">.jpg</span>&quot; /&gt;&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=&quot;images/<span class="hljs-number">1</span><span class="hljs-selector-class">.jpg</span>&quot; /&gt;&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=&quot;images/<span class="hljs-number">2</span><span class="hljs-selector-class">.jpg</span>&quot; /&gt;<br></code></pre></div></td></tr></table></figure><h4 id="高矮不齐，底边对齐："><a href="#高矮不齐，底边对齐：" class="headerlink" title="高矮不齐，底边对齐："></a>高矮不齐，底边对齐：</h4><p>举例如下：<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A01.png"><img src="http://img.smyhvae.com/20170729_1508_2.png#crop=0&crop=0&crop=1&crop=1&id=Vvjc4&originHeight=644&originWidth=780&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><h4 id="自动换行，一行写不满，换行写。"><a href="#自动换行，一行写不满，换行写。" class="headerlink" title="自动换行，一行写不满，换行写。"></a>自动换行，一行写不满，换行写。</h4><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>学习的初期，我们就要知道，标准文档流等级森严。<br>标签分为三种等级：</p><ul><li><strong>内联元素</strong>(行间/行内元素)、</li><li><strong>块级元素、</strong></li><li><strong>内联块级元素</strong>(行内块元素)</li></ul><p>我们可以举一个例子，看看块级元素和行内元素的区别：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A02.png"><img src="http://img.smyhvae.com/20170729_1529_2.png#crop=0&crop=0&crop=1&crop=1&id=urZBy&originHeight=395&originWidth=790&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a><br>上图中可以看到，<code>h1</code>标签是块级元素，占据了整行，<code>span</code>标签是行内元素，只占据内容这一部分。<br>现在我们尝试给两个标签设置宽高。效果如下：<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A03.png"><img src="http://img.smyhvae.com/20170729_1532_2.png#crop=0&crop=0&crop=1&crop=1&id=qpHtb&originHeight=484&originWidth=780&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a><br>上图中，我们尝试给两个标签设置宽高，但发现，宽高属性只对块级元素<code>h1</code>生效。于是我们可以做出如下总结。<br><strong>行内元素和块级元素的区别：</strong>（非常重要）<br>​</p><h4 id="行内元素："><a href="#行内元素：" class="headerlink" title="行内元素："></a>行内元素：</h4><p><strong>行内元素不独占一行、无法定义高宽</strong>，设置margin，padding，<strong>但只在水平方向有效</strong></p><ul><li>与其他行内元素并排；</li><li>不能设置宽、高。默认的宽度，就是文字的宽度。<br>​</li></ul><h4 id="块级元素："><a href="#块级元素：" class="headerlink" title="块级元素："></a>块级元素：</h4><p><strong>块级元素独占一行，可以定义宽高</strong>，可以设置margin，padding</p><ul><li>霸占一行，不能与其他任何元素并列；</li><li>能接受宽、高。如果不设置宽度，那么宽度将默认变为父亲的100%。</li></ul><h4 id="行内块元素-inline-block-element"><a href="#行内块元素-inline-block-element" class="headerlink" title="行内块元素(inline-block element)"></a>行内块元素(inline-block element)</h4><p>内联块级元素，也叫行内块元素，它具有内联元素的部分特性之外，还具备了块级元素的部分特性。<br><strong>不独占一行，可以定义宽高</strong><br>行内块元素比较少，它们分别是：img、input、td、select、textarea、label、iframe<br>特点：</p><ul><li>和相邻的内联块级元素在一行上，但是中间会有空白的间隙</li><li>默认的宽度就是本身内容的宽度</li><li>高度，行高，内边距和外边距都可以设置</li></ul><p>​</p><h4 id="行内元素和块级元素的分类："><a href="#行内元素和块级元素的分类：" class="headerlink" title="行内元素和块级元素的分类："></a>行内元素和块级元素的分类：</h4><p>从HTML的角度来讲，标签分为：</p><ul><li>文本级标签：p、span、a、b、i、u、em。</li><li>容器级标签：div、h系列、li、dt、dd。<blockquote><p>为甚么说p是文本级标签呢？因为p里面只能放文字&amp;图片&amp;表单元素，p里面不能放h和ul，p里面也不能放p。</p></blockquote></li></ul><p>现在，从CSS的角度讲，CSS的分类和上面的很像，就p不一样：</p><ul><li> 行内元素：除了p之外，所有的文本级标签，都是行内元素。p是个文本级，但是是个块级元素。 </li><li> 块级元素：所有的容器级标签都是块级元素，还有p标签。 </li></ul><p>我们把上面的分类画一个图，即可一目了然：<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A04.png"><img src="http://img.smyhvae.com/20170729_1545.png#crop=0&crop=0&crop=1&crop=1&id=E6C7q&originHeight=494&originWidth=572&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><h3 id="元素的相互转换"><a href="#元素的相互转换" class="headerlink" title="元素的相互转换"></a>元素的相互转换</h3><h4 id="块级元素可以转换为行内元素："><a href="#块级元素可以转换为行内元素：" class="headerlink" title="块级元素可以转换为行内元素："></a>块级元素可以转换为行内元素：</h4><p>一旦给一个块级元素（比如div）设置：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">display</span>: inline;<br></code></pre></div></td></tr></table></figure><p>那么，这个标签将立即变为行内元素，此时它和一个span无异。inline就是“行内”。也就是说：</p><ul><li>此时这个div不能设置宽度、高度；</li><li>此时这个div可以和别人并排了。</li></ul><p>举例如下：<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A05.png"><img src="http://img.smyhvae.com/20170729_1629.png#crop=0&crop=0&crop=1&crop=1&id=irIv1&originHeight=564&originWidth=662&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><h4 id="行内元素转换为块级元素："><a href="#行内元素转换为块级元素：" class="headerlink" title="行内元素转换为块级元素："></a>行内元素转换为块级元素：</h4><p>同样的道理，一旦给一个行内元素（比如span）设置：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">display</span>: block;<br></code></pre></div></td></tr></table></figure><p>那么，这个标签将立即变为块级元素，此时它和一个div无异。block”是“块”的意思。也就是说：</p><ul><li>此时这个span能够设置宽度、高度</li><li>此时这个span必须霸占一行了，别人无法和他并排</li><li>如果不设置宽度，将撑满父亲</li></ul><p>举例如下：<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A06.png"><img src="http://img.smyhvae.com/20170729_1638.png#crop=0&crop=0&crop=1&crop=1&id=M4GmK&originHeight=381&originWidth=773&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><h4 id="行内和块元素转换行内块元素"><a href="#行内和块元素转换行内块元素" class="headerlink" title="行内和块元素转换行内块元素"></a>行内和块元素转换行内块元素</h4><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">display</span>:inline-block<br></code></pre></div></td></tr></table></figure><p>通过设置CSS样式属性<code>display:inline-block</code>，可将内联元素，或块级元素转换成内联块级元素；<br>但如果是将元素转换成内联元素，则设置<code>display:inline</code>；<br>如果是将元素转换成块级元素，则设置<code>display:block</code>；<br><code>inline-block</code>是css2.1新增的属性，对于IE7以下的版本不支持这个属性，所以需要一些兼容的办法。<br>​</p><h3 id="脱离文档流"><a href="#脱离文档流" class="headerlink" title="脱离文档流"></a>脱离文档流</h3><p>标准流里面的限制非常多，导致很多页面效果无法实现。如果我们现在就要并排、并且就要设置宽高，那该怎么办呢？办法是：移民！<strong>脱离标准流</strong>！<br>css中一共有三种手段，使一个元素脱离标准文档流：</p><ul><li>浮动</li><li>绝对定位</li><li>固定定位</li></ul><p>这便引出我们今天要讲的内容：浮动。</p><h2 id="浮动的性质"><a href="#浮动的性质" class="headerlink" title="浮动的性质"></a>浮动的性质</h2><p>现在有两个div，分别设置宽高。我们知道，它们的效果如下：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A05.png"><img src="http://img.smyhvae.com/20170729_1722.png#crop=0&crop=0&crop=1&crop=1&id=NQD46&originHeight=646&originWidth=917&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>此时，如果给这两个div增加一个浮动属性，比如<code>float: left;</code>，效果如下：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A06.png"><img src="http://img.smyhvae.com/20170729_1723.png#crop=0&crop=0&crop=1&crop=1&id=G85ci&originHeight=646&originWidth=901&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>这就达到了浮动的效果。此时，两个元素并排了，并且两个元素都能够设置宽度、高度了（这在上一段的标准流中，不能实现）。</p><h3 id="性质1：浮动的元素脱标"><a href="#性质1：浮动的元素脱标" class="headerlink" title="性质1：浮动的元素脱标"></a>性质1：浮动的元素脱标</h3><p>标准文档流特点：区分行块。</p><ul><li>块级元素：可以设置宽高，必须独占一行。</li><li>行内元素：不能设置宽高，可以并排一行。</li></ul><p>​</p><p>浮动的元素脱离了标准流的限制，具备行块二象性，浮动的元素可以设置宽高，还可以并排一行，而且不会有空白折叠现象，如果元素不设置宽高，可以被元素内容自动撑开。<br>脱标即脱离标准流。我们来看几个例子。<br>证明1：<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A07.png"><img src="http://img.smyhvae.com/20170729_2028.png#crop=0&crop=0&crop=1&crop=1&id=a2U2A&originHeight=462&originWidth=749&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>上图中，在默认情况下，两个div标签是上下进行排列的。现在由于float属性让上图中的第一个<code>&lt;div&gt;</code>标签出现了浮动，于是这个标签在另外一个层面上进行排列。而第二个<code>&lt;div&gt;</code>还在自己的层面上遵从标准流进行排列。</p><p>证明2：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A08.png"><img src="http://img.smyhvae.com/20180111_2320.png#crop=0&crop=0&crop=1&crop=1&id=SLTkO&originHeight=502&originWidth=1019&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>上图中，span标签在标准流中，是不能设置宽高的（因为是行内元素）。但是，一旦设置为浮动之后，即使不转成块级元素，也能够设置宽高了。</p><p>所以能够证明一件事：<strong>一旦一个元素浮动了，那么，将能够并排了，并且能够设置宽高了。无论它原来是个div还是个span。</strong>所有标签，浮动之后，已经不区分行内、块级了。<br>​</p><h4 id="浮动元素没有margin塌陷"><a href="#浮动元素没有margin塌陷" class="headerlink" title="浮动元素没有margin塌陷"></a>浮动元素没有margin塌陷</h4><p>margin塌陷出现在标准流中，浮动元素以及脱离了标准流，不再具有margin塌陷现象<br>​</p><h4 id="浮动的元素让出标准流位置"><a href="#浮动的元素让出标准流位置" class="headerlink" title="浮动的元素让出标准流位置"></a>浮动的元素让出标准流位置</h4><p>元素浮动之后，脱离了标准流，会将原来占有的标准流位置让给后面的一个同一级元素<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A89.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646469411710-7ba1a360-e7c2-4fca-b6a1-012c76b412a4.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=457&id=u886f8366&margin=%5Bobject%20Object%5D&name=image.png&originHeight=366&originWidth=370&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6399&status=done&style=none&taskId=u05b3f98b-8017-46f2-97cc-1cd37c90647&title=&width=462.49999310821306" alt="image.png"></a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    .ps1 &#123;<br>      <span class="hljs-attr">float</span>: left;<br>      width: 100px;<br>      height: 100px;<br>      background-color: skyblue;<br>    &#125;<br>    .ps2 &#123;<br>      <span class="hljs-attr">width</span>: 200px;<br>      height: 200px;<br>      background-color: yellow;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ps1&quot;</span>&gt;</span>1浮动<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ps2&quot;</span>&gt;</span>2不浮动<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>由于浏览器中有兼容性，不会使用这种属性制作压盖效果，压盖一般用定位<br>如果没有特殊需求，不允许一个父元素中的子元素有的浮动有的不浮动，同级元素中有一个浮动其他的也要浮动。<br>​</p><h3 id="性质2：浮动的元素依次贴边"><a href="#性质2：浮动的元素依次贴边" class="headerlink" title="性质2：浮动的元素依次贴边"></a>性质2：浮动的元素依次贴边</h3><p>我们来看一个例子就明白了。</p><p>我们给三个div均设置了<code>float: left;</code>属性之后，然后设置宽高。当改变浏览器窗口大小时，可以看到div的贴靠效果：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A09.gif"><img src="http://img.smyhvae.com/20170730_1910.gif#crop=0&crop=0&crop=1&crop=1&id=pHkHj&originHeight=1292&originWidth=1180&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>上图显示，3号如果有足够空间，那么就会靠着2号。如果没有足够的空间，那么会靠着1号大哥。<br>如果没有足够的空间靠着1号大哥，3号自己去贴左墙。</p><p>不过3号自己去贴墙的时候，注意：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A010.gif"><img src="http://img.smyhvae.com/20170730_1928.gif#crop=0&crop=0&crop=1&crop=1&id=LK2TE&originHeight=1276&originWidth=1060&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>上图显示，3号贴左墙的时候，并不会往1号里面挤。<br>同样，float还有一个属性值是<code>right</code>，这个和属性值<code>left</code>是对称的。<br>​</p><h4 id="贴边性质常见应用："><a href="#贴边性质常见应用：" class="headerlink" title="贴边性质常见应用："></a>贴边性质常见应用：</h4><ol><li>表格</li><li>导航栏</li><li>电商或者企业网站布局</li></ol><p>​</p><h3 id="性质3：浮动的元素有“字围”效果"><a href="#性质3：浮动的元素有“字围”效果" class="headerlink" title="性质3：浮动的元素有“字围”效果"></a>性质3：浮动的元素有“字围”效果</h3><p>来看一张图就明白了。我们让div浮动，p不浮动。</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A011.png"><img src="http://img.smyhvae.com/20170730_2005.png#crop=0&crop=0&crop=1&crop=1&id=GNAzH&originHeight=696&originWidth=1044&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>上图中，我们发现：<strong>div挡住了p，但不会挡住p中的文字</strong>，形成“字围”效果。</p><p>总结：<strong>标准流中的文字不会被浮动的盒子遮挡住</strong>。（文字就像水一样）</p><p>关于浮动我们要强调一点，浮动这个东西，为避免混乱，我们在初期一定要遵循一个原则：<strong>永远不是一个东西单独浮动，浮动都是一起浮动，要浮动，大家都浮动。</strong></p><h3 id="性质4：收缩"><a href="#性质4：收缩" class="headerlink" title="性质4：收缩"></a>性质4：收缩</h3><p>收缩：一个浮动的元素，如果没有设置width，那么将自动收缩为内容的宽度（这点非常像行内元素）。</p><p>举例如下：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A012.png"><img src="http://img.smyhvae.com/20170801_1720.png#crop=0&crop=0&crop=1&crop=1&id=BOAUn&originHeight=351&originWidth=631&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>上图中，div本身是块级元素，如果不设置width，它会单独霸占整行；但是，设置div浮动后，它会收缩</p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h3 id="浮动的补充（做网站时注意）"><a href="#浮动的补充（做网站时注意）" class="headerlink" title="浮动的补充（做网站时注意）"></a>浮动的补充（做网站时注意）</h3><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A013.png"><img src="http://img.smyhvae.com/20170731_2248.png#crop=0&crop=0&crop=1&crop=1&id=Z7Kj8&originHeight=769&originWidth=913&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>上图所示，将para1和para2设置为浮动，它们是div的儿子。此时para1+para2的宽度小于div的宽度。效果如上图所示。可如果设置para1+para2的宽度大于div的宽度，我们会发现，para2掉下来了：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A014.png"><img src="http://img.smyhvae.com/20170731_2252_2.png#crop=0&crop=0&crop=1&crop=1&id=q3vOB&originHeight=737&originWidth=890&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>布置一个作业，要求实现下面的效果：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A015.png"><img src="http://img.smyhvae.com/20170801_0858.png#crop=0&crop=0&crop=1&crop=1&id=c7qUK&originHeight=600&originWidth=1200&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>为实现上方效果，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="hljs-attr">xml:lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">*&#123;</span><br><span class="css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.header</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">970px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">103px</span>;</span><br><span class="css"><span class="hljs-comment">/*居中。这个语句的意思是：居中：*/</span></span><br><span class="css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.logo</span>&#123;</span><br><span class="css"><span class="hljs-attribute">float</span>: left;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">277px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">103px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.language</span>&#123;</span><br><span class="css"><span class="hljs-attribute">float</span>: right;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">137px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">49px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: green;</span><br><span class="css"><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">8px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.header</span> <span class="hljs-selector-class">.nav</span>&#123;</span><br><span class="css"><span class="hljs-attribute">float</span>: right;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">679px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">46px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.content</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">970px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">435px</span>;</span><br><span class="css"><span class="hljs-comment">/*居中，这个语句今天没讲，你照抄，就是居中：*/</span></span><br><span class="css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.banner</span>&#123;</span><br><span class="css"><span class="hljs-attribute">float</span>: left;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">310px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">435px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: gold;</span><br><span class="css"><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.rightPart</span>&#123;</span><br><span class="css"><span class="hljs-attribute">float</span>: left;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">650px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">435px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.rightPart</span> <span class="hljs-selector-class">.main</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">650px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="css"><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.rightPart</span> <span class="hljs-selector-class">.links</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">650px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: blue;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.rightPart</span> <span class="hljs-selector-class">.main</span> <span class="hljs-selector-class">.news</span>&#123;</span><br><span class="css"><span class="hljs-attribute">float</span>: left;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">450px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.rightPart</span> <span class="hljs-selector-class">.main</span> <span class="hljs-selector-class">.hotpic</span>&#123;</span><br><span class="css"><span class="hljs-attribute">float</span>: left;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">190px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css"><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.rightPart</span> <span class="hljs-selector-class">.main</span> <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.news1</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">450px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">240px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css"><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.rightPart</span> <span class="hljs-selector-class">.main</span> <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.news2</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">450px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">110px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css"><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.rightPart</span> <span class="hljs-selector-class">.main</span> <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.news3</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">450px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.footer</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">970px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css"><span class="hljs-comment">/*没学，就是居中：*/</span></span><br><span class="css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 头部 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span>logo<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;language&quot;</span>&gt;</span>语言选择<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span>导航条<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 主要内容 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;banner&quot;</span>&gt;</span>大广告<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rightPart&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hotpic&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;links&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 页尾 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="浮动的问题"><a href="#浮动的问题" class="headerlink" title="浮动的问题"></a>浮动的问题</h2><h3 id="浮动的子元素是不会撑高父元素"><a href="#浮动的子元素是不会撑高父元素" class="headerlink" title="浮动的子元素是不会撑高父元素"></a>浮动的子元素是不会撑高父元素</h3><p>标准流中的元素，不设置高度的情况下，都能被内部的标准流元素自动撑高。<br>如果内部的子元素进行了浮动，浮动的子元素是撑不高标准流父亲的。<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A810.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646470183019-f22db31d-fea2-4b23-a371-8f1d4db654d1.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=246&id=u34c03634&name=image.png&originHeight=197&originWidth=1326&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1697&status=done&style=none&taskId=uc3978a1a-968d-43d9-b97f-dc9967586ad&title=&width=1657.4999753013258" alt="image.png"></a></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span> &#123;<br>      <span class="hljs-attribute">float</span>: left;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">background-color</span>: skyblue;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="父元素无高度，浮动元素可能会影响后面的浮动贴边"><a href="#父元素无高度，浮动元素可能会影响后面的浮动贴边" class="headerlink" title="父元素无高度，浮动元素可能会影响后面的浮动贴边"></a>父元素无高度，浮动元素可能会影响后面的浮动贴边</h3><p>父元素没有高度，会影响后面元素的标准流位置，如果浮动的子元素足够高时，有可能影响到后面浮动元素的贴边<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A811.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646470601552-4fbe92f9-9e2f-4a89-9263-98f5f6753922.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=294&id=u093ede69&name=image.png&originHeight=235&originWidth=1292&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1931&status=done&style=none&taskId=u5493f7bb-deb1-40f7-8f87-7b3b860192b&title=&width=1614.9999759346251" alt="image.png"></a></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span> &#123;<br>      <span class="hljs-attribute">float</span>: left;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">background-color</span>: skyblue;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></div></td></tr></table></figure><h2 id="浮动的清除"><a href="#浮动的清除" class="headerlink" title="浮动的清除"></a>浮动的清除</h2><p>这里所说的清除浮动，指的是清除浮动与浮动之间的影响。</p><h3 id="方法1：给浮动元素的祖先元素加高度"><a href="#方法1：给浮动元素的祖先元素加高度" class="headerlink" title="方法1：给浮动元素的祖先元素加高度"></a>方法1：给浮动元素的祖先元素加高度</h3><p>li的<strong>父亲div没有设置高度</strong>，导致这两个div的高度均为0px（我们可以通过网页的审查元素进行查看）。div的高度为零，导致不能给自己浮动的孩子，撑起一个容器。</p><p>撑不起一个容器，导致自己的孩子没办法在自己的内部进行正确的浮动。</p><p>好，现在就算给这个div设置高度，可如果div自己的高度小于孩子的高度，也会出现不正常的现象：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A016.png"><img src="http://img.smyhvae.com/20170801_2152.png#crop=0&crop=0&crop=1&crop=1&id=eFbPT&originHeight=877&originWidth=996&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>给div设置一个正确的合适的高度（至少保证高度大于儿子的高度），就可以看到正确的现象：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A017.png"><img src="http://img.smyhvae.com/20170801_2153.png#crop=0&crop=0&crop=1&crop=1&id=P1wkz&originHeight=902&originWidth=664&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>给标准流的父元素强制给一个合适的高度<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A812.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646470791952-caadea17-f8cd-4fec-bbf0-ccef0cba6b23.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=396&id=u7e9b1bd9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=317&originWidth=1280&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2515&status=done&style=none&taskId=u7e48ba07-978b-4814-9014-a0a2750ae85&title=&width=1599.9999761581425" alt="image.png"></a></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span> &#123;<br>      <span class="hljs-attribute">float</span>: left;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">background-color</span>: skyblue;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><p>解决：父元素有了高度，前面的浮动不能影响后面元素的标准流位置和贴边。<br>问题：父元素高度不是自适应，一旦子元素高度变化，问题可能再次出现。</p><p><strong>总结：</strong><br><strong>如果一个元素要浮动，那么它的祖先元素一定要有高度。</strong><br><strong>有高度的盒子，才能关住浮动</strong>。（记住这句过来人的经验之语）</p><h3 id="方法2：父元素使用clear-both"><a href="#方法2：父元素使用clear-both" class="headerlink" title="方法2：父元素使用clear:both;"></a>方法2：父元素使用clear:both;</h3><p>网页制作中，高度height其实很少出现。为什么？因为能被内容撑高！也就是说，刚刚我们讲解的方法1，工作中用得很少。</p><p>那么，能不能不写height，也把浮动清除了呢？也让浮动之间，互不影响呢？</p><p>这个时候，我们可以使用<code>clear:both;</code>这个属性。如下：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A018.png"><img src="http://img.smyhvae.com/20170801_2233.png#crop=0&crop=0&crop=1&crop=1&id=kYIcB&originHeight=742&originWidth=872&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">clear</span>:both;<br></code></pre></div></td></tr></table></figure><p>clear就是清除，both指的是左浮动、右浮动都要清除。<code>clear:both</code>的意思就是：<strong>不允许左侧和右侧有浮动对象。</strong></p><p>这种方法有一个非常大的、致命的问题，<strong>它所在的标签，margin属性失效了</strong>。</p><p>margin失效的本质原因是：上图中的box1和box2，高度为零。</p><h3 id="方法3：隔墙法"><a href="#方法3：隔墙法" class="headerlink" title="方法3：隔墙法"></a>方法3：隔墙法</h3><p>上面这个例子中，为了防止第二个div贴靠到第二个div，我们可以在这两个div中间用一个新的div隔开，然后给这个新的div设置<code>clear: both;</code>属性；同时，既然这个新的div无法设置margin属性，我们可以给它设置height，以达到margin的效果（曲线救国）。这便是隔墙法。<br>隔墙法有<strong>外墙法</strong>和<strong>内墙法</strong></p><h4 id="外墙法："><a href="#外墙法：" class="headerlink" title="外墙法："></a>外墙法：</h4><p>在两个大的父盒子之间添加一个空的div标签，标签上带有<code>clear:both</code>属性<br>解决：浮动影响后面元素标准流位置和贴边，模拟父元素间的距离。<br>问题：父元素没有高度自适应。<a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E5%A4%96%E5%A2%99%E6%B3%95.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646471586065-77145a81-142f-4e45-bbb5-5339a70eb77e.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=0.8277&from=paste&height=486&id=uf716bafd&name=image.png&originHeight=389&originWidth=1282&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3128&status=done&style=none&taskId=ufa0f93b8-d7a1-4651-a118-27c36f4d87e&title=&width=1602" alt="image.png"></a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    .box &#123;<br>      <span class="hljs-attr">width</span>: 1000px;<br>      border: 10px solid red;<br>    &#125;<br>    .box p &#123;<br>      <span class="hljs-attr">float</span>: left;<br>      width: 100px;<br>      height: 100px;<br>      margin-right: 10px;<br>      background-color: skyblue;<br>    &#125;<br>    .cl &#123;<br>      <span class="hljs-attr">clear</span>: both;<br>      height: 10px;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="内墙法：-推荐使用"><a href="#内墙法：-推荐使用" class="headerlink" title="内墙法：(推荐使用)"></a>内墙法：(推荐使用)</h4><p>在元素内部，所有的浮动子元素后面添加一个空的div元素，标签高度为0，添加clear属性<br>解决：父元素高度自适应，浮动影响后面的元素位置和贴边。<br>缺点：浮动是 css 样式属性带来的问题，内墙法使用 HTML 结构去辅助解决问题，如果页面中浮动元素很多，需要添加多个没有语义的空标签，造成HTML结构的冗余<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E5%86%85%E5%A2%99%E6%B3%95.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646482962760-c6c8804d-9a33-4603-92b5-5a6a7aa2a3c2.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=401&id=ua5510d83&margin=%5Bobject%20Object%5D&name=image.png&originHeight=321&originWidth=1285&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2568&status=done&style=none&taskId=ue15dbd0f-719d-457e-a842-7d6b5d02780&title=&width=1606.2499760650103" alt="image.png"></a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    .box &#123;<br>      <span class="hljs-attr">width</span>: 1000px;<br>      border: 10px solid red;<br>      margin-bottom: 10px;<br>    &#125;<br>    .box p &#123;<br>      <span class="hljs-attr">float</span>: left;<br>      width: 100px;<br>      height: 100px;<br>      margin-right: 10px;<br>      background-color: skyblue;<br>    &#125;<br>    .cl &#123;<br>      <span class="hljs-attr">clear</span>: both;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="方法4：伪类-after-推荐使用"><a href="#方法4：伪类-after-推荐使用" class="headerlink" title="方法4：伪类 :after (推荐使用)"></a>方法4：伪类 <code>:after</code> (推荐使用)</h3><p>本质是使用伪类方法利用css代码书写一堵内墙。<br>伪类选择器：通过选中的标签添加伪类，去选中标签的某个状态或位置。<br><code>:after</code>：<strong>这个伪类表示选中的是某个标签内部的最后的位置</strong>。<br>书写方法：前面必须加普通的选择器，后面连续书写伪类名称。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span>:after &#123;<br>  content: <span class="hljs-string">&#x27;1&#x27;</span>; <span class="hljs-comment">/*添加一个文字内容*/</span><br>  <span class="hljs-attribute">display</span>: block; <span class="hljs-comment">/*将文字转换为块级元素*/</span><br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">/* 将盒子高度固定为0，避免影响父盒子高度 */</span><br>  <span class="hljs-attribute">clear</span>: both; <span class="hljs-comment">/* 清除前面浮动影响 */</span><br>  <span class="hljs-attribute">visibility</span>: hidden; <span class="hljs-comment">/*将创建的元素占位并隐藏 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>将伪类添加给一个选中父盒子的选择器后面，一般给需要清除浮动的父盒子设置一个clearfix的类名。<br>解决：父元素高度自适应，浮动影响后面元素位置和贴边<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E5%86%85%E5%A2%99%E6%B3%95.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646482962760-c6c8804d-9a33-4603-92b5-5a6a7aa2a3c2.png#crop=0&crop=0&crop=1&crop=1&from=url&id=Jej8A&margin=%5Bobject%20Object%5D&originHeight=321&originWidth=1285&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  * &#123;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;</span><br><span class="css">    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.clearfix</span>:after &#123;</span><br><span class="css">    content: <span class="hljs-string">&#x27;1&#x27;</span>; <span class="hljs-comment">/*添加一个文字内容*/</span></span><br><span class="css">    <span class="hljs-attribute">display</span>: block; <span class="hljs-comment">/*将文字转换为块级元素*/</span></span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">/* 将盒子高度固定为0，避免影响父盒子高度 */</span></span><br><span class="css">    <span class="hljs-attribute">clear</span>: both; <span class="hljs-comment">/* 清除前面浮动影响 */</span></span><br><span class="css">    <span class="hljs-attribute">visibility</span>: hidden; <span class="hljs-comment">/*将创建的元素占位并隐藏 */</span></span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box clearfix&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box clearfix&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="方法5：溢出隐藏-overflow-hidden-推荐使用"><a href="#方法5：溢出隐藏-overflow-hidden-推荐使用" class="headerlink" title="方法5：溢出隐藏 overflow:hidden;(推荐使用)"></a>方法5：溢出隐藏 <code>overflow:hidden;</code>(推荐使用)</h3><p>给内部有浮动子元素的父元素添加溢出隐藏 <code>overflow:hidden</code> 属性，可以解决浮动所有问题<br>元素没有高度时，如果同时设置了<code>overflow:hidden</code>，元素会自适应内容的高度</p><p>我们可以使用如下属性：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>:hidden;<br></code></pre></div></td></tr></table></figure><p>overflow即“溢出”， hidden即“隐藏”。这个属性的意思是“溢出隐藏”。顾名思义：所有溢出边框的内容，都要隐藏掉。如下：</p><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A020.png"><img src="http://img.smyhvae.com/20170804_1449.png#crop=0&crop=0&crop=1&crop=1&id=K8knB&originHeight=432&originWidth=1050&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><p>上图显示，<code>overflow:hidden;</code>的本意是清除溢出到盒子外面的文字。但是，前端开发工程师发现了，它能做偏方。如下：<br>一个父亲不能被自己浮动的儿子，撑出高度。但是，只要给父亲加上<code>overflow:hidden</code>; 那么，父亲就能被儿子撑出高了。这是一个偏方。</p><p>举个例子1：<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E6%96%87%E7%AB%A019.png"><img src="http://img.smyhvae.com/20170804_1920.png#crop=0&crop=0&crop=1&crop=1&id=YbI5q&originHeight=364&originWidth=831&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a><br>举个例子2：<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E5%86%85%E5%A2%99%E6%B3%95.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646482962760-c6c8804d-9a33-4603-92b5-5a6a7aa2a3c2.png#crop=0&crop=0&crop=1&crop=1&from=url&id=V17XA&margin=%5Bobject%20Object%5D&originHeight=321&originWidth=1285&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  * &#123;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;</span><br><span class="css">    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">    <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>高度自适应原因：<br>一个元素没有设置高度，同时设置了溢出隐藏，浏览器在加载盒子尺寸时，遇到溢出隐藏浏览器会强制性去检索内部的子元素的高度，不论子元素是标准流还是浮动，都会将最高的高度作为父盒子高度加载。<br>浮动影响后面的元素:<br>父元素有了高度后，可以管理住内部所有的浮动元素，不会延伸到后面标签中影响贴边。</p><h2 id="浮动清除的总结"><a href="#浮动清除的总结" class="headerlink" title="浮动清除的总结"></a>浮动清除的总结</h2><p>浮动的元素，只能被有高度的盒子关住。 也就是说，如果盒子内部有浮动，这个盒子有高，那么妥妥的，浮动不会互相影响。</p><h3 id="1、加高法"><a href="#1、加高法" class="headerlink" title="1、加高法"></a>1、加高法</h3><p>工作上，我们绝对不会给所有的盒子加高度，这是因为麻烦，并且不能适应页面的快速变化。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>     //设置height<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    //设置height<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2、clear-both-法"><a href="#2、clear-both-法" class="headerlink" title="2、clear:both;法"></a>2、<code>clear:both;</code>法</h3><p>最简单的清除浮动的方法，就是给盒子增加<code>clear:both;</code>表示自己的内部元素，不受其他盒子的影响。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>   //clear:both;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>浮动确实被清除了，不会互相影响了。但是有一个问题，就是margin失效。两个div之间，没有任何的间隙了。</p><h3 id="3、隔墙法"><a href="#3、隔墙法" class="headerlink" title="3、隔墙法"></a>3、隔墙法</h3><h4 id="外墙法：-1"><a href="#外墙法：-1" class="headerlink" title="外墙法："></a>外墙法：</h4><p>在两部分浮动元素中间，建一个墙。隔开两部分浮动，让后面的浮动元素，不去追前面的浮动元素。<br>墙用自己的身体当做了间隙。<br>优点：浮动影响后面元素标准流位置和贴边，模拟父元素间的距离。<br>缺点：父元素没有高度自适应。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cl h10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="内墙法："><a href="#内墙法：" class="headerlink" title="内墙法："></a>内墙法：</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>内墙法的优点就是，父元素高度自适应，浮动影响后面的元素位置和贴边。。这样，这个div的背景、边框就能够根据p的高度来撑开了。<br>缺点：浮动是 css 样式属性带来的问题，内墙法使用 HTML 结构去辅助解决问题，如果页面中浮动元素很多，需要添加多个没有语义的空标签，造成HTML结构的冗余</p><h3 id="4、伪类-after"><a href="#4、伪类-after" class="headerlink" title="4、伪类 :after"></a>4、伪类 <code>:after</code></h3><p>本质是使用伪类方法利用css代码书写一堵内墙。<br><code>:after</code>：<strong>这个伪类表示选中的是某个标签内部的最后的位置</strong>。<br>将伪类添加给一个选中父盒子的选择器后面，一般给需要清除浮动的父盒子设置一个clearfix的类名。<br>在<code>.clearfix:after</code>内添加内容转成块元素，高度为零， 使用<code>clear: both;</code>清除浮动，最后将创建的元素占位并隐藏<br>解决：父元素高度自适应，浮动影响后面元素位置和贴边</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span>:after &#123;<br>  content: <span class="hljs-string">&#x27;1&#x27;</span>; <span class="hljs-comment">/*添加一个文字内容*/</span><br>  <span class="hljs-attribute">display</span>: block; <span class="hljs-comment">/*将文字转换为块级元素*/</span><br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">/* 将盒子高度固定为0，避免影响父盒子高度 */</span><br>  <span class="hljs-attribute">clear</span>: both; <span class="hljs-comment">/* 清除前面浮动影响 */</span><br>  <span class="hljs-attribute">visibility</span>: hidden; <span class="hljs-comment">/*将创建的元素占位并隐藏 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5、overflow-hidden"><a href="#5、overflow-hidden" class="headerlink" title="5、overflow:hidden;"></a>5、<code>overflow:hidden;</code></h3><p>这个属性的本意，就是将所有溢出盒子的内容，隐藏掉。但是，我们发现这个东西能够用于浮动的清除。<br>我们知道，一个父亲，不能被自己浮动的儿子撑出高度，但是，如果这个父亲加上了<code>overflow:hidden;</code>那么这个父亲就能够被浮动的儿子撑出高度了。并且,<code>overflow:hidden;</code>能够让margin生效。</p><p>父元素添加溢出隐藏 <code>overflow:hidden</code> 属性，可以解决浮动所有问题<br>元素没有高度时，如果同时设置了<code>overflow:hidden</code>，元素会自适应内容的高度</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
      <tag>浮动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML5</title>
    <link href="/2022/03/07/HTML5/"/>
    <url>/2022/03/07/HTML5/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><p>HTML5并不仅仅只是做为HTML标记语言的一个最新版本，更重要的是它<strong>制定了Web应用开发的一系列标准</strong>，成为第一个将Web做为应用开发平台的HTML语言。<br>​</p><p>HTML5定义了一系列新元素，如新语义标签、智能表单、多媒体标签等，可以帮助开发者创建富互联网应用，还提供了一些Javascript API，如地理定位、重力感应、硬件访问等，可以在浏览器内实现类原生应用。我们甚至可以结合 Canvas 开发网页版游戏。<br>​</p><p><strong>HTML5的广义概念</strong>：HTML5代表浏览器端技术的一个发展阶段。在这个阶段，浏览器的呈现技术得到了飞跃发展和广泛支持，它包括：HTML5、CSS3、Javascript API在内的一套技术组合。<br>​</p><p>HTML5不等于 HTML next version。HTML5 包含： HTML的升级版、CSS的升级版、JavaScript API的升级版。<br><strong>总结</strong>：HTML5是新一代开发 <strong>Web 富客户端</strong>应用程序整体<strong>解决方案</strong>。包括：HTML5，CSS3，Javascript API在内的一套<strong>技术组合</strong>。<br>​</p><p><strong>富客户端</strong>：具有很强的<strong>交互性</strong>和体验的客户端程序。比如说，浏览博客，是比较简单的客户端；一个在线听歌的网站、即时聊天网站就是富客户端。<br><strong>PS：</strong><br>单纯地从技术的角度讲，兼容性问题只会让开发者徒增烦恼。<br>如果网页端的程序能做到PC客户端的体验，就会对后者构成威胁。</p><h2 id="HTML5-的应用场景"><a href="#HTML5-的应用场景" class="headerlink" title="HTML5 的应用场景"></a>HTML5 的应用场景</h2><p>列举几个HTML5 的应用场景：<br>（1）极具表现力的网页：内容简约而不简单。<br>（2）网页应用程序：</p><ul><li>代替PC端的软件：iCloud、百度脑图、Office 365等。</li><li>APP端的网页：淘宝、京东、美团等。</li><li>微信端：公众号、小程序等。</li></ul><p>（3）混合式本地应用。<br>（4）简单的游戏。</p><h2 id="HTML5-新增的内容"><a href="#HTML5-新增的内容" class="headerlink" title="HTML5 新增的内容"></a>HTML5 新增的内容</h2><p><a href="http://imgs.jackhoo.icu/HTML5%E6%96%B0%E5%A2%9E%E5%86%85%E5%AE%B9html.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1627004885043-ec7f16e8-3641-43bd-882d-16b61e5f90b4.png#clientId=u7e9da630-6787-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=u4d6190d7&margin=%5Bobject%20Object%5D&name=687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313534302e706e67.png&originHeight=482&originWidth=670&originalType=binary&ratio=1&rotation=0&showTitle=false&size=90012&status=done&style=none&taskId=u3e1f6192-9da9-4d32-8423-ab113d0e874&title=" alt="687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313534302e706e67.png"></a><br><a href="http://imgs.jackhoo.icu/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313534352e706e67.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1627005869408-d9daf77a-5b44-4e1b-a0b0-d6ea0e658173.png#clientId=uad0e7fea-9f85-4&crop=0&crop=0&crop=1&crop=1&from=ui&height=379&id=ub3b6bf99&margin=%5Bobject%20Object%5D&name=687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313534352e706e67.png&originHeight=325&originWidth=621&originalType=binary&ratio=1&rotation=0&showTitle=false&size=61702&status=done&style=none&taskId=u9a87dfe7-a8f0-4adf-9f23-92da1ee30b0&title=&width=725" alt="687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313534352e706e67.png"></a><a href="http://imgs.jackhoo.icu/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313534312e706e67.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1627005879421-485a528d-54ea-4f89-b653-338fab154a31.png#clientId=uad0e7fea-9f85-4&crop=0&crop=0&crop=1&crop=1&from=ui&height=484&id=u707d25e4&margin=%5Bobject%20Object%5D&name=687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313534312e706e67.png&originHeight=484&originWidth=774&originalType=binary&ratio=1&rotation=0&showTitle=false&size=131813&status=done&style=none&taskId=ubf68b90b-e167-44ce-a4cf-63f79683209&title=&width=774" alt="687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313534312e706e67.png"></a></p><h2 id="HTML5的优势和劣势"><a href="#HTML5的优势和劣势" class="headerlink" title="HTML5的优势和劣势"></a>HTML5的优势和劣势</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li><p>提高可用性和改进用户的友好体验</p></li><li><p>更好的语义化标签</p></li><li><p>可以给站点带来更多的多媒体元素(视频和音频)</p></li><li><p>可以很好的替代FLASH和Silverlight</p></li><li><p>当涉及到网站的抓取和索引的时候，对于SEO很友好;</p></li><li><p>将被大量应用于移动应用程序和游戏</p></li><li><p>可移植性好</p><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3></li><li><p>该标准并未能很好的被PC端浏览器所支持</p></li><li><p>IE9以下的浏览器几乎都不兼容</p><h2 id="语义化的标签"><a href="#语义化的标签" class="headerlink" title="语义化的标签"></a>语义化的标签</h2><h3 id="语义化的作用"><a href="#语义化的作用" class="headerlink" title="语义化的作用"></a>语义化的作用</h3><p>语义标签对于我们并不陌生，如<code>&lt;p&gt;</code>表示一个段落、<code>&lt;ul&gt;</code>表示一个无序列表。</p></li></ol><p><strong>标签语义化的作用：</strong></p><ul><li>能够便于开发者阅读和写出更优雅的代码。</li><li>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容。</li><li>更好地搜索引擎优化。</li></ul><p>总结：HTML的职责是描述一块内容是什么（或其意义），而不是它长什么样子；它的外观应该由CSS来决定。</p><h3 id="H5在语义上的改进"><a href="#H5在语义上的改进" class="headerlink" title="H5在语义上的改进"></a>H5在语义上的改进</h3><p>在此基础上，HTML5 增加了大量有意义的语义标签，更有利于搜索引擎或辅助设备理解 HTML 页面内容。HTML5会让HTML代码的内容更结构化、标签更语义化。<br>传统的做法中，我们通过增加类名如class=”header”、class=”footer”，使HTML页面具有语义性，但是不具有通用性。<br>HTML5 则是通过新增语义标签的形式来解决这个问题，例如<code>&lt;header&gt;&lt;/header&gt;</code>、<code>&lt;footer&gt;&lt;/footer&gt;</code>等，这样就可以使其具有通用性。<br><strong>传统网页布局：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!-- 头部 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>&lt;!-- 主体部分 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 文章 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 侧边栏 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aside&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>&lt;!-- 底部 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br></code></pre></div></td></tr></table></figure><p><strong>H5 的经典网页布局：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;header&gt;头部&lt;/header&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>导航<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span>侧边栏<span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span>主题内容<span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>底部<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p><a href="http://imgs.jackhoo.icu/%E6%96%B0%E5%A2%9E%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646576024191-e9dcf0f3-15d6-456d-b7e0-c2f4c4509d0b.png#clientId=u3d3a78c5-74e9-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=831&id=u221c8269&margin=%5Bobject%20Object%5D&name=image.png&originHeight=665&originWidth=1025&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8553&status=done&style=none&taskId=ua5d4e6eb-a67b-43fb-a779-1235de9d222&title=&width=1281.2499809078874" alt="image.png"></a></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-tag">header</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>      <span class="hljs-attribute">background-color</span>: yellowgreen;<br>    &#125;<br>    <span class="hljs-selector-tag">nav</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;<br>      <span class="hljs-attribute">background-color</span>: yellowgreen;<br>    &#125;<br>    <span class="hljs-selector-tag">main</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">background-color</span>: yellowgreen;<br>    &#125;<br>    <span class="hljs-selector-tag">main</span> <span class="hljs-selector-tag">aside</span> &#123;<br>      <span class="hljs-attribute">float</span>: left;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">background-color</span>: pink;<br>    &#125;<br>    <span class="hljs-selector-tag">main</span> <span class="hljs-selector-tag">article</span> &#123;<br>      <span class="hljs-attribute">float</span>: left;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">840px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>      <span class="hljs-attribute">background-color</span>: pink;<br>    &#125;<br>    <span class="hljs-selector-tag">footer</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">background-color</span>: yellowgreen;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">header</span>&gt;头部&lt;/<span class="hljs-selector-tag">header</span>&gt;<br>  &lt;<span class="hljs-selector-tag">nav</span>&gt;导航&lt;/<span class="hljs-selector-tag">nav</span>&gt;<br>  &lt;<span class="hljs-selector-tag">main</span>&gt;<br>    &lt;<span class="hljs-selector-tag">aside</span>&gt;侧边栏&lt;/<span class="hljs-selector-tag">aside</span>&gt;<br>    &lt;<span class="hljs-selector-tag">article</span>&gt;主题内容&lt;/<span class="hljs-selector-tag">article</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">main</span>&gt;<br>  &lt;<span class="hljs-selector-tag">footer</span>&gt;底部&lt;/<span class="hljs-selector-tag">footer</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h2 id="H5中新增的语义标签"><a href="#H5中新增的语义标签" class="headerlink" title="H5中新增的语义标签"></a>H5中新增的语义标签</h2><ul><li><code>&lt;section&gt;</code> 表示区块</li><li><code>&lt;article&gt;</code> 表示文章。如文章、评论、帖子、博客</li><li><code>&lt;header&gt;</code> 表示页眉</li><li><code>&lt;footer&gt; </code>表示页脚</li><li><code>&lt;nav&gt;</code> 表示导航</li><li><code>&lt;aside&gt; </code>表示侧边栏。如文章的侧栏</li><li><code>&lt;figure&gt;</code> 表示媒介内容分组。</li><li><code>&lt;mark&gt;</code> 表示标记 (用得少)</li><li><code>&lt;progress&gt;</code> 表示进度 (用得少)</li><li><code>&lt;time&gt;</code> 表示日期</li></ul><p>本质上新语义标签与<code>&lt;div&gt;</code>、<code>&lt;span&gt;</code>没有区别，只是其具有表意性，使用时除了在HTML结构上需要注意外，其它和普通标签的使用无任何差别，可以理解成<code>&lt;div class=&quot;nav&quot;&gt;</code> 相当于<code>&lt;nav&gt;</code>。</p><blockquote><p>单标签不用写关闭符号。</p></blockquote><h3 id="新语义标签的兼容性处理"><a href="#新语义标签的兼容性处理" class="headerlink" title="新语义标签的兼容性处理"></a>新语义标签的兼容性处理</h3><p>IE8 及以下版本的浏览器不支持 H5 和 CSS3。解决办法：引入html5shiv.js文件。<br>引入时，需要做if判断，具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!--  条件注释 只有ie能够识别--&gt;<br><br>&lt;!--[<span class="hljs-keyword">if</span> lte ie <span class="hljs-number">8</span>]&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;html5shiv.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;![endif]--&gt;<br><br></code></pre></div></td></tr></table></figure><p>上方代码是<strong>条件注释</strong>：虽然是注释，但是IE浏览器可以识别出来。解释一下：</p><ul><li>l：less 更小</li><li>t：than 比</li><li>e：equal等于</li><li>g：great 更大<blockquote><p>我们在测试 IE 浏览器的兼容的时候，可以使用软件 ietest，模拟IE6-IE11。</p></blockquote></li></ul><p>​</p><p>在不支持HTML5新标签的浏览器，会将这些新的标签解析成行内元素(inline)对待，所以我们只需要将其转换成块元素(block)即可使用。<br>​</p><p>但是在IE9版本以下，并不能正常解析这些新标签，但是可以识别通过document.createElement(‘tagName’)创建的自定义标签。于是我们的解决方案就是：将HTML5的新标签全部通过document.createElement(‘tagName’)来创建一遍，这样IE低版本也能正常解析HTML5新标签了。<br>​</p><p>当然，在实际开发中我们更多采用的办法是：检测IE浏览器的版本，来加载第三方的JS库来解决兼容问题（如上方代码所示）。<br>​</p><h2 id="H5中的表单"><a href="#H5中的表单" class="headerlink" title="H5中的表单"></a>H5中的表单</h2><p>传统的Web表单已经越来越不能满足开发的需求，HTML5 在 Web 表单方向做了很大的改进，如拾色器、日期/时间组件等，使表单处理更加高效。</p><h3 id="H5中新增的表单类型"><a href="#H5中新增的表单类型" class="headerlink" title="H5中新增的表单类型"></a>H5中新增的表单类型</h3><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>type=”email”</td><td>限制用户输入必须为Email类型</td></tr><tr><td>type=”url”</td><td>限制用户输入必须为URL类型</td></tr><tr><td>type=”date”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type=”time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type=”month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type=”week”</td><td>限制用户输入必须为周类型</td></tr><tr><td>type=”number”</td><td>限制用户输入必须为数字类型</td></tr><tr><td>type = “range”</td><td>滑动条</td></tr><tr><td>type =”tel”</td><td>手机号码</td></tr><tr><td>type = “search”</td><td>搜索框</td></tr><tr><td>type=”color”</td><td>生成一个颜色选择表单</td></tr></tbody></table><p>上面的部分类型是针对移动设备生效的，且具有一定的兼容性，在实际应用当中可选择性的使用。<br>代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=no&quot;&gt;<br>    &lt;title&gt;表单类型&lt;/title&gt;<br>    &lt;style&gt;<br>        body &#123;<br>            margin: 0;<br>            padding: 0;<br>            background-color: #F7F7F7;<br>        &#125;<br><br>        form &#123;<br>            max-width: 500px;<br>            width: 100%;<br>            margin: 32px auto 0;<br>            font-size: 16px;<br>        &#125;<br><br>        label &#123;<br>            display: block;<br>            margin: 10px 0;<br>        &#125;<br><br>        input &#123;<br>            width: 100%;<br>            height: 25px;<br>            margin-top: 2px;<br>            display: block;<br>        &#125;<br><br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=&quot;&quot;&gt;<br>    &lt;fieldset&gt;<br>        &lt;legend&gt;表单类型&lt;/legend&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            email: &lt;input type=&quot;email&quot; name=&quot;email&quot; required&gt;<br>        &lt;/label&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            color: &lt;input type=&quot;color&quot; name=&quot;color&quot;&gt;<br>        &lt;/label&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            url: &lt;input type=&quot;url&quot; name=&#x27;url&#x27;&gt;<br>        &lt;/label&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            number: &lt;input type=&quot;number&quot; step=&quot;3&quot; name=&quot;number&quot;&gt;<br>        &lt;/label&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            range: &lt;input type=&quot;range&quot; name=&quot;range&quot; value=&quot;100&quot;&gt;<br>        &lt;/label&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            search: &lt;input type=&quot;search&quot; name=&quot;search&quot;&gt;<br>        &lt;/label&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            tel: &lt;input type=&quot;tel&quot; name=&quot;tel&quot;&gt;<br>        &lt;/label&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            time: &lt;input type=&quot;time&quot; name=&quot;time&quot;&gt;<br>        &lt;/label&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            date: &lt;input type=&quot;date&quot; name=&quot;date&quot;&gt;<br>        &lt;/label&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            datetime: &lt;input type=&quot;datetime&quot;&gt;<br>        &lt;/label&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            week: &lt;input type=&quot;week&quot; name=&quot;month&quot;&gt;<br>        &lt;/label&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            month: &lt;input type=&quot;month&quot; name=&quot;month&quot;&gt;<br>        &lt;/label&gt;<br>        &lt;label for=&quot;&quot;&gt;<br>            datetime-local: &lt;input type=&quot;datetime-local&quot; name=&quot;datetime-local&quot;&gt;<br>        &lt;/label&gt;<br>        &lt;input type=&quot;submit&quot;&gt;<br>    &lt;/fieldset&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><p>代码解释：<br><code>&lt;fieldset&gt; </code>标签将表单里的内容进行打包，代表一组；而<code>&lt;legend&gt;</code> 标签的则是 fieldset 里的元素定义标题。</p><h3 id="表单元素（标签）"><a href="#表单元素（标签）" class="headerlink" title="表单元素（标签）"></a>表单元素（标签）</h3><h4 id="​-lt-datalist-gt-数据列表："><a href="#​-lt-datalist-gt-数据列表：" class="headerlink" title="​&lt;datalist&gt; 数据列表："></a>​<code>&lt;datalist&gt;</code> 数据列表：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> list=<span class="hljs-string">&quot;myData&quot;</span> /&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myData&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;本科&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;研究生&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;不明&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>上方代码中，input里的list属性和 datalist 进行了绑定。<br>效果：<br><a href="http://imgs.jackhoo.icu/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313834352e676966.gif"><img src="https://cdn.nlark.com/yuque/0/2021/gif/2625525/1627005662409-42224173-3b93-4d30-8ea3-b4d6cba870eb.gif#clientId=uad0e7fea-9f85-4&crop=0&crop=0&crop=1&crop=1&from=ui&height=358&id=uc73ae1b4&margin=%5Bobject%20Object%5D&name=687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313834352e676966.gif&originHeight=246&originWidth=417&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40569&status=done&style=none&taskId=ufa218caa-5028-4f49-a78b-9296c3fc243&title=&width=607" alt="687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313834352e676966.gif"></a><br>上图可以看出，数据列表可以自动提示。</p><h4 id="​-lt-keygen-gt-元素："><a href="#​-lt-keygen-gt-元素：" class="headerlink" title="​&lt;keygen&gt;元素："></a>​<code>&lt;keygen&gt;</code>元素：</h4><p>keygen 元素的作用是提供一种验证用户的可靠方法。<br>keygen 元素是密钥对生成器（key-pair generator）。当提交表单时，会生成两个键：一个公钥，一个私钥。<br>私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可用于之后验证用户的客户端证书（client certificate）。</p><h4 id="lt-meter-gt-元素：度量器"><a href="#lt-meter-gt-元素：度量器" class="headerlink" title="&lt;meter&gt;元素：度量器"></a><code>&lt;meter&gt;</code>元素：度量器</h4><ul><li>low：低于该值后警告</li><li>high：高于该值后警告</li><li>value：当前值</li><li>max：最大值</li><li>min：最小值。</li></ul><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;meter  value=<span class="hljs-string">&quot;81&quot;</span>    min=<span class="hljs-string">&quot;0&quot;</span> max=<span class="hljs-string">&quot;100&quot;</span>  low=<span class="hljs-string">&quot;60&quot;</span>  high=<span class="hljs-string">&quot;80&quot;</span>/&gt;<br></code></pre></div></td></tr></table></figure><h3 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h3><ul><li>placeholder 占位符（提示文字）</li><li>autofocus 自动获取焦点</li><li>multiple 文件上传多选或多个邮箱地址</li><li>autocomplete 自动完成（填充的）。on 开启（默认），off 取消。用于表单元素，也可用于表单自身(on/off)</li><li>form 指定表单项属于哪个form，处理复杂表单时会需要</li><li>novalidate 关闭默认的验证功能（只能加给form）</li><li>required 表示必填项</li><li>pattern 自定义正则，验证表单。</li></ul><p>代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml">      <span class="hljs-selector-tag">form</span> &#123;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-comment">/* 最大宽度*/</span></span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">640px</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-comment">/* 最小宽度*/</span></span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">min-width</span>: <span class="hljs-number">320px</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="css"><span class="xml">      &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">      <span class="hljs-selector-tag">input</span> &#123;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">display</span>: block;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml">      &#125;</span></span><br><span class="css"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>表单属性<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="xml">          用户名：</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;例如：smyhvae&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">autofocus</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;on&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">required</span></span></span><br><span class="hljs-tag"><span class="xml">          /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="xml">          电话：</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tel&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;1\d&#123;10&#125;&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="xml">          multiple的表单:</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><br></code></pre></div></td></tr></table></figure><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><ul><li>oninput()：用户输入内容时触发，可用于输入字数统计。</li><li>oninvalid()：验证不通过时触发。比如，如果验证不通过时，想弹出一段提示文字，就可以用到它。</li></ul><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml">        <span class="hljs-selector-tag">form</span> &#123;</span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="css"><span class="xml">            <span class="hljs-comment">/* 最大宽度*/</span></span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">max-width</span>: <span class="hljs-number">400px</span>;</span></span><br><span class="css"><span class="xml">            <span class="hljs-comment">/* 最小宽度*/</span></span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">min-width</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Microsoft Yahei&quot;</span>;</span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="css"><span class="xml">        &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">        <span class="hljs-selector-tag">input</span> &#123;</span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">display</span>: block;</span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml">        &#125;</span></span><br><span class="css"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>表单事件<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="xml">            邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txt1&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="xml">            输入的次数统计：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txt2&quot;</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">var</span> txt1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;txt1&#x27;</span>);</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">var</span> txt2 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;txt2&#x27;</span>);</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    txt1.oninput = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">//用户输入时触发</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">        num++;  <span class="hljs-comment">//用户每输入一次，num自动加 1</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">//将统计数显示在txt2中</span></span></span><br><span class="javascript"><span class="xml">        txt2.value = num;</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">    txt1.oninvalid = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">//验证不通过时触发</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">this</span>.setCustomValidity(<span class="hljs-string">&#x27;亲，请输入正确哦&#x27;</span>);  <span class="hljs-comment">//设置验证不通过时的提示文字</span></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"></span><br></code></pre></div></td></tr></table></figure><p>效果：<br><a href="http://imgs.jackhoo.icu/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313932302e676966.gif"><img src="https://cdn.nlark.com/yuque/0/2021/gif/2625525/1627006321385-fb8e89ee-ae10-4293-8bab-9e4f4725d927.gif#clientId=uad0e7fea-9f85-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=ua00afd3d&margin=%5Bobject%20Object%5D&name=687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313932302e676966.gif&originHeight=495&originWidth=715&originalType=binary&ratio=1&rotation=0&showTitle=false&size=106627&status=done&style=none&taskId=u24a4f780-8c26-4dbb-a268-f57d823019e&title=" alt="687474703a2f2f696d672e736d79687661652e636f6d2f32303138303230365f313932302e676966.gif"></a></p><h2 id="新增多媒体标签"><a href="#新增多媒体标签" class="headerlink" title="新增多媒体标签"></a>新增多媒体标签</h2><p>在HTML5之前，在网页上播放音频/视频的通用方法是利用Flash来播放。但是大多情况下，并非所有用户的浏览器都安装了Flash插件，由此使得音频、视频播放的处理变得非常复杂；并且移动设备的浏览器并不支持Flash插件。<br>多媒体标签包含两个，具体如下:<br>音频:<code>&lt;audio&gt;</code><br>视频:<code>&lt;video&gt;</code><br>使用它们可以很方便的在页面中嵌入音频和视频，而不再去使用落后的flash和其他浏览器插件。</p><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><p>HTML5通过<code>&lt;audio&gt;</code>标签来解决音频播放的问题。<br>使用举例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;audio src=<span class="hljs-string">&quot;music/yinyue.mp3&quot;</span> autoplay controls&gt; &lt;/audio&gt;<br></code></pre></div></td></tr></table></figure><p>我们可以通过附加属性，来更友好地控制音频的播放，如：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/att_audio_autoplay.asp">autoplay</a></td><td>autoplay</td><td>如果出现该属性，则音频在就绪后马上播放。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_audio_controls.asp">controls</a></td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_audio_loop.asp">loop</a></td><td>loop</td><td>如果出现该属性，则每当音频结束时重新开始播放。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_audio_muted.asp">muted</a></td><td>muted</td><td>规定视频输出应该被静音。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_audio_preload.asp">preload</a></td><td>preload</td><td>如果出现该属性，则音频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_audio_src.asp">src</a></td><td><em>url</em></td><td>要播放的音频的 URL。</td></tr></tbody></table><h4 id="处理兼容性问题："><a href="#处理兼容性问题：" class="headerlink" title="处理兼容性问题："></a>处理兼容性问题：</h4><p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的：<br>这里可以查看兼容性 <a href="https://caniuse.com/?search=audio">https://caniuse.com/?search=audio</a><br>为了做到多浏览器支持，可以采取以下兼容性写法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!--推荐的兼容写法：--&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">loop</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;music/yinyue.mp3&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;music/yinyue.ogg&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;music/yinyue.wav&quot;</span>/&gt;</span></span><br><span class="xml">    抱歉，你的浏览器暂不支持此音频格式</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span></span><br><br></code></pre></div></td></tr></table></figure><p>代码解释：如果识别不出音频格式，就弹出那句“抱歉”。</p><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>HTML5通过<code>&lt;video&gt;</code>标签来解决视频播放的问题。<br>使用举例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;video src=<span class="hljs-string">&quot;video/movie.mp4&quot;</span> controls autoplay&gt;&lt;/video&gt;<br></code></pre></div></td></tr></table></figure><p>我们可以通过附加属性，来更友好地控制视频的播放，如：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/att_video_autoplay.asp">autoplay</a></td><td>autoplay</td><td>如果出现该属性，则视频在就绪后马上播放。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_video_controls.asp">controls</a></td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_video_height.asp">height</a></td><td><em>pixels</em></td><td>设置视频播放器的高度。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_video_loop.asp">loop</a></td><td>loop</td><td>如果出现该属性，则当媒介文件完成播放后再次开始播放。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_video_muted.asp">muted</a></td><td>muted</td><td>规定视频的音频输出应该被静音。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_video_poster.asp">poster</a></td><td><em>URL</em></td><td>规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_video_preload.asp">preload</a></td><td>preload</td><td>如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_video_src.asp">src</a></td><td><em>url</em></td><td>要播放的视频的 URL。</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/att_video_width.asp">width</a></td><td><em>pixels</em></td><td>设置视频播放器的宽度。</td></tr></tbody></table><p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的：<a href="https://caniuse.com/?search=video">https://caniuse.com/?search=video</a><br>兼容性写法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!--<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video/movie.mp4&quot;</span> <span class="hljs-attr">controls</span>  <span class="hljs-attr">autoplay</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span>--&gt;<br>&lt;!--  行内块 display:inline-block --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video/movie.mp4&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video/movie.ogg&quot;</span>/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video/movie.webm&quot;</span>/&gt;</span></span><br><span class="xml">    抱歉，不支持此视频</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h2 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h2><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><ul><li><p>document.querySelector(“selector”) 通过CSS选择器获取符合条件的第一个元素。</p></li><li><p>document.querySelectorAll(“selector”) 通过CSS选择器获取符合条件的所有元素，以类数组形式存在。</p><h3 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h3></li><li><p>Node.classList.add(“class”) 添加class</p></li><li><p>Node.classList.remove(“class”) 移除class</p></li><li><p>Node.classList.toggle(“class”) 切换class，有则移除，无则添加</p></li><li><p>Node.classList.contains(“class”) 检测是否存在class</p><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><p>js 里可以通过 box1.index=100; box1.title 来自定义属性和获取属性。<br>H5可以直接在标签里添加自定义属性，<strong>但必须以 data- 开头</strong>。<br>举例：​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 给标签添加自定义属性 必须以data-开头 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;盒子&quot;</span> <span class="hljs-attr">data-my-name</span>=<span class="hljs-string">&quot;smyhvae&quot;</span> <span class="hljs-attr">data-content</span>=<span class="hljs-string">&quot;我是一个div&quot;</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.box&#x27;</span>);</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-comment">//自定义的属性 需要通过 dateset[]方式来获取</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">console</span>.log(box.dataset[<span class="hljs-string">&quot;content&quot;</span>]);  <span class="hljs-comment">//打印结果：我是一个div</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">console</span>.log(box.dataset[<span class="hljs-string">&quot;myName&quot;</span>]);    <span class="hljs-comment">//打印结果：smyhvae</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-comment">//设置自定义属性的值</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">var</span> num = <span class="hljs-number">100</span>;</span></span><br><span class="javascript"><span class="xml">    num.index = <span class="hljs-number">10</span>;</span></span><br><span class="javascript"><span class="xml">    box.index = <span class="hljs-number">100</span>;</span></span><br><span class="javascript"><span class="xml">    box.dataset[<span class="hljs-string">&quot;content&quot;</span>] = <span class="hljs-string">&quot;aaaa&quot;</span>;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"></span><br></code></pre></div></td></tr></table></figure><h3 id="举例：鼠标点击时，tab栏切换"><a href="#举例：鼠标点击时，tab栏切换" class="headerlink" title="举例：鼠标点击时，tab栏切换"></a>举例：鼠标点击时，tab栏切换</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Tab 标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml">      <span class="hljs-selector-tag">body</span> &#123;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f7f7f7</span>;</span></span><br><span class="css"><span class="xml">      &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">      <span class="hljs-selector-class">.tabs</span> &#123;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#c0dcc0</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">box-sizing</span>: border-box;</span></span><br><span class="css"><span class="xml">      &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">      <span class="hljs-selector-class">.tabs</span> <span class="hljs-selector-tag">nav</span> &#123;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">overflow</span>: hidden;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#c0dcc0</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">display</span>: flex;</span></span><br><span class="css"><span class="xml">      &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">      <span class="hljs-selector-tag">nav</span> <span class="hljs-selector-tag">a</span> &#123;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">display</span>: block;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#fff</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">text-decoration</span>: none;</span></span><br><span class="css"><span class="xml">      &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">      <span class="hljs-selector-tag">nav</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:last-child</span> &#123;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">0</span> none;</span></span><br><span class="css"><span class="xml">      &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">      <span class="hljs-selector-tag">nav</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span> &#123;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#9baf9b</span>;</span></span><br><span class="css"><span class="xml">      &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">      <span class="hljs-selector-class">.cont</span> &#123;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">overflow</span>: hidden;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">display</span>: none;</span></span><br><span class="css"><span class="xml">      &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">      <span class="hljs-selector-class">.cont</span> <span class="hljs-selector-tag">ol</span> &#123;</span></span><br><span class="css"><span class="xml">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span></span><br><span class="css"><span class="xml">      &#125;</span></span><br><span class="css"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tabs&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> <span class="hljs-attr">data-cont</span>=<span class="hljs-string">&quot;local&quot;</span>&gt;</span>国内新闻<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> <span class="hljs-attr">data-cont</span>=<span class="hljs-string">&quot;global&quot;</span>&gt;</span>国际新闻<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> <span class="hljs-attr">data-cont</span>=<span class="hljs-string">&quot;sports&quot;</span>&gt;</span>体育新闻<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span> <span class="hljs-attr">data-cont</span>=<span class="hljs-string">&quot;funny&quot;</span>&gt;</span>娱乐新闻<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cont&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;local&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国内新闻1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国内新闻2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国内新闻3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国内新闻4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国内新闻5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国内新闻6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国内新闻7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cont&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;global&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国内新闻1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国际新闻2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国际新闻3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国际新闻4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国际新闻5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>国际新闻6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cont&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sports&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>体育新闻1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>体育新闻2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>体育新闻3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>体育新闻4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>体育新闻5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>体育新闻6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>体育新闻7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cont&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;funny&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>娱乐新闻1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>娱乐新闻2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>娱乐新闻3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>娱乐新闻4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>娱乐新闻5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>娱乐新闻6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>娱乐新闻7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">      <span class="hljs-comment">// 目标： 默认显示一个 当前的样式</span></span></span><br><span class="javascript"><span class="xml">      <span class="hljs-comment">// 点击导航，实现切换</span></span></span><br><span class="javascript"><span class="xml">      <span class="hljs-comment">// key 表示的当前显示的是第几个</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">      ;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// 获取所有的导航</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">var</span> navs = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;nav a&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// 遍历 给导航 绑定事件，并且添加当前样式</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; navs.length; i++) &#123;</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-comment">// 如果是用户指定的当前样式</span></span></span><br><span class="javascript"><span class="xml">          <span class="hljs-keyword">if</span> (key == i) &#123;</span></span><br><span class="javascript"><span class="xml">            navs[i].classList.add(<span class="hljs-string">&#x27;active&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 拿到要显示内容section的id</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-keyword">var</span> secId = navs[i].dataset[<span class="hljs-string">&#x27;cont&#x27;</span>]</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 获取对应的section标签</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#&#x27;</span> + secId).style.display = <span class="hljs-string">&#x27;block&#x27;</span></span></span><br><span class="javascript"><span class="xml">          &#125;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">          <span class="hljs-comment">// 给每一个导航绑定点击事件</span></span></span><br><span class="javascript"><span class="xml">          navs[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 排他</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 之前有active样式的清除, 之前显示的section 隐藏</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-keyword">var</span> currentNav = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.active&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 获取对应的内容区域 ，让其隐藏</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-keyword">var</span> currentId = currentNav.dataset[<span class="hljs-string">&#x27;cont&#x27;</span>]</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 去掉导航的active 样式</span></span></span><br><span class="javascript"><span class="xml">            currentNav.classList.remove(<span class="hljs-string">&#x27;active&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 对应的内容区域</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#&#x27;</span> + currentId).style.display = <span class="hljs-string">&#x27;none&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 突出显示自己 导航添加样式  对应的section 显示</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 给自己添加active样式</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-built_in">this</span>.classList.add(<span class="hljs-string">&#x27;active&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 对应的section模块显示出来</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-keyword">var</span> myId = <span class="hljs-built_in">this</span>.dataset[<span class="hljs-string">&#x27;cont&#x27;</span>]</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#&#x27;</span> + myId).style.display = <span class="hljs-string">&#x27;block&#x27;</span></span></span><br><span class="javascript"><span class="xml">          &#125;</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">      &#125;)(<span class="hljs-number">0</span>)</span></span><br><span class="javascript"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS基础</title>
    <link href="/2022/03/06/CSS%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/03/06/CSS%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><p>CSS 全称 cascading style sheets: 层叠样式表，是一种用来表现HTML的文件样式的计算机语言。<br>作用：静态地修饰网页，并且可以配合各种脚本语言动态地对网页各元素进行格式化。</p><h2 id="前端三层技术"><a href="#前端三层技术" class="headerlink" title="前端三层技术"></a>前端三层技术</h2><table><thead><tr><th>HTML</th><th>CSS</th><th>Javascript</th></tr></thead><tbody><tr><td>结构层</td><td>样式层</td><td>行为层</td></tr><tr><td>从语义的角度搭建网页结构</td><td>从美观的角度描述页面样式</td><td>从交互的角度描述页面行为</td></tr></tbody></table><h2 id="不同位置分类"><a href="#不同位置分类" class="headerlink" title="不同位置分类"></a>不同位置分类</h2><p>CSS的代码更具书写位置分为四种书写方式，<strong>内联式、内嵌式、外联式、导入式</strong><br>实际应用时，小型案例对接使用内嵌式，减少文件数。大型项目推荐使用外联式</p><h3 id="内联式样式表"><a href="#内联式样式表" class="headerlink" title="内联式样式表"></a>内联式样式表</h3><p>内联式，也被习惯叫做行内式。<br>书写位置：在 HTML 标签之上的 style 属性中书写 css 样式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div style=<span class="hljs-string">&quot;width: 100px; height: 100px; background-color: gold&quot;</span>&gt;<span class="hljs-number">123</span>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px; height: 100px; background-color: gold&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="内联式缺点"><a href="#内联式缺点" class="headerlink" title="内联式缺点"></a>内联式缺点</h4><ul><li>内联式必须写在标签上，没有完全脱离 HTML 标签。</li><li>css样式代码让标签结构繁重，不利于HTML结构的解读。</li><li>一个内联式的 css 代码，只能给一个标签使用，如果多个标签有相同的样式，同样的 css 代码需要书写多次，增加代码量。 </li></ul><p>因此，实际工作中不会使用内联式（行内式）编写 css 代码。</p><h3 id="内嵌式样式表"><a href="#内嵌式样式表" class="headerlink" title="内嵌式样式表"></a>内嵌式样式表</h3><p>内嵌式书写位置：在 HTML文件中，<code>&lt;head&gt;</code>标签内部有一个<code>&lt;style&gt;</code>标签。 <code>&lt;style&gt; </code>标签书写在<code>&lt;title&gt;</code> 标签后面，所有 css 代码书写在 <code>&lt;style&gt;</code> 标签内部<br><code>&lt;style&gt;</code> 标签有一个标签属性叫做 type 属性值是”text/css”</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;head&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml">    <span class="hljs-comment">/*书写CSS*/</span></span></span><br><span class="css"><span class="xml">    <span class="hljs-selector-tag">div</span> &#123;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">background-color</span>: gold;</span></span><br><span class="css"><span class="xml">    &#125;</span></span><br><span class="css"><span class="xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br>&lt;/head&gt;<br></code></pre></div></td></tr></table></figure><h4 id="内嵌式优点"><a href="#内嵌式优点" class="headerlink" title="内嵌式优点"></a>内嵌式优点</h4><ul><li><p>实现了结构和样式的初步分离，css 只负责样式，HTML负责结构。</p></li><li><p>多个标签可以利用同一段代码设置相同的样式，节省代码量。</p><h4 id="内嵌式缺点"><a href="#内嵌式缺点" class="headerlink" title="内嵌式缺点"></a>内嵌式缺点</h4></li><li><p>结构和样式并没有完全分离，代码依旧书写在 HTML 文件的<code>&lt;style&gt;</code>标签内部。</p></li><li><p>CSS样式只能给一个HTML文件使用，不能够被多个 HTML 文件同时利用。</p></li><li><p>在HTML中如果css代码太多，会造成文件头重脚轻</p><h3 id="外联式样式表"><a href="#外联式样式表" class="headerlink" title="外联式样式表"></a>外联式样式表</h3><p>外联式 CSS，也可以叫做外链式 CSS、外部 CSS。<br>书写位置：在一个单独的扩展名为 .css 的文件中。<br>书写语法：内部代码与内嵌式样式表中<code>&lt;style&gt;</code>标签内部的代码一样。需要通过选择器去选中标签，添加对应的样式。<br>注意：在 .css 文件中书写时，不需要再加 <code>&lt;style&gt;</code> 标签</p><h4 id="外联式引用"><a href="#外联式引用" class="headerlink" title="外联式引用"></a>外联式引用</h4><p>外联式样式表必须引入到HTML文件中，才能正常进行加载。<br>引入方式：在HTML中的<head>标签内部使用<link>标签进行引入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;01.css&quot;</span> type=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;02.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="外联式优点"><a href="#外联式优点" class="headerlink" title="外联式优点"></a>外联式优点</h4></li><li><p>实现了 HTML 和 css 完全分离。</p></li><li><p>多个HTML文件可以共用一个css文件，便于提取公共css，减少代码量。</p></li><li><p>可以实现一个 css 变化，多个 HTML 页面同时变化，减少工作量。</p></li><li><p>一个 HTML 文件可以引入多个 css 文件，可以实现同一个页面</p><h3 id="导入式外联表"><a href="#导入式外联表" class="headerlink" title="导入式外联表"></a>导入式外联表</h3><p>书写位置：在内嵌式样式表<code>&lt;style&gt;</code>或者在外联式样式表内部，导入其他的外部的 .css 文件。<br>导入方式：利用一条@import url(路径) 语句进行引入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  <span class="hljs-comment">/*书写CSS*/</span><br>  div &#123;<br>    @<span class="hljs-keyword">import</span> url(<span class="hljs-number">01</span>.css0);<br>    width: 100px;<br>    height: 100px;<br>    background-color: gold;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h4 id="导入式缺点"><a href="#导入式缺点" class="headerlink" title="导入式缺点"></a>导入式缺点</h4><p>导入式样式表的作用与外联式样式表基本相同。<br>但是由于导入式在浏览器中加载时，会在HTML结构加载完毕后再进行编译，如果网速比较慢时，会导致网页出现没有 css 样式的效果，给用户的体验不好。</p><h2 id="CSS规则"><a href="#CSS规则" class="headerlink" title="CSS规则"></a>CSS规则</h2><p>CSS规则主要由两部分构成：<strong>选择器</strong>，<strong>以及一条或者多条声明</strong>(属性名：属性值)<br>以内嵌式样式表为例</p></li></ul><ol><li>所有的 css 代码都必须书写在<code>&lt;head&gt;</code>标签内部的一对<code>&lt;style&gt;</code>标签内。</li><li>css 在给某个标签设置样式前，必须使用选择器先选中标签。</li><li>css 样式的属性，属性名和属性值的键值对写法为 k : v ; </li><li>给每个选择器添加的样式属性都必须写在一对大括号{}之内。</li><li>给一个标签添加所有需要的样式，都要在{}内部一一罗列出来<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4>分号必要性：每条属性后面的分号必须写，如果不写，会导致后边所有代码加载错误<br>CSS中所有属性与属性之间对空格、换行、缩进不敏感。<h4 id="注释语法"><a href="#注释语法" class="headerlink" title="注释语法"></a>注释语法</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/* 注释内容 */</span><br></code></pre></div></td></tr></table></figure><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2>CSS2.1版本的七种选择器<br>基础选择器：<strong>id选择器</strong>、<strong>标签选择器</strong>、<strong>类选择器</strong>、<strong>通配符选择器</strong>(通用选择器)<br>高级选择器：<strong>后代选择器</strong>、<strong>交集选择器</strong>、<strong>并集选择器</strong><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3>通过标签上的 id 属性去选择标签。<br>书写方式：#id 属性值<br>选择范围：只能选中一个标签。<br>id 命名规则：必须以字母开头，后面可以有字母、数字、下划线、横线，严格区分大小写。每个 id 属性值必须是唯一的，不能与其他的 id 同名。<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  p &#123;<br>    <span class="hljs-attr">color</span>: red;<br>  &#125;<br>  #para1 &#123;<br>    <span class="hljs-attr">color</span>: blue;<br>  &#125;<br>  #para2 &#123;<br>    <span class="hljs-attr">color</span>: gray;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;para1&quot;</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;para2&quot;</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="id选择器特点"><a href="#id选择器特点" class="headerlink" title="id选择器特点"></a>id选择器特点</h4>缺点：id选择器只能实现单选，因为id是唯一的。（基本不使用id选择器写样式）<h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3>通过标签名去选择标签元素，选中的是HTML文件中所有同名标签<blockquote><p>标签选择器可以选择所有同名标签，忽视HTML元素的嵌套，都能被选中</p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  p &#123;<br>    <span class="hljs-attr">color</span>: red;<br>  &#125;<br>  h2 &#123;<br>    <span class="hljs-attr">color</span>: green;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>嵌套段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="标签选择器特点"><a href="#标签选择器特点" class="headerlink" title="标签选择器特点"></a>标签选择器特点</h4><p>优点：可以选中所有同名标签，设置所有同名标签的公共样式<br>缺点：只能实现全选，不能对局部的标签添加特殊样式<br>​</p><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>通过标签的class属性去选择标签。<br>书写方式：.class属性值<br>选择范围：是页面中所有 class 属性值相同的标签。<br>class 命名规则：必须以字母开头，后面可以有字母、数字、下划线、横线，严格区分大小写。class 属性值可以与其他的class相同。</p><h4 id="类选择器特点"><a href="#类选择器特点" class="headerlink" title="类选择器特点"></a>类选择器特点</h4><p>特点1：多个不同的标签，不性值相同，都可以被同一个类选择器选中。<br>特点2：一个标签的class 属性可以有多个属性值，值之间用空格分隔，每个属性值组成的选择器，都可以选中这一个标签，每个选择器后面的样式都会添加给同一个标签。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  .demo1 &#123;<br>    <span class="hljs-attr">color</span>: red;<br>  &#125;<br>  .ps &#123;<br>    font-size: 30px;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1 ps&quot;</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="类选择器特殊应用"><a href="#类选择器特殊应用" class="headerlink" title="类选择器特殊应用"></a>类选择器特殊应用</h4><p>原子类(公共样式/通用样式)：在css中提前设置一些类名，每个类选择器后面只添加一条css样式属性，这开些属性会在页面中常被使用，后期可以不需要多次书写属性，只要将对应的类名添加给需要的标签即可。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  .fs12 &#123;<br>    font-size: 12px;<br>  &#125;<br>  .fs30 &#123;<br>    font-size: 30px;<br>  &#125;<br>  .hong &#123;<br>    <span class="hljs-attr">color</span>: red;<br>  &#125;<br>  .lv &#123;<br>    <span class="hljs-attr">color</span>: green;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fs30 lv&quot;</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fs12 hong&quot;</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fs12 lv&quot;</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="类选择器优点"><a href="#类选择器优点" class="headerlink" title="类选择器优点"></a>类选择器优点</h4><ol><li>通过一个类选择器进行多选，选中多个标签，添加公共样式。</li><li>一个标签可以被多个类选择器选中，可以将所有样式进行分离，分别提取公共样式和单独样式，节省代码量。</li></ol><p>​</p><p>实际工作中，通常我们有一个使用规律：类上样式(CSS)，id 上行为(JavaScript)。</p><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><p>通过一个特殊符号选择页面内所有的标签。<br>书写方式：*<br>选择范围：包含<code>&lt;html&gt;</code>标签在内的所有标签。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">* &#123;<br>  <span class="hljs-attr">padding</span>: <span class="hljs-number">0</span>;<br>  margin: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="通配符选择器的特点和应用"><a href="#通配符选择器的特点和应用" class="headerlink" title="通配符选择器的特点和应用"></a>通配符选择器的特点和应用</h4><p>优点：可以实现全选，简化书写。<br>缺点：通配符选择效率低，设置的部分公共样式不是所有标签都需要添加，如果使用通配符选择，会让不需要的标签也加载一次样式，导致浏览器多做无用的工作。<br>注意：实际上线的网站不允许使用 * 去清除默认内外边距。<br>不过普通的案例，代码量较少时，为了节省书写，可以使用通配符。<br>​</p><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>通过标签之间存在的嵌套关系(族谱关系)去选择元素，基本组成部分就是基础选择器。<br>后代选择器也叫包含选择器。<br>书写方式：空格表示后代，基础选择器中间使用空格分隔，空格前面的选择器选中的标签必须是后面选择器选中标签的祖先级。<br>选择范围：通过后代选择器中前面的一系列基础选择器缩小选择范围，最终由一个选择器确定选中的标签。后代选择器不一定只能是父子关系，满足是后代关系即可</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  .box1 ul li p &#123;<br>    <span class="hljs-attr">color</span>: red;<br>  &#125;<br>  .box1 p &#123;<br>    font-size: 20px;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box2中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box2中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box2中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box2中的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="后代选择器特点"><a href="#后代选择器特点" class="headerlink" title="后代选择器特点"></a>后代选择器特点</h4><p>优点：减少class属性的定义使用，选择效率更高</p><h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p>通过一个标签之上满足所有的基础选择器的需求去选择标签。<br>书写方式：基础选择器进行连续书写，如果有标签选择器参与交集，必须书写在开头。<br>选择范围：选择的是满足所有基础选择器需求的标签，如果一个条件不满足都不能被选中。<br>比较常见的是标签与类的交集<br>交集选择器可以进行类名的连续交集，需要满足更多的条件才能选中标签，<br>ie6不支持类名连续交集写法，<br>交集选择器可以作为嵌套高级选择器的组成部分</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  p.demo &#123;<br>    <span class="hljs-attr">color</span>: red;<br>  &#125;<br>  p.demo.ps &#123;<br>    <span class="hljs-attr">color</span>: gold;<br>  &#125;<br>  .box2 p.demo &#123;<br>    font-size: 20px;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo ps&quot;</span>&gt;</span>这是box1中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>这是box2中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box2中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box2中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box2中的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p>不同选择器选中的元素都要设置相同的样式，多次书写相同的样式属性对代码造成浪费，可以将前面六种选择器可以进行并集书写，相当于一种简化写法。<br>书写方式：将多个选择器中间用逗号进行分隔，最后一个后面不能加逗号。<br>选择范围：是所有的单独选择器选中的标签的并集集合。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    body,<br>    h2,<br>    div,<br>    ul,<br>    li,<br>    p &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    h2,<br>    .demo &#123;<br>      <span class="hljs-attr">color</span>: red;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo ps&quot;</span>&gt;</span>这是box1中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="并集选择器用途"><a href="#并集选择器用途" class="headerlink" title="并集选择器用途"></a>并集选择器用途</h4><p>如果多个标签具有公共样式，但是不能用一个选择器选中，可以使用并集写法<br>可以使用标签选择器的并集写法，进行默认样式的清除，交换通配符的功能</p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><h3 id="普通类选择器和伪类选择器区别"><a href="#普通类选择器和伪类选择器区别" class="headerlink" title="普通类选择器和伪类选择器区别"></a>普通类选择器和伪类选择器区别</h3><h4 id="普通的类："><a href="#普通的类：" class="headerlink" title="普通的类："></a>普通的类：</h4><p>必须给标签设置对应的class属性值，才能选中标签，而且类选择器后面添加的属性，会立即加载到浏览器之上。</p><h4 id="伪类："><a href="#伪类：" class="headerlink" title="伪类："></a>伪类：</h4><p>不需要给标签添加任何属性，伪类名都是语法提前规定好的，书写时伪类必须搭配其他选择器使用，伪类选择器后面添加的样式不一定立即加载到浏览器之上，只有用户触发了对应的行为，伪类的样式才会立即加载。<br>​</p><p>伪类选择器的权重和普通类选择器相同<br>伪类选择器写法：前面是普通的选择器，后面紧跟：伪类名<br>​</p><h3 id="lt-a-gt-标签的伪类"><a href="#lt-a-gt-标签的伪类" class="headerlink" title="&lt;a&gt;标签的伪类"></a><code>&lt;a&gt;</code>标签的伪类</h3><p><code>&lt;a&gt;</code>标签可以根据用户行为不同，划分为四种状态，访问前、访问后、鼠标悬浮、点击状态。设置这四种状态时顺序不可乱<br>通过<code>&lt;a&gt;</code>标签的伪类可以将四种状态选中设置为不同的样式效果，用户触发对应行为，就可以加载对应的样式。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<span class="hljs-comment">/*访问前状态 */</span><br>  <span class="hljs-attribute">color</span>: gray;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<span class="hljs-comment">/*访问后状态 */</span><br>  <span class="hljs-attribute">color</span>: cyan;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-comment">/*鼠标悬浮状态 */</span><br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<span class="hljs-comment">/* 鼠标点击状态 */</span><br>  <span class="hljs-attribute">color</span>: yellow;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="lt-a-gt-标签的伪类书写顺序"><a href="#lt-a-gt-标签的伪类书写顺序" class="headerlink" title="&lt;a&gt;标签的伪类书写顺序"></a><code>&lt;a&gt;</code>标签的伪类书写顺序</h4><p><code>&lt;a&gt;</code>标签上可能会同时触发2到3个状态，每个状态的属性都会进行加载，相同的属性之间会发生层叠。<br>伪类的权重是相同的，只能根据书写顺序，后写的层叠先写的，所以伪类书写顺序非常重要。<br>要想让每个伪类的状态正常加载，书写顺序必须是：访问前link、访问后visited、鼠标移上hover、鼠标点击active。</p><h4 id="lt-a-gt-标签的伪类实际应用"><a href="#lt-a-gt-标签的伪类实际应用" class="headerlink" title="&lt;a&gt;标签的伪类实际应用"></a><code>&lt;a&gt;</code>标签的伪类实际应用</h4><p>一般会将访问前和访问后状态设置为一样的效果，保证了页面的统一性，可以选中性的设置鼠标移上和鼠标点击状态</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>,<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<br>  <span class="hljs-attribute">color</span>: gray;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="CSS层叠式"><a href="#CSS层叠式" class="headerlink" title="CSS层叠式"></a>CSS层叠式</h2><p>理解层叠式和基础性</p><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>如果一个标签没有设置过一些样式，它的某个祖先级曾经设置过，在浏览器中该标签也加载了这些样式，这些样式都是从祖先级继承而来，这种现象就是继承性。<br>能够被继承的样式是所有的<code>文字相关样式属性</code>，其他的属性都不能被继承。<br><a href="http://imgs.jackhoo.icu/%E6%A0%B7%E5%BC%8F%E7%BB%A7%E6%89%BF.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646377183652-71277c64-8a82-4436-ba8c-e8989e2cb856.png#clientId=u03ee3f7a-c531-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=u830ef96a&margin=%5Bobject%20Object%5D&name=%E6%A0%B7%E5%BC%8F%E7%BB%A7%E6%89%BF.png&originHeight=487&originWidth=636&originalType=binary&ratio=1&rotation=0&showTitle=false&size=46042&status=done&style=none&taskId=ua879d0c1-5372-4636-a709-c7a8f898d75&title=" alt="样式继承.png"></a></p><h4 id="继承性的应用"><a href="#继承性的应用" class="headerlink" title="继承性的应用"></a>继承性的应用</h4><p>继承性是一个很好的性质，可以将页面中出现最多的文字样式设置给一个较大的祖先级标签比如<code>&lt;body&gt;</code>,后期所有的后代标签都可以从人<code>&lt;body&gt;</code>进行继承。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  body &#123;<br>    font-size: 20px;<br>    color: red;<br>    font-family: <span class="hljs-string">&#x27;微软雅黑&#x27;</span>;<br>  &#125;<br>  .box1 &#123;<br>    <span class="hljs-attr">width</span>: 200px;<br>    height: 200px;<br>    border: 1px solid red;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box1中的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box2中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box2中li的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是box2中的p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>判断选择器是否选中目标标签</p><ol><li>直接选中目标标签</li><li>选中目标标签的祖先级</li><li>import</li><li>行内样式<h4 id="直接选中目标标签"><a href="#直接选中目标标签" class="headerlink" title="直接选中目标标签"></a>直接选中目标标签</h4>第一步：比较两个选择器的权重，权重高的层叠权重低<br>第二步:   如果选择器权重都相同,需要比较CSS代码中的书写顺序,后写的层叠先写的(覆盖同名属性,没有被覆盖的属性继续有效)<h5 id="基础选择器的权重"><a href="#基础选择器的权重" class="headerlink" title="基础选择器的权重"></a>基础选择器的权重</h5>根据选择范围，范围越大权重越小</li></ol><p><strong>ID选择器 &gt; 类选择器 &gt; 标签选择器 &gt;<code>*</code></strong></p><h5 id="高级选择器权重比较方法"><a href="#高级选择器权重比较方法" class="headerlink" title="高级选择器权重比较方法"></a>高级选择器权重比较方法</h5><p>依次比较组成高级选择器的 id 的个数，类的个数，标签的个数，如果前面能够比较出大小就不再比较后面，如果前面相等就往后比较。直到比较出大小。<br>比较顺序：( id 个数,类的个数,标签的个数）<br>​</p><p>比较复杂的情况</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  #box1 .box2 .demo,<br>  .box1 #box2 #ps &#123;<br>    <span class="hljs-attr">color</span>: red;<br>  &#125;<br>  .box1 .box2 #box3 .demo &#123;<br>    <span class="hljs-attr">color</span>: yellow;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ps&quot;</span>&gt;</span>颜色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>以上选择器是将选择器才开判断,依次是 一个id和两个类,两个id和一个类,一个id和两个类<br>很明显两个id选择器的权重大,所以是红色</p><h5 id="权重相同"><a href="#权重相同" class="headerlink" title="权重相同"></a>权重相同</h5><p>权重相同,后写的样式属性覆盖先写的,没有被覆盖的属性继续有效</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  .box1 .box2 #box3 .demo &#123;<br>    font-size: 20px;<br>    background-color: blue;<br>    color: red;<br>  &#125;<br>  .box1 .box2 #box3 .demo &#123;<br>    <span class="hljs-attr">color</span>: yellow;<br>    border: 5px solid black;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ps&quot;</span>&gt;</span>颜色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p><a href="http://imgs.jackhoo.icu/%E6%A0%B7%E5%BC%8F%E5%B1%82%E5%8F%A0.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646379567733-0cc0e94e-4a02-4053-9ccd-a8b9d961f07f.png#clientId=u03ee3f7a-c531-4&crop=0&crop=0&crop=1&crop=1&from=ui&height=392&id=u2991e8b5&margin=%5Bobject%20Object%5D&name=%E6%A0%B7%E5%BC%8F%E5%B1%82%E5%8F%A0.png&originHeight=195&originWidth=299&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8848&status=done&style=none&taskId=u6a0ab001-aa26-4dab-a4e1-66172bcbd31&title=&width=601" alt="样式层叠.png"></a></p><h4 id="选中目标标签的祖先级"><a href="#选中目标标签的祖先级" class="headerlink" title="选中目标标签的祖先级"></a>选中目标标签的祖先级</h4><p>如果选择器选中的是祖先元素,文字的样式可以被继承<br>第一步：比较就近原则，比较HTML结构中距离,  目标标签近的层叠远的<br>第二步：如果距离相同，比较选择器权重，权重大的层叠权重小的<br>第三步：如果权重相同，比较css书写顺序，后面的层叠前面的</p><h5 id="就近原则"><a href="#就近原则" class="headerlink" title="就近原则"></a>就近原则</h5><p>比较HTML结构中距离,  目标标签近的层叠远的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    #box1 &#123;<br>      <span class="hljs-attr">color</span>: red;<br>    &#125;<br>    .box2 &#123;<br>      <span class="hljs-attr">color</span>: green;<br>    &#125;<br>    .box3 &#123;<br>      <span class="hljs-attr">color</span>: blue;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ps&quot;</span>&gt;</span>蓝色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p><a href="http://imgs.jackhoo.icu/%E6%A0%B7%E5%BC%8F%E5%B1%82%E5%8F%A0%E5%B0%B1%E8%BF%91%E5%8E%9F%E5%88%99.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646381843326-8dbd3ea3-fc10-44c0-b8a5-a3528e91bb2f.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=445&id=ub03fbbea&margin=%5Bobject%20Object%5D&name=image.png&originHeight=356&originWidth=396&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14041&status=done&style=none&taskId=ucf38521e-c24f-4ebb-918b-d599d5ce343&title=&width=494.9999926239253" alt="image.png"></a></p><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><p>如果在比较选择器权重的过程，遇见一个 <code>!important</code>关键字，可以将某条CSS样式属性的权重提升到最大。<br>书写位置：在某个css属性的属性值后面空格加 !important 。</p><h5 id="在比较权重过程中"><a href="#在比较权重过程中" class="headerlink" title="在比较权重过程中"></a>在比较权重过程中</h5><p>在比较权重过程中，添加<code>important</code>，选择器权重没有改变，只是某条属性权重提升到最大</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  #box3 &#123;<br>    <span class="hljs-attr">color</span>: yellow !important;<br>  &#125;<br>  #box2 .box3 &#123;<br>    font-size: 12px;<br>    color: blue;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ps&quot;</span>&gt;</span>蓝色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p><a href="http://imgs.jackhoo.icu/important%E5%85%B3%E9%94%AE%E5%AD%97.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646383064093-74fe5529-0e84-433f-9163-a42237efdf68.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=321&id=ua22a32ed&margin=%5Bobject%20Object%5D&name=image.png&originHeight=257&originWidth=368&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10432&status=done&style=none&taskId=ub1ee1e1a-cd7c-4ad8-861b-6fce27fa5ac&title=&width=459.99999314546596" alt="image.png"></a><br>注意：</p><ol><li>就近原则中，不需要比较选择器权重，所有 important 会失效。</li><li>important 不能提升选择器的权重，只能提升某条属性的权重到最大。<h5 id="在就近原则中-important失效"><a href="#在就近原则中-important失效" class="headerlink" title="在就近原则中 !important失效"></a>在就近原则中 !important失效</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    #box2 &#123;<br>      font-size: 12px;<br>      color: yellow !important;<br>    &#125;<br>    #box2 .box3 &#123;<br>      <span class="hljs-attr">color</span>: blue;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ps&quot;</span>&gt;</span>蓝色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><a href="http://imgs.jackhoo.icu/%E5%B0%B1%E8%BF%91%E5%8E%9F%E5%88%99important%E5%A4%B1%E6%95%88.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646382819190-17ec1e71-1d0d-44b1-931c-119e4aa6d6f8.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=362&id=u1eb81079&margin=%5Bobject%20Object%5D&name=image.png&originHeight=290&originWidth=434&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12682&status=done&style=none&taskId=u8273b9b7-173d-4848-8edc-bde8a2c8239&title=&width=542.4999919161202" alt="image.png"></a><h4 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h4>行内式与内嵌式或者外链式比较权重时，行内式的权重最高<br>但是与<code>!important</code>关键字相比权重要低<br>​</li></ol><h2 id="常用字体样式"><a href="#常用字体样式" class="headerlink" title="常用字体样式"></a>常用字体样式</h2><p><strong>颜色 color、字体 font-family、字号 font-size</strong></p><h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><p>颜色，给文字设置颜色。<br>属性名：color<br>属性值：<a href="https://www.w3school.com.cn/cssref/css_colors.asp">颜色名</a>、<a href="https://www.w3school.com.cn/cssref/css_colors_legal.asp">颜色值</a></p><h4 id="RGB模式"><a href="#RGB模式" class="headerlink" title="RGB模式"></a>RGB模式</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">p &#123;<br>  <span class="hljs-attr">color</span>: rgb(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>常用RGB色值</p><table><thead><tr><th>红色</th><th>绿色</th><th>蓝色</th><th>黑色</th><th>白色</th></tr></thead><tbody><tr><td>rgb(255,0,0)</td><td>rgb(0,255,0)</td><td>rgb(0,0255)</td><td>rgb(0,0,0)</td><td>rgb(255,255,255)</td></tr></tbody></table><h4 id="十六进制模式"><a href="#十六进制模式" class="headerlink" title="十六进制模式"></a>十六进制模式</h4><p>使用#开头，后面连续书写红、绿蓝三个颜色的十六进制的两位数值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">p &#123;<br>  <span class="hljs-attr">color</span>: #<span class="hljs-number">000000</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>常用颜色的十六进制色值</p><table><thead><tr><th>红色</th><th>绿色</th><th>蓝色</th><th>黑色</th><th>白色</th></tr></thead><tbody><tr><td>#ff0000</td><td>#00ff00</td><td>#0000ff</td><td>000000</td><td>#ffffff</td></tr></tbody></table><h3 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h3><p>定义元素文字的字体</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">p &#123;<br>  <span class="hljs-attr">color</span>: #<span class="hljs-number">000000</span>;<br>  font-family: <span class="hljs-string">&#x27;Arial&#x27;</span>, <span class="hljs-string">&#x27;微软雅黑&#x27;</span>, <span class="hljs-string">&#x27;宋体&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>计算机字体位置 C:\Windows\Fonts</p><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li><p>font-family 可以设置多个字体名称，在实际加载时只会选择一种加载，选择的依据是按书写顺序进行，如果浏览器不支持第一个字体，则会尝试下一个，直到找到第一个支持的字体。</p></li><li><p>浏览器中加载的字体是用户机器中自带的，如果用户的电脑中没有设置的字体则加载败，需要查找下一个，因此，必须在最后设置一个所有机器都具备的通用字体作为后路。</p></li><li><p>中文字体中一般带有英文可以加载的的字体效果，为了避免对英文文字的字体影响，建议将英文字体写在属性值最前面。</p><h3 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h3><p>设置文字的大小<br>可以使用相对长度单位(推荐)，也可以使用绝对长度单位</p><h4 id="相对长度单位"><a href="#相对长度单位" class="headerlink" title="相对长度单位"></a>相对长度单位</h4><p>px：像素值，最常用的单位<br>em：倍数，继承自祖先元素设置的字号的倍数<br>%：百分比，继承自祖先元素设置的字号的百分比</p><h4 id="绝对长度单位"><a href="#绝对长度单位" class="headerlink" title="绝对长度单位"></a>绝对长度单位</h4><p>in：英寸<br>cm：厘米<br>mm：毫米<br>pt：点</p><h4 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h4></li><li><p>如果 HTML 中不设置字号，不同的浏览器有自己默认的加载字号。chrome、IE，默认显示字号为16px。</p></li><li><p>不同的浏览器也有自己最小加载显示字号，如果设置的字号低于最小字号，都以最小字号加载，0除外。chrome 浏览器最小加载显示字号为8px，IE浏览器最小可以支持1px的号。</p></li><li><p>网页中最小设置字号必须是12px，如果低于12px会出现兼容问题。现在网页中普遍使用14px+。尽量使用12px、14px、16px等偶数的数字字号，ie6等老式浏览器支持奇数会有bug</p><h3 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h3><p>字体粗细<br>作用：设置文字是否加粗显示。<br>属性名：font-weight，属于 font 属性的一个单一属性。<br>属性值有两种方式：单词类型、数字类型。</p><h4 id="单词类型"><a href="#单词类型" class="headerlink" title="单词类型"></a>单词类型</h4><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>normal</td><td>默认值，定义标准的字体</td></tr><tr><td>bold</td><td>定义粗体字符，b、strong标签的默认值</td></tr><tr><td>bolder</td><td>定义更粗的字体</td></tr><tr><td>lighter</td><td>定义更细的字体</td></tr></tbody></table></li></ol><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><p>100-900之间的整百数字。数字越大，文字显示越粗<br><strong>其中 400 等价于normal，700等价于bold</strong>。</p><h3 id="font-style"><a href="#font-style" class="headerlink" title="font-style"></a>font-style</h3><p>字体风格<br>作用：设置文字是否斜体显示。<br>属性名：font-style，属于 font 属性的一个单一属性。<br>属性值：单词。</p><h4 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h4><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>normal</td><td>设置正规的字体，大多数标签的默认值</td></tr><tr><td>italic</td><td>设置斜体的文字,主要针对英文，要求英文以字体中的斜体样式显示</td></tr><tr><td>oblique</td><td>设置倾斜的文字，只是将文字倾斜显示，与字体无关</td></tr></tbody></table><h3 id="line-heigth"><a href="#line-heigth" class="headerlink" title="line-heigth"></a>line-heigth</h3><p>行高<br>作用：设置的是一行文字实际占有的高度，文字字号在行高中是垂直居中的<br>属性名：line-height，属于 font 属性的一个单一属性。<br><strong>行高是指文本行基线间的垂直距离。</strong> 基线（base line）并不是汉字文字的下端沿，而是英文字母“x”的下端沿。下图中两条红线之间的距离就是行高，上行的底线和下一行顶线之间的距离就是行距，而同一行顶线和底线之间的距离是font-size的大小，行距的一半是半行距<br><a href="http://imgs.jackhoo.icu/%E8%A1%8C%E9%AB%98.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646393684951-7571ef1d-5d39-4153-8250-e049a3934702.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=481&id=u03251fbe&margin=%5Bobject%20Object%5D&name=image.png&originHeight=385&originWidth=974&originalType=binary&ratio=1&rotation=0&showTitle=false&size=93615&status=done&style=none&taskId=ufd31b3e5-6712-44c6-85e3-5a702f9c48c&title=&width=1217.4999818578365" alt="image.png"></a></p><h3 id="font"><a href="#font" class="headerlink" title="font"></a>font</h3><p>字体综合<br>字体、字号、行高、加粗、斜体都是font综合属性的单一属性。<br>font属性五个单一属性的值可以进行合写，属性值可以有2到多个，值之间用空格进行分隔。</p><h4 id="写法1-两个属性"><a href="#写法1-两个属性" class="headerlink" title="写法1 两个属性"></a>写法1 两个属性</h4><p>font进行综合写书时，必须有字号和字体，而且必须字号在前，字体在后，顺序不能颠倒</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">p &#123;<br>  <span class="hljs-attr">font</span>: 14px <span class="hljs-string">&#x27;宋体&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="写法2-三个属性"><a href="#写法2-三个属性" class="headerlink" title="写法2 三个属性"></a>写法2 三个属性</h4><p>font属性经常对字体、字号、行高进行合写，书写顺序必须是字号、行高、字体，字体和行高之间必须用/进行分割</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">p &#123;<br>  <span class="hljs-attr">font</span>: 14px/28px <span class="hljs-string">&#x27;宋体&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="写法3-四五个属性时"><a href="#写法3-四五个属性时" class="headerlink" title="写法3 四五个属性时"></a>写法3 四五个属性时</h4><p>如果font属性需要设置加粗和斜体，两个属性值只能写在最前面，两个值之间可以互相换位置。后面的字号、行高、字体不能更改位置</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">p &#123;<br>  <span class="hljs-attr">font</span>: bold italic 14px/28px <span class="hljs-string">&#x27;宋体&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="常用文本样式"><a href="#常用文本样式" class="headerlink" title="常用文本样式"></a>常用文本样式</h2><h3 id="text-align-水平对齐"><a href="#text-align-水平对齐" class="headerlink" title="text-align 水平对齐"></a>text-align 水平对齐</h3><p>作用：设置文本水平方向的对齐。<br>在盒子中，不论文本是单行还是多行，都会对应方向对齐。<br>属性值：三个方向的单词</p><h4 id="属性值-1"><a href="#属性值-1" class="headerlink" title="属性值"></a>属性值</h4><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>left</td><td>居左对齐，大部分标签默认</td></tr><tr><td>center</td><td>居中对齐</td></tr><tr><td>right</td><td>居右对齐</td></tr></tbody></table><h3 id="text-decoration-文本修饰"><a href="#text-decoration-文本修饰" class="headerlink" title="text-decoration 文本修饰"></a>text-decoration 文本修饰</h3><p>文本修饰，设置文本整体是否有线条的修饰效果</p><h4 id="属性值-2"><a href="#属性值-2" class="headerlink" title="属性值"></a>属性值</h4><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>没有修饰，大部分标签默认</td></tr><tr><td>overline</td><td>上划线</td></tr><tr><td>line-through</td><td>中划线，删除线，<code>&lt;del&gt;</code>标签的默认值</td></tr><tr><td>underline</td><td>下划线，<code>&lt;a&gt;</code>标签的默认值</td></tr></tbody></table><h3 id="text-indent-缩进"><a href="#text-indent-缩进" class="headerlink" title="text-indent 缩进"></a>text-indent 缩进</h3><p>设置段落首行是否进行缩进</p><h4 id="属性值-3"><a href="#属性值-3" class="headerlink" title="属性值"></a>属性值</h4><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>px单位</td><td>表示首行缩进多少像素</td></tr><tr><td>em单位</td><td>首行缩进几个中文字符的位置</td></tr><tr><td>百分比</td><td>表示缩进文字所在标签的父级标签的width属性值的百分比</td></tr></tbody></table><p>实际工作中em最常用<br>属性值区分正负，正数表示向右缩进，负数表示向左缩进</p><h2 id="常用背景属性"><a href="#常用背景属性" class="headerlink" title="常用背景属性"></a>常用背景属性</h2><p>CSS中除了布局类属性，还需要添加一些背景类的内容进行页面的修饰，从而让网页变得更加的美观<br>CSS中通过background属性来设置背景，它是一个综合属性，可以拆分成多个单一属性。</p><h3 id="background-color-背景颜色"><a href="#background-color-背景颜色" class="headerlink" title="background-color 背景颜色"></a>background-color 背景颜色</h3><p>属性名：background-color<br>作用：在盒子区域添加背景颜色的修饰。<br>加载区域：在border及以内加载背景颜色。<br>属性值：颜色名、颜色值。</p><h3 id="background-image-背景图片"><a href="#background-image-背景图片" class="headerlink" title="background-image 背景图片"></a>background-image 背景图片</h3><p>属性名：background-image<br>作用：给盒子添加图片的背景修饰。<br>加载范围：默认的加载到边框及以内部分。后期如果图片不重复加载，加载从border 以内开始。<br>属性值：url(图片路径)<br>url：uniform resource locator，统一资源定位符，小括号内部书写查找图片的路径。</p><h3 id="background-repeat-背景重复"><a href="#background-repeat-背景重复" class="headerlink" title="background-repeat 背景重复"></a>background-repeat 背景重复</h3><p>属性名：background-repeat<br>作用：设置添加的背景图是否要在盒子中重复进行加载。<br>根据属性值不同，有四种重复加载方式。</p><h4 id="属性值-4"><a href="#属性值-4" class="headerlink" title="属性值"></a>属性值</h4><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>重复，默认属性值，表示会使用背景图片重复加载填满整个盒子背景区域</td></tr><tr><td>no-repeat</td><td>不重复，不论背景图是否大于盒子范围，都只加载一次图片</td></tr><tr><td>repeat-x</td><td>水平重复，使用背景图片水平重复加载铺满第一行，垂直方向不重复</td></tr><tr><td>repeat-y</td><td>垂直重复，使用背景图片垂直重复加载铺满第一列，水平方向不重复</td></tr></tbody></table><h3 id="background-position-背景定位"><a href="#background-position-背景定位" class="headerlink" title="background-position 背景定位"></a>background-position 背景定位</h3><p>属性名：background-position<br>作用：主要用于设置不重复的图片在背景区域的加载开始位置。<br>属性值：分为三种写法，单词表示法、像素表示法、百分比表示法。不论哪种写法,属性值都有两个，值之间用空格分隔。<br>第一个属性值：表示背景图片在水平方向的位置。<br>第二个属性值：表示背景图片在垂直方向的位置。</p><h4 id="单词表示法"><a href="#单词表示法" class="headerlink" title="单词表示法"></a>单词表示法</h4><p>属性值都是使用代表方向的单词进行书写。<br>水平方向可选单词：left、center、right<br>垂直方向可选单词：top、center、bottom</p><h4 id="像素表示法"><a href="#像素表示法" class="headerlink" title="像素表示法"></a>像素表示法</h4><p>使用像素值作为背景定位的属性值。<br>第一个属性值：像素是几，表示背景图片左上角针对border 以内的左上顶点水平方向位移的距离。<br>第二个属性值：像素是几，表示背景图片左上角针对 border 以内的左上顶点垂直方向位移的距离。<br>像素值区分正负，正负代表位移方向不同：<br>正数：表示图片针对盒子的原点向右、向下移动。<br>负数：表示图片针对盒子的原点向左、向上移动。</p><h4 id="百分比表示法"><a href="#百分比表示法" class="headerlink" title="百分比表示法"></a>百分比表示法</h4><p>使用百分比数字作为属性值。<br>100%代表的数值：<br>水平方向，等价于盒子的border以内的背景区域宽度减去图片的宽度。<br>垂直方向，等价于盒子的border以内的背景区域高度减去图片的高度。</p><h3 id="background-attachment-背景附着"><a href="#background-attachment-背景附着" class="headerlink" title="background-attachment 背景附着"></a>background-attachment 背景附着</h3><p>属性名：background-attachment<br>作用：设置的是背景图片是否要随着页面或者盒子的滚动而滚动。<br>属性值</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>scroll</td><td>滚动的，表示背景图片与盒子保持相对位置不变，随着页面的滚动而滚走</td></tr><tr><td>fixed</td><td>固定的，背景图的定位的参考点从盒子border以内的左上顶点变为了浏览器窗口上顶点，页面滚动时，浏览器窗口的左上顶点是不变的，导致背景图固定在浏览器窗口的某个位置,不会随着页面滚动而滚走。</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-tag">body</span> &#123;<br>      <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">2512a3d58033abb28da342e076335589b862fc48.png</span>);<br>      <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>      <span class="hljs-attribute">background-position</span>: center top;<br>      <span class="hljs-attribute">background-attachment</span>: fixed;<br>    &#125;<br>    <span class="hljs-selector-tag">div</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">970px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">540px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid <span class="hljs-number">#f00</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="background综合写法"><a href="#background综合写法" class="headerlink" title="background综合写法"></a>background综合写法</h3><p>background属性可以将五个单一属性的值进行合写。<br>属性值：可以有1-5个属性值，值之间用空格进行分隔，背景定位的两个属性值算作一个属性值，不能被分开也不能颠倒顺序。五个属性值之间可以互换位置。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">1.jpg</span>) no-repeat center top scroll skyblue;<br></code></pre></div></td></tr></table></figure><p>注意1：如果属性值没有设置完全，其他没有设置的单一属性会按照默认值加载。<br>注意2：如果想去层叠综合属性中的一部分，其他的属性保持不变，最好使用单一属性写法进行层叠。</p><h3 id="背景应用"><a href="#背景应用" class="headerlink" title="背景应用"></a>背景应用</h3><h4 id="交替插入图"><a href="#交替插入图" class="headerlink" title="交替插入图"></a>交替插入图</h4><p><code>&lt;h1&gt;</code>标签是权重最高的标签，一般会在内部书写最重要的内容，比如logo图片、最大的标题等。<br>另外<code>&lt;h1&gt;</code>内部的文字，可以帮助提高SEO搜索排名。<br>在设置的是logo图片时，如果使用插入图，就不能书写搜索关键字。<br>如果想解决SEO问题，可以将HTML结构中，插入图换成搜索关键字，然后使用css添加背景图给<code>&lt;a&gt;</code>标签或<code>&lt;h1&gt;</code>标签。</p><h5 id="文字隐藏方法"><a href="#文字隐藏方法" class="headerlink" title="文字隐藏方法"></a>文字隐藏方法</h5><ol><li><p>将字号设置为0。IE8及以上或高版本浏览器可以隐藏文字，但是IE7及以下有兼容问题。</p></li><li><p>可以设置给<code>&lt;a&gt;</code>标签一个text-indent属性，属性值为负的很大的值，文字会走到盒子外部，直接再设置溢出隐藏属性，将溢出文字隐藏。(推荐)</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-tag">h1</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">280px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    &#125;<br>    <span class="hljs-selector-tag">h1</span> <span class="hljs-selector-tag">a</span> &#123;<br>      <span class="hljs-attribute">display</span>: block;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">280px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/taobao.jpg</span>) no-repeat;<br>      <span class="hljs-attribute">text-indent</span>: -<span class="hljs-number">999px</span>;<br>      <span class="hljs-attribute">overflow</span>: hidden;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">h1</span>&gt;&lt;<span class="hljs-selector-tag">a</span> href=&quot;&quot;&gt;首页&lt;/<span class="hljs-selector-tag">a</span>&gt;&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h4 id="padding区域背景图"><a href="#padding区域背景图" class="headerlink" title="padding区域背景图"></a>padding区域背景图</h4><p>在一个盒子中有背景图部分，而且有文字内容，文字会让开背景图区域进行加载，背景区域应该使用padding 挤出位置。<br>四个方向的padding 都可能用于添加背景图。<br><a href="http://imgs.jackhoo.icu/vx.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646536070170-be6de588-c773-40d9-a048-7149605821ed.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=366&id=u6db7ea91&margin=%5Bobject%20Object%5D&name=image.png&originHeight=293&originWidth=663&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36046&status=done&style=none&taskId=u54aea1e9-2800-4401-903f-bca128d7be1&title=&width=828.7499876506629" alt="image.png"></a></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.list</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#333</span>;<br>      <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">list-style</span>: none;<br>      <span class="hljs-attribute">font</span>: <span class="hljs-number">16px</span>/<span class="hljs-number">32px</span> <span class="hljs-string">&#x27;微软雅黑&#x27;</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span> &#123;<br>      <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">35px</span>;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/vx.jpg</span>) no-repeat left center;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">ul</span> class=&quot;list&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">li</span>&gt;新闻<span class="hljs-number">1</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;<span class="hljs-selector-tag">li</span>&gt;新闻<span class="hljs-number">2</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;<span class="hljs-selector-tag">li</span>&gt;新闻<span class="hljs-number">3</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;<span class="hljs-selector-tag">li</span>&gt;新闻<span class="hljs-number">4</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">ul</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h4 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h4><p>CSS精灵是一种处理网页背景图像的方式。<br>它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。<br>通常情况下，这个由很多小的背景图像合成的大图被称为精灵图。</p><h5 id="精灵图技术依据"><a href="#精灵图技术依据" class="headerlink" title="精灵图技术依据"></a>精灵图技术依据</h5></li><li><p>将网页中需要用到的小尺寸背景图制作成一张背景透明的png图片。</p></li><li><p>利用背景定位技术，将精灵图的每个小图片加载到对应的标签上。</p><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5></li><li><p>精灵图上放的都是小的装饰性质的背景图片，插入图片不能往上放。</p></li><li><p>精灵图的宽度取决于最宽的那个背景图片的标签宽度。</p></li><li><p>精灵图可以横向摆放也可以纵向摆放，但是每个图片之间必须留够足够的空白，保证背景图片加载到一个标签内部时，不能出现多余内容。</p></li><li><p>在精灵图的最低端，尽量留一点空白，方便以后添加其他精灵图</p></li></ol><p><a href="https://www.toptal.com/developers/css/sprite-generator">在线生成精灵图</a></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.bg-1</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">48px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">48px</span>;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;css_sprites.png&#x27;</span>) -<span class="hljs-number">10px</span> -<span class="hljs-number">254px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.bg-2</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">48px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">48px</span>;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;css_sprites.png&#x27;</span>) -<span class="hljs-number">78px</span> -<span class="hljs-number">254px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.bg-3</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">170px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">198px</span>;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;css_sprites.png&#x27;</span>) -<span class="hljs-number">200px</span> -<span class="hljs-number">10px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.bg-4</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">170px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">224px</span>;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;css_sprites.png&#x27;</span>) -<span class="hljs-number">10px</span> -<span class="hljs-number">10px</span>;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">p</span> class=&quot;bg-<span class="hljs-number">1</span>&quot;&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;<span class="hljs-selector-tag">p</span> class=&quot;bg-<span class="hljs-number">2</span>&quot;&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;<span class="hljs-selector-tag">p</span> class=&quot;bg-<span class="hljs-number">3</span>&quot;&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;<span class="hljs-selector-tag">p</span> class=&quot;bg-<span class="hljs-number">4</span>&quot;&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="CSS3新增背景属性"><a href="#CSS3新增背景属性" class="headerlink" title="CSS3新增背景属性"></a>CSS3新增背景属性</h3><h4 id="rgba-背景半透明"><a href="#rgba-背景半透明" class="headerlink" title="rgba 背景半透明"></a>rgba 背景半透明</h4><p>CSS3支持背景半透明的写法，颜色值增加了一种rgba模式。<br>rgba模式：在rgb基础上增加了一个不透明度的设置，不透明度alpha取值范围在0-1之间，0表示完全透明，1表示完全不透明，0.5表示半透明。<br>书写方式：rgba(红色，绿色，蓝色，不透明度)<br>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box&quot;&gt;<span class="hljs-number">11</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h5 id="半透明其他应用"><a href="#半透明其他应用" class="headerlink" title="半透明其他应用"></a>半透明其他应用</h5><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);<br><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);<br></code></pre></div></td></tr></table></figure><h4 id="background-size-背景缩放"><a href="#background-size-背景缩放" class="headerlink" title="background-size 背景缩放"></a>background-size 背景缩放</h4><p>通过background-size设置背景图片的尺寸，就像我们设置<code>&lt;img&gt;</code>的尺寸一样，在移动Web开发中做屏幕适配应用非常广泛。</p><h5 id="属性值-5"><a href="#属性值-5" class="headerlink" title="属性值"></a>属性值</h5><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>px值</td><td>1-2个像素值，只设置1个值，垂直方向等比例拉伸;设置2个值,按照设置值加载。</td></tr><tr><td>百分比</td><td>同像素值设置方法相同,设置百分比时,数值参照盒子的宽、高属性</td></tr><tr><td>cover</td><td>自动调整缩放比例，把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。如有溢出部分则会被隐藏。</td></tr><tr><td>contain</td><td>自动调整缩放比例，把图像图像扩展至最大尺寸，保证图片始终完整显示在背景区域。</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid red;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/2512a3d58033abb28da342e076335589b862fc48.png</span>) no-repeat;<br>      <span class="hljs-comment">/* background-size: 200px 150px; */</span><br>      <span class="hljs-comment">/* background-size: 100% 60%; */</span><br>      <span class="hljs-comment">/* background-size: cover; */</span><br>      <span class="hljs-attribute">background-size</span>: contain;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h4 id="background-image-多背景"><a href="#background-image-多背景" class="headerlink" title="background-image 多背景"></a>background-image 多背景</h4><p>CSS3中规定，一个盒子上，可以添加多个背景图片。<br>background-image的属性值书写时，以逗号分隔多背景的URL路径地址。<br>注意：背景加载时，先写的背景压盖后写的背景图片。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">/vx.jpg</span>), <span class="hljs-built_in">url</span>(<span class="hljs-string">/taobao.jpg</span>);<br></code></pre></div></td></tr></table></figure><h2 id="定位类型及特点"><a href="#定位类型及特点" class="headerlink" title="定位类型及特点"></a>定位类型及特点</h2><h4 id="定位属性"><a href="#定位属性" class="headerlink" title="定位属性"></a>定位属性</h4><p>属性名：position<br>作用：设置定位的元素，它需要根据某个参考元素发生位置的偏移</p><h4 id="属性值-6"><a href="#属性值-6" class="headerlink" title="属性值"></a>属性值</h4><table><thead><tr><th>relative</th><th>相对定位</th></tr></thead><tbody><tr><td>absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr></tbody></table><p>定位根据属性值不同又三种类型的定位效果，其中<strong>绝对定位和固定定位会脱离标准流</strong></p><h4 id="偏移量属性"><a href="#偏移量属性" class="headerlink" title="偏移量属性"></a>偏移量属性</h4><p>定位的元素要想发生位置的移动，必须搭配偏移量属性进行设置。<br>水平方向：left、right。<br>垂直方向：top、bottom。<br>属性值：常用px为单位的数值，或者百分比。</p><h3 id="relative-相对定位"><a href="#relative-相对定位" class="headerlink" title="relative 相对定位"></a>relative 相对定位</h3><p>属性值：relative，相对的意思。<br>参考元素：标签加载的原始位置。<br>必须搭配偏移量属性才能发生位置移动。</p><h4 id="相对定位的性质"><a href="#相对定位的性质" class="headerlink" title="相对定位的性质"></a>相对定位的性质</h4><p>性质：<strong>相对定位的元素不脱离标签的原始状态（标准流、浮动)，不会让出原来占有的位置</strong>。<br>元素显示效果上，原位留坑，形影分离。<br><a href="http://imgs.jackhoo.icu/%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D1.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646548875518-91144a48-e5f3-4efd-9d68-43d2d851e866.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=458&id=u5f1b9c67&margin=%5Bobject%20Object%5D&name=image.png&originHeight=915&originWidth=461&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6044&status=done&style=none&taskId=uddcaafba-bb1c-4fff-99fc-677dc5e6770&title=&width=231" alt="image.png"></a></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid red;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">background-color</span>: skyblue;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> <span class="hljs-selector-class">.para</span> &#123;<br>      <span class="hljs-attribute">position</span>: relative;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">background</span>: yellowgreen;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;<span class="hljs-number">1</span>&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;<span class="hljs-number">2</span>&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span> class=&quot;para&quot;&gt;<span class="hljs-number">3</span>&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;<span class="hljs-number">4</span>&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h4 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h4><h5 id="偏移量属性的值是区分正负的。"><a href="#偏移量属性的值是区分正负的。" class="headerlink" title="偏移量属性的值是区分正负的。"></a>偏移量属性的值是区分正负的。</h5><p>正数：表示偏移方向与属性名方向相反。<br>负数：表示偏移方向与属性名方向相同。</p><h5 id="同一个方向，不能设置两个偏移量属性，"><a href="#同一个方向，不能设置两个偏移量属性，" class="headerlink" title="同一个方向，不能设置两个偏移量属性，"></a>同一个方向，不能设置两个偏移量属性，</h5><p>如果水平方向同时设置了left和right属性，只会加载left属性。<br>垂直方向只加载top属性。</p><blockquote><p>书写时从水平方向和垂直方向各挑一个属性进行组合。</p></blockquote><h5 id="由于相对定位的参考元素是自身"><a href="#由于相对定位的参考元素是自身" class="headerlink" title="由于相对定位的参考元素是自身"></a>由于相对定位的参考元素是自身</h5><p>left的正值等价于right的负值，top的正值等价于bottom的负值。</p><blockquote><p>为了方便记忆，可以选中只使用left、top组合</p></blockquote><h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><ol><li><p>由于相对定位元素比较稳定，不会随意让出位置，可以将相对定位的元素作为后期绝对定位的参考元素，就是所说的子绝父相情况。</p></li><li><p>相对定位比较稳定，可以在占有原始位置的情况下，对加载效果区域进行位置调整，进行微调设置。或者对文字进行微调。</p><h4 id="相对定位应用"><a href="#相对定位应用" class="headerlink" title="相对定位应用"></a>相对定位应用</h4><p>鼠标滑动到的位置，顶部出现一个小块<br><a href="http://imgs.jackhoo.icu/%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%BA%94%E7%94%A81.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646550726170-f84e87d4-368f-4626-a9d9-5fc4b2e76bb7.png#clientId=u954de64b-5df0-4&crop=0.0303&crop=0.1771&crop=0.9555&crop=0.839&from=paste&height=154&id=ub5c01ca7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=133&originWidth=1203&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1836&status=done&style=none&taskId=ufaf26402-0153-4951-9d64-c7c95bcbe65&title=&width=1391" alt="image.png"></a><br>给a标签伪类设置相对定位和顶部边框</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.nav</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">1080px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>      <span class="hljs-attribute">background-color</span>: pink;<br>      <span class="hljs-attribute">list-style</span>: none;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;<br>    &#125;<br>    <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> &#123;<br>      <span class="hljs-attribute">float</span>: left;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">180px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>      <span class="hljs-attribute">display</span>: block;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">180px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>      <span class="hljs-attribute">background-color</span>: skyblue;<br>      <span class="hljs-attribute">font</span>: <span class="hljs-number">18px</span>/<span class="hljs-number">50px</span> <span class="hljs-string">&#x27;微软雅黑&#x27;</span>;<br>      <span class="hljs-attribute">text-align</span>: center;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>      <span class="hljs-attribute">text-decoration</span>: none;<br>    &#125;<br>    <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">position</span>: relative;<br>      <span class="hljs-attribute">top</span>: -<span class="hljs-number">4px</span>;<br>      <span class="hljs-attribute">border-top</span>: <span class="hljs-number">4px</span> solid <span class="hljs-number">#ff0</span>;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">ul</span> class=&quot;<span class="hljs-selector-tag">nav</span>&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">li</span>&gt;&lt;<span class="hljs-selector-tag">a</span> href=&quot;&quot;&gt;首页&lt;/<span class="hljs-selector-tag">a</span>&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;<span class="hljs-selector-tag">li</span>&gt;&lt;<span class="hljs-selector-tag">a</span> href=&quot;&quot;&gt;首页&lt;/<span class="hljs-selector-tag">a</span>&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;<span class="hljs-selector-tag">li</span>&gt;&lt;<span class="hljs-selector-tag">a</span> href=&quot;&quot;&gt;首页&lt;/<span class="hljs-selector-tag">a</span>&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;<span class="hljs-selector-tag">li</span>&gt;&lt;<span class="hljs-selector-tag">a</span> href=&quot;&quot;&gt;首页&lt;/<span class="hljs-selector-tag">a</span>&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;<span class="hljs-selector-tag">li</span>&gt;&lt;<span class="hljs-selector-tag">a</span> href=&quot;&quot;&gt;首页&lt;/<span class="hljs-selector-tag">a</span>&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;<span class="hljs-selector-tag">li</span>&gt;&lt;<span class="hljs-selector-tag">a</span> href=&quot;&quot;&gt;首页&lt;/<span class="hljs-selector-tag">a</span>&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">ul</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><p>对文字进行微调<br><a href="http://imgs.jackhoo.icu/%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%BA%94%E7%94%A82.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646551367506-84469e7f-7006-41ee-99db-4af3892a9285.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=200&id=u712bf08d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=160&originWidth=135&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3042&status=done&style=none&taskId=ub69c727d-a9c4-4ece-a8a9-921497325c6&title=&width=168.74999748542908" alt="image.png"></a></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"> &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-tag">p</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#f00</span>;<br>      <span class="hljs-attribute">font</span>: <span class="hljs-number">18px</span>/<span class="hljs-number">36px</span> <span class="hljs-string">&#x27;微软雅黑&#x27;</span>;<br>      <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;<br>    &#125;<br>    <span class="hljs-selector-tag">span</span> &#123;<br>      <span class="hljs-attribute">position</span>: relative;<br>      <span class="hljs-attribute">top</span>: -<span class="hljs-number">5px</span>;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">p</span>&gt;<br>    这是一个段落<br>    &lt;<span class="hljs-selector-tag">span</span>&gt;<span class="hljs-selector-attr">[1]</span>&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>    ，这是一个段落这是一个段落<br>  &lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="absolute-绝对定位"><a href="#absolute-绝对定位" class="headerlink" title="absolute 绝对定位"></a>absolute 绝对定位</h3><p>属性值：absolute，绝对的意思。<br>参考元素：参考的是距离最近的有定位的祖先元素，如果祖先都没有定位，参考<code>&lt;body&gt;</code>。<br>必须搭配偏移量属性才会发生位置移动。</p><h4 id="绝对定位的性质"><a href="#绝对定位的性质" class="headerlink" title="绝对定位的性质"></a>绝对定位的性质</h4><p>性质：<strong>绝对定位的元素脱离标准流，会让出标准流位置</strong>，可以设置宽高，也可以随时定义位置，绝对定位的元素不设置宽高只能被内容撑开。</p><h4 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h4></li><li><p>绝对定位的参考元素是不固定的，不同的参考元素以及不同的偏移量组合，会导致绝对定位元素的参考点不同，具体位移效果不同。</p></li><li><p>在绝对定位中，由于参考点不同，left正值不再等价于right的负值。</p><h4 id="​-lt-body-gt-为参考元素的参考点"><a href="#​-lt-body-gt-为参考元素的参考点" class="headerlink" title="​&lt;body&gt;为参考元素的参考点"></a>​<code>&lt;body&gt;</code>为参考元素的参考点</h4><p>以<body>为参考元素时，参考点的确定与偏移量方向有关。</p></li><li><p>如果有top参与的定位，参考点就是<body>页面的左上顶点和右上顶点。自身的对比点是盒子的所有盒模型属性最外面的左上角或右上角。</p></li><li><p>如果有bottom参与的绝对定位，参考点是<body>页面首屏的左下顶点或右下顶点。对比点是盒子的所有盒模型属性最外面的左下角或右下角。</p></li></ol><p>实际应用中，如果以<code>&lt;body&gt;</code>为参考元素，不同分辨率的浏览器中，绝对定位的元素位置是不同的，所以较少使用<body>作为参考元素。</p><h4 id="祖先级为参考元素"><a href="#祖先级为参考元素" class="headerlink" title="祖先级为参考元素"></a>祖先级为参考元素</h4><p>如果祖先级中有定位的元素，就不会去参考<code>&lt;body&gt;</code><br>参考元素：<strong>参考的是祖先元素中有任意定位</strong>的，在HTML结构中距离目标最近的祖先。<br>根据绝对定位的参考元素的定位类型不同，有三种定位组合方式：<br><strong>子绝父相、子绝父绝、子绝父固</strong>，<br>由于相对定位的祖先级位置更稳定，大多使用子绝父相的情况。</p><h4 id="祖先元素参考点"><a href="#祖先元素参考点" class="headerlink" title="祖先元素参考点"></a>祖先元素参考点</h4><p>如果绝对定位的参考元素是某个祖先级，参考点是盒子border 以内的四个顶点，组合方向决定了参考点。<br>绝对定位的元素只关心对比点和参考点之间的距离，会忽视参考元素的padding 区域。<br>left、top：参考点是祖先的 border以内的左上顶点，对比点是盒子自身的左上角。<br>right、top：参考点是祖先的border 以内的右上顶点，对比点是盒子自身的右上角。left、bottom：参考点是祖先的border以内的左下顶点，对比点是盒子自身的左下角。<br>right、bottom：参考点是祖先的border以内的右下顶点，对比点是盒子自身的右下角</p><h3 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed 固定定位"></a>fixed 固定定位</h3><p>属性值：fixed，固定的意思。<br>参考元素：浏览器窗口。<br>参考点：浏览器窗口的四个顶点。跟偏移量组合方向有关。<br>由于浏览器窗口的四个顶点位置不会发生变化，会导致固定定位的元素会始终显示在定位位置。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-tag">div</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">background-color</span>: skyblue;<br>    &#125;<br>    <span class="hljs-selector-class">.backtop</span> &#123;<br>      <span class="hljs-attribute">position</span>: fixed;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;<br>      <span class="hljs-attribute">font</span>: <span class="hljs-number">18px</span>/<span class="hljs-number">50px</span> <span class="hljs-string">&#x27;微软雅黑&#x27;</span>;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>      <span class="hljs-attribute">text-align</span>: center;<br>      <span class="hljs-attribute">text-decoration</span>: none;<br>    &#125;<br>    <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">background-color</span>: gold;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">a</span> href=&quot;#&quot; class=&quot;backtop&quot;&gt;回到顶部&lt;/<span class="hljs-selector-tag">a</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h4 id="固定定位的性质"><a href="#固定定位的性质" class="headerlink" title="固定定位的性质"></a>固定定位的性质</h4><p>固定定位的元素脱离标准流，让出标准流位置，可以设置宽高，根据偏移量属性可以任意设置在浏览器窗口的位置。<br>固定定位的元素会始终显示在浏览器窗口上。</p><h3 id="定位的应用"><a href="#定位的应用" class="headerlink" title="定位的应用"></a>定位的应用</h3><h4 id="压盖效果"><a href="#压盖效果" class="headerlink" title="压盖效果"></a>压盖效果</h4><p>所有的定位类型都可以实现压盖效果。<br>由于绝对定位的元素脱标，不占标准流位置，压盖效果更彻底，实际工作中，常见的是绝对定位制作的压盖。<br><a href="http://imgs.jackhoo.icu/%E5%8E%8B%E7%9B%96.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646558493592-6bcdcb7d-03a2-4e4c-aa36-b97a64d52786.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=740&id=u11f193e6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=592&originWidth=1009&originalType=binary&ratio=1&rotation=0&showTitle=false&size=824942&status=done&style=none&taskId=ud395957c-fd75-41ef-8dc3-11fa9b4c6c7&title=&width=1261.2499812059107" alt="image.png"></a></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.box</span> &#123;<br>      <span class="hljs-attribute">position</span>: relative;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">980px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid <span class="hljs-number">#f00</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span> &#123;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">background-color</span>: pink;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=&quot;/<span class="hljs-number">2512</span>a3d58033abb28da342e076335589b862fc48<span class="hljs-selector-class">.png</span>&quot; alt=&quot;&quot; /&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h4 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h4><p>定位的元素，如果想在参考元素中居中显示，有自己的居中方法:<br>第一步：在居中的方向使用一个偏移量属性，例如 <strong>left，设置属性值为50%<strong>。导致图片的左顶点移动到参考元素的中心位置。<br>百分比形式的属性值，百分百参考的是参考元素的border 以内的宽度、高度。<br>第二步：</strong>给绝对定位的子盒子</strong>设置一个同方向的margin，例如<strong>margin-left，属性值为负的自身宽度的一半</strong>。<br><a href="http://imgs.jackhoo.icu/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%B1%85%E4%B8%AD.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646559058123-fb1bb689-7ea8-47cd-a8ce-6db54228f1e2.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=734&id=u7fc12e46&margin=%5Bobject%20Object%5D&name=image.png&originHeight=587&originWidth=1297&originalType=binary&ratio=1&rotation=0&showTitle=false&size=703517&status=done&style=none&taskId=uda15b37f-e5fc-4e01-a9b1-c3ff3ea1259&title=&width=1621.2499758414929" alt="image.png"></a></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.box</span> &#123;<br>      <span class="hljs-attribute">position</span>: relative;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">980px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid <span class="hljs-number">#f00</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    &#125;<br>    <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span> &#123;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">600px</span>;<br>      <span class="hljs-attribute">background-color</span>: pink;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=&quot;/<span class="hljs-number">2512</span>a3d58033abb28da342e076335589b862fc48<span class="hljs-selector-class">.png</span>&quot; alt=&quot;&quot; /&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="扩展应用"><a href="#扩展应用" class="headerlink" title="扩展应用"></a>扩展应用</h3><ol><li><p>解决标准流中，宽的子盒子在窄的父盒子中的居中，可以设置大的子盒子相对定位，利用相对定位居中的方法进行居中。</p></li><li><p>浮动的元素居中，在不改变原始浮动状态情况下，可以利用相对定位居中方法。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.box1</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid <span class="hljs-number">#f00</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;<br>    &#125;<br>    <span class="hljs-selector-class">.box1</span> <span class="hljs-selector-tag">p</span> &#123;<br>      <span class="hljs-attribute">position</span>: relative;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">400px</span>;<br>      <span class="hljs-attribute">background-color</span>: pink;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;box1&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="压盖顺序"><a href="#压盖顺序" class="headerlink" title="压盖顺序"></a>压盖顺序</h3><h4 id="默认压盖顺序"><a href="#默认压盖顺序" class="headerlink" title="默认压盖顺序"></a>默认压盖顺序</h4><p>定位的元素不区分定位类型，都会去压盖标准流或浮动的元素。<br>如果都是定位的元素，在HTML 中后写的定位压盖先写的定位。<br>因此，书写代码时，需要注意压盖效果，必须合理设置HTML元素的书写顺序。</p><h4 id="自定义压盖顺序"><a href="#自定义压盖顺序" class="headerlink" title="自定义压盖顺序"></a>自定义压盖顺序</h4><p>如果想更改定位的元素的压盖顺序，可以设置一个z-index属性。<br>属性值：数字。</p><h5 id="自定义压盖顺序注意事项"><a href="#自定义压盖顺序注意事项" class="headerlink" title="自定义压盖顺序注意事项"></a>自定义压盖顺序注意事项</h5></li><li><p><strong>属性值大的会压盖属性值小的</strong>，设置z-index属性的会压盖没有设置的。</p></li><li><p>如果属性值相同，比较HTML书写顺序，后写的压盖先写的。</p></li><li><p><strong>z-index属性只能设置给定位的元素才会生效</strong>，如果给没有定位的元素设置，不会生效。</p></li><li><p>父子盒模型中，如果父子盒子都进行了定位，与其他的父子级有压盖的部分:</p><h6 id="父级盒子："><a href="#父级盒子：" class="headerlink" title="父级盒子："></a>父级盒子：</h6><p>如果不设置z-index，后写的压盖先写的;<br>如果设置了z-index，值大的压盖值小的。</p><h6 id="子级盒子："><a href="#子级盒子：" class="headerlink" title="子级盒子："></a>子级盒子：</h6><p>如果父级没有设置z-index属性，子级z-index大的会压盖小的;<br>如果父级设置了z-index值，无论子级值是多少，都是父级的值大的子级压盖父级值小的子级，俗称“从父效应”。</p><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>盒模型又叫框模型，包含了五个用来描述盒子位置、尺寸的属性，分别是<br>宽度 <strong>width</strong>、高度 <strong>height</strong>、内边距 <strong>padding</strong>、边框 <strong>border</strong>、外边距 <strong>margin</strong>。</p></li></ol><p><strong>常见和模型区域</strong><br>盒模型的属性中，根据不同属性的效果可以划分：<br>书写内容区域：width+height<br>实体化区域(设置样式可见)：width+height+padding+border<br>实际占位的位置：width+height+padding+border+margin<br><a href="http://imgs.jackhoo.icu/%E7%9B%92%E6%A8%A1%E5%9E%8B.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646396903967-29b06fce-9b59-493e-bb2e-4cb1e5cb5e07.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=337&id=ub52cc598&margin=%5Bobject%20Object%5D&name=image.png&originHeight=203&originWidth=241&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6282&status=done&style=none&taskId=ua409646d-2692-4800-b5b6-a60b62f1ec8&title=&width=400.25" alt="image.png"></a></p><h3 id="width"><a href="#width" class="headerlink" title="width"></a>width</h3><p>可以设置添加元素内容的区域的宽度</p><h4 id="属性值-7"><a href="#属性值-7" class="headerlink" title="属性值"></a>属性值</h4><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>auto</td><td>默认值。浏览器可计算出实际的宽度</td></tr><tr><td>px</td><td>像素值定义的宽度</td></tr><tr><td>%</td><td>定义参考父元素宽度的百分比宽度</td></tr></tbody></table><h4 id="特殊应用"><a href="#特殊应用" class="headerlink" title="特殊应用"></a>特殊应用</h4><p>如果一个元素不添加width属性，默认属性值为auto，不同的元素浏览器会根据其特点自动计算出实际宽度，<br>例如<code>&lt;div&gt;</code>元素等独占一行的，其 width 属性的值会自动撑满父元素的 width 区域，<br>如果是 <code>&lt;span&gt;</code> 元素等不需要独占一行的，其 width属性的值是内部元素内容自动撑开的宽度。<br><code>&lt;body&gt;</code> 元素比较特殊，不需要设置 width 属性，宽度会自动适应浏览器窗口的宽度</p><h3 id="height"><a href="#height" class="headerlink" title="height"></a>height</h3><p>可以设置添加元素内容的区域的高度</p><h4 id="属性值-8"><a href="#属性值-8" class="headerlink" title="属性值"></a>属性值</h4><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>auto</td><td>默认值。浏览器可计算出实际的高度</td></tr><tr><td>px</td><td>像素值定义的高度</td></tr><tr><td>%</td><td>定义参考父元素高度的百分比高度</td></tr></tbody></table><h4 id="特殊应用-1"><a href="#特殊应用-1" class="headerlink" title="特殊应用"></a>特殊应用</h4><p>如果一个元素不添加height属性，默认属性值为auto，浏览器自动会计算出实际高度，也就是说内部元素自动撑开的高度。元素的高度自适应内容的高度</p><h3 id="pandding"><a href="#pandding" class="headerlink" title="pandding"></a>pandding</h3><p>内边距<br>作用：设置的是元素的边框内部到宽高区域之间的距离。<br>特点：可以去加载背景，不能书写嵌套的内容。<br>属性值：常用px为单位的数值。<br>padding 是一个复合属性，可以根据内边距的方向不同划分为四个方向的单一属性。</p><h4 id="单一属性"><a href="#单一属性" class="headerlink" title="单一属性"></a>单一属性</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">p &#123;<br>  padding-top: 10px;<br>  padding-right: 20px;<br>  padding-bottom: 30px;<br>  padding-left: 30px;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="四值法"><a href="#四值法" class="headerlink" title="四值法"></a>四值法</h4><p>方向按照顺时针，上、右、下、左</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.demo &#123;<br>  <span class="hljs-attr">padding</span>: 10px 20px 30xp 40px;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="三值法"><a href="#三值法" class="headerlink" title="三值法"></a>三值法</h4><p>上、右左、下</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.demo &#123;<br>  <span class="hljs-attr">padding</span>: 10px 20px 30xp;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="二值法"><a href="#二值法" class="headerlink" title="二值法"></a>二值法</h4><p>上下、左右</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.demo &#123;<br>  <span class="hljs-attr">padding</span>: 10px 20px;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="单值法"><a href="#单值法" class="headerlink" title="单值法"></a>单值法</h4><p>上下左右都相同</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.demo &#123;<br>  <span class="hljs-attr">padding</span>: 10px;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="border"><a href="#border" class="headerlink" title="border"></a>border</h3><p>边框，设置的是内边距外边的边界区域，作为盒子的实体化的最外层<br>属性值：有三个值组成，分为线的宽度、线的性质、线的颜色。(位置可以替换)<br>border属性是一个复合属性，根据划分依据不同 可以有两种单一属性的划分方式</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">p &#123;<br>  <span class="hljs-attr">border</span>: 1px solid red;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="按照属性值的类型划分"><a href="#按照属性值的类型划分" class="headerlink" title="按照属性值的类型划分"></a>按照属性值的类型划分</h4><p>线宽：border-width、线型：border-style、颜色：border-color</p><h5 id="border-width"><a href="#border-width" class="headerlink" title="border-width"></a>border-width</h5><p>作用：设置边框线的宽度。<br>属性值：常用px形式的数值，四个方向都有边框，属性值类似于 padding，也有四种值的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">p &#123;<br>  border-width: 1px 2px 3px 4px;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="border-style"><a href="#border-style" class="headerlink" title="border-style"></a>border-style</h5><p>作用：设置边框的线条形状。<br>属性值：形状的单词，总体也是类似 padding 的综合属性写法。属性值的单词可能性:</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><strong>none</strong></td><td><strong>定义无边框</strong></td></tr><tr><td><strong>solid</strong></td><td><strong>定义实线</strong></td></tr><tr><td>dashed</td><td>定义虚线。在大多数浏览器中呈现为实线</td></tr><tr><td>dotted</td><td>定义点状边框。在大多数浏览器中呈现为实线</td></tr><tr><td>double</td><td>定义双线。双线的宽度等于 border-width 的值</td></tr><tr><td>……</td><td></td></tr></tbody></table><h5 id="border-color"><a href="#border-color" class="headerlink" title="border-color"></a>border-color</h5><p>作用：设置边框的颜色。<br>属性值：颜色名或颜色值，整体类似 padding 综合属性写法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">p &#123;<br>  border-color: #f00 #0f0 #00f #ff0;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="根据边框的方向划分"><a href="#根据边框的方向划分" class="headerlink" title="根据边框的方向划分"></a>根据边框的方向划分</h4><p>上边框：border-top、<br>右边框：border-right、<br>下边框：border-bottom、<br>左边框：border-left<br>每个单一属性都必须与符合属性border一致，设置三个属性值</p><h4 id="根据方向和类型进一步细分"><a href="#根据方向和类型进一步细分" class="headerlink" title="根据方向和类型进一步细分"></a>根据方向和类型进一步细分</h4><p>类似border-top的单一方向属性，也可以根据属性值类型继续进行单一属性划分<br>单一属性写法：border-方向-类型</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">p &#123;<br>  border-top-color: #f00;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>细分时必须先写方向划分在写类型划分，否则属性名错误</p></blockquote><h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><p>外边距<br>设置的是盒子与盒子之间的距离<br>特点：不能渲染背景<br>属性值：常用px为单位的数值<br>外边距的设置方式与内边距padding一模一样</p><h2 id="盒模型扩展"><a href="#盒模型扩展" class="headerlink" title="盒模型扩展"></a>盒模型扩展</h2><h3 id="清除默认样式"><a href="#清除默认样式" class="headerlink" title="清除默认样式"></a>清除默认样式</h3><p>大部分标签都有一个浏览器加载的默认样式，会对布局造成一些影响。为了避免默认样式对整体布局效果造成影响，一定要清除默认样式。</p><h4 id="盒模型属性中内外边距："><a href="#盒模型属性中内外边距：" class="headerlink" title="盒模型属性中内外边距："></a>盒模型属性中内外边距：</h4><p>大部分容器级标签都有默认边距，要么用标签选择器的并集方式，要么通配符清除。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  <span class="hljs-comment">/*清除默认样式 */</span><br>  <span class="hljs-comment">/* body,div,h1,p,ul,li &#123;</span><br><span class="hljs-comment">    margin: 0;</span><br><span class="hljs-comment">    padding: 0;</span><br><span class="hljs-comment">  &#125; */</span><br>  * &#123;<br>    <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>    padding: <span class="hljs-number">0</span>;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="lt-ul-gt-和-lt-ol-gt-两种列表有默认的列表前缀"><a href="#lt-ul-gt-和-lt-ol-gt-两种列表有默认的列表前缀" class="headerlink" title="&lt;ul&gt;和&lt;ol&gt;两种列表有默认的列表前缀"></a><code>&lt;ul&gt;</code>和<code>&lt;ol&gt;</code>两种列表有默认的列表前缀</h4><p>清除<code>list-style</code>属性，设置<code>list-style:none</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    ol,<br>    ul &#123;<br>      list-style: none;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="lt-a-gt-标签默认样式"><a href="#lt-a-gt-标签默认样式" class="headerlink" title="&lt;a&gt;标签默认样式"></a><code>&lt;a&gt;</code>标签默认样式</h4><p>a标签自带蓝色和下划线，设置颜色color和下划线<code>text-decoration：none</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">a &#123;<br>  <span class="hljs-attr">color</span>: #<span class="hljs-number">333</span>;<br>  text-decoration: none;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="清除默认加粗效果"><a href="#清除默认加粗效果" class="headerlink" title="清除默认加粗效果"></a>清除默认加粗效果</h4><p>默认粗体比如说h、b、strong标签，设置<code>font-weight:normal</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">h1,<br>b,<br>strong &#123;<br>  font-weight: normal;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="height应用"><a href="#height应用" class="headerlink" title="height应用"></a>height应用</h3><p>根据不同的需求，高度属性可以设置也可以不设置。<br>如果设置了高度：盒子占有的高度位置就确定死了，后面的同级元素会紧挨着加载。<br>如果不设置高度：会根据标签内部内容高度自动撑开。</p><h4 id="必须设置高度的情况"><a href="#必须设置高度的情况" class="headerlink" title="必须设置高度的情况"></a>必须设置高度的情况</h4><p>设计图中盒子高度占位是固定的，后面同级元素在高度下面加载。<br>盒子自身内部内容过多溢出盒子区域<br><a href="http://imgs.jackhoo.icu/%E7%9B%92%E5%AD%90%E6%BA%A2%E5%87%BA.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646403285368-58d1ae49-bf87-4d2c-bced-0ad774fe2e3d.png#clientId=u954de64b-5df0-4&crop=0&crop=0.0227&crop=1&crop=0.932&from=paste&height=221&id=u93186b1d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=177&originWidth=150&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3618&status=done&style=none&taskId=u8aa3f263-57f6-4efc-bb71-3353cfbfd4c&title=&width=187" alt="image.png"></a></p><h5 id="overflow属性"><a href="#overflow属性" class="headerlink" title="overflow属性"></a>overflow属性</h5><p>设置了高度的盒子，如果内部元素的加载高度超过父级，会出现溢出效果。可以通过一个溢出的属性 overflow，进行溢出部分内容的显示效果设置。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>visible</td><td>默认值，可见的可视的，溢出部分显示的。</td></tr><tr><td>hidden</td><td>溢出部分直接隐藏，隐藏超过边框范围的内容</td></tr><tr><td>scroll</td><td>溢出的部分出现滚动条，可以拖动滚动条看到隐藏部分，多出盒子高度的部分不显示，不论有没有溢出，水平和垂直方向都会出现滚动条。</td></tr><tr><td>auto</td><td>自动的，如果没有溢出就正常显示，如果有溢出，溢出的方向自动出现滚动条。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    div &#123;<br>      <span class="hljs-attr">width</span>: 100px;<br>      height: 100px;<br>      border: 1px solid red;<br>      overflow: hidden;<br>      <span class="hljs-comment">/* overflow: visible; */</span><br>      <span class="hljs-comment">/* overflow: scroll; */</span><br>      <span class="hljs-comment">/* overflow: auto; */</span><br>    &#125;<br>  &lt;/style&gt;<br>&lt;/head&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    这是div,这是div这是div这是div这是div这是div这是</span><br><span class="xml">    div这是div这是div这是div这是div</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这是span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="必须不设置高度"><a href="#必须不设置高度" class="headerlink" title="必须不设置高度"></a>必须不设置高度</h4><p>要求盒子高度必须自适应内部内容的高度。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    div &#123;<br>      <span class="hljs-attr">width</span>: 100px;<br>      <span class="hljs-comment">/* height: 100px; */</span><br>      border: 1px solid red;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    这是div,这是div这是div这是div这是div这是div</span><br><span class="xml">    这是div这是div这是div这是div这是div</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这是span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>或者是设置height的属性值是自动的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  div &#123;<br>    <span class="hljs-attr">width</span>: 100px;<br>    height: auto;<br>    border: 1px solid red;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h3 id="居中-1"><a href="#居中-1" class="headerlink" title="居中"></a>居中</h3><p>元素居中或者是文字居中</p><h4 id="文本水平居中"><a href="#文本水平居中" class="headerlink" title="文本水平居中"></a>文本水平居中</h4><p>水平居中：<code>text-align:center</code><br>不论单行或者多行都可以设置</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    div &#123;<br>      <span class="hljs-attr">width</span>: 200px;<br>      height: 200px;<br>      border: 1px solid red;<br>      text-align: center;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是div这是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="文本垂直居中"><a href="#文本垂直居中" class="headerlink" title="文本垂直居中"></a>文本垂直居中</h4><h5 id="单行文本垂直居中"><a href="#单行文本垂直居中" class="headerlink" title="单行文本垂直居中"></a>单行文本垂直居中</h5><p>让文字行高line-height等于盒子高度height</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    div &#123;<br>      <span class="hljs-attr">width</span>: 200px;<br>      height: 200px;<br>      border: 1px solid red;<br>      line-height: 200px;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h5 id="多行文本垂直居中"><a href="#多行文本垂直居中" class="headerlink" title="多行文本垂直居中"></a>多行文本垂直居中</h5><p>让元素高度自适应或者正好等于多行文字的高度，设置元素内边距上下值相同</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  div &#123;<br>    <span class="hljs-attr">width</span>: 200px;<br>    padding: 20px <span class="hljs-number">0</span>;<br>    border: 1px solid red;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    这是div这是div这是div这是div这是div这是div</span><br><span class="xml">    这是div这是div这是div这是div这是div</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="元素垂直居中"><a href="#元素垂直居中" class="headerlink" title="元素垂直居中"></a>元素垂直居中</h4><p>一个元素内部嵌套的子元素，在父元素中居中<br>垂直居中：与多行文字类似，让父元素高度自适应，子元素高度自动撑开父级的高度，再给父元素设置相同的上下边距</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  .box &#123;<br>    <span class="hljs-attr">width</span>: 200px;<br>    padding: 20px <span class="hljs-number">0</span>;<br>    border: 1px solid #<span class="hljs-number">000</span>;<br>  &#125;<br>  .demo &#123;<br>    <span class="hljs-attr">width</span>: 100px;<br>    height: 100px;<br>    border: 1px solid #<span class="hljs-number">000</span>;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="元素水平居中"><a href="#元素水平居中" class="headerlink" title="元素水平居中"></a>元素水平居中</h4><p>针对类似<code>&lt;div&gt;</code>样式上必须独占一行的盒子，如果<strong>子盒子宽度低于父盒子宽度</strong>，可以<strong>设置子盒子的 margin 值，水平方向的值都设置为 auto</strong>。<br>原因：auto只在水平方向有作用，水平方向的 margin 如果设置为 auto，边距会自动无限增大，直到撑满整个父元素除了子元素宽度之外剩余的区域，如果两个水平方向都是 auto，两边都要无限大，只能达到一个平衡，两边距离相同，导致盒子居中。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  .box &#123;<br>    <span class="hljs-attr">width</span>: 200px;<br>    padding: 20px <span class="hljs-number">0</span>;<br>    border: 1px solid #<span class="hljs-number">000</span>;<br>  &#125;<br>  .demo &#123;<br>    <span class="hljs-attr">width</span>: 100px;<br>    height: 100px;<br>    margin: <span class="hljs-number">0</span> auto;<br>    border: 1px solid #<span class="hljs-number">000</span>;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="父子盒模型"><a href="#父子盒模型" class="headerlink" title="父子盒模型"></a>父子盒模型</h3><p>一般情况下，一个父元素内部可以放一个或多个子元素，而且多个子元素要排成一行显示，必须保证父元素的宽度一定要足够(不考虑溢出情况)，需要遵循一个设置尺寸的规律：<strong>所有子元素的宽度加在一起不能大于父元素的宽度width</strong>。<br><strong>父元素的width ≥ 所有子元素 width + padding + border + margin</strong><br>如果不满足条件：要么多余的子元素掉下来不能在一排，要么溢出父元素</p><h4 id="多余的子元素掉下来不能在一排"><a href="#多余的子元素掉下来不能在一排" class="headerlink" title="多余的子元素掉下来不能在一排"></a>多余的子元素掉下来不能在一排</h4><p><a href="http://imgs.jackhoo.icu/%E7%9B%92%E5%AD%90%E6%BA%A2%E5%87%BA1.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646450796031-87b1915a-6d76-49b6-a80d-f8dc257ca61e.png#clientId=u954de64b-5df0-4&crop=0.007&crop=0&crop=1&crop=1&from=paste&height=682&id=u50bd830a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=549&originWidth=823&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3204&status=done&style=none&taskId=ucf2acde9-6714-4483-a8ea-3b202763c1d&title=&width=1022" alt="image.png"></a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  * &#123;<br>    <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>    padding: <span class="hljs-number">0</span>;<br>  &#125;<br>  .box1 &#123;<br>    <span class="hljs-attr">width</span>: 150px;<br>    height: 50px;<br>    border: 1px solid red;<br>  &#125;<br>  .box1 p &#123;<br>    <span class="hljs-attr">float</span>: left;<br>    width: 50px;<br>    height: 50px;<br>    margin-right: 10px;<br>    background-color: pink;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="溢出父元素"><a href="#溢出父元素" class="headerlink" title="溢出父元素"></a>溢出父元素</h4><p><a href="http://imgs.jackhoo.icu/%E7%9B%92%E5%AD%90%E6%BA%A2%E5%87%BA2.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646451016937-83fc1fac-ab54-4722-bed8-b660251ee36b.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=469&id=ub582bfeb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=375&originWidth=399&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1497&status=done&style=none&taskId=u69f91b8a-12f4-4569-be64-9702be5dca9&title=&width=498.74999256804597" alt="image.png"></a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  * &#123;<br>    <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>    padding: <span class="hljs-number">0</span>;<br>  &#125;<br>  .box2 &#123;<br>    <span class="hljs-attr">width</span>: 50px;<br>    height: 50px;<br>    border: 10px solid red;<br>  &#125;<br>  .box2 p &#123;<br>    <span class="hljs-attr">width</span>: 50px;<br>    height: 50px;<br>    border: 30px solid black;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="特殊情况：盒模型自动内减"><a href="#特殊情况：盒模型自动内减" class="headerlink" title="特殊情况：盒模型自动内减"></a>特殊情况：盒模型自动内减</h4><p>父子盒模型中，只有一个子元素，且子元素是类似<code>&lt;div&gt;</code> 标签必须占一行的。<br>不设置子元素的 width 属性，子元素的 width 属性值会自动加载父级元素的 width。<br>如果同时设置了子元素水平方向的 padding 和 border、margin，不需要手动去进行内减，子元素的 width 会自动收缩尺寸。<br>子元素所有的水平方向的位置所有属性的加和等于父元素的 width。</p><h3 id="margin塌陷"><a href="#margin塌陷" class="headerlink" title="margin塌陷"></a>margin塌陷</h3><p>margin塌陷现象：在<strong>垂直方向</strong>如果有两个元素的外边距有相遇的，浏览器中加载的真正的外边距不是两个间距的加和，而是两个边距中值较大的，边距值小的塌陷到了边距值大的值内部。</p><h4 id="两个元素垂直margin塌陷"><a href="#两个元素垂直margin塌陷" class="headerlink" title="两个元素垂直margin塌陷"></a>两个元素垂直margin塌陷</h4><p><a href="http://imgs.jackhoo.icu/margin%E5%9E%82%E7%9B%B4%E5%A1%8C%E9%99%B7.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646453633364-130889ab-a4d1-4638-8158-2534652049c7.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=607&id=u9dea54fa&margin=%5Bobject%20Object%5D&name=image.png&originHeight=486&originWidth=633&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24047&status=done&style=none&taskId=u28c142d8-52fe-461a-9972-ec917ae964e&title=&width=791.2499882094564" alt="image.png"></a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">    * &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    .box1 &#123;<br>      <span class="hljs-attr">width</span>: 50px;<br>      height: 50px;<br>      margin-bottom: 10px;<br>      border: 1px solid red;<br>    &#125;<br>    .box2 &#123;<br>      <span class="hljs-attr">width</span>: 50px;<br>      height: 50px;<br>      margin-top: 50px;<br>      border: 1px solid black;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="父子元素margin塌陷"><a href="#父子元素margin塌陷" class="headerlink" title="父子元素margin塌陷"></a>父子元素margin塌陷</h4><p>父子元素之间也会出现 margin 塌陷，父元素和子元素都设置了同方向的margin-top 值，两个属性之间没有其他的内容进行隔离，导致两个属性相遇，发生margin塌陷。<br>如果父盒子没有设置margin-top值，子盒子设置了，也会发生margin塌陷<br><a href="http://imgs.jackhoo.icu/%E7%88%B6%E5%AD%90margin%E5%A1%8C%E9%99%B7.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646453868598-83e050eb-4708-400b-822e-75456db2e8e7.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=467&id=u871e2a85&margin=%5Bobject%20Object%5D&name=image.png&originHeight=374&originWidth=634&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21103&status=done&style=none&taskId=udbeb5c48-e72c-4bda-9ea9-dda57cb33cc&title=&width=792.49998819083" alt="image.png"></a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>   * &#123;<br>     <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>     padding: <span class="hljs-number">0</span>;<br>   &#125;<br>   .box3 &#123;<br>     <span class="hljs-attr">width</span>: 50px;<br>     height: 50px;<br>     margin-top: 10px;<br>     background-color: pink;<br>   &#125;<br>   .box3 p &#123;<br>     <span class="hljs-attr">width</span>: 20px;<br>     height: 20px;<br>     margin-top: 50px;<br>     background-color: red;<br>   &#125;<br> &lt;/style&gt;<br> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="解决margin塌陷问题"><a href="#解决margin塌陷问题" class="headerlink" title="解决margin塌陷问题"></a>解决margin塌陷问题</h4><p>margin塌陷问题只会出现在垂直方向上，水平方向不会</p><h5 id="同级元素"><a href="#同级元素" class="headerlink" title="同级元素"></a>同级元素</h5><p>如果两个元素垂直方向有间距，只需要都设置给一个元素，不要进行拆分</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  * &#123;<br>    <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>    padding: <span class="hljs-number">0</span>;<br>  &#125;<br><br>  .box3 &#123;<br>    <span class="hljs-attr">width</span>: 50px;<br>    height: 50px;<br>    background-color: pink;<br>  &#125;<br>  .box3 p &#123;<br>    <span class="hljs-attr">width</span>: 20px;<br>    height: 20px;<br>    margin-top: 10px;<br>    background-color: red;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h5 id="父子元素"><a href="#父子元素" class="headerlink" title="父子元素"></a>父子元素</h5><h6 id="用父元素的border或者padding隔开-不推荐"><a href="#用父元素的border或者padding隔开-不推荐" class="headerlink" title="用父元素的border或者padding隔开(不推荐)"></a>用父元素的border或者padding隔开(不推荐)</h6><p>让两个边距不要相遇，中间可以使用父元素border或者padding将边距分开<br>(不推荐)因为会增加额外的边距或者是高度重新计算</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  * &#123;<br>    <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>    padding: <span class="hljs-number">0</span>;<br>  &#125;<br><br>  .box3 &#123;<br>    <span class="hljs-attr">width</span>: 50px;<br>    height: 50px;<br>    border: 1px solid red;<br>    <span class="hljs-comment">/* padding-top: 10px; */</span><br>    background-color: pink;<br>  &#125;<br>  .box3 p &#123;<br>    <span class="hljs-attr">width</span>: 20px;<br>    height: 20px;<br>    margin-top: 10px;<br>    background-color: red;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h6 id="用父元素的padding挤出来-推荐"><a href="#用父元素的padding挤出来-推荐" class="headerlink" title="用父元素的padding挤出来(推荐)"></a>用父元素的padding挤出来(推荐)</h6><p>父子盒模型之间的距离不要用儿子的margin去隔出来，而是用父级的padding挤出来</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  * &#123;<br>    <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>    padding: <span class="hljs-number">0</span>;<br>  &#125;<br><br>  .box3 &#123;<br>    <span class="hljs-attr">width</span>: 50px;<br>    height: 40px;<br>    padding-top: 10px;<br>    background-color: pink;<br>  &#125;<br>  .box3 p &#123;<br>    <span class="hljs-attr">width</span>: 20px;<br>    height: 20px;<br>    background-color: red;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h2 id="标准文档流"><a href="#标准文档流" class="headerlink" title="标准文档流"></a>标准文档流</h2><p>标准文档流，指的是元素排版布局过程中，元素会默认自动从左往右，从上往下的流式排列方式。前面内容发生了变化，后面的内容位置也会随着发生变化。<br>HTML就是一种标准文档流文件。<br>HTML中的标准文档流特点通过两种方式体现：微观现象和元素等级。</p><h3 id="微观现象"><a href="#微观现象" class="headerlink" title="微观现象"></a>微观现象</h3><ol><li>空白折叠现象</li><li>文字类的元素如果排在一行会出现一种高低不齐、底边对齐效果</li><li>自动换行，元素内一行内容写满元素的width时，会自动进行换行<h3 id="元素等级"><a href="#元素等级" class="headerlink" title="元素等级"></a>元素等级</h3>在标准流中，大部分元素是区分等级的，习惯将元素划分为几种常见的加载级别：</li></ol><p><strong>块级元素、行内元素、行内块元素</strong><br><strong>​</strong></p><p>块级元素：大部分容器级标签包括p标签都是块级元素，比如<code>&lt;div&gt;</code>、<code>&lt;h1&gt;</code>等。<br>行内元素：大部分的文本级标签，比如<code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;b&gt;</code>等。<br>行内块元素：比如<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>等。<br>各种等级的元素有自己的加载特点。</p><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><ol><li><p>块级元素可以设置宽高，在浏览器中正常加载。</p></li><li><p>块级元素必须独占一行，不能与其他任何标签并排一行。</p></li><li><p>块级元素如果不设置宽度，会自动撑满父级的 width 区域；高度不首容自动撑开高度。</p><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4></li><li><p>行内元素不能正常加载宽高属性，其他的盒模型属性虽然能够设置，但是容易出现加载问题。</p></li><li><p>行内元素可以与其他的行内或行内块元素并排一行显示。</p></li><li><p>行内元素不论是否设置宽高，宽度和高度都只能被内容自动撑开。</p><h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4></li><li><p>行内块元素可以设置宽度和高度。</p></li><li><p>行内块元素可以与其他的行内或行内块并排一行显示。</p></li><li><p>行内块元素如果不设置宽高，要么以原始尺寸加载要么被内容自动撑开。</p></li><li><p>行内块依旧具有标准流的微观性质，例如空白折叠现象。</p><h3 id="显示模式-display"><a href="#显示模式-display" class="headerlink" title="显示模式 display"></a>显示模式 display</h3><p>标准文档流的元素有自己默认的浏览器加载模式，但是加载模式不是一成不变的，后期可以通过display属性改成一个标签的显示模式<br>属性值：元素根据属性值不同，可以加载对应元素等级的显示模式的特点</p><h4 id="属性值-9"><a href="#属性值-9" class="headerlink" title="属性值"></a>属性值</h4><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>block</td><td>表示元素要以块级元素模式加载，具备块级特点</td></tr><tr><td>inline</td><td>表示元素要以行内元素模式加载，具备行内特点</td></tr><tr><td>inline-block</td><td>表示标签要以行内块模式加载，具备行内块特点</td></tr><tr><td>none</td><td>表示标签及内部内容直接隐藏，让出原有标准流的位置</td></tr></tbody></table></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> &lt;style&gt;<br>    div &#123;<br>      <span class="hljs-attr">display</span>: inline;<br>      width: 100px;<br>      height: 50px;<br>      background-color: pink;<br>    &#125;<br>    span &#123;<br>      <span class="hljs-attr">display</span>: block;<br>      width: 100px;<br>      height: 50px;<br>      background-color: aqua;<br>    &#125;<br>    p &#123;<br>      <span class="hljs-attr">display</span>: inline-block;<br>      width: 100px;<br>      height: 50px;<br>      background-color: red;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h2 id="脱离标准流"><a href="#脱离标准流" class="headerlink" title="脱离标准流"></a>脱离标准流</h2><p>display 属性更改的显示模式并没有改变标准流本质性质，页面还是只能从上往下加载，存在空白折叠现象等微观性质。要想实现更多的界面布局效果需要脱离标准流的限制。<br>标签元素脱离标准流的方法包括：<strong>浮动、绝对定位、固定定位</strong>。</p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>浮动是一种非常重要的布局属性。<br>属性名：float，漂流、浮动的意思。<br>属性值：left 左浮动、right 右浮动<br>作用：让元素脱离标准流，同一级的浮动的可以并排在一排显示。</p><h4 id="浮动的性质"><a href="#浮动的性质" class="headerlink" title="浮动的性质"></a>浮动的性质</h4><h5 id="浮动的元素脱离标准流"><a href="#浮动的元素脱离标准流" class="headerlink" title="浮动的元素脱离标准流"></a>浮动的元素脱离标准流</h5><p>标准文档流特点：区分行块。</p><ul><li>块级元素：可以设置宽高，必须独占一行。</li><li>行内元素：不能设置宽高，可以并排一行。</li></ul><p>​</p><p>浮动的元素脱离了标准流的限制，具备行块二象性，浮动的元素可以设置宽高，还可以并排一行，而且不会有空白折叠现象，如果元素不设置宽高，可以被元素内容自动撑开。<br>​</p><h5 id="浮动的元素依次贴边"><a href="#浮动的元素依次贴边" class="headerlink" title="浮动的元素依次贴边"></a>浮动的元素依次贴边</h5><p>浮动属性值：left、right。<br>浮动方向设置不同，进行布局时，加载位置方向不同。<br>以left为例：父元素宽度足够，所有子元素会按照HTML书写顺序，依次向左进行贴边，父元素左边 &lt;- 子元素1 &lt;- 子元素2 &lt;- 子元素3 &lt;- 子元素4。<br>​</p><p>父元素宽度足够，并排一排<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A81.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646465271486-702a2445-3885-4ec0-8652-3d1566b30c7f.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=525&id=ud9712848&margin=%5Bobject%20Object%5D&name=image.png&originHeight=420&originWidth=420&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1735&status=done&style=none&taskId=u332e0a39-a2e4-44ce-9a41-9f5acfb80fb&title=&width=524.9999921768905" alt="image.png"></a><br>父元素宽度如果不够<br>如果不能放下一个子元素4，那么子元素4在贴边时，会跳过上一个子元素3，向更上一个子元素2进行贴边，<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A82.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646465587808-afc85bab-9bec-4c41-ba00-d1d4cf330034.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=539&id=u06b2f047&margin=%5Bobject%20Object%5D&name=image.png&originHeight=431&originWidth=435&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2334&status=done&style=none&taskId=u0044bc30-6836-43f9-937e-972645b50b3&title=&width=543.7499918974937" alt="image.png"></a><br>如果子元素2后面位置不够，继续跳过子元素2向前面的子元素1进行贴边。<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A83.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646465685411-8c93e893-b200-4097-abae-04d0f7f06a07.png#clientId=u954de64b-5df0-4&crop=0.011&crop=0&crop=1&crop=1&from=paste&height=539&id=u44284ac5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=436&originWidth=449&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2409&status=done&style=none&taskId=ub0b86b5e-24b1-479d-942b-d125b8aee89&title=&width=555" alt="image.png"></a><br>如果子元素4在跳过子元素3向更前面的子元素2贴边时，子元素2的高度不高于子元素3，子元素2没有延伸出一个高度的边让子元素4贴边，那么子元素4就会跳过子元素2向子元素1进行贴边。<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A84.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646465972729-f9838dad-2b17-47b7-93d0-2b34eb1b74c1.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=530&id=u01ab5f8d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=424&originWidth=423&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2277&status=done&style=none&taskId=ufac91212-c55a-4748-ba30-ddabf11608e&title=&width=528.7499921210111" alt="image.png"></a><br>如果贴边的这个子元素4宽度小于子元素2，子元素2的高度低于子元素1和子元素3，形成一个凹陷，子元素4会受前面子元素3高度影响，不会出现钻空现象。<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A85.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646466108645-497f367a-3a3b-4563-a271-e62c3759c963.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=534&id=u7e03cfdf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=427&originWidth=421&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2318&status=done&style=none&taskId=u2cf20a91-a79d-4883-9d57-0f1917169c3&title=&width=526.249992158264" alt="image.png"></a><br>如果子元素1后面的距离也放不下子元素4，子元素4最终会贴到父元素左边，<br>如果子元素4的宽度超过了父元素，只会出现溢出现象。<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A86.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646466360509-bedda565-e5f3-4423-9420-2af278ea6b79.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=535&id=uc5c144f9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=428&originWidth=433&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2318&status=done&style=none&taskId=u61febe08-e2e3-4ac4-af18-bac28676b00&title=&width=541.2499919347466" alt="image.png"></a><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A87.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646466403024-62abbcd9-c644-41fc-a5c0-c50f6faa154e.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=564&id=u9a285922&margin=%5Bobject%20Object%5D&name=image.png&originHeight=451&originWidth=498&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2540&status=done&style=none&taskId=u33d13965-4eca-4226-b407-42eed8a1ce3&title=&width=622.4999907240273" alt="image.png"></a></p><blockquote><p>右浮动和左浮动规则一致</p></blockquote><h5 id="浮动依次贴边应用"><a href="#浮动依次贴边应用" class="headerlink" title="浮动依次贴边应用"></a>浮动依次贴边应用</h5><p>利用浮动依次贴边的性质，用列表结构模拟平均分布的表格布局结构<br>边框是利用不同的背景色，然后父元素的padding和子元素margin挤出来的空隙</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    ul &#123;<br>      list-style: none;<br>      width: 408px;<br>      height: 126px;<br>      padding-top: 2px;<br>      padding-left: 2px;<br>      background-color: #ccc;<br>    &#125;<br>    ul li &#123;<br>      <span class="hljs-attr">float</span>: left;<br>      width: 100px;<br>      height: 40px;<br>      margin-right: 2px;<br>      margin-bottom: 2px;<br>      background-color: skyblue;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><blockquote><p>注意：同一个盒子中，可以有左浮动和右浮动的子盒子并存，<br>子盒子会根据浮动方向，向上一个同方向的子盒子进行贴边，如果空间不够，也会发生之前依次贴边的各种情况。</p></blockquote><p><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A88.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646468276022-d3d38722-bdb6-484a-af12-a920613866a3.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=299&id=u7543b15a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=239&originWidth=1034&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8017&status=done&style=none&taskId=ud89a6c8a-065e-4132-8fab-30335298b4d&title=&width=1292.4999807402494" alt="image.png"></a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    ul &#123;<br>      list-style: none;<br>      width: 580px;<br>      height: 126px;<br>      padding-top: 2px;<br>      padding-left: 2px;<br>      background-color: #ccc;<br>    &#125;<br>    ul li &#123;<br>      <span class="hljs-attr">float</span>: left;<br>      width: 100px;<br>      height: 40px;<br>      margin-right: 2px;<br>      margin-bottom: 2px;<br>      background-color: skyblue;<br>    &#125;<br>    .fr &#123;<br>      <span class="hljs-attr">float</span>: right;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fr&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fr&quot;</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fr&quot;</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fr&quot;</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>贴边性质常见应用：</p><ol><li>表格</li><li>导航栏</li><li>电商或者企业网站布局<h5 id="浮动元素没有margin塌陷"><a href="#浮动元素没有margin塌陷" class="headerlink" title="浮动元素没有margin塌陷"></a>浮动元素没有margin塌陷</h5>margin塌陷出现在标准流中，浮动元素以及脱离了标准流，不再具有margin塌陷现象<h5 id="浮动的元素让出标准流位置"><a href="#浮动的元素让出标准流位置" class="headerlink" title="浮动的元素让出标准流位置"></a>浮动的元素让出标准流位置</h5>元素浮动之后，脱离了标准流，会将原来占有的标准流位置让给后面的一个同一级元素<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A89.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646469411710-7ba1a360-e7c2-4fca-b6a1-012c76b412a4.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=457&id=u886f8366&margin=%5Bobject%20Object%5D&name=image.png&originHeight=366&originWidth=370&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6399&status=done&style=none&taskId=u05b3f98b-8017-46f2-97cc-1cd37c90647&title=&width=462.49999310821306" alt="image.png"></a><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    .ps1 &#123;<br>      <span class="hljs-attr">float</span>: left;<br>      width: 100px;<br>      height: 100px;<br>      background-color: skyblue;<br>    &#125;<br>    .ps2 &#123;<br>      <span class="hljs-attr">width</span>: 200px;<br>      height: 200px;<br>      background-color: yellow;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ps1&quot;</span>&gt;</span>1浮动<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ps2&quot;</span>&gt;</span>2不浮动<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure>由于浏览器中有兼容性，不会使用这种属性制作压盖效果，压盖一般用定位<br>如果没有特殊需求，不允许一个父元素中的子元素有的浮动有的不浮动，同级元素中有一个浮动其他的也要浮动。<h5 id="浮动有字围现象"><a href="#浮动有字围现象" class="headerlink" title="浮动有字围现象"></a>浮动有字围现象</h5>与前面压盖效果结构类似，同级元素中前面的元素浮动，后面的元素不浮动，不浮动的元素内部还有一些文字，浮动的蓝盒子会压盖住黄盒子的一部分，但是文字内容不会被盖住，黄盒子中的文字会让开蓝盒子位置，围绕它进行加载。<h4 id="浮动的问题"><a href="#浮动的问题" class="headerlink" title="浮动的问题"></a>浮动的问题</h4><h5 id="浮动的子元素是不会撑高父元素"><a href="#浮动的子元素是不会撑高父元素" class="headerlink" title="浮动的子元素是不会撑高父元素"></a>浮动的子元素是不会撑高父元素</h5>标准流中的元素，不设置高度的情况下，都能被内部的标准流元素自动撑高。<br>如果内部的子元素进行了浮动，浮动的子元素是撑不高标准流父亲的。<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A810.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646470183019-f22db31d-fea2-4b23-a371-8f1d4db654d1.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=246&id=u34c03634&margin=%5Bobject%20Object%5D&name=image.png&originHeight=197&originWidth=1326&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1697&status=done&style=none&taskId=uc3978a1a-968d-43d9-b97f-dc9967586ad&title=&width=1657.4999753013258" alt="image.png"></a><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    .box &#123;<br>      <span class="hljs-attr">width</span>: 1000px;<br>      border: 10px solid red;<br>    &#125;<br>    .box p &#123;<br>      <span class="hljs-attr">float</span>: left;<br>      width: 100px;<br>      height: 100px;<br>      margin-right: 10px;<br>      background-color: skyblue;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h5 id="父元素无高度，浮动元素可能会影响后面的浮动贴边"><a href="#父元素无高度，浮动元素可能会影响后面的浮动贴边" class="headerlink" title="父元素无高度，浮动元素可能会影响后面的浮动贴边"></a>父元素无高度，浮动元素可能会影响后面的浮动贴边</h5>父元素没有高度，会影响后面元素的标准流位置，如果浮动的子元素足够高时，有可能影响到后面浮动元素的贴边<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A811.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646470601552-4fbe92f9-9e2f-4a89-9263-98f5f6753922.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=294&id=u093ede69&margin=%5Bobject%20Object%5D&name=image.png&originHeight=235&originWidth=1292&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1931&status=done&style=none&taskId=u5493f7bb-deb1-40f7-8f87-7b3b860192b&title=&width=1614.9999759346251" alt="image.png"></a><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    .box &#123;<br>      <span class="hljs-attr">width</span>: 1000px;<br>      border: 10px solid red;<br>    &#125;<br>    .box p &#123;<br>      <span class="hljs-attr">float</span>: left;<br>      width: 100px;<br>      height: 100px;<br>      margin-right: 10px;<br>      background-color: skyblue;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;body&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><h5 id="给父元素添加合适的高度"><a href="#给父元素添加合适的高度" class="headerlink" title="给父元素添加合适的高度"></a>给父元素添加合适的高度</h5>给标准流的父元素强制给一个合适的高度<br>解决：父元素有了高度，前面的浮动不能影响后面元素的标准流位置和贴边。<br>问题：父元素高度不是自适应，一旦子元素高度变化，问题可能再次出现。<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A812.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646470791952-caadea17-f8cd-4fec-bbf0-ccef0cba6b23.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=396&id=u7e9b1bd9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=317&originWidth=1280&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2515&status=done&style=none&taskId=u7e48ba07-978b-4814-9014-a0a2750ae85&title=&width=1599.9999761581425" alt="image.png"></a><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    .box &#123;<br>      <span class="hljs-attr">width</span>: 1000px;<br>      height: 100px;<br>      border: 10px solid red;<br>    &#125;<br>    .box p &#123;<br>      <span class="hljs-attr">float</span>: left;<br>      width: 100px;<br>      height: 100px;<br>      margin-right: 10px;<br>      background-color: skyblue;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h5 id="父元素使用clear属性"><a href="#父元素使用clear属性" class="headerlink" title="父元素使用clear属性"></a>父元素使用clear属性</h5>clear，清除。<br>作用：清除标签元素自身受到的前面的浮动元素的影响。<br>属性值：left 清除前面左浮动带来的影响、right 清除前面右浮动带来的影响、both 清除前面所有浮动带来的影响<br>给标准流父元素添加 clear 属性，父元素不受前面浮动影响，不会再占有位置。<figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;<br>  <span class="hljs-attribute">clear</span>: both;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;<br>&#125;<br></code></pre></div></td></tr></table></figure><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A813.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646471193855-867703e5-ad82-49ae-9363-d2d47316064c.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=384&id=u775c50e2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=307&originWidth=1278&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2521&status=done&style=none&taskId=ua1621da1-7715-4236-9a30-85cc3b2343f&title=&width=1597.4999761953954" alt="image.png"></a><br>解决：浮动元素影响后面元素标准流位置和贴边。<br>问题：父元素不能高度自适应，两个父元素之间如果有 margin 效果不正确。<h5 id="隔墙法"><a href="#隔墙法" class="headerlink" title="隔墙法"></a>隔墙法</h5>隔墙法有<strong>外墙法</strong>和<strong>内墙法</strong><h6 id="外墙法："><a href="#外墙法：" class="headerlink" title="外墙法："></a>外墙法：</h6>在两个大的父盒子之间添加一个空的div标签，标签上带有<code>clear:both</code>属性<br>解决：浮动影响后面元素标准流位置和贴边，模拟父元素间的距离。<br>问题：父元素没有高度自适应。<a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E5%A4%96%E5%A2%99%E6%B3%95.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646471586065-77145a81-142f-4e45-bbb5-5339a70eb77e.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=486&id=uf716bafd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=389&originWidth=1282&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3128&status=done&style=none&taskId=ufa0f93b8-d7a1-4651-a118-27c36f4d87e&title=&width=1602.4999761208896" alt="image.png"></a><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    .box &#123;<br>      <span class="hljs-attr">width</span>: 1000px;<br>      border: 10px solid red;<br>    &#125;<br>    .box p &#123;<br>      <span class="hljs-attr">float</span>: left;<br>      width: 100px;<br>      height: 100px;<br>      margin-right: 10px;<br>      background-color: skyblue;<br>    &#125;<br>    .cl &#123;<br>      <span class="hljs-attr">clear</span>: both;<br>      height: 10px;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h6 id="内墙法：-推荐使用"><a href="#内墙法：-推荐使用" class="headerlink" title="内墙法：(推荐使用)"></a>内墙法：(推荐使用)</h6>在元素内部，所有的浮动子元素后面添加一个空的div元素，标签高度为0，添加clear属性<br>解决：父元素高度自适应，浮动影响后面的元素位置和贴边。<br>缺点：浮动是 css 样式属性带来的问题，内墙法使用 HTML 结构去辅助解决问题，<br>如果页面中浮动元素很多，需要添加多个没有语义的空标签，造成HTML结构的冗余<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E5%86%85%E5%A2%99%E6%B3%95.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646482962760-c6c8804d-9a33-4603-92b5-5a6a7aa2a3c2.png#clientId=u954de64b-5df0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=401&id=ua5510d83&margin=%5Bobject%20Object%5D&name=image.png&originHeight=321&originWidth=1285&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2568&status=done&style=none&taskId=ue15dbd0f-719d-457e-a842-7d6b5d02780&title=&width=1606.2499760650103" alt="image.png"></a><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;<br>      padding: <span class="hljs-number">0</span>;<br>    &#125;<br>    .box &#123;<br>      <span class="hljs-attr">width</span>: 1000px;<br>      border: 10px solid red;<br>      margin-bottom: 10px;<br>    &#125;<br>    .box p &#123;<br>      <span class="hljs-attr">float</span>: left;<br>      width: 100px;<br>      height: 100px;<br>      margin-right: 10px;<br>      background-color: skyblue;<br>    &#125;<br>    .cl &#123;<br>      <span class="hljs-attr">clear</span>: both;<br>    &#125;<br>  &lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h5 id="伪类-推荐使用"><a href="#伪类-推荐使用" class="headerlink" title="伪类(推荐使用)"></a>伪类(推荐使用)</h5>本质是使用伪类方法利用css代码书写一堵内墙。<br>伪类选择器：通过选中的标签添加伪类，去选中标签的某个状态或位置。<br>:after：这个伪类表示选中的是某个标签内部的最后的位置。<br>书写方法：前面必须加普通的选择器，后面连续书写伪类名称。<br>将伪类添加给一个选中父盒子的选择器后面，一般给需要清除浮动的父盒子设置一个clearfix的类名。<br>解决：父元素高度自适应，浮动影响后面元素位置和贴边<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E5%86%85%E5%A2%99%E6%B3%95.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646482962760-c6c8804d-9a33-4603-92b5-5a6a7aa2a3c2.png#crop=0&crop=0&crop=1&crop=1&from=url&id=uwyoi&margin=%5Bobject%20Object%5D&originHeight=321&originWidth=1285&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  * &#123;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;</span><br><span class="css">    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.clearfix</span>:after &#123;</span><br><span class="css">    content: <span class="hljs-string">&#x27;1&#x27;</span>; <span class="hljs-comment">/*添加一个文字内容*/</span></span><br><span class="css">    <span class="hljs-attribute">display</span>: block; <span class="hljs-comment">/*将文字转换为块级元素*/</span></span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">/* 将盒子高度固定为0，避免影响父盒子高度 */</span></span><br><span class="css">    <span class="hljs-attribute">clear</span>: both; <span class="hljs-comment">/* 清除前面浮动影响 */</span></span><br><span class="css">    <span class="hljs-attribute">visibility</span>: hidden; <span class="hljs-comment">/*将创建的元素占位并隐藏 */</span></span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box clearfix&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box clearfix&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h5 id="溢出隐藏-推荐使用"><a href="#溢出隐藏-推荐使用" class="headerlink" title="溢出隐藏(推荐使用)"></a>溢出隐藏(推荐使用)</h5>给内部有浮动子元素的父元素添加溢出隐藏 <code>overflow:hidden</code> 属性，可以解决浮动所有问题<br>元素没有高度时，如果同时设置了<code>overflow:hidden</code>，元素会自适应内容的高度<br><a href="http://imgs.jackhoo.icu/%E6%B5%AE%E5%8A%A8%E5%86%85%E5%A2%99%E6%B3%95.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1646482962760-c6c8804d-9a33-4603-92b5-5a6a7aa2a3c2.png#crop=0&crop=0&crop=1&crop=1&from=url&id=V17XA&margin=%5Bobject%20Object%5D&originHeight=321&originWidth=1285&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></a><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  * &#123;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;</span><br><span class="css">    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">    <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure>高度自适应原因：<br>一个元素没有设置高度，同时设置了溢出隐藏，浏览器在加载盒子尺寸时，遇到溢出隐藏浏览器会强制性去检索内部的子元素的高度，不论子元素是标准流还是浮动，都会将最高的高度作为父盒子高度加载。<br>浮动影响后面的元素:<br>父元素有了高度后，可以管理住内部所有的浮动元素，不会延伸到后面标签中影响贴边。<br>​</li></ol><p><strong>总结：</strong><br>如果父元素高度是固定的，建议使用height属性解决<br>如果父元素高度需要自适应，建议使用overflow属性解决浮动<br>​</p><h2 id="静态轮播图布局"><a href="#静态轮播图布局" class="headerlink" title="静态轮播图布局"></a>静态轮播图布局</h2><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">  &lt;style&gt;<br>    * &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-tag">ul</span>,<br>    <span class="hljs-selector-tag">ol</span> &#123;<br>      <span class="hljs-attribute">list-style</span>: none;<br>    &#125;<br>    <span class="hljs-selector-class">.lunbo</span> &#123;<br>      <span class="hljs-attribute">position</span>: relative;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">976px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">550px</span>;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#333</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> auto;<br>    &#125;<br>    <span class="hljs-selector-class">.lunbo</span> <span class="hljs-selector-class">.pic</span> <span class="hljs-selector-tag">li</span> &#123;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">880px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">550px</span>;<br>      <span class="hljs-attribute">display</span>: none;<br>    &#125;<br>    <span class="hljs-selector-class">.lunbo</span> <span class="hljs-selector-class">.pic</span> <span class="hljs-selector-class">.current</span> &#123;<br>      <span class="hljs-attribute">display</span>: block;<br>    &#125;<br>    <span class="hljs-selector-class">.lunbo</span> <span class="hljs-selector-class">.btn</span> <span class="hljs-selector-tag">a</span> &#123;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>      <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">20px</span>;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.3</span>);<br>      <span class="hljs-attribute">text-align</span>: center;<br>      <span class="hljs-attribute">font</span>: <span class="hljs-number">20px</span>/<span class="hljs-number">40px</span> <span class="hljs-string">&#x27;宋体&#x27;</span>;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>      <span class="hljs-attribute">text-decoration</span>: none;<br>      <span class="hljs-attribute">font-weight</span>: bolder;<br>    &#125;<br>    <span class="hljs-selector-class">.lunbo</span> <span class="hljs-selector-class">.btn</span> <span class="hljs-selector-class">.leftbtn</span> &#123;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">20px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.lunbo</span> <span class="hljs-selector-class">.btn</span> <span class="hljs-selector-class">.rightbtn</span> &#123;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">20px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.lunbo</span> <span class="hljs-selector-class">.btn</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.6</span>);<br>    &#125;<br>    <span class="hljs-comment">/* 下标 */</span><br>    <span class="hljs-selector-class">.lunbo</span> <span class="hljs-selector-class">.sub</span> &#123;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">20px</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">240px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.lunbo</span> <span class="hljs-selector-class">.sub</span> <span class="hljs-selector-tag">li</span> &#123;<br>      <span class="hljs-attribute">float</span>: left;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.3</span>);<br>      <span class="hljs-attribute">font</span>: <span class="hljs-number">12px</span>/<span class="hljs-number">20px</span> <span class="hljs-string">&#x27;微软雅黑&#x27;</span>;<br>      <span class="hljs-attribute">text-align</span>: center;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>      <span class="hljs-attribute">cursor</span>: pointer;<br>    &#125;<br>    <span class="hljs-selector-class">.lunbo</span> <span class="hljs-selector-class">.sub</span> <span class="hljs-selector-class">.current</span> &#123;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>    &#125;<br>  &lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>  &lt;!-- 轮播图大结构 --&gt;<br>  &lt;<span class="hljs-selector-tag">div</span> class=&quot;lunbo&quot;&gt;<br>    &lt;!-- 图片部分 --&gt;<br>    &lt;<span class="hljs-selector-tag">ul</span> class=&quot;pic&quot;&gt;<br>      &lt;<span class="hljs-selector-tag">li</span> class=&quot;current&quot;&gt;&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=&quot;/L1<span class="hljs-selector-class">.jpg</span>&quot; alt=&quot;&quot; /&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>      &lt;<span class="hljs-selector-tag">li</span>&gt;&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=&quot;/L2<span class="hljs-selector-class">.jpg</span>&quot; alt=&quot;&quot; /&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>      &lt;<span class="hljs-selector-tag">li</span>&gt;&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=&quot;/L3<span class="hljs-selector-class">.jpg</span>&quot; alt=&quot;&quot; /&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>      &lt;<span class="hljs-selector-tag">li</span>&gt;&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=&quot;/L4<span class="hljs-selector-class">.png</span>&quot; alt=&quot;&quot; /&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>      &lt;<span class="hljs-selector-tag">li</span>&gt;&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=&quot;/L5<span class="hljs-selector-class">.jpg</span>&quot; alt=&quot;&quot; /&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>      &lt;<span class="hljs-selector-tag">li</span>&gt;&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=&quot;/L6<span class="hljs-selector-class">.jpg</span>&quot; alt=&quot;&quot; /&gt;&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">ul</span>&gt;<br>    &lt;!-- 按钮 --&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;btn&quot;&gt;<br>      &lt;<span class="hljs-selector-tag">a</span> href=&quot;javascript:;&quot; class=&quot;leftbtn&quot;&gt;&amp;lt;&lt;/<span class="hljs-selector-tag">a</span>&gt;<br>      &lt;<span class="hljs-selector-tag">a</span> href=&quot;javascript:;&quot; class=&quot;rightbtn&quot;&gt;&amp;gt;&lt;/<span class="hljs-selector-tag">a</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;!-- 小圆点 --&gt;<br>    &lt;<span class="hljs-selector-tag">ol</span> class=&quot;sub&quot;&gt;<br>      &lt;<span class="hljs-selector-tag">li</span> class=&quot;current&quot;&gt;<span class="hljs-number">1</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>      &lt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-number">2</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>      &lt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-number">3</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>      &lt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-number">4</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>      &lt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-number">5</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>      &lt;<span class="hljs-selector-tag">li</span>&gt;<span class="hljs-number">6</span>&lt;/<span class="hljs-selector-tag">li</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">ol</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML基础</title>
    <link href="/2022/03/03/HTML%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/03/03/HTML%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><p>前端开发 Web Front-end development<br>前端开发：开发什么？<br>结构布局、样式呈现、页面的动态交互<br> js-脚本<br>数据交互处理、数据格式化渲染<br>​</p><p><strong>结构布局、样式呈现、行为逻辑</strong><br><strong>HTML        CSS          JavaScript</strong></p><h2 id="网页基本结构"><a href="#网页基本结构" class="headerlink" title="网页基本结构"></a>网页基本结构</h2><p><code>&lt;!DOCTYPE&gt;</code>文档类型声明<br><code>&lt;html&gt;</code>根标签<br><code>&lt;head&gt;</code>头部标签<br><code>&lt;body&gt;</code>主体标签</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><br></code></pre></div></td></tr></table></figure><h3 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h3><p>head标签一般包含 <code>title</code>、<code>meta</code><br>​</p><p>搜索引擎认知的优先级<br><code>title</code>&gt;<code>description</code>&gt;<code>keywords</code></p><h4 id="title"><a href="#title" class="headerlink" title="title"></a>title</h4><p>网页标题<br>主页：网站名称 + 主要的关键字/关键词的描述<br>详情页：详情名称+网站名称+简介<br>列表页：分类名称+关键字+网站名称<br>文章页：标题+分类+网站名称</p><h4 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h4><p>关键字一般100个字符，<br>网站名称+分类信息+网站名称</p><h4 id="description"><a href="#description" class="headerlink" title="description"></a>description</h4><p>描述信息，80-120汉字<br>综合title+keywords的简单描述</p><h3 id="编码字符集"><a href="#编码字符集" class="headerlink" title="编码字符集"></a>编码字符集</h3><p><code>GB2312</code>、<code>GBK</code>、<code>UTF-8</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;&lt;!--设置编码字符集--&gt;<br></code></pre></div></td></tr></table></figure><p><strong>GB2312</strong>：中国信息处理国家标准码（简体中文码）<br><strong>GBK</strong>：汉字扩展规范（扩大汉字收录、增加了繁体中文、增加了藏蒙维等少数民族文字）<br><strong>UTF-8</strong>：Unicode（万国码）<br>​</p><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>标签和里边的内容叫元素<br>元素分为：<strong>内联元素</strong>(行间/行内元素)、<strong>块级元素、内联块级元素</strong>(行内块元素)</p><h3 id="内联元素-inline-element"><a href="#内联元素-inline-element" class="headerlink" title="内联元素(inline element)"></a>内联元素(inline element)</h3><p><strong>内联元素不独占一行、无法定义高宽，</strong>设置margin，padding，<strong>但只在水平方向有效</strong><br>a – 锚点<br>abbr – 缩写<br>b – 粗体(不推荐)<br>big – 大字体<br>br – 换行<br>cite – 引用<br>code – 计算机代码(在引用源码的时候需要)<br>em – 强调<br>font – 字体设定(不推荐)<br>i – 斜体<br>img – 图片<br>input – 输入框<br>kbd – 定义键盘文本<br>label – 表格标签<br>q – 短引用<br>span – 常用内联容器，定义文本内区块<br>strong – 粗体强调<br>textarea – 多行文本输入框<br>sub -下角标签<br>sup - 上角标签</p><h3 id="块级元素-block-element"><a href="#块级元素-block-element" class="headerlink" title="块级元素(block element)"></a>块级元素(block element)</h3><p><strong>块级元素独占一行，可以定义宽高，</strong>可以设置margin，padding<br>address – 地址<br>blockquote – 块引用<br>dir – 目录列表<br>div – 常用块级容易，也是CSS layout的主要标签<br>dl – 定义列表<br>fieldset – form控制组<br>form – 交互表单<br>h1 – h6 标题<br>hr – 水平分隔线<br>menu – 菜单列表<br>ol – 有序表单<br>p – 段落<br>pre – 格式化文本<br>table – 表格<br>ul – 无序列表<br>li - 列表项目<br>dl / dt / dd / fieldset / legend</p><h3 id="内联块级元素-inline-block-element"><a href="#内联块级元素-inline-block-element" class="headerlink" title="内联块级元素(inline-block element)"></a>内联块级元素(inline-block element)</h3><p>内联块级元素，也叫行内块元素，它具有内联元素的部分特性之外，还具备了块级元素的部分特性。<br><strong>不独占一行，可以定义宽高</strong><br>内联块级元素比较少，它们分别是：img、input、td、select、textarea、label、iframe</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>和相邻的内联块级元素在一行上，但是中间会有空白的间隙</li><li>默认的宽度就是本身内容的宽度</li><li>高度，行高，内边距和外边距都可以设置<h4 id="内联块级元素的转换"><a href="#内联块级元素的转换" class="headerlink" title="内联块级元素的转换"></a>内联块级元素的转换</h4>通过设置CSS样式属性display:inline-block，可将内联元素，或块级元素转换成内联块级元素；<br>但如果是将元素转换成内联元素，则设置display:inline；<br>如果是将元素转换成块级元素，则设置display:block；<br>inline-block是css2.1新增的属性，对于IE7以下的版本不支持这个属性，所以需要一些兼容的办法。<h3 id="元素嵌套"><a href="#元素嵌套" class="headerlink" title="元素嵌套"></a>元素嵌套</h3>内联元素可以嵌套内联元素，<br>块级元素可以嵌套任何元素<blockquote><p>p标签不可以嵌套div，a标签不可以嵌套a标签</p></blockquote></li></ol><h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h2><p><a href="https://www.w3school.com.cn/tags/index.asp">HTML 标签参考手册</a><br>标签也有语义化标签和物理标签<br>推荐使用语义化标签 可读性强，可维护性强，有利于搜索引擎识别</p><h3 id="h1-标题标签"><a href="#h1-标题标签" class="headerlink" title="h1 标题标签"></a>h1 标题标签</h3><p>块级元素<br>标题标签，粗体，独占一行<br>h1-h6 层级和字体逐渐减小</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h1&gt;<span class="hljs-number">1</span>&lt;/h1&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="p-段落标签"><a href="#p-段落标签" class="headerlink" title="p  段落标签"></a>p  段落标签</h3><p>块级元素<br>段落标签，独占一行</p><h4 id="br-强行换行"><a href="#br-强行换行" class="headerlink" title="br  强行换行"></a>br  强行换行</h4><p>内联元素<br>是p标签中强行换行，单标签</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>  使用 br 元素<br>  <br><br>  在文本中<br>  <br><br>  换行。<br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h4 id="amp-nbsp-空格符"><a href="#amp-nbsp-空格符" class="headerlink" title="&amp;nbsp;空格符"></a><code>&amp;nbsp;</code>空格符</h4><p>空格符，特殊标记<br><code>style=&quot;text-indent: 2em&quot;</code>缩进可用样式来做</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p style=<span class="hljs-string">&quot;text-indent: 2em&quot;</span>&gt;段落标签&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p>在编译器内，文本的空格和换行都是文本分隔符</p><h3 id="strong-粗体-语义化标签"><a href="#strong-粗体-语义化标签" class="headerlink" title="strong 粗体(语义化标签)"></a>strong 粗体(语义化标签)</h3><p>内联元素<br>粗体(语义化标签)<br>相比物理标签，语义化标签语气更强</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;strong&gt;<span class="hljs-number">123</span>&lt;/strong&gt;<br></code></pre></div></td></tr></table></figure><h3 id="b-粗体-物理标签"><a href="#b-粗体-物理标签" class="headerlink" title="b 粗体(物理标签)"></a>b 粗体(物理标签)</h3><p>内联元素<br>粗体(物理标签) （少用）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;b&gt;<span class="hljs-number">123</span>&lt;/b&gt;<br></code></pre></div></td></tr></table></figure><h3 id="em-斜体标签-语义化标签"><a href="#em-斜体标签-语义化标签" class="headerlink" title="em 斜体标签(语义化标签)"></a>em 斜体标签(语义化标签)</h3><p>内联元素<br>斜体标签(语义化标签)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;em&gt;斜体&lt;/em&gt;<br></code></pre></div></td></tr></table></figure><h3 id="i-斜体标签-物理标签"><a href="#i-斜体标签-物理标签" class="headerlink" title="i 斜体标签(物理标签)"></a>i 斜体标签(物理标签)</h3><p>内联元素<br>斜体标签(物理标签)，常用于加图标</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;i&gt;斜体&lt;/i&gt;<br></code></pre></div></td></tr></table></figure><h3 id="del-delete标签"><a href="#del-delete标签" class="headerlink" title="del delete标签"></a>del delete标签</h3><p>内联元素<br>delete标签，在文本中间加横线</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;del&gt;<span class="hljs-keyword">delete</span>标签&lt;/del&gt;<br></code></pre></div></td></tr></table></figure><p><code>style=&quot;text-decoration: line-through&quot;</code>同样可以达到效果</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p style=<span class="hljs-string">&quot;text-decoration: line-through&quot;</span>&gt;我是p标签&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h3 id="ins-下划线标签"><a href="#ins-下划线标签" class="headerlink" title="ins 下划线标签"></a>ins 下划线标签</h3><p>内联元素<br>下划线标签</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ins&gt;下划线标签&lt;/ins&gt;<br></code></pre></div></td></tr></table></figure><p><code>style=&quot;text-decoration: underline&quot;</code>样式写下划线</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p style=<span class="hljs-string">&quot;text-decoration: underline&quot;</span>&gt;我是p标签&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h3 id="address-地址标签"><a href="#address-地址标签" class="headerlink" title="address 地址标签"></a>address 地址标签</h3><p>块级元素<br>地址标签，斜体(语义化，表示地址)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;address&gt;崇文路<span class="hljs-number">2</span>号&lt;/address&gt;<br></code></pre></div></td></tr></table></figure><h3 id="div-容器"><a href="#div-容器" class="headerlink" title="div 容器"></a>div 容器</h3><p>块级元素<br>容器、盒子，有高宽。网页的结构标签 布局标签</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div style=<span class="hljs-string">&quot;width: 100px; height: 100px; border: 1px solid #000&quot;</span>&gt;<br>  <span class="hljs-number">123</span><br>&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p>div中如果是中文会换行，如果是连续的字符串会超出容器，不会换行。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div style=<span class="hljs-string">&quot;width: 50px; height: 50px; border: 1px solid #000&quot;</span>&gt;<br>  afhiuagdiagwdiawdkawdkkhkuh<br>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50px; height: 50px; border: 1px solid #000&quot;</span>&gt;</span></span><br><span class="xml">  你好我是某</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p><a href="http://imgs.jackhoo.icu/869ecfb1-467d-46c6-a891-17c121c1891d.png"><img src="https://www.yuque.com/api/filetransfer/images?url=https://s2.loli.net/2022/03/02/JFujAhKVvEB3RI6.png&sign=b9ab6b6f37a92c82cbbb9864775f90f6069f05b8012f3060259896b09380ed62#crop=0&crop=0&crop=1&crop=1&from=url&height=268&id=lw7Pr&margin=%5Bobject%20Object%5D&originHeight=119&originWidth=289&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=652"></a><br>因为浏览器不认识中文字符，认识英文，以为是一个单词</p><h4 id="html实体字符"><a href="#html实体字符" class="headerlink" title="html实体字符"></a>html实体字符</h4><p><code>&lt;</code>    <code>&amp;lt;</code><br><code>&gt;</code>    <code>&amp;gt;</code><br>空格    <code>&amp;nbsp;</code><br><a href="https://www.w3school.com.cn/html/html_charset.asp">HTML 编码（字符集）</a></p><h3 id="hr-分隔符标签"><a href="#hr-分隔符标签" class="headerlink" title="hr 分隔符标签"></a>hr 分隔符标签</h3><p>块级元素</p><h3 id="img-图标标签"><a href="#img-图标标签" class="headerlink" title="img 图标标签"></a>img 图标标签</h3><p>内联元素、内联块级元素<br>图片标签，src属性添加路径，alt加载失败时的提示，title鼠标移动到图片上时的提示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;img src=<span class="hljs-string">&quot;&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span> title=<span class="hljs-string">&quot;&quot;</span> /&gt;<br></code></pre></div></td></tr></table></figure><h3 id="a-锚点-超链接标签"><a href="#a-锚点-超链接标签" class="headerlink" title="a 锚点/超链接标签"></a>a 锚点/超链接标签</h3><p>内联元素<br>锚点标签</p><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><p>href设置打开的链接，<code>target=&quot;_blank&quot;</code>设置在新的窗口打开</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;a href=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span> target=<span class="hljs-string">&quot;_blank&quot;</span>&gt;百度&lt;/a&gt;<br></code></pre></div></td></tr></table></figure><h4 id="打电话"><a href="#打电话" class="headerlink" title="打电话"></a>打电话</h4><p>移动端常用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;a href=<span class="hljs-string">&quot;tel:11&quot;</span>&gt;联系<span class="hljs-number">11</span>&lt;/a&gt;<br></code></pre></div></td></tr></table></figure><h4 id="发邮件"><a href="#发邮件" class="headerlink" title="发邮件"></a>发邮件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;a href=<span class="hljs-string">&quot;mailto:123@qq.com&quot;</span>&gt;发邮件&lt;/a&gt;<br></code></pre></div></td></tr></table></figure><h4 id="锚点定位"><a href="#锚点定位" class="headerlink" title="锚点定位"></a>锚点定位</h4><h4 id="协议限定符"><a href="#协议限定符" class="headerlink" title="协议限定符"></a>协议限定符</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;点击刷新&lt;/a&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>点击不刷新<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span>&gt;</span>点击不刷新<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(123)&quot;</span>&gt;</span>点击打开弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="sub-上角标标签"><a href="#sub-上角标标签" class="headerlink" title="sub 上角标标签"></a>sub 上角标标签</h3><p>内联元素</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>  上角标 <span class="hljs-number">10</span><br>  &lt;sup&gt;<span class="hljs-number">2</span>&lt;/sup&gt;<br>  文献<br>  &lt;sup&gt;[<span class="hljs-number">1</span>]&lt;/sup&gt;<br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h3 id="sup-下角标标签"><a href="#sup-下角标标签" class="headerlink" title="sup 下角标标签"></a>sup 下角标标签</h3><p>内联元素</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>  下角标 H<br>  &lt;sub&gt;<span class="hljs-number">2</span>&lt;/sub&gt;<br>  SO<br>  &lt;sub&gt;<span class="hljs-number">4</span>&lt;/sub&gt;<br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h3 id="span"><a href="#span" class="headerlink" title="span"></a>span</h3><p>内联元素<br>常用内联容器，定义文本内区块。<br>span标签可以在一段文本里强调或者区分其他文本。设置标识，快速获取到想要的内容</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>  <span class="hljs-number">123</span><br>  &lt;span id=<span class="hljs-string">&quot;111&quot;</span> style=<span class="hljs-string">&quot;color: red&quot;</span>&gt;<span class="hljs-number">111</span>&lt;/span&gt;<br>  <span class="hljs-number">12</span><br>&lt;/p&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">let</span> num = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;111&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-built_in">console</span>.log(num.innerText) <span class="hljs-comment">//111</span></span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="ol-有序列表"><a href="#ol-有序列表" class="headerlink" title="ol 有序列表"></a>ol 有序列表</h3><p>块级元素<br>type设置数字，字母，罗马等序列。<br><code>reversed=&quot;reversed&quot;</code>设置倒序<br>start 只有数字才有效果，从第几开始<br>如果是字母，超过26位数用aa，ab表示<br>如果是设置数字，倒序，从中间开始，序列会有0和负数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ol type=<span class="hljs-string">&quot;1&quot;</span> start=<span class="hljs-string">&quot;&quot;</span> reversed=<span class="hljs-string">&quot;reversed&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>bb<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>cc<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ol&gt;<br></code></pre></div></td></tr></table></figure><h3 id="ul-无序列表"><a href="#ul-无序列表" class="headerlink" title="ul 无序列表"></a>ul 无序列表</h3><p>块级元素<br>ul 最大的用处是布局<br>type=” disc | square | circle “ 设置实心圆，方形。空心圆</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ul type=<span class="hljs-string">&quot;disc&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>bb<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>cc<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br></code></pre></div></td></tr></table></figure><h4 id="ul-无序列表做导航栏"><a href="#ul-无序列表做导航栏" class="headerlink" title="ul 无序列表做导航栏"></a>ul 无序列表做导航栏</h4><p><img src="https://s2.loli.net/2022/03/02/wcBxoG4OgjJEQuS.png#crop=0&crop=0&crop=1&crop=1&id=jq4Oo&originHeight=105&originWidth=571&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>  ul &#123;<br>    <span class="hljs-attr">padding</span>: <span class="hljs-number">0</span>;<br>    margin: <span class="hljs-number">0</span>;<br>    list-style: none;<br>  &#125;<br>  a &#123;<br>    text-decoration: none;<br>  &#125;<br>  .wrapper &#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>%;<br>    height: 66px;<br>    box-shadow: <span class="hljs-number">0</span> <span class="hljs-number">0</span> 5px #<span class="hljs-number">999</span>;<br>  &#125;<br>  .wrapper ul &#123;<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>%;<br>  &#125;<br>  .wrapper ul li &#123;<br>    <span class="hljs-attr">float</span>: left;<br>    height: <span class="hljs-number">100</span>%;<br>    line-height: 66px;<br>  &#125;<br>  .wrapper ul li a &#123;<br>    <span class="hljs-attr">display</span>: block;<br>    height: <span class="hljs-number">100</span>%;<br>    font-size: 18px;<br>    color: #<span class="hljs-number">666</span>;<br>    padding: <span class="hljs-number">0</span> 15px;<br>    box-sizing: border-box;<br>  &#125;<br>  .wrapper ul li a:hover &#123;<br>    <span class="hljs-attr">color</span>: #23b8ff;<br>    border-bottom: 5px solid #23b8ff;<br>  &#125;<br>&lt;/style&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>前端<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>后端<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>大数据<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>人工智能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>机器学习<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="dl-定义列表"><a href="#dl-定义列表" class="headerlink" title="dl 定义列表"></a>dl 定义列表</h3><p>块级元素<br>定义列表</p><h4 id="dt"><a href="#dt" class="headerlink" title="dt"></a>dt</h4><p>块级元素<br>定义列表中的项目</p><h4 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h4><p>块级元素<br>描述列表中的项目</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;dl&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>计算机<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>用来计算的仪器 ... ...<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>显示器<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>以视觉方式显示信息的装置 ... ...<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span></span><br>&lt;/dl&gt;<br></code></pre></div></td></tr></table></figure><h3 id="table-表格标签"><a href="#table-表格标签" class="headerlink" title="table 表格标签"></a>table 表格标签</h3><p>块级元素<br>表格标签<br>border属性设置边框，cellpadding设单元格内边距，cellspacing单元格间距</p><h4 id="captain-标题标签"><a href="#captain-标题标签" class="headerlink" title="captain 标题标签"></a>captain 标题标签</h4><h4 id="tr-表格行标签"><a href="#tr-表格行标签" class="headerlink" title="tr 表格行标签"></a>tr 表格行标签</h4><h5 id="th-表头标签"><a href="#th-表头标签" class="headerlink" title="th 表头标签"></a>th 表头标签</h5><h5 id="td-单元格标签"><a href="#td-单元格标签" class="headerlink" title="td 单元格标签"></a>td 单元格标签</h5><p>内联块级元素<br>colspan属性合并列单元格<br>rowspan属性合并行单元格<br><code>align=&quot;left|center|right&quot;</code>设置对齐<br>增加数据只需要增加单元格标签</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;table border=<span class="hljs-string">&quot;1&quot;</span> cellpadding=<span class="hljs-string">&quot;10&quot;</span> cellspacing=<span class="hljs-string">&quot;10&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>金额表<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Month<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Savings<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>备注<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><br><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>January<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$100<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>00<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>无<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Anuary<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Ay<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><br><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span></span><br>&lt;/table&gt;<br></code></pre></div></td></tr></table></figure><h4 id="thead-表格页面标签"><a href="#thead-表格页面标签" class="headerlink" title="thead 表格页面标签"></a>thead 表格页面标签</h4><h4 id="tfoot-表格页尾标签"><a href="#tfoot-表格页尾标签" class="headerlink" title="tfoot 表格页尾标签"></a>tfoot 表格页尾标签</h4><h4 id="tbody-表格的主体标签"><a href="#tbody-表格的主体标签" class="headerlink" title="tbody 表格的主体标签"></a>tbody 表格的主体标签</h4><p>这三个标签必须同时使用，加载顺序是 thead- tfoot - tbody<br>如果不加这三个标签，表格需要等所有数据加载完之后才渲染出来。<br>加了这三个标签，页眉和页尾先加载，任何才加载主体部分</p><h3 id="iframe-内联框架标签"><a href="#iframe-内联框架标签" class="headerlink" title="iframe 内联框架标签"></a>iframe 内联框架标签</h3><p>内联块级元素<br>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）<br>对于搜索引擎不友好，滚动条体系混乱，无法监控iframe内的事件和数据变化，两个iframe之间数据传递麻烦<br><code>scrolling=&#39;yes|no|auto&#39;</code>滚动条设置<br>frameborder 边框<br>​</p><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><h3 id="form-交互表单"><a href="#form-交互表单" class="headerlink" title="form 交互表单"></a>form 交互表单</h3><p>块级元素<br><code>method=&quot;get|post&quot;</code>属性设置表单提交方式<br><code>action=&quot;&quot;</code>属性设置表单提交地址<br>​</p><p>表单提交数据两大要数是<strong>数据名称</strong>和<strong>数据名称对应的值</strong><br><strong>​</strong></p><p>提交表单时前端需要先进行验证，常用MD5加密。之后后端再验证<br>MD5是消息摘要的算法，是不可逆加密算法，只要加密了就不能解密，这种加密方式不需要提供密钥</p><h3 id="imput-文本输入框"><a href="#imput-文本输入框" class="headerlink" title="imput 文本输入框"></a>imput 文本输入框</h3><p>内联块级元素<br>type属性设置输入类型<br>name属性设置数据名称<br>value属性可以设置也可以设置默认值<br>maxlength=’5’ 属性设置最大值，设置等于5 不管中文还是数字最多五个字符<br>placeholder 设置默认提示<br>readonly属性设置只读，不可输入，提交数据时能够提交<br>disabled属性设置禁用，不可输入，提交数据是不可以提交</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;form method=<span class="hljs-string">&quot;get&quot;</span> action=<span class="hljs-string">&quot;&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    用户名：</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    密码：</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/form&gt;<br>&lt;!-- http:<span class="hljs-comment">//127.0.0.1:5500/HTML.html?username=111&amp;password=123 --&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="label-gt"><a href="#label-gt" class="headerlink" title="label&gt;"></a>label&gt;</h3><p>内联元素、内联块级元素<br>label的for属性值与某一个input的id值相同时，点击label可以聚焦改input输入框</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;form method=<span class="hljs-string">&quot;get&quot;</span> action=<span class="hljs-string">&quot;&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span></span><br>&lt;/form&gt;<br></code></pre></div></td></tr></table></figure><p>js模拟placeholder，针对对样式要求高，动态渲染数据，可定制化</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;form action=<span class="hljs-string">&quot;&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入关键字&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;focusInput(this)&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;blurInput(this)&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">  /&gt;</span></span><br>&lt;/form&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">focusInput</span>(<span class="hljs-params">obj</span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">if</span> (obj.value === <span class="hljs-string">&#x27;请输入关键字&#x27;</span>) &#123;</span></span><br><span class="javascript"><span class="xml">      obj.value = <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">blurInput</span>(<span class="hljs-params">obj</span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">if</span> (obj.value === <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="javascript"><span class="xml">      obj.value = <span class="hljs-string">&#x27;请输入关键字&#x27;</span></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="radio-单选"><a href="#radio-单选" class="headerlink" title="radio 单选"></a>radio 单选</h4><p>在input设置radio是单选，checked是默认选中，设置name统一选择项，value设置选择的值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">checked</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span> /&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男士<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span> /&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女士<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br>  <br><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> /&gt;</span></span><br>&lt;/form&gt;<br>&lt;!-- http:<span class="hljs-comment">//127.0.0.1:5500/HTML.html?sex=female --&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="checkbox-多选"><a href="#checkbox-多选" class="headerlink" title="checkbox 多选"></a>checkbox 多选</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myLang&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;js&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;js&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;js&quot;</span>&gt;</span>js<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myLang&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;JAVA&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;JAVA&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;JAVA&quot;</span>&gt;</span>JAVA<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myLang&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/form&gt;<br>&lt;!-- http:<span class="hljs-comment">//127.0.0.1:5500/HTML.html?myLang=js&amp;myLang=JAVA&amp;myLang=c --&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="select-下拉列表"><a href="#select-下拉列表" class="headerlink" title="select 下拉列表"></a>select 下拉列表</h3><p>内联块级元素</p><h4 id="option-选项"><a href="#option-选项" class="headerlink" title="option 选项"></a>option 选项</h4><p>在select中设置name，如果option不设置value，传入的值是option里的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>Volvo<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Saab<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>Opel<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>Audi<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br>  <br><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span></span><br>&lt;/form&gt;<br>&lt;!-- http:<span class="hljs-comment">//127.0.0.1:5500/HTML.html?data=1 --&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="textarea-多行文本输入框"><a href="#textarea-多行文本输入框" class="headerlink" title="textarea 多行文本输入框"></a>textarea 多行文本输入框</h3><p>内联元素、内联块级元素<br>cols 可见宽度，rows 可见行数<br>textarea没有value属性，它的value值在两个标签之间<br>textarea标签中间不可以空格或者换行，否则光标就会出现在中间。因为textarea的文本在两个标签之间的，如果换行或者空格会占用它的字符显示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="xml">  </span><br><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span> /&gt;</span></span><br><span class="xml">  </span><br><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">let</span> text = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;text&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-built_in">console</span>.log(text.value) <span class="hljs-comment">//123&lt;div&gt;</span></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-built_in">console</span>.log(text.innerHTML) <span class="hljs-comment">//123&amp;lt;div&amp;gt;</span></span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="fieldset"><a href="#fieldset" class="headerlink" title="fieldset"></a>fieldset</h3><p>块级元素<br>标签将表单内容的一部分打包，生成一组相关表单的字段</p><h4 id="legend"><a href="#legend" class="headerlink" title="legend"></a>legend</h4><p>块级元素<br>legend 元素为 fieldset 元素定义标题（caption）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;fieldset&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>分类<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span></span><br><span class="xml">    请输入</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>&lt;/fieldset&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>分类<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span></span><br><span class="xml">    请输入</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>健康信息<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span></span><br><span class="xml">    身高：</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span></span><br><span class="xml">    体重：</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript基础</title>
    <link href="/2022/03/02/JavaScript%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/03/02/JavaScript%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="五大浏览器内核"><a href="#五大浏览器内核" class="headerlink" title="五大浏览器内核"></a>五大浏览器内核</h2><table><thead><tr><th>五大主浏览器</th><th>内核</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td></tr><tr><td>Chrome</td><td>Webkit  Blink</td></tr><tr><td>Safari</td><td>Webkit</td></tr><tr><td>Firefox</td><td>Gecko</td></tr><tr><td>Opera</td><td>Presto</td></tr></tbody></table><p><a href="http://imgs.jackhoo.icu/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2625525/1644409087502-f364f584-3a8a-401f-874f-a02e294f164f.png#clientId=u1d12baa2-abb1-4&crop=0&crop=0.0261&crop=1&crop=1&from=paste&height=421&id=u57cf716b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=182&originWidth=320&originalType=binary&ratio=1&rotation=0&showTitle=false&size=61598&status=done&style=none&taskId=uf879e32c-d1f7-4d15-953d-b5da65233af&title=&width=741" alt="image.png"></a></p><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>JS引擎是单线程，但是他会模拟多线程</p><h3 id="轮转时间片"><a href="#轮转时间片" class="headerlink" title="轮转时间片"></a>轮转时间片</h3><p>短时间之内轮流执行多个任务的片段</p><ol><li>任务一    任务二</li><li>切分任务一     任务二</li><li>随机排列这些任务片段，组成队列</li><li>按照这个队列顺序将任务片段送进JS进程</li><li>JS线程执行一个又一个的任务片段</li></ol><p>​</p><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>不能以数字开头，可以字母_$开头，非开头部分可以写字母_$数字<br>不能使用关键字、保留字，注意要语义化、结构化<br>推荐小驼峰或者驼峰命名<br>​</p><h2 id="JS值"><a href="#JS值" class="headerlink" title="JS值"></a>JS值</h2><p>原始值(基本类型数据)、引用值(引用类型数据)</p><h3 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h3><p>Number、String、Boolean、Undefined、null、Symbol、BigInt</p><h3 id="引用值"><a href="#引用值" class="headerlink" title="引用值"></a>引用值</h3><p>Array、Object、Function<br>​</p><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="普通运算"><a href="#普通运算" class="headerlink" title="普通运算"></a>普通运算</h3><h4 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h4><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><p><strong>任何数据类型的值 + 字符串都是字符串</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">c = <span class="hljs-string">&#x27;str&#x27;</span> + <span class="hljs-number">1</span> + <span class="hljs-number">1</span> <span class="hljs-comment">//str11</span><br>c = <span class="hljs-string">&#x27;str&#x27;</span> + <span class="hljs-literal">NaN</span> <span class="hljs-comment">//strNaN</span><br>c = <span class="hljs-string">&#x27;str&#x27;</span> + <span class="hljs-literal">true</span> <span class="hljs-comment">//strtrue</span><br></code></pre></div></td></tr></table></figure><h5 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h5><p><strong>括号运算 &gt; 普通运算 &gt;赋值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">c = <span class="hljs-number">1</span> + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;str&#x27;</span> + (<span class="hljs-number">1</span> + <span class="hljs-number">1</span>) <span class="hljs-comment">//2str2</span><br></code></pre></div></td></tr></table></figure><h4 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h4><p><strong>NaN</strong>非数，数字类型</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">c = <span class="hljs-number">2</span> / <span class="hljs-number">1</span> <span class="hljs-comment">//2</span><br>c = <span class="hljs-number">0</span> / <span class="hljs-number">0</span> <span class="hljs-comment">//NaN</span><br>c = <span class="hljs-string">&#x27;a&#x27;</span> / <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-comment">//NaN</span><br>c = <span class="hljs-literal">NaN</span> / <span class="hljs-literal">NaN</span> <span class="hljs-comment">//NaN</span><br>c = <span class="hljs-literal">NaN</span> / <span class="hljs-number">1</span> <span class="hljs-comment">//NaN</span><br>c = <span class="hljs-number">1</span> / <span class="hljs-literal">NaN</span> <span class="hljs-comment">//NaN</span><br></code></pre></div></td></tr></table></figure><p>**Infinity **无穷，数字类型</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">c = <span class="hljs-number">1</span> / <span class="hljs-number">0</span> <span class="hljs-comment">//Infinity</span><br>c = -<span class="hljs-number">1</span> / <span class="hljs-number">0</span> <span class="hljs-comment">//-Infinity</span><br></code></pre></div></td></tr></table></figure><h4 id="取余（模）"><a href="#取余（模）" class="headerlink" title="取余（模）"></a>取余（模）</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">c = <span class="hljs-number">6</span> % <span class="hljs-number">4</span> <span class="hljs-comment">//2</span><br>c = <span class="hljs-number">7</span> % <span class="hljs-number">3</span> <span class="hljs-comment">//1</span><br>c = <span class="hljs-number">0</span> % <span class="hljs-number">3</span> <span class="hljs-comment">//0</span><br></code></pre></div></td></tr></table></figure><h4 id="交换值"><a href="#交换值" class="headerlink" title="交换值"></a>交换值</h4><p>ab值交换</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//方法一</span><br><span class="hljs-keyword">let</span> c,<br>    a = <span class="hljs-number">1</span>,<br>    b = <span class="hljs-number">2</span><br>c = a<br>a = b<br>b = c<br><br><span class="hljs-comment">//方法二</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>    b = <span class="hljs-number">2</span><br>a = a + b <span class="hljs-comment">//a=3</span><br>b = a - b <span class="hljs-comment">//3-2=1</span><br>a = a - b <span class="hljs-comment">//3-1=2</span><br><span class="hljs-built_in">console</span>.log(a, b)<br></code></pre></div></td></tr></table></figure><h4 id="，–"><a href="#，–" class="headerlink" title="++，–"></a>++，–</h4><p>a++先打印后运算</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(a++) <span class="hljs-comment">//1 先打印后运算</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//2</span><br></code></pre></div></td></tr></table></figure><p>++a先运算后打印</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(++a) <span class="hljs-comment">//2 先运算后打印</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span>,<br>  b<br>b = a++ + <span class="hljs-number">1</span> <span class="hljs-comment">//b = 1 + a++  1 + 5 </span><br><span class="hljs-built_in">console</span>.log(a, b) <span class="hljs-comment">//6 , 6 运算 赋值完成之后才打印，所以a是6</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span>,<br>  b<br>b = a-- + --a <span class="hljs-comment">//b = --a + a--  4 + 4</span><br><span class="hljs-built_in">console</span>.log(a, b) <span class="hljs-comment">//3 , 8</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span>,<br>  b<br>b = --a + --a <span class="hljs-comment">//4 + 3</span><br><span class="hljs-built_in">console</span>.log(a, b) <span class="hljs-comment">//3 , 7</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span>,<br>  b<br>b = --a + a++ <span class="hljs-comment">//4 + 4</span><br><span class="hljs-built_in">console</span>.log(a, b) <span class="hljs-comment">//5 , 8</span><br></code></pre></div></td></tr></table></figure><h3 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h3><p><strong>&lt;  &gt; =  &lt;=  ==  ===  !=  !==</strong></p><h4 id="纯数字比较就是"><a href="#纯数字比较就是" class="headerlink" title="纯数字比较就是"></a>纯数字比较就是</h4><p>number - number</p><h4 id="数字和字符串比较"><a href="#数字和字符串比较" class="headerlink" title="数字和字符串比较"></a>数字和字符串比较</h4><p>string先转化成number 在进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> bool = <span class="hljs-number">1</span> &gt; <span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure><h4 id="字符串和字符串比较"><a href="#字符串和字符串比较" class="headerlink" title="字符串和字符串比较"></a>字符串和字符串比较</h4><p>字符串转换对应ASCII字码表对应的数值，多个字符的，从左到右一次对比，直到比较出大小为止</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> bool = <span class="hljs-string">&#x27;3.5&#x27;</span> &gt; <span class="hljs-string">&#x27;11&#x27;</span> <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><h4 id="相等"><a href="#相等" class="headerlink" title="相等"></a>相等</h4><p>相等是不看数据类型，全等要看数据类型是否相等</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> bool = <span class="hljs-number">1</span> == <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment">//true</span><br><span class="hljs-keyword">let</span> bool = <span class="hljs-number">1</span> === <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure><h4 id="不相等"><a href="#不相等" class="headerlink" title="不相等"></a>不相等</h4><p>NaN与任何东西(包括自己)都不相等</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> bool = <span class="hljs-literal">NaN</span> === <span class="hljs-literal">NaN</span> <span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p><strong>与&amp;&amp;    或||        非!</strong><br>​</p><p><code>undefined，null，NaN，&quot;&quot;，0，false</code>除以上以外全部都是真<br>“ “ 有空格不是空字符串，是真</p><h4 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h4><p>遇到真就往后走，遇到假或者到最后就返回当前的值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span> <span class="hljs-comment">//2</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-literal">undefined</span> &amp;&amp; <span class="hljs-number">10</span> <span class="hljs-comment">//undefined</span><br><span class="hljs-comment">//1 &amp;&amp; 1 返回1 真</span><br><span class="hljs-comment">//0 &amp;&amp; 1 返回0 假</span><br><span class="hljs-comment">//1 &amp;&amp; 0 返回0 假</span><br><span class="hljs-comment">//0 &amp;&amp; 0 返回0 假</span><br></code></pre></div></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title="||"></a>||</h4><p>遇到假就往后走，遇到真或者走到最后就返回当前的值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> c = <span class="hljs-number">0</span> || <span class="hljs-literal">null</span> || <span class="hljs-number">1</span> || <span class="hljs-number">0</span> <span class="hljs-comment">//1</span><br><span class="hljs-comment">//1 || 1 返回1 真</span><br><span class="hljs-comment">//0 || 1 返回1 真</span><br><span class="hljs-comment">//1 || 0 返回1 真</span><br><span class="hljs-comment">//0 || 0 返回0 假</span><br></code></pre></div></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-built_in">console</span>.log(i)<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//1、声明变量i=0</span><br><span class="hljs-comment">//2、if(i &lt; 10)&#123;</span><br><span class="hljs-comment">// console.log(i)</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//3、i++</span><br><span class="hljs-comment">//2、if(i &lt; 10)&#123;不满足条件停止循环</span><br><span class="hljs-comment">//console.log(i);</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//3、i++</span><br></code></pre></div></td></tr></table></figure><h4 id="拆解步骤"><a href="#拆解步骤" class="headerlink" title="拆解步骤"></a>拆解步骤</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(;i &lt; <span class="hljs-number">10</span>;)&#123;<br><span class="hljs-built_in">console</span>.log(i);<br>i++;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="for循环转换为while循环"><a href="#for循环转换为while循环" class="headerlink" title="for循环转换为while循环"></a>for循环转换为while循环</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">10</span>) &#123;<br>  <span class="hljs-built_in">console</span>.log(i)<br>  i++<br>&#125;<br></code></pre></div></td></tr></table></figure><p>打印0-100的数，( ) 只能有一个，不能写比较，{ } 不能出现 i++ i–</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> i = <span class="hljs-number">101</span><br> <span class="hljs-keyword">for</span> (; i--; ) &#123;<br>   <span class="hljs-built_in">console</span>.log(i)<br> &#125;<br></code></pre></div></td></tr></table></figure><p>10的n次方</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> n = <span class="hljs-number">5</span>,<br>  num = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>  num *= <span class="hljs-number">10</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(num)<br></code></pre></div></td></tr></table></figure><p>n的阶乘</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> n = <span class="hljs-number">5</span>,<br>  num = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>  num *= i<br>&#125;<br><span class="hljs-built_in">console</span>.log(num)<br></code></pre></div></td></tr></table></figure><p>789打印出987</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">789</span><br><span class="hljs-keyword">let</span> a = num % <span class="hljs-number">10</span> <span class="hljs-comment">//9</span><br><span class="hljs-keyword">let</span> b = ((num - a) / <span class="hljs-number">10</span>) % <span class="hljs-number">10</span> <span class="hljs-comment">//8</span><br><span class="hljs-comment">// let b = ((num - a) % 100) / 10</span><br><span class="hljs-keyword">let</span> c = (num - a - b * <span class="hljs-number">10</span>) / <span class="hljs-number">100</span> <span class="hljs-comment">//9</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;&#x27;</span> + a + b + c)<br></code></pre></div></td></tr></table></figure><p>打印三个数中最大的数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>,<br>  b = <span class="hljs-number">2</span>,<br>  c = <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>  <span class="hljs-keyword">if</span> (a &gt; c) <span class="hljs-built_in">console</span>.log(a)<br>  <span class="hljs-keyword">else</span> <span class="hljs-built_in">console</span>.log(c)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">if</span> (b &gt; c) <span class="hljs-built_in">console</span>.log(b)<br>  <span class="hljs-keyword">else</span> <span class="hljs-built_in">console</span>.log(c)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>打印100以内的质数(仅仅能被1和自己整除的数)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> c = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>    <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) c++<br>  &#125;<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-number">2</span>) <span class="hljs-built_in">console</span>.log(i)<br>  c = <span class="hljs-number">0</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>如何判断一个变量的类型呢,js提供了_typeof_运算符,用来检测一个变量的类型。</p><table><thead><tr><th>Type</th><th>Result</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/undefined">Undefined</a></td><td>“undefined”</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Null">Null</a></td><td>“object” (see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#typeof_null">below</a>)</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Boolean">Boolean</a></td><td>“boolean”</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Number">Number</a></td><td>“number”</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/BigInt">BigInt</a> (new in ECMAScript 2020)</td><td>“bigint”</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/String">String</a></td><td>“string”</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Symbol">Symbol</a> (new in ECMAScript 2015)</td><td>“symbol”</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Function">Function</a> object (implements [[Call]] in ECMA-262 terms)</td><td>“function”</td></tr><tr><td>Any other object</td><td>“object”</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>) <span class="hljs-comment">//undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>) <span class="hljs-comment">//object //null类型是object历史遗留问题</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>) <span class="hljs-comment">//boolean</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span>) <span class="hljs-comment">//number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-number">123456789n</span>) <span class="hljs-comment">//bigint</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;123&#x27;</span>) <span class="hljs-comment">//string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;Sym&#x27;</span>)) <span class="hljs-comment">//symbol</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;) <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> []) <span class="hljs-comment">//object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> &#123;&#125;) <span class="hljs-comment">//object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">NaN</span>) <span class="hljs-comment">//number</span><br></code></pre></div></td></tr></table></figure><p>Object可以理解为引用类型， object/array都是Object引用类型</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> (<span class="hljs-number">1</span> - <span class="hljs-string">&#x27;1&#x27;</span>)) <span class="hljs-comment">//number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> (<span class="hljs-string">&#x27;1&#x27;</span> - <span class="hljs-number">1</span>)) <span class="hljs-comment">//number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> (<span class="hljs-string">&#x27;1&#x27;</span> - <span class="hljs-string">&#x27;1&#x27;</span>)) <span class="hljs-comment">//number</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// console.log(a) //a is not defined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> a) <span class="hljs-comment">//undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">typeof</span> a) <span class="hljs-comment">//string 数据类型typeof之后再typeof都是string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">typeof</span> <span class="hljs-number">123</span>) <span class="hljs-comment">//string</span><br></code></pre></div></td></tr></table></figure><h4 id="封装typeof"><a href="#封装typeof" class="headerlink" title="封装typeof"></a>封装typeof</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myTypeof</span>(<span class="hljs-params">val</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> type = <span class="hljs-keyword">typeof</span> val<br>  <span class="hljs-keyword">let</span> toStr = <span class="hljs-built_in">Object</span>.prototype.toString<br>  <span class="hljs-keyword">let</span> res = &#123;<br>    <span class="hljs-string">&#x27;[object Array]&#x27;</span>: <span class="hljs-string">&#x27;array&#x27;</span>,<br>    <span class="hljs-string">&#x27;[object Object]&#x27;</span>: <span class="hljs-string">&#x27;object&#x27;</span>,<br>    <span class="hljs-string">&#x27;[object Number]&#x27;</span>: <span class="hljs-string">&#x27;number&#x27;</span>,<br>    <span class="hljs-string">&#x27;[object String]&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>,<br>    <span class="hljs-string">&#x27;[object Boolean]&#x27;</span>: <span class="hljs-string">&#x27;boolean&#x27;</span>,<br>  &#125;<br>  <span class="hljs-keyword">if</span> (val === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;null&#x27;</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    <span class="hljs-keyword">let</span> ret = toString.call(val)<br>    <span class="hljs-keyword">return</span> res[ret]<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> type<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="显示类型转换"><a href="#显示类型转换" class="headerlink" title="显示类型转换"></a>显示类型转换</h3><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// let a = &#x27;123&#x27;</span><br><span class="hljs-comment">// console.log(typeof Number(a) + &#x27;--&#x27; + Number(a)) //number--123</span><br><span class="hljs-comment">// let a = true</span><br><span class="hljs-comment">// console.log(typeof Number(a) + &#x27;--&#x27; + Number(a)) //nnumber--1</span><br><span class="hljs-comment">// let a = false</span><br><span class="hljs-comment">// console.log(typeof Number(a) + &#x27;--&#x27; + Number(a)) //nnumber--0</span><br><span class="hljs-comment">// let a = null</span><br><span class="hljs-comment">// console.log(typeof Number(a) + &#x27;--&#x27; + Number(a)) //nnumber--0</span><br><span class="hljs-comment">// let a = undefined</span><br><span class="hljs-comment">// console.log(typeof Number(a) + &#x27;--&#x27; + Number(a)) //nnumber--NaN</span><br><span class="hljs-comment">// let a = &#x27;a&#x27;</span><br><span class="hljs-comment">// console.log(typeof Number(a) + &#x27;--&#x27; + Number(a)) //nnumber--NaN</span><br><span class="hljs-comment">// let a = &#x27;1a&#x27;</span><br><span class="hljs-comment">// console.log(typeof Number(a) + &#x27;--&#x27; + Number(a)) //nnumber--NaN</span><br><span class="hljs-comment">// let a = &#x27;3.14&#x27;</span><br><span class="hljs-comment">// console.log(typeof Number(a) + &#x27;--&#x27; + Number(a)) //nnumber--3.14</span><br></code></pre></div></td></tr></table></figure><h4 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// let a = &#x27;123&#x27;</span><br><span class="hljs-comment">// console.log(typeof parseInt(a) + &#x27;--&#x27; + parseInt(a)) //nnumber--123</span><br><span class="hljs-comment">// let a = &#x27;1.23&#x27;</span><br><span class="hljs-comment">// console.log(typeof parseInt(a) + &#x27;--&#x27; + parseInt(a)) //nnumber--1</span><br><span class="hljs-comment">// let a = &#x27;1.99&#x27;</span><br><span class="hljs-comment">// console.log(typeof parseInt(a) + &#x27;--&#x27; + parseInt(a)) //nnumber--1</span><br><span class="hljs-comment">// let a = true</span><br><span class="hljs-comment">// console.log(typeof parseInt(a) + &#x27;--&#x27; + parseInt(a)) //nnumber--NaN</span><br><span class="hljs-comment">// let a = null</span><br><span class="hljs-comment">// console.log(typeof parseInt(a) + &#x27;--&#x27; + parseInt(a)) //nnumber--NaN</span><br><span class="hljs-comment">// let a = undefined</span><br><span class="hljs-comment">// console.log(typeof parseInt(a) + &#x27;--&#x27; + parseInt(a)) //nnumber--NaN</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;10&#x27;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">parseInt</span>(a, <span class="hljs-number">16</span>)) <span class="hljs-comment">//16   //第二个参数取值2-36</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;abc123&#x27;</span>)) <span class="hljs-comment">//NaN</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;123abc1&#x27;</span>)) <span class="hljs-comment">//123</span><br></code></pre></div></td></tr></table></figure><h4 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat"></a>parseFloat</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;2.345&#x27;</span>)<br><span class="hljs-keyword">let</span> num2 = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(num.toFixed(<span class="hljs-number">2</span>)) <span class="hljs-comment">//2.35 四舍五入保留两位小数</span><br><span class="hljs-built_in">console</span>.log(num2.toFixed(<span class="hljs-number">2</span>)) <span class="hljs-comment">//2.00 保留两位小数</span><br></code></pre></div></td></tr></table></figure><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>null和undefined没有toString方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// let str = null</span><br><span class="hljs-comment">// console.log(str.toString())//Cannot read properties of null (reading &#x27;toString&#x27;)</span><br><span class="hljs-comment">// let str = undefined</span><br><span class="hljs-comment">// console.log(str.toString()) //Cannot read properties of undefined (reading &#x27;toString&#x27;)</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-built_in">console</span>.log(str.toString()) <span class="hljs-comment">//123</span><br></code></pre></div></td></tr></table></figure><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><p>undefined、null、NaN、” “、0是false，其他都是true</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>)) <span class="hljs-comment">//ture</span><br></code></pre></div></td></tr></table></figure><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>a未定义，但是<code>typeof a</code> 是字符串 ‘’undefined’’</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//a is not defined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> a) <span class="hljs-comment">//undefined</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;1&#x27;</span><br>a++ <span class="hljs-comment">//Number(a) 进行了隐式类型转换</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//124</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(-<span class="hljs-literal">true</span>) - <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> -<span class="hljs-literal">true</span>) <span class="hljs-comment">//number</span><br><span class="hljs-built_in">console</span>.log(+<span class="hljs-literal">undefined</span>) <span class="hljs-comment">//NaN</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> +<span class="hljs-literal">undefined</span>) <span class="hljs-comment">//number</span><br><br><span class="hljs-built_in">console</span>.log(!!<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(!!<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-comment">//string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">//string</span><br></code></pre></div></td></tr></table></figure><h4 id="字符串和数字"><a href="#字符串和数字" class="headerlink" title="字符串和数字"></a>字符串和数字</h4><p><strong>+时</strong>，会隐式类型<strong>转换成字符串</strong>进行拼接，<br><strong>-、* 、/、%和&gt;、&lt; 比较时</strong>，会隐式类型<strong>转换成number</strong>类型计算</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;2&#x27;</span> + <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//21</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> (<span class="hljs-string">&#x27;2&#x27;</span> + <span class="hljs-number">1</span>)) <span class="hljs-comment">//string</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2&#x27;</span> - <span class="hljs-number">1</span>) <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> (<span class="hljs-string">&#x27;2&#x27;</span> - <span class="hljs-number">1</span>)) <span class="hljs-comment">//number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> (<span class="hljs-number">1</span> - <span class="hljs-string">&#x27;2&#x27;</span>)) <span class="hljs-comment">//number</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-string">&#x27;b&#x27;</span> + <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">//b1</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> b) <span class="hljs-comment">//string</span><br><br><span class="hljs-keyword">let</span> b2 = <span class="hljs-string">&#x27;b&#x27;</span> - <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(b2) <span class="hljs-comment">//NaN</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> b2) <span class="hljs-comment">//number</span><br><span class="hljs-keyword">let</span> b3 = <span class="hljs-string">&#x27;b&#x27;</span> * <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(b3) <span class="hljs-comment">//NaN</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> b3) <span class="hljs-comment">//number</span><br></code></pre></div></td></tr></table></figure><h4 id="字符串和字符串"><a href="#字符串和字符串" class="headerlink" title="字符串和字符串"></a>字符串和字符串</h4><p>比较时，会转成ASCII码在进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;a&#x27;</span> &gt; <span class="hljs-string">&#x27;b&#x27;</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> a) <span class="hljs-comment">//boolean</span><br></code></pre></div></td></tr></table></figure><p>全等于不进行数据类型转换</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span> === <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">1</span> == <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a1 = <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span> &gt; <span class="hljs-number">3</span><br><span class="hljs-keyword">let</span> a2 = <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(a1, a2) <span class="hljs-comment">//false true</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a1 = <span class="hljs-literal">undefined</span> &lt; <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> a2 = <span class="hljs-literal">undefined</span> &gt; <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> a3 = <span class="hljs-literal">undefined</span> == <span class="hljs-number">0</span><br><span class="hljs-built_in">console</span>.log(a1, a2, a3) <span class="hljs-comment">//false false false</span><br><br><span class="hljs-keyword">let</span> b1 = <span class="hljs-literal">null</span> &lt; <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> b2 = <span class="hljs-literal">null</span> &gt; <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> b3 = <span class="hljs-literal">null</span> == <span class="hljs-number">0</span><br><span class="hljs-built_in">console</span>.log(b1, b2, b3) <span class="hljs-comment">//false false false</span><br><br><span class="hljs-keyword">let</span> c1 = <span class="hljs-literal">undefined</span> == <span class="hljs-literal">null</span> <span class="hljs-comment">//true</span><br><span class="hljs-keyword">let</span> c2 = <span class="hljs-literal">NaN</span> == <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> c3 = <span class="hljs-literal">NaN</span> == <span class="hljs-literal">NaN</span><br><span class="hljs-built_in">console</span>.log(c1, c2, c3) <span class="hljs-comment">//true false false</span><br></code></pre></div></td></tr></table></figure><h4 id="布尔值和数字"><a href="#布尔值和数字" class="headerlink" title="布尔值和数字"></a>布尔值和数字</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-literal">false</span> + <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//1</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-literal">true</span> + <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">//2</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> b = <span class="hljs-literal">false</span> == <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">//false</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-literal">false</span> !== <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><h4 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN"></a>isNaN</h4><p>判断数据类型是否为非数，先将数据进行隐式转换成number在进行NaN判断</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">NaN</span>)) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;123&#x27;</span>)) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;a&#x27;</span>)) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">null</span>)) <span class="hljs-comment">//false  null转成数字是0</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">undefined</span>)) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数命名规则"><a href="#函数命名规则" class="headerlink" title="函数命名规则"></a>函数命名规则</h3><p>不能数字开头，中间可以数字、字母、_ 、$，推荐小驼峰命名法</p><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//函数声明</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>,<br>       b = <span class="hljs-number">2</span><br>     <span class="hljs-built_in">console</span>.log(a, b)<br>   &#125;<br><br><span class="hljs-comment">//函数表达式</span><br>  <span class="hljs-comment">//匿名函数表达式  函数字面量</span><br>   <span class="hljs-keyword">let</span> test1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//匿名函数</span><br>     <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>,<br>       b = <span class="hljs-number">2</span><br>     <span class="hljs-built_in">console</span>.log(a, b)<br>   &#125;<br></code></pre></div></td></tr></table></figure><p>函数字面量(函数表达式)是忽略函数名</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;a&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> a) <span class="hljs-comment">//undefined</span><br></code></pre></div></td></tr></table></figure><h3 id="形参-实参"><a href="#形参-实参" class="headerlink" title="形参/实参"></a>形参/实参</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b</span>) </span>&#123;<span class="hljs-comment">//此处a,b是形参</span><br>  <span class="hljs-built_in">console</span>.log(test) <span class="hljs-comment">//打印函数</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>) <span class="hljs-comment">//打印参数</span><br>&#125;<br>test(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-comment">//此处1，2，3是实参</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//一个函数被调用时，累加他的实参</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123;<br>    a += <span class="hljs-built_in">arguments</span>[i]<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(a)<br>&#125;<br>sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <br></code></pre></div></td></tr></table></figure><p>在实参传了值的情况下，函数内部可以改变实参的值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  a = <span class="hljs-number">3</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>]) <span class="hljs-comment">//3</span><br>  <span class="hljs-built_in">console</span>.log(a, b) <span class="hljs-comment">//3 2</span><br>&#125;<br>test(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><p>在实参没有传值的情况下，函数内部给形参赋值是没有用的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  b = <span class="hljs-number">3</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>]) <span class="hljs-comment">//undefined</span><br>  <span class="hljs-comment">//如果实参没有传对应参数，就没有对应的映射 所以是 undefined</span><br>&#125;<br>test2(<span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><p>形参和arguments对象不是同一个东西，但是有映射关系。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  a = <span class="hljs-number">3</span> <span class="hljs-comment">//存在栈内存</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>]) <span class="hljs-comment">//3 存在堆内存</span><br>  <span class="hljs-comment">//形参和arguments不是同一个东西，但是有映射关系。</span><br>  <span class="hljs-comment">//如果实参没有传对应参数，就没有对应的映射 所以是 undefined</span><br>&#125;<br>test(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><h3 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h3><p>参数不传默认值是 undefined，形参和arguments谁不是undefined就默认选谁<br>传一个参数给第二位形参，第一位形参设置默认值，</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a = <span class="hljs-number">1</span>, b</span>) </span>&#123; <span class="hljs-comment">//形参赋值是ES6，低版本浏览器不支持</span><br>     <span class="hljs-built_in">console</span>.log(a)<br>     <span class="hljs-built_in">console</span>.log(b)<br>     <span class="hljs-comment">//形参和arguments谁不是undefined就默认选谁</span><br>     <span class="hljs-comment">// a 1  默认选择a=1</span><br>     <span class="hljs-comment">// arguments[0] undefined</span><br>   &#125;<br>   test(<span class="hljs-literal">undefined</span>, <span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><p>兼容写法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//或运算法(不推荐)</span><br>   <span class="hljs-comment">//不推荐这种写法，如果实参传0，默认为false，会执行后边的</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>     a = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] || <span class="hljs-number">1</span><br>     b = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>] || <span class="hljs-number">2</span><br>     <span class="hljs-built_in">console</span>.log(a, b) <span class="hljs-comment">//1 6</span><br>   &#125;<br>   test2(<span class="hljs-literal">undefined</span>, <span class="hljs-number">6</span>)<br><br><span class="hljs-comment">//typeof方法</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>     <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>       a = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>]<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       a = <span class="hljs-number">1</span><br>     &#125;<br>     <span class="hljs-built_in">console</span>.log(a, b) <span class="hljs-comment">//1 3</span><br>   &#125;<br>   test2(<span class="hljs-literal">undefined</span>, <span class="hljs-number">3</span>)<br><br>   <span class="hljs-comment">//三元运算法</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test3</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>     a = <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] !== <span class="hljs-string">&#x27;undefined&#x27;</span> ? <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] : <span class="hljs-number">1</span><br>     <span class="hljs-built_in">console</span>.log(a, b) <span class="hljs-comment">//1 2</span><br>   &#125;<br>   test3(<span class="hljs-literal">undefined</span>, <span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><h3 id="默认参数作用域与暂时性死区"><a href="#默认参数作用域与暂时性死区" class="headerlink" title="默认参数作用域与暂时性死区"></a>默认参数作用域与暂时性死区</h3><p> 因为参数是按顺序初始化的，所以后定义默认值的参数可以引用先定义的参数  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeKing</span>(<span class="hljs-params">name = <span class="hljs-string">&#x27;Henry&#x27;</span>, numerals = name</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`King <span class="hljs-subst">$&#123;name&#125;</span> <span class="hljs-subst">$&#123;numerals&#125;</span>`</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(makeKing()) <span class="hljs-comment">// King Henry Henry</span><br></code></pre></div></td></tr></table></figure><p>参数初始化顺序遵循“暂时性死区”规则，即前面定义的参数不能引用后面定义的  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeKing</span>(<span class="hljs-params">name = numerals, numerals = <span class="hljs-string">&#x27;VIII&#x27;</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`King <span class="hljs-subst">$&#123;name&#125;</span> <span class="hljs-subst">$&#123;numerals&#125;</span>`</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(makeKing()) <span class="hljs-comment">//Cannot access &#x27;numerals&#x27; before initialization</span><br></code></pre></div></td></tr></table></figure><p>参数也存在于自己的作用域中，它们不能引用函数体的作用域：  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 调用时不传第二个参数会报错</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeKing</span>(<span class="hljs-params">name = <span class="hljs-string">&#x27;Henry&#x27;</span>, numerals = defaultNumeral</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> defaultNumeral = <span class="hljs-string">&#x27;VIII&#x27;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`King <span class="hljs-subst">$&#123;name&#125;</span> <span class="hljs-subst">$&#123;numerals&#125;</span>`</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(makeKing())<span class="hljs-comment">//defaultNumeral is not definedcat makeKing</span><br></code></pre></div></td></tr></table></figure><p>n的阶层，使用递归，不能用for循环</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//n的阶层，使用递归，不能用for循环</span><br><span class="hljs-comment">// 规律 n! = n * (n-1)!</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> n * fact(n - <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>arguments 对象其实还有一个 callee 属性，是一个指向 arguments 对象所在函数的指针。<br>阶乘函数一般定义成递归调用的，就像上面这个例子一样。只要给函数一个名称，而且这个名称不会变，这样定义就没有问题。但是，这个函数要正确执行就必须保证函数名是 fact，从而导致了紧密耦合。<code>arguments.callee</code> 就可以让函数逻辑与函数名解耦 </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fact</span>(<span class="hljs-params">num</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (num &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> num * <span class="hljs-built_in">arguments</span>.callee(num - <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p> 这个重写之后的 fact()函数已经用 arguments.callee 代替了之前硬编码的 fact。 这意味着无论函数叫什么名称，都可以引用正确的函数。<br>斐波拉去数列</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fb</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> fb(n - <span class="hljs-number">1</span>) + fb(n - <span class="hljs-number">2</span>)<br>&#125;<br><span class="hljs-built_in">console</span>.log(fb(<span class="hljs-number">2</span>))<br></code></pre></div></td></tr></table></figure><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><h3 id="预编译流程"><a href="#预编译流程" class="headerlink" title="预编译流程"></a>预编译流程</h3><p>1.检查通篇的语法错误<br>1.5预编译的过程<br>2.解释一行，执行一行 </p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>函数声明先提升，其次变量<br><strong>函数声明是整体提升</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">test()<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>) <span class="hljs-comment">//1</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>var变量只有声明提升，赋值不提示</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">var</span> a<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//a is not defined</span><br></code></pre></div></td></tr></table></figure><p><strong>let变量赋值都不提升</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//Cannot access &#x27;a&#x27; before initialization</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//打印的是函数a</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//ƒ a(a) &#123;var a = 1;var a = function () &#123;&#125;&#125;</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params">a</span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br>     <span class="hljs-keyword">var</span> a = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;<br>   &#125;<br>   <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h3 id="暗示全局变量"><a href="#暗示全局变量" class="headerlink" title="暗示全局变量"></a>暗示全局变量</h3><p><strong>全局作用域下，未声明或者var声明的变量都会挂载到window下</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.a) <span class="hljs-comment">//1</span><br><span class="hljs-comment">//在全局下不管是否var   a=window.a   b=window.b</span><br><span class="hljs-comment">// window=&#123;</span><br><span class="hljs-comment">//   a:1,</span><br><span class="hljs-comment">//   b=2</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><p><strong>函数内未声明的变量直接挂载到window下</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> a = b = <span class="hljs-number">1</span> <span class="hljs-comment">//a先声明后赋值一个1，然后赋值给b，b未声明</span><br>  <span class="hljs-comment">//b 未声明直接挂载到window 全局域下</span><br>&#125;<br>test()<br><span class="hljs-comment">//访问对象不存在的属性会 undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.a) <span class="hljs-comment">//undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.b) <span class="hljs-comment">//1</span><br><span class="hljs-comment">//访问对象不存在的变量会 not defined</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//a is not defined</span><br></code></pre></div></td></tr></table></figure><h3 id="AO-activation-object-活跃对象，函数上下文"><a href="#AO-activation-object-活跃对象，函数上下文" class="headerlink" title="AO activation object 活跃对象，函数上下文"></a>AO activation object 活跃对象，函数上下文</h3><p>先提升变量声明（不含赋值），然后实参给形参赋值，再提升函数声明,，最后执行函数。按照此顺序执行代码</p><ol><li><p>寻找形参和变量声明</p></li><li><p>实参赋值给形参</p></li><li><p>找函数声明并赋值函数体</p></li><li><p>执行</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>, a)<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>, a)<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>, a)<br>  <span class="hljs-keyword">var</span> b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>, b)<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">d</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>&#125;<br>test(<span class="hljs-number">2</span>)<br><span class="hljs-comment">// 1 ƒ a() &#123;&#125;</span><br><span class="hljs-comment">// 2 1</span><br><span class="hljs-comment">// 3 1</span><br><span class="hljs-comment">// 4 ƒ () &#123;&#125;</span><br><br><span class="hljs-comment">// //预编译</span><br><span class="hljs-comment">//       AO = &#123;</span><br><span class="hljs-comment">//         a: undefined // 1.寻找形参和变量声明 -&gt;</span><br><span class="hljs-comment">//            2 // 2.把实参赋值给形参 -&gt;</span><br><span class="hljs-comment">//            function a() &#123;&#125; // 3.找函数声明并赋值函数体 -&gt;</span><br><span class="hljs-comment">//            1 // 4.执行函数</span><br><br><span class="hljs-comment">//         b: undefined // 1.寻找形参和变量声明 -&gt;</span><br><span class="hljs-comment">//            function () &#123;&#125; // 4.执行函数</span><br><br><span class="hljs-comment">//         d: undefined // 1.寻找形参和变量声明 -&gt;</span><br><span class="hljs-comment">//            function d() &#123;&#125; // 3.找函数声明并赋值函数体      </span><br><span class="hljs-comment">//       &#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>, a)<br>     c = <span class="hljs-number">0</span><br>     <span class="hljs-keyword">var</span> c<br>     a = <span class="hljs-number">5</span><br>     b = <span class="hljs-number">6</span><br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>, b)<br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">d</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>, b)<br>   &#125;<br>   test(<span class="hljs-number">1</span>)<br>   <span class="hljs-comment">// 1 1</span><br>   <span class="hljs-comment">// 2 6</span><br>   <span class="hljs-comment">// 3 6</span><br>   <br>   <span class="hljs-comment">// AO=&#123;</span><br>   <span class="hljs-comment">//   a: undefined // 1.寻找形参和变量声明 -&gt;</span><br>   <span class="hljs-comment">//      1 // 2.实参赋值给形参 -&gt;</span><br>   <span class="hljs-comment">//      5 // 4.执行函数</span><br><br>   <span class="hljs-comment">//   b: undefined // 1.寻找形参和变量声明 -&gt;</span><br>   <span class="hljs-comment">//      function d() &#123;&#125; // 3.找函数声明并赋值函数体</span><br>   <span class="hljs-comment">//      6 // 4.执行函数</span><br><br>   <span class="hljs-comment">//   c: undefined // 1.寻找形参和变量声明 -&gt;</span><br>   <span class="hljs-comment">//      0 // 4.执行函数</span><br><br>   <span class="hljs-comment">//   d: undefined // 1.寻找形参和变量声明 -&gt;</span><br>   <span class="hljs-comment">//      function d() &#123;&#125; // 3.找函数声明并赋值函数体</span><br>   <span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="GO-global-object-全局上下文"><a href="#GO-global-object-全局上下文" class="headerlink" title="GO global object 全局上下文"></a>GO global object 全局上下文</h3><p>GO相当于是window<br>先变量声明提升，再函数提升，最后执行</p></li><li><p>找变量声明</p></li><li><p>找函数声明并赋值函数体</p></li><li><p>执行</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>&#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//1</span><br><span class="hljs-comment">// GO = &#123;</span><br><span class="hljs-comment">//   a: undefined, // 1.找变量 -&gt;</span><br><span class="hljs-comment">//      function a() &#123;&#125; // 2.找函数声明并赋值函数体 -&gt;</span><br><span class="hljs-comment">//      1 // 3.执行</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a, b) <span class="hljs-comment">//function a()&#123;&#125;  undefined  </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">var</span> b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125; <span class="hljs-comment">//b在执行之前还没有赋值，所以打印undefined</span><br><br><span class="hljs-comment">// GO = &#123;</span><br><span class="hljs-comment">//   b: undefined // 1.寻找变量声明 =&gt;</span><br><span class="hljs-comment">//      function () &#123;&#125; // 3.执行</span><br><span class="hljs-comment">//   a: undefined // 1.寻找变量声明 =&gt;</span><br><span class="hljs-comment">//      function a() &#123;&#125; //2.找函数声明并赋值函数体</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> a = (b = <span class="hljs-number">1</span>)<br>  <span class="hljs-built_in">console</span>.log(b)<br>&#125;<br>test() <span class="hljs-comment">//1</span><br><span class="hljs-comment">// GO = &#123;</span><br><span class="hljs-comment">//   b: 1, //4.执行</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   a: undefined //1.寻找变量</span><br><span class="hljs-comment">//      1 //4.执行(往上找到GO中的b)</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> b = <span class="hljs-number">3</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>, a)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params">a</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>, a)<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>, a)<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  <span class="hljs-keyword">var</span> b = <span class="hljs-number">5</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>, b)<br>&#125;<br>a(<span class="hljs-number">1</span>)<br><span class="hljs-comment">// 1 ƒ a(a) &#123;</span><br><span class="hljs-comment">//   console.log(2, a)</span><br><span class="hljs-comment">//   var a = 2</span><br><span class="hljs-comment">//   console.log(3, a)</span><br><span class="hljs-comment">//   function a() &#123;&#125;</span><br><span class="hljs-comment">//   var b = 5</span><br><span class="hljs-comment">//   console.log(4, b)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// 2 ƒ a() &#123;&#125;</span><br><span class="hljs-comment">// 3 2</span><br><span class="hljs-comment">// 4 5</span><br><br><span class="hljs-comment">// GP = &#123;</span><br><span class="hljs-comment">//   b: undefined // 1.找变量</span><br><span class="hljs-comment">//      3 // 3.执行</span><br><span class="hljs-comment">//   a: undefined // 1.找变量</span><br><span class="hljs-comment">//      function a()&#123;...&#125;  // 2.找函数声明并赋值函数体</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   a: undefined // 1.寻找形参和变量声明</span><br><span class="hljs-comment">//      1 // 2.实参赋值给形参</span><br><span class="hljs-comment">//      function a() &#123;&#125; // 3.找函数声明并赋值函数体</span><br><span class="hljs-comment">//      2 // 4.执行</span><br><span class="hljs-comment">//   b: undefined // 1.寻找形参和变量声明</span><br><span class="hljs-comment">//      5 // 4.执行</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">a = <span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>, a)<br>  a = <span class="hljs-number">2</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>, a)<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>, a)<br>&#125;<br>test()<br><span class="hljs-keyword">var</span> a<br><span class="hljs-comment">// 1 undefined //就近原则，函数内部声明了a，所以不去全局找a</span><br><span class="hljs-comment">// 2 2</span><br><span class="hljs-comment">// 3 3</span><br><br><span class="hljs-comment">// GO = &#123;</span><br><span class="hljs-comment">//   a: undefined, // 1.找变量</span><br><span class="hljs-comment">//      1 // 3.执行</span><br><span class="hljs-comment">//   test: function test() &#123;...&#125; // 1.找函数声明并赋值函数体</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   a: undefined, // 1.找变量</span><br><span class="hljs-comment">//      2 // 4.执行</span><br><span class="hljs-comment">//      3 // 4.执行</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">//undefined</span><br>  <span class="hljs-keyword">if</span> (a) &#123;<br>    <span class="hljs-comment">// a undefined</span><br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span><br>  &#125;<br>  c = <span class="hljs-number">3</span><br>  <span class="hljs-built_in">console</span>.log(c) <span class="hljs-comment">//3</span><br>&#125;<br><span class="hljs-keyword">var</span> a<br>test()<br>a = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//1</span><br><br><span class="hljs-comment">// GO = &#123;</span><br><span class="hljs-comment">//   a: undefined, //1</span><br><span class="hljs-comment">//      1 //3</span><br><span class="hljs-comment">//   test: undefined, //1</span><br><span class="hljs-comment">//         function test() &#123;&#125; //2</span><br><span class="hljs-comment">//   c: undefined, //1</span><br><span class="hljs-comment">//      3 //3</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   b: undefined, //1</span><br><span class="hljs-comment">//   c: undefined  //1</span><br><span class="hljs-comment">//      3 //4</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a<br>  a = <span class="hljs-number">1</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(test())<br><span class="hljs-comment">// ƒ a() &#123;&#125;</span><br><br><span class="hljs-comment">// GO = &#123;</span><br><span class="hljs-comment">//   a: undefined,//1</span><br><span class="hljs-comment">//      1 //3</span><br><span class="hljs-comment">//   test:undefined //1</span><br><span class="hljs-comment">//        function test() &#123;...&#125; //2</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   a: undefined, //1</span><br><span class="hljs-comment">//      function a() &#123;&#125; //3</span><br><span class="hljs-comment">//      1 //4</span><br><span class="hljs-comment">//      2 //4</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  a = <span class="hljs-number">1</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span><br>  <span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-built_in">console</span>.log(test()) <span class="hljs-comment">//2</span><br><span class="hljs-comment">// GO = &#123;</span><br><span class="hljs-comment">//   a: undefined, //1</span><br><span class="hljs-comment">//      1 //3</span><br><span class="hljs-comment">//   test:undefined //1</span><br><span class="hljs-comment">//        function test() &#123;&#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   a: undefined,//1</span><br><span class="hljs-comment">//      function a() &#123;&#125; //3</span><br><span class="hljs-comment">//      1 //4</span><br><span class="hljs-comment">//      2 //4</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">a = <span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span><br>  <span class="hljs-built_in">console</span>.log(e) <span class="hljs-comment">//2</span><br>  <span class="hljs-keyword">if</span> (a) &#123;<br>    <span class="hljs-comment">// a  1</span><br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">3</span><br>  &#125;<br>  <span class="hljs-keyword">var</span> c<br>  a = <span class="hljs-number">4</span><br>  <span class="hljs-keyword">var</span> a<br>  <span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">//undefined</span><br>  f = <span class="hljs-number">5</span><br>  <span class="hljs-built_in">console</span>.log(c) <span class="hljs-comment">//undefined</span><br>  <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//4</span><br>&#125;<br><span class="hljs-keyword">var</span> a<br>test(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(f) <span class="hljs-comment">//5</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 5</span><br><br><span class="hljs-comment">// GO = &#123;</span><br><span class="hljs-comment">//   a: undefined,//1</span><br><span class="hljs-comment">//      1 //3</span><br><span class="hljs-comment">//   test: undefined //1</span><br><span class="hljs-comment">//         function test() &#123;&#125; //2</span><br><span class="hljs-comment">//   f: undefined, //1</span><br><span class="hljs-comment">//      5 // 4</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   e: undefined, //1</span><br><span class="hljs-comment">//      1 //2</span><br><span class="hljs-comment">//      function e() &#123;&#125; //3</span><br><span class="hljs-comment">//      2 //4</span><br><span class="hljs-comment">//   b: undefined, //1</span><br><span class="hljs-comment">//      3 //4</span><br><span class="hljs-comment">//   c: undefined, //1</span><br><span class="hljs-comment">//   a: undefined, //1</span><br><span class="hljs-comment">//      4 //4 函数体内有声明，就近原则</span><br><span class="hljs-comment">//   f: 5 //4 在GO中找到的f</span><br><span class="hljs-comment">// &#125;</span><br><br></code></pre></div></td></tr></table></figure><h2 id="作用域-作用域链"><a href="#作用域-作用域链" class="headerlink" title="作用域/作用域链"></a>作用域/作用域链</h2><p>函数也是一种对象类型，是引用类型，引用值，有对象.name，.length，.protoytpe等属性<br>对象中有些属性是我们无法访问的，JS引擎内部固定有的隐式属性 [[scope]]<br>​</p></li></ol><p>函数创建时，生成的一个JS内部隐式属性<br>函数存储作用域的容器，作用域链<br>AO，函数的执行期上下文，<br>GO，全局的执行期上下文<br>函数执行完成之后，AO是要销毁的，AO是一个即时的存储容器</p><p><strong>在函数被定义</strong>的时候就已经形成了作用域，作用域链和GO<br><strong>在函数执行</strong>的那一刻才生成自己的AO<br>​</p><p>外部函数为什么不能访问到内部函数的变量？</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span><br>  &#125;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  b()<br>  <span class="hljs-built_in">console</span>.log(b)<br>&#125;<br>a()<br><span class="hljs-comment">//ƒ b() &#123;</span><br><span class="hljs-comment">// let b = 2</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><p>a的AO里面b等于function b() {}，内部方法执行后作用域链就切断了，所以只能打印b的函数体不能访问b里边的变量<br><strong>外部函数没有内部函数的AO环境，但是内部函数在执行的时候引用了外部函数的AO上下文</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>    c()<br>  &#125;<br>  b()<br>&#125;<br>a()<br><span class="hljs-comment">//a定义：a.[[scope]] -&gt; 0 : GO</span><br><span class="hljs-comment">//a执行：a.[[scope]] -&gt; 0 : GO</span><br><span class="hljs-comment">//                      1 : GO</span><br><span class="hljs-comment">//b定义：b.[[scope]] -&gt; 0 : a -&gt; AO</span><br><span class="hljs-comment">//                      1 : GO</span><br><span class="hljs-comment">//b执行：b.[[scope]] -&gt; 0 : b -&gt; AO</span><br><span class="hljs-comment">//                      1 : a -&gt; AO</span><br><span class="hljs-comment">//                      2 : GO</span><br><span class="hljs-comment">//c定义：c.[[scope]] -&gt; 0 : b -&gt; AO</span><br><span class="hljs-comment">//                      1 : a -&gt; AO</span><br><span class="hljs-comment">//                      2 : GO</span><br><span class="hljs-comment">//c执行：c.[[scope]] -&gt; 0 : c -&gt; AO</span><br><span class="hljs-comment">//                      1 : b -&gt; AO</span><br><span class="hljs-comment">//                      2 : a -&gt; AO</span><br><span class="hljs-comment">//                      3 : GO</span><br><br><span class="hljs-comment">//c结束：c.[[scope]] -&gt; 0 : b -&gt; AO</span><br><span class="hljs-comment">//                      1 : a -&gt; AO</span><br><span class="hljs-comment">//                      2 : GO</span><br><span class="hljs-comment">//b结束：b.[[scope]] -&gt; 0 : a -&gt; AO</span><br><span class="hljs-comment">//                      1 : GO</span><br><span class="hljs-comment">//      c.[[scope]] X</span><br><span class="hljs-comment">//a结束：a.[[scope]] -&gt; 0 : GO</span><br><span class="hljs-comment">//      b.[[scope]] X</span><br></code></pre></div></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>当内部函数被返回到外部并保持时，一定会产生闭包，闭包会产生原来的作用域链不释放，<br>过度的闭包可能会导致内存泄漏或加载过慢</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span><br>    <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//1</span><br>  &#125;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> test2 <span class="hljs-comment">//test1执行结束，test1自己的AO销毁，返回test2，</span><br>   <span class="hljs-comment">//当test1赋值到全局的test3时,test2被挂载到全局GO</span><br>&#125;<br><span class="hljs-keyword">var</span> c = <span class="hljs-number">3</span><br><span class="hljs-keyword">var</span> test3 = test1() <span class="hljs-comment">//此处返回的是函数test2。test2中包含test1的AO，可以访问到test1内部的变量</span><br>test3() <span class="hljs-comment">//test3执行结束时，test2也结束，test2的AO销毁，但是test1的AO未断开，</span><br><span class="hljs-comment">//再执行test3仍可以操作test1的变量</span><br></code></pre></div></td></tr></table></figure><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>函数嵌套函数，内部函数就是闭包。就是<strong>能够访问其他函数内部变量的函数</strong>。<br>闭包可以做数据缓存</p><h4 id="普通闭包"><a href="#普通闭包" class="headerlink" title="普通闭包"></a>普通闭包</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> n = <span class="hljs-number">100</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br>    n++<br>    <span class="hljs-built_in">console</span>.log(n)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduce</span>(<span class="hljs-params"></span>) </span>&#123;<br>    n--<br>    <span class="hljs-built_in">console</span>.log(n)<br>  &#125;<br>  <span class="hljs-keyword">return</span> [add, reduce] <span class="hljs-comment">//返回两个函数</span><br>&#125;<br><span class="hljs-keyword">let</span> arr = test()<br>arr[<span class="hljs-number">0</span>]()<br>arr[<span class="hljs-number">1</span>]()<br>arr[<span class="hljs-number">1</span>]()<br><span class="hljs-comment">//101</span><br><span class="hljs-comment">//100</span><br><span class="hljs-comment">//99</span><br></code></pre></div></td></tr></table></figure><p>add和reduce函数属于同级，两个的AO互不干扰，不能互相访问。但是都有上一级test的AO，可以同时访问test的变量</p><h4 id="对象闭包"><a href="#对象闭包" class="headerlink" title="对象闭包"></a>对象闭包</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> compute = &#123;<br>    <span class="hljs-attr">add</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      num++<br>      <span class="hljs-built_in">console</span>.log(num)<br>    &#125;,<br>    <span class="hljs-attr">minus</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      num--<br>      <span class="hljs-built_in">console</span>.log(num)<br>    &#125;,<br>  &#125;<br>  <span class="hljs-keyword">return</span> compute<br>&#125;<br><span class="hljs-keyword">let</span> compute = test()<br>compute.add() <span class="hljs-comment">//1</span><br>compute.add() <span class="hljs-comment">//2</span><br>compute.minus() <span class="hljs-comment">//1</span><br></code></pre></div></td></tr></table></figure><h4 id="构造函数闭包"><a href="#构造函数闭包" class="headerlink" title="构造函数闭包"></a>构造函数闭包</h4><p>构造函数被实例化时，内部产生一个this，最后隐式返回this</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Compute</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> num = <span class="hljs-number">10</span><br>  <span class="hljs-built_in">this</span>.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    num++<br>    <span class="hljs-built_in">console</span>.log(num)<br>  &#125;<br>  <span class="hljs-built_in">this</span>.minus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    num--<br>    <span class="hljs-built_in">console</span>.log(num)<br>  &#125;<br>  <span class="hljs-comment">//return this //构造函数被实例化时，内部产生一个this，最后隐式返回this</span><br>&#125;<br><span class="hljs-keyword">let</span> compute = <span class="hljs-keyword">new</span> Compute()<br>compute.add() <span class="hljs-comment">//11</span><br>compute.add() <span class="hljs-comment">//12</span><br>compute.minus() <span class="hljs-comment">//11</span><br></code></pre></div></td></tr></table></figure><h3 id="闭包中的this对象"><a href="#闭包中的this对象" class="headerlink" title="闭包中的this对象"></a>闭包中的this对象</h3><p>在闭包中使用 this 会让代码变复杂。<br>如果内部函数没有使用箭头函数定义，则 this 对象会在运行时绑定到执行函数的上下文。<br>如果在全局函数中调用，则 this 在非严格模式下等于 window，在严格模式下等于 undefined。<br>如果作为某个对象的方法调用，则 this 等于这个对象。<br>匿名函数在这种情况下不会绑定到某个对象，这就意味着 this 会指向 window，除非在严格模式下 this 是 undefined。<br>不过，由于闭包的写法所致，这个事实有时候没有那么容易看出来。  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.identity = <span class="hljs-string">&#x27;The Window&#x27;</span><br><span class="hljs-keyword">let</span> object = &#123;<br>  <span class="hljs-attr">identity</span>: <span class="hljs-string">&#x27;My Object&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">getIdentityFunc</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.identity<br>    &#125;<br>  &#125;,<br>&#125;<br><span class="hljs-built_in">console</span>.log(object.getIdentityFunc()()) <span class="hljs-comment">// &#x27;The Window&#x27;</span><br></code></pre></div></td></tr></table></figure><p>为什么匿名函数没有使用其包含作用域（<code>getIdentityFunc()</code>）的 this 对象呢？<br>每个函数在被调用时都会自动创建两个特殊变量：this 和 arguments。内部函数永远不可能直接访问外部函数的这两个变量。但是，如果把 this 保存到闭包可以访问的另一个变量中， 则是行得通的。  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.identity = <span class="hljs-string">&#x27;The Window&#x27;</span><br><span class="hljs-keyword">let</span> object = &#123;<br>  <span class="hljs-attr">identity</span>: <span class="hljs-string">&#x27;My Object&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">getIdentityFunc</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> that = <span class="hljs-built_in">this</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> that.identity<br>    &#125;<br>  &#125;,<br>&#125;<br><span class="hljs-built_in">console</span>.log(object.getIdentityFunc()()) <span class="hljs-comment">// &#x27;My Object&#x27;</span><br></code></pre></div></td></tr></table></figure><p>在定义匿名函数之前，先把外部函数的 this 保存到变量 that 中。然后在定义闭包时，就可以让它访问 that，因为这是包含函数中名称没有任何冲突的一个变量。即使在外部函数返回之后，that 仍然指向 object，所以调用 object.getIdentityFunc()() 就会返回”My Object”  </p><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><p><strong>自动执行，执行完成之后立即释放</strong><br>立即执行函数 IIFE - immediately-invoked function<br><strong>()括号包起来的都叫表达式，一定是表达式才能被执行符号执行</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>&#125;)()<br><br>((<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>&#125;)()) <span class="hljs-comment">//W3C推荐</span><br></code></pre></div></td></tr></table></figure><p><strong>立即执行函数一定是表达式，非表达式不能执行</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//表达式</span><br>   (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>   &#125;)()<br>   <span class="hljs-comment">//1</span><br><br><span class="hljs-comment">//非表达式</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>   &#125;()<br><span class="hljs-comment">//Uncaught SyntaxError: Unexpected token &#x27;)&#x27;</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>   &#125;(<span class="hljs-number">2</span>)<br><span class="hljs-comment">//不报错，默认是一个函数和表达式</span><br><br></code></pre></div></td></tr></table></figure><p><strong>立即执行函数执行完后立即销毁</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">   (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;&#125;)()<br><span class="hljs-comment">// test.name</span><br><span class="hljs-comment">// VM561:1 Uncaught ReferenceError: test is not defined at &lt;anonymous&gt;:1:1</span><br></code></pre></div></td></tr></table></figure><p>普通函数执行完后不释放</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-comment">// test.name</span><br><span class="hljs-comment">// &#x27;test&#x27;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//普通函数赋值不执行</span><br><span class="hljs-keyword">let</span> test = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(test)<br>    <span class="hljs-comment">// ƒ () &#123;</span><br>    <span class="hljs-comment">//   console.log(1)</span><br>    <span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">//立即执行函数，马上执行被销毁</span><br>    <span class="hljs-keyword">let</span> test1 = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>    &#125;)()<br>    <span class="hljs-built_in">console</span>.log(test1) <span class="hljs-comment">//undefined</span><br>    <span class="hljs-comment">//2</span><br>    <span class="hljs-comment">//undefined</span><br></code></pre></div></td></tr></table></figure><p>立即执行函数可带参数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a + b) <span class="hljs-comment">//6</span><br>&#125;)(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>) <span class="hljs-comment">//后边的小括号可带实参，函数执行后立即销毁</span><br></code></pre></div></td></tr></table></figure><p>立即执行函数的返回值要赋值给变量才能访问</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b<br>&#125;)(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">console</span>.log(num) <span class="hljs-comment">//6</span><br></code></pre></div></td></tr></table></figure><p>函数声明变成表达式的其他方法  +  -  !  ||  &amp;&amp; ，函数变成表达式之后，函数名自动忽略</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-number">1</span> &amp;&amp; (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>) <span class="hljs-comment">//1</span><br>   &#125;)()<br><br><span class="hljs-literal">undefined</span> || (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>) <span class="hljs-comment">//1</span><br>   &#125;)()<br><br> -(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>) <span class="hljs-comment">//1</span><br> &#125;)()<br><br> !(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>) <span class="hljs-comment">//1</span><br> &#125;)()<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>) </span>&#123;&#125;) &#123;<br>  a += <span class="hljs-keyword">typeof</span> b <span class="hljs-comment">//(function b() &#123;&#125;)是表达式，函数名会被忽略，所以typeof b是undefined</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//10undefined</span><br></code></pre></div></td></tr></table></figure><p>将以下代码修改，打印出0到9的数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> arr = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">document</span>.write(i + <span class="hljs-string">&#x27; &#x27;</span>)<br>    &#125; <span class="hljs-comment">//不是立即执行函数，i=10时，就存了10个匿名函数</span><br>  &#125;<br>  <br>  <span class="hljs-comment">// var i = 0</span><br>  <span class="hljs-comment">// for (; i &lt; 10; ) &#123;</span><br>  <span class="hljs-comment">//   arr[i] = function () &#123;</span><br>  <span class="hljs-comment">//     document.write(i + &#x27; &#x27;)</span><br>  <span class="hljs-comment">//   &#125; //不是立即执行函数，i=9时，存了10个匿名函数</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// i++</span><br>  <br>  <span class="hljs-comment">// console.log(i)//10</span><br>  <span class="hljs-keyword">return</span> arr <span class="hljs-comment">//return时，形成了闭包,i已经等于10了，匿名函数公有test的AO，</span><br>&#125;<br><span class="hljs-keyword">var</span> myArr = test()<br><span class="hljs-built_in">console</span>.log(myArr)<br><span class="hljs-comment">// [ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ]</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>  myArr[j]() <span class="hljs-comment">//循环j的时候，拿到的值是最后一次i的值</span><br>&#125;<br><span class="hljs-comment">//10 10 10 10 10 10 10 10 10 10</span><br></code></pre></div></td></tr></table></figure><p>修改后</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//方法一，第二个循环里的立即执行函数给它内部的匿名函数传参</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> arr = []<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>       arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>         <span class="hljs-built_in">document</span>.write(num + <span class="hljs-string">&#x27; &#x27;</span>)<br>       &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> arr<br>   &#125;<br>   <span class="hljs-keyword">var</span> myArr = test()<br>   <span class="hljs-built_in">console</span>.log(myArr)<br>   <span class="hljs-comment">// [ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ]</span><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>     myArr[j](j)<br>   &#125;<br>   <span class="hljs-comment">//0 1 2 3 4 5 6 7 8 9</span><br><br><span class="hljs-comment">//方法二，在第一个循环添加一个立即执行函数，将循环每一次的i保存并传给它内部的匿名函数</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> arr = []<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>       (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">j</span>) </span>&#123;<br>         arr[j] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-built_in">document</span>.write(j + <span class="hljs-string">&#x27; &#x27;</span>)<br>         &#125;<br>       &#125;)(i)<br>     &#125;<br>     <span class="hljs-keyword">return</span> arr<br>   &#125;<br>   <span class="hljs-keyword">var</span> myArr = test1()<br>   <span class="hljs-built_in">console</span>.log(myArr)<br>   <span class="hljs-comment">// [ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ]</span><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>     myArr[j]()<br>   &#125;<br>   <span class="hljs-comment">// 0 1 2 3 4 5 6 7 8 9</span><br><br><span class="hljs-comment">//方法三，直接使用立即执行函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>       (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>         <span class="hljs-built_in">document</span>.write(i + <span class="hljs-string">&#x27; &#x27;</span>)<br>       &#125;)()<br>     &#125;<br>   &#125;<br>   test2() <span class="hljs-comment">//0 1 2 3 4 5 6 7 8 9</span><br></code></pre></div></td></tr></table></figure><p>修改以下代码，使之点击对应的li，打印对应li下标</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ul&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">var</span> uLi = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; uLi.length; i++) &#123;</span></span><br><span class="javascript"><span class="xml">    uLi[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//.onclick就相当于是return，每点击一下就形成了闭包</span></span></span><br><span class="javascript"><span class="xml">      <span class="hljs-built_in">console</span>.log(i) <span class="hljs-comment">//不管点击哪一个li都是5</span></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>用立即执行函数包裹点击事件，并将外部的i作为实参传入匿名函数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ul&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">var</span> uLi = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;li&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; uLi.length; i++) &#123;</span></span><br><span class="javascript"><span class="xml">    ;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">j</span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">      uLi[j].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">console</span>.log(j)</span></span><br><span class="javascript"><span class="xml">      &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;)(i) <span class="hljs-comment">//用立即执行函数包裹点击事件，并将外部的i作为实参传入匿名函数</span></span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h2 id="逗号运算"><a href="#逗号运算" class="headerlink" title="逗号运算"></a>逗号运算</h2><p>逗号运算默认只输出最后一个</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = (<span class="hljs-number">1</span> + <span class="hljs-number">1</span>, <span class="hljs-number">2</span> + <span class="hljs-number">2</span>, <span class="hljs-number">1</span> - <span class="hljs-number">1</span>)<br><span class="hljs-built_in">console</span>.log(num) <span class="hljs-comment">// 0</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fn = (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;,<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;2&#x27;</span><br>&#125;)()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> fn) <span class="hljs-comment">//string</span><br></code></pre></div></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h4><p>在对象内部，都是键值对来存储数据</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span>,<br>&#125;<br><span class="hljs-comment">//对象字面量</span><br>obj.name = <span class="hljs-string">&#x27;李四&#x27;</span><br><span class="hljs-built_in">console</span>.log(obj)<br></code></pre></div></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>对象和构造函数不是同一个东西，对象是通过实例化构造函数(<code>new Object()</code>)而创造的对象实例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>() <span class="hljs-comment">//与对象字面量相等</span><br>obj.name = <span class="hljs-string">&#x27;张三&#x27;</span><br></code></pre></div></td></tr></table></figure><p>构造函数实例化之后this指向实例化对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//new的时候构造函数内部产生成this，生成原型链</span><br>  <span class="hljs-comment">// let this = &#123;</span><br>  <span class="hljs-comment">//  __proto__: Test.prototype</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;123&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> test = <span class="hljs-keyword">new</span> Test()<br><span class="hljs-comment">// new 之前this指向window</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//  this: window</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// new 之后this接收属性和原型生成原型链</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   this:&#123;</span><br><span class="hljs-comment">//      name:&#x27;123&#x27;, //接收属性</span><br><span class="hljs-comment">//      __proto__: Test.prototype //生成原型链</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//new的时候产生GO</span><br><span class="hljs-comment">// GO = &#123;</span><br><span class="hljs-comment">//   Test: function test() &#123;...&#125;</span><br><span class="hljs-comment">//   test:&#123; //new 之后</span><br><span class="hljs-comment">//      name:&#x27;123&#x27;, //接收属性</span><br><span class="hljs-comment">//      __proto__: Test.prototype //生成原型链</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p> 这种工厂模式虽然可以解决创建多个类似对象的问题，但没有解决对象标识问题（即新创建的对象是什么类型）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPerson</span>(<span class="hljs-params">name, age, job</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>  o.name = name<br>  o.age = age<br>  o.job = job<br>  o.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>  &#125;<br>  <span class="hljs-keyword">return</span> o<br>&#125;<br><span class="hljs-keyword">let</span> person1 = createPerson(<span class="hljs-string">&#x27;Nicholas&#x27;</span>, <span class="hljs-number">29</span>, <span class="hljs-string">&#x27;Software Engineer&#x27;</span>)<br><span class="hljs-keyword">let</span> person2 = createPerson(<span class="hljs-string">&#x27;Greg&#x27;</span>, <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;Doctor&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="实例化原理"><a href="#实例化原理" class="headerlink" title="实例化原理"></a>实例化原理</h3><h4 id="自定义构造函数-构造函数模式"><a href="#自定义构造函数-构造函数模式" class="headerlink" title="自定义构造函数(构造函数模式)"></a>自定义构造函数(构造函数模式)</h4><p>建议大驼峰，区别于普通函数<br>构造函数模式和工厂模式的区别</p><ul><li>没有显式地创建对象。</li><li>属性和方法直接赋值给了 this。</li><li>没有 return。  </li></ul><p>在对象实例化之前，this指向window，实例化对象之后，this指向实例化的那个对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//类似构造工厂，此时没有实例化，this指向window</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-comment">//此处this没有指向，谁new之后才指向谁</span><br>     <span class="hljs-built_in">this</span>.sex = <span class="hljs-string">&#x27;男&#x27;</span><br>     <span class="hljs-built_in">this</span>.smoke = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am smoking&#x27;</span>)<br>     &#125;<br>   &#125;<br>   <span class="hljs-keyword">let</span> teacher1 = <span class="hljs-keyword">new</span> Teacher() <span class="hljs-comment">//实例化对象之后，此时this指向teacher1</span><br>   <span class="hljs-keyword">let</span> teacher2 = <span class="hljs-keyword">new</span> Teacher() <span class="hljs-comment">//此时this指向teacher2</span><br>   teacher1.name = <span class="hljs-string">&#x27;李四&#x27;</span><br><span class="hljs-comment">//实例化的两个对象修改属性互不干扰</span><br>   <span class="hljs-built_in">console</span>.log(teacher1, teacher2)<br>   <span class="hljs-comment">// Teacher &#123;name: &#x27;李四&#x27;, sex: &#x27;男&#x27;, smoke: ƒ&#125;</span><br>   <span class="hljs-comment">// Teacher &#123;name: &#x27;张三&#x27;, sex: &#x27;男&#x27;, smoke: ƒ&#125;</span><br></code></pre></div></td></tr></table></figure><p>也可以传参，解决创建多个类似对象的问题  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, job</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>  <span class="hljs-built_in">this</span>.age = age<br>  <span class="hljs-built_in">this</span>.job = job<br>  <span class="hljs-built_in">this</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Nicholas&#x27;</span>, <span class="hljs-number">29</span>, <span class="hljs-string">&#x27;Software Engineer&#x27;</span>)<br><span class="hljs-keyword">let</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Greg&#x27;</span>, <span class="hljs-number">27</span>, <span class="hljs-string">&#x27;Doctor&#x27;</span>)<br>person1.sayName() <span class="hljs-comment">// Nicholas</span><br>person2.sayName() <span class="hljs-comment">// Greg</span><br></code></pre></div></td></tr></table></figure><p>也可以传对象，进行配置，方便以后维护和使用。vue也是这样的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">opt</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = opt.name<br>  <span class="hljs-built_in">this</span>.age = opt.age<br>  <span class="hljs-built_in">this</span>.job = opt.job<br>  <span class="hljs-built_in">this</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> person1 = <span class="hljs-keyword">new</span> Person(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;男&#x27;</span>,<br>  <span class="hljs-attr">job</span>: <span class="hljs-string">&#x27;老师&#x27;</span>,<br>&#125;)<br><span class="hljs-keyword">let</span> person2 = <span class="hljs-keyword">new</span> Person(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三2&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;女&#x27;</span>,<br>  <span class="hljs-attr">job</span>: <span class="hljs-string">&#x27;老师&#x27;</span>,<br>&#125;)<br><span class="hljs-built_in">console</span>.log(person1, person2)<br><span class="hljs-comment">//Person &#123;name: &#x27;张三&#x27;, age: &#x27;男&#x27;, job: &#x27;老师&#x27;, sayName: ƒ&#125;</span><br><span class="hljs-comment">//Person &#123;name: &#x27;张三2&#x27;, age: &#x27;女&#x27;, job: &#x27;老师&#x27;, sayName: ƒ&#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;<br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#example&#x27;</span>,<br>  <span class="hljs-attr">data</span>: data,<br>&#125;)<br></code></pre></div></td></tr></table></figure><h5 id="构造函数中的this"><a href="#构造函数中的this" class="headerlink" title="构造函数中的this"></a>构造函数中的this</h5><p>第一步，保存一个空的this对象<br>第二步，执行构造函数内部的代码，将数据存入空this对象<br>第三步，构造函数隐式的返回this</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">color, brand</span>) </span>&#123;<br>  <span class="hljs-comment">//实例化之后内部产生的this</span><br>  <span class="hljs-comment">// this=&#123; //第二步，执行构造函数内部的代码，将数据存入this(添加属性)</span><br>  <span class="hljs-comment">//   color:color,</span><br>  <span class="hljs-comment">//   brand:brand</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-built_in">this</span>.color = color<br>  <span class="hljs-built_in">this</span>.brand = brand<br><br>  <span class="hljs-comment">//return this; //第三步，隐式的返回this，所以GO才能拿到car1这个对象的this</span><br>&#125;<br><span class="hljs-comment">//Car被实例化时，相当于普通函数被执行，就有自己的AO</span><br><span class="hljs-keyword">let</span> car1 = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;Benz&#x27;</span>) <span class="hljs-comment">//相当于返回构造之后的this</span><br><span class="hljs-comment">// GO = &#123;</span><br><span class="hljs-comment">//   Car:(function)</span><br><span class="hljs-comment">//   car1:&#123; //实例化对象后就产生car1变量</span><br><span class="hljs-comment">//      color:&#x27;red&#x27;,</span><br><span class="hljs-comment">//      brand:&#x27;Benz&#x27;</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   this: &#123;</span><br><span class="hljs-comment">//      color:color,</span><br><span class="hljs-comment">//      brand:brand</span><br><span class="hljs-comment">//   &#125; //第一步，实例化时就产生AO和空的this对象。第二步执行后才将数据存入</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-built_in">console</span>.log(car1.color)<br></code></pre></div></td></tr></table></figure><h5 id="不用new和this构造函数"><a href="#不用new和this构造函数" class="headerlink" title="不用new和this构造函数"></a>不用new和this构造函数</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">color, brand</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> me = &#123;&#125;<br>  me.color = color<br>  me.brand = brand<br>  <span class="hljs-keyword">return</span> me<br>&#125;<br><span class="hljs-keyword">let</span> car = Car(<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;Mazda&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(car.color) <span class="hljs-comment">// red</span><br><span class="hljs-built_in">console</span>.log(car.brand) <span class="hljs-comment">// Mazda</span><br></code></pre></div></td></tr></table></figure><h5 id="显示返回一个值"><a href="#显示返回一个值" class="headerlink" title="显示返回一个值"></a>显示返回一个值</h5><p>返回原始值没有用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.color = <span class="hljs-string">&#x27;red&#x27;</span><br>  <span class="hljs-built_in">this</span>.brand = <span class="hljs-string">&#x27;Mazda&#x27;</span><br>  <span class="hljs-comment">// return 123 //Car &#123;color: &#x27;red&#x27;, brand: &#x27;Mazda&#x27;&#125;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;abc&#x27;</span> <span class="hljs-comment">//Car &#123;color: &#x27;red&#x27;, brand: &#x27;Mazda&#x27;&#125;</span><br>&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-built_in">console</span>.log(car) <br></code></pre></div></td></tr></table></figure><p>返回引用值就会覆盖</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.color = <span class="hljs-string">&#x27;red&#x27;</span><br>  <span class="hljs-built_in">this</span>.brand = <span class="hljs-string">&#x27;Mazda&#x27;</span><br>  <span class="hljs-comment">// return [&#x27;1&#x27;] //[&#x27;1&#x27;]</span><br>  <span class="hljs-comment">// return &#123;&#125; //&#123;&#125;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>(<span class="hljs-params"></span>) </span>&#123;&#125; <span class="hljs-comment">//ƒ name() &#123;&#125;</span><br>&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-built_in">console</span>.log(car)<br></code></pre></div></td></tr></table></figure><p>计算加法乘法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Compute</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> args = <span class="hljs-built_in">arguments</span>,<br>    res<br>  <span class="hljs-built_in">this</span>.plus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    res = <span class="hljs-number">0</span><br>    loop(<span class="hljs-string">&#x27;add&#x27;</span>, res)<br>  &#125;<br>  <span class="hljs-built_in">this</span>.times = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    res = <span class="hljs-number">1</span><br>    loop(<span class="hljs-string">&#x27;mul&#x27;</span>, res)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loop</span>(<span class="hljs-params">method, res</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>      <span class="hljs-keyword">let</span> item = args[i]<br>      <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;add&#x27;</span>) &#123;<br>        res += item<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;mul&#x27;</span>) &#123;<br>        res *= item<br>      &#125;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(res)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> compute = <span class="hljs-keyword">new</span> Compute(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>)<br>compute.plus() <span class="hljs-comment">//12</span><br>compute.times() <span class="hljs-comment">//48</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Compute</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span><br>  <span class="hljs-built_in">this</span>.plus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    loop(<span class="hljs-built_in">arguments</span>, <span class="hljs-string">&#x27;add&#x27;</span>, res)<br>  &#125;<br>  <span class="hljs-built_in">this</span>.times = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    res = <span class="hljs-number">1</span><br>    loop(<span class="hljs-built_in">arguments</span>, <span class="hljs-string">&#x27;mul&#x27;</span>, res)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loop</span>(<span class="hljs-params">args, method, res</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>      <span class="hljs-keyword">let</span> item = args[i]<br>      <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;add&#x27;</span>) &#123;<br>        res += item<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method === <span class="hljs-string">&#x27;mul&#x27;</span>) &#123;<br>        res *= item<br>      &#125;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(res)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> compute = <span class="hljs-keyword">new</span> Compute()<br>compute.plus(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>) <span class="hljs-comment">//12</span><br>compute.times(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>) <span class="hljs-comment">//105</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">opt</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.brand = opt.brand<br>  <span class="hljs-built_in">this</span>.color = opt.color<br>  <span class="hljs-built_in">this</span>.displacement = opt.displacement<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">opt</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = opt.name<br>  <span class="hljs-built_in">this</span>.age = opt.age<br>  <span class="hljs-built_in">this</span>.income = opt.income<br>  <span class="hljs-built_in">this</span>.selectCar = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> myCar = <span class="hljs-keyword">new</span> Car(opt.carOpt)<br>    <span class="hljs-built_in">console</span>.log(<br>      <span class="hljs-built_in">this</span>.name +<br>        <span class="hljs-string">&#x27;挑选了排量&#x27;</span> +<br>        myCar.displacement +<br>        <span class="hljs-string">&#x27;的&#x27;</span> +<br>        myCar.color +<br>        myCar.brand,<br>    )<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> jone = <span class="hljs-keyword">new</span> Person(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;约翰&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">29</span>,<br>  <span class="hljs-attr">income</span>: <span class="hljs-string">&#x27;20k&#x27;</span>,<br>  <span class="hljs-attr">carOpt</span>: &#123;<br>    <span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;马自达&#x27;</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;红色&#x27;</span>,<br>    <span class="hljs-attr">displacement</span>: <span class="hljs-string">&#x27;2.0&#x27;</span>,<br>  &#125;,<br>&#125;)<br>jone.selectCar()<br></code></pre></div></td></tr></table></figure><p>输入字符串，判断多少字节</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> getBytes1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> bytes = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>    <span class="hljs-keyword">let</span> pos = str.charCodeAt(i)<br>    <span class="hljs-keyword">if</span> (pos &lt;= <span class="hljs-number">255</span>) &#123;<br>      bytes++<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      bytes += <span class="hljs-number">2</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> bytes<br>&#125;<br><span class="hljs-built_in">console</span>.log(getBytes1(<span class="hljs-string">&#x27;你好！ 123&#x27;</span>)) <span class="hljs-comment">//11</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBytes2</span>(<span class="hljs-params">str</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> bytes = str.length<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>    <span class="hljs-keyword">let</span> pos = str.charCodeAt(i)<br>    <span class="hljs-keyword">if</span> (pos &gt; <span class="hljs-number">255</span>) &#123;<br>      bytes++<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> bytes<br>&#125;<br><span class="hljs-built_in">console</span>.log(getBytes2(<span class="hljs-string">&#x27;你好！ 123&#x27;</span>)) <span class="hljs-comment">//10</span><br></code></pre></div></td></tr></table></figure><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p><strong>原始值没有自己的方法和属性，但是可以进行包装变成对象</strong><br><strong>string是原始值，没有length属性</strong><br>包装系统内置三种构造函数<code>new Number</code>、<code>new String</code>、<code>new Boolean</code><br>包装成对应对象之后可以为其添加属性，也能进行计算</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//Number &#123;1&#125;</span><br>a.A = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//Number &#123;1, A: &#x27;1&#x27;&#125;</span><br><span class="hljs-keyword">let</span> a1 = a + <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(a1) <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//Number &#123;1, A: &#x27;1&#x27;&#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> test = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-literal">undefined</span>)<br><span class="hljs-built_in">console</span>.log(test) <span class="hljs-comment">//Number &#123;NaN&#125;</span><br><span class="hljs-keyword">let</span> test1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-built_in">console</span>.log(test1) <span class="hljs-comment">//Number &#123;0&#125;</span><br><span class="hljs-keyword">let</span> test2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-literal">undefined</span>)<br><span class="hljs-built_in">console</span>.log(test2) <span class="hljs-comment">//String &#123;&#x27;undefined&#x27;&#125;</span><br><span class="hljs-keyword">let</span> test3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-built_in">console</span>.log(test3) <span class="hljs-comment">//String &#123;&#x27;null&#x27;&#125;</span><br></code></pre></div></td></tr></table></figure><p>undefined、null是不可以设置任何属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span>.length) <span class="hljs-comment">//Cannot read properties of null (reading &#x27;length&#x27;)</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">undefined</span>.length) <span class="hljs-comment">//Cannot read properties of undefined (reading &#x27;length&#x27;)</span><br></code></pre></div></td></tr></table></figure><h4 id="包装类过程"><a href="#包装类过程" class="headerlink" title="包装类过程"></a>包装类过程</h4><p>如果不是对象</p><ul><li>先判断定义类型是什么</li><li>然后系统自动转化成对应对象</li><li>最后无法保存对象，就只能删掉那个属性<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//JS包装类</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">123</span> <span class="hljs-comment">//原始值 -&gt; 数字</span><br>a.len = <span class="hljs-number">3</span><br><span class="hljs-comment">//new Number(123).len=3; //系统自动转化成对应对象，但是没法保存 只能删掉这个属性</span><br><span class="hljs-built_in">console</span>.log(a.len) <span class="hljs-comment">//undefined  //再次访问的时候就是undefined</span><br></code></pre></div></td></tr></table></figure>string是原始值，没有length属性。<br>str能够使用length是因为内部已经进行了包装类<code>new String(str).length</code><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;abc&#x27;</span><br><span class="hljs-comment">//str能够使用length是因为内部已经进行了包装new String(str).length</span><br><span class="hljs-comment">//new String(str).length</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(str).length) <span class="hljs-comment">//3</span><br></code></pre></div></td></tr></table></figure>数组有length属性，可以进行截断<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.length = <span class="hljs-number">3</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [1, 2, 3]</span><br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr1.length = <span class="hljs-number">6</span><br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [1, 2, 3, 4, 5, empty]</span><br></code></pre></div></td></tr></table></figure>string不可以被截断,<br>因为开始判断是原始值，然后进行包装类，后来因为不能保存，就删掉，结果就是打印无变化<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;abc&#x27;</span><br>str.length = <span class="hljs-number">1</span> <span class="hljs-comment">//new String(str).length=1 是原始值，进行包装类</span><br><span class="hljs-comment">//delete 无法保存就删除掉</span><br><span class="hljs-built_in">console</span>.log(str) <span class="hljs-comment">//abc  最后打印没有变化</span><br></code></pre></div></td></tr></table></figure>修改以下代码，打印出string<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;abc&#x27;</span><br>name += <span class="hljs-number">10</span> <span class="hljs-comment">//&#x27;abc10&#x27;</span><br><span class="hljs-keyword">let</span> type = <span class="hljs-keyword">typeof</span> name <span class="hljs-comment">//&#x27;string&#x27;</span><br><span class="hljs-keyword">if</span> (type.length === <span class="hljs-number">6</span>) &#123;<br>  <span class="hljs-comment">//true</span><br>type.text = <span class="hljs-string">&#x27;string&#x27;</span> <span class="hljs-comment">//new String(type).text=&#x27;string&#x27;原始值包装类，但是无法保存</span><br>  <span class="hljs-comment">//delete</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(type.text) <span class="hljs-comment">//undefined</span><br></code></pre></div></td></tr></table></figure>提前包装类，转换成String对象，之后就可以添加属性<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;abc&#x27;</span><br> name += <span class="hljs-number">10</span> <span class="hljs-comment">//&#x27;abc10&#x27;</span><br> <span class="hljs-keyword">let</span> type = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-keyword">typeof</span> name) <span class="hljs-comment">//直接包装类，打印出字符串 string</span><br> <span class="hljs-keyword">if</span> (type.length === <span class="hljs-number">6</span>) &#123;<br>   <span class="hljs-comment">//true</span><br>   type.text = <span class="hljs-string">&#x27;string&#x27;</span> <span class="hljs-comment">//type已经是string对象可以添加属性</span><br> &#125;<br> <span class="hljs-built_in">console</span>.log(type.text) <span class="hljs-comment">//string</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params">a, b, c</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> d = <span class="hljs-number">1</span><br>  <span class="hljs-built_in">this</span>.a = a<br>  <span class="hljs-built_in">this</span>.b = b<br>  <span class="hljs-built_in">this</span>.c = c<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br>    d++<br>    <span class="hljs-built_in">console</span>.log(d)<br>  &#125;<br>  <span class="hljs-built_in">this</span>.g = f<br>  <span class="hljs-comment">//return this; 隐式return this 形成了闭包。</span><br>  <span class="hljs-comment">//AO里含有d，所以之后就能访问到</span><br>&#125;<br><span class="hljs-keyword">let</span> test1 = <span class="hljs-keyword">new</span> Test()<br>test1.g() <span class="hljs-comment">//2</span><br>test1.g() <span class="hljs-comment">//3</span><br><span class="hljs-keyword">let</span> test2 = <span class="hljs-keyword">new</span> Test()<br>test2.g() <span class="hljs-comment">//2</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>,<br>  y = (z = <span class="hljs-number">0</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (n = n + <span class="hljs-number">1</span>)<br>&#125;<br>y = add(x)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (n = n + <span class="hljs-number">3</span>)<br>&#125;<br>z = add(x)<br><span class="hljs-built_in">console</span>.log(x, y, z) <span class="hljs-comment">//1 4 4</span><br><span class="hljs-comment">// GO = &#123;</span><br><span class="hljs-comment">//   x: 1,</span><br><span class="hljs-comment">//   y: 0,</span><br><span class="hljs-comment">//   z: 0,</span><br><span class="hljs-comment">//   add:function add(n) &#123;return n=n+3&#125; //重名覆盖了</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure>下列哪些可以打印1 2 3 4 5<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//可以</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo1</span>(<span class="hljs-params">x</span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)<br>     <span class="hljs-keyword">return</span> x<br>   &#125;<br>   foo1(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><br><span class="hljs-comment">//不可以</span><br>   <span class="hljs-comment">// function foo2(x) &#123;</span><br>   <span class="hljs-comment">//   console.log(arguments)</span><br>   <span class="hljs-comment">//   return x</span><br>   <span class="hljs-comment">// &#125;(1, 2, 3, 4, 5)</span><br><br><span class="hljs-comment">//可以</span><br>   (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo3</span>(<span class="hljs-params">x</span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)<br>     <span class="hljs-keyword">return</span> x<br>   &#125;)(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params">x, y, a</span>) </span>&#123;<br>  a = <span class="hljs-number">10</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[<span class="hljs-number">2</span>]) <span class="hljs-comment">//10</span><br>&#125;<br>b(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params">x, y, a</span>) </span>&#123;<br>  <span class="hljs-built_in">arguments</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">10</span><br>  <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//10</span><br>&#125;<br>c(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></div></td></tr></table></figure><h3 id="原型prototype"><a href="#原型prototype" class="headerlink" title="原型prototype"></a>原型prototype</h3></li></ul><p><strong>原型对象prototype其实是构造函数(function对象)的一个属性，但是他也是一个对象</strong><br>只要创建一个函数，就会按照特定的规则为这个函数创建一个 prototype 属性（指向原型对象）。默认情况下，所有原型对象自动获得一个名为 constructor 的属性，指回与之关联的构造函数。  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-comment">//prototype</span><br><span class="hljs-built_in">console</span>.log(Test.prototype) <span class="hljs-comment">//&#123;constructor: ƒ&#125;</span><br></code></pre></div></td></tr></table></figure><p><strong>prototype是定义构造函数构造出的每个对象的公共祖先，所有被该构造函数构造出来的对象都可以继承原型上的属性和方法</strong><br>对象自己身上有的就不会访问原型上的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Handphone</span>(<span class="hljs-params">color, brand</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.color = color<br>  <span class="hljs-built_in">this</span>.brand = brand<br>  <span class="hljs-built_in">this</span>.screen = <span class="hljs-string">&#x27;18:9&#x27;</span><br>&#125;<br>Handphone.prototype.rom = <span class="hljs-string">&#x27;64G&#x27;</span><br>Handphone.prototype.ram = <span class="hljs-string">&#x27;6G&#x27;</span><br>Handphone.prototype.screen = <span class="hljs-string">&#x27;16:9&#x27;</span><br><span class="hljs-keyword">let</span> hp1 = <span class="hljs-keyword">new</span> Handphone(<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;小米&#x27;</span>)<br><span class="hljs-keyword">let</span> hp2 = <span class="hljs-keyword">new</span> Handphone(<span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-string">&#x27;红米&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(hp1.rom) <span class="hljs-comment">//64D</span><br><span class="hljs-built_in">console</span>.log(hp2.ram) <span class="hljs-comment">//6G</span><br><span class="hljs-built_in">console</span>.log(hp1.screen) <span class="hljs-comment">//18:9 //自己身上有的就访问自己的，不会访问祖先的</span><br><span class="hljs-built_in">console</span>.log(hp2.screen) <span class="hljs-comment">//18:9</span><br></code></pre></div></td></tr></table></figure><p>推荐固定的值或者方法写在原型上，需要变化或者传参配置的值写在构造函数内部，这样可以减少代码冗余</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Handphone</span>(<span class="hljs-params">color, brand</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.color = color<br>     <span class="hljs-built_in">this</span>.brand = brand<br>   &#125;<br>   <span class="hljs-comment">// Handphone.prototype.rom = &#x27;64G&#x27;</span><br>   <span class="hljs-comment">// Handphone.prototype.ram = &#x27;6G&#x27;</span><br>   <span class="hljs-comment">// Handphone.prototype.screen = &#x27;16:9&#x27;</span><br>   <span class="hljs-comment">// Handphone.prototype.call = function () &#123;</span><br>   <span class="hljs-comment">//   console.log(&#x27;I am calling&#x27;)</span><br>   <span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//开发中一般写在一起</span><br>   Handphone.prototype = &#123;<br>     <span class="hljs-attr">rom</span>: <span class="hljs-string">&#x27;64G&#x27;</span>,<br>     <span class="hljs-attr">ram</span>: <span class="hljs-string">&#x27;6G&#x27;</span>,<br>     <span class="hljs-attr">screen</span>: <span class="hljs-string">&#x27;16:9&#x27;</span>,<br>     <span class="hljs-attr">call</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am calling&#x27;</span>)<br>     &#125;,<br>   &#125;<br>   <span class="hljs-keyword">let</span> hp1 = <span class="hljs-keyword">new</span> Handphone(<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;小米&#x27;</span>)<br>   <span class="hljs-keyword">let</span> hp2 = <span class="hljs-keyword">new</span> Handphone(<span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-string">&#x27;红米&#x27;</span>)<br>hp2.call() <span class="hljs-comment">//I am calling</span><br><br></code></pre></div></td></tr></table></figure><p><strong>通过实例化对象不能增删改祖先prototype上的值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>Test.prototype.name = <span class="hljs-string">&#x27;TEST&#x27;</span><br><span class="hljs-keyword">let</span> test = <span class="hljs-keyword">new</span> Test()<br><span class="hljs-built_in">console</span>.log(Test.prototype) <span class="hljs-comment">//&#123;name: &#x27;TEST&#x27;, constructor: ƒ&#125;</span><br>test.job = <span class="hljs-number">123</span><br><span class="hljs-built_in">console</span>.log(Test.prototype, test)<br><span class="hljs-comment">//&#123;name: &#x27;TEST&#x27;, constructor: ƒ&#125;</span><br><span class="hljs-comment">//Test &#123;job: 123&#125;</span><br>test.name = test<br><span class="hljs-built_in">console</span>.log(Test.prototype, test)<br><span class="hljs-comment">//&#123;name: &#x27;TEST&#x27;, constructor: ƒ&#125;</span><br><span class="hljs-comment">//Test &#123;job: 123, name: Test&#125;</span><br><span class="hljs-keyword">delete</span> test.name<br><span class="hljs-built_in">console</span>.log(Test.prototype, test)<br><span class="hljs-comment">//&#123;name: &#x27;TEST&#x27;, constructor: ƒ&#125;</span><br><span class="hljs-comment">//Test &#123;job: 123&#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="构造器constructor"><a href="#构造器constructor" class="headerlink" title="构造器constructor"></a>构造器constructor</h3><p><strong>constructor默认指向构造函数本身</strong><br>在自定义构造函数时，原型对象默认只会获得 constructor 属性，其他的所有方法都继承自 Object。<br>构造函数有一个 prototype 属性引用其原型对象，而这个原型对象也有一个constructor 属性，引用这个构造函数。换句话说，两者循环引用  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Handphone</span>(<span class="hljs-params">color, brand</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.color = color<br>  <span class="hljs-built_in">this</span>.brand = brand<br>&#125;<br><span class="hljs-built_in">console</span>.log(Handphone.prototype) <span class="hljs-comment">//&#123;constructor: ƒ&#125;</span><br><span class="hljs-comment">// &#123;constructor: ƒ&#125;</span><br><span class="hljs-comment">//    constructor: ƒ Handphone(color, brand)</span><br><span class="hljs-comment">//    [[Prototype]]: Object</span><br><br><span class="hljs-built_in">console</span>.log(Handphone.prototype.constructor === Handphone)<br><br></code></pre></div></td></tr></table></figure><p>可以通过原型内部的constructor更改构造函数的constructor</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Telephone</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Handphone</span>(<span class="hljs-params">color, brand</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.color = color<br>  <span class="hljs-built_in">this</span>.brand = brand<br>&#125;<br>Handphone.prototype = &#123;<br>  <span class="hljs-attr">constructor</span>: Telephone,<br>&#125;<br><span class="hljs-built_in">console</span>.log(Handphone.prototype)<br><span class="hljs-comment">// &#123;constructor: ƒ&#125;</span><br><span class="hljs-comment">//   constructor: ƒ Telephone()</span><br><span class="hljs-comment">//   [[Prototype]]: Object</span><br></code></pre></div></td></tr></table></figure><h3 id="proto-Prototype"><a href="#proto-Prototype" class="headerlink" title="proto( [[Prototype]] )"></a><strong>proto</strong>( [[Prototype]] )</h3><p><strong>proto__只是一个容器，实例对象通过__proto__这个键名指向原型对象prototype<br>构造函数的prototype === 实例的__proto</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-built_in">console</span>.log(Car.prototype === car.__proto__) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><p>**__proto__是实例化以后的结果，__proto__属于实例化对象**<br>构造函数被实例化时会产生一个this，this默认有一个__proto__属性，指向他的原型。如果this中没有找到对应的属性，就会沿着__proto__找原型里的属性</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// var this = &#123;</span><br>  <span class="hljs-comment">//   __proto__: Car.prototype, //产生的this里边默认有__proto__属性，指向他的原型</span><br>  <span class="hljs-comment">// 如果this中没有对应的属性，就会根据__proto__向上找原型里的属性</span><br>  <span class="hljs-comment">// &#125;</span><br>&#125;<br>Car.prototype.name = <span class="hljs-string">&#x27;Benz&#x27;</span><br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car() <span class="hljs-comment">//构造函数被实例化时，内部产生一个this</span><br><span class="hljs-built_in">console</span>.log(car.name) <span class="hljs-comment">//Benz</span><br></code></pre></div></td></tr></table></figure><p>__proto__只是一个内部属性，也可以改</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>Person.prototype.name = <span class="hljs-string">&#x27;张三&#x27;</span><br><span class="hljs-keyword">let</span> p1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> Person()<br><span class="hljs-built_in">console</span>.log(person.name) <span class="hljs-comment">//张三</span><br>person.__proto__ = p1<br><span class="hljs-built_in">console</span>.log(person.name) <span class="hljs-comment">//李四</span><br></code></pre></div></td></tr></table></figure><h4 id="实例化前后赋值prototype"><a href="#实例化前后赋值prototype" class="headerlink" title="实例化前后赋值prototype"></a>实例化前后赋值prototype</h4><p>实例化之前赋值prototype可以修改</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Car.prototype.name = <span class="hljs-string">&#x27;Mazda&#x27;</span><br>Car.prototype.name = <span class="hljs-string">&#x27;Benz&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-built_in">console</span>.log(car.name) <span class="hljs-comment">//Benz</span><br></code></pre></div></td></tr></table></figure><p>实例化之后赋值prototype可以修改</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Car.prototype.name = <span class="hljs-string">&#x27;Mazda&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br>Car.prototype.name = <span class="hljs-string">&#x27;Benz&#x27;</span><br><span class="hljs-built_in">console</span>.log(car.name) <span class="hljs-comment">//Benz</span><br></code></pre></div></td></tr></table></figure><h4 id="实例化后重写prototype"><a href="#实例化后重写prototype" class="headerlink" title="实例化后重写prototype"></a>实例化后重写prototype</h4><p>实例化之前重写可以修改prototype属性</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Car.prototype.name = <span class="hljs-string">&#x27;Benz&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>Car.prototype = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Mazkda&#x27;</span> &#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-built_in">console</span>.log(car.name) <span class="hljs-comment">//Mazkda</span><br></code></pre></div></td></tr></table></figure><p>实例化之后重写的prototype属性不能影响实例化对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Car.prototype.name = <span class="hljs-string">&#x27;Benz&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br>Car.prototype = &#123;<br>  <span class="hljs-comment">//这是实例化之后重写的，不能影响实例的值</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Mazkda&#x27;</span>,<br>&#125;<br><span class="hljs-built_in">console</span>.log(car.name) <span class="hljs-comment">//Benz</span><br><span class="hljs-comment">//实例化时</span><br><span class="hljs-comment">// function Car() &#123;</span><br><span class="hljs-comment">//   let this = &#123;</span><br><span class="hljs-comment">//     __proto__: (Car.prototype = &#123;</span><br><span class="hljs-comment">//       name: &#x27;Benz&#x27;,</span><br><span class="hljs-comment">//     &#125;),</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><p>实例化对象的constructor指向的是构造函数，constructor保存的是实例化之前的东西<br>实例化之后再重写prototype(属于未实例化/实例化之前)就会被放到.prototype.constructor<br>所以实例化之后再重写prototype，此时重写的是实例化之前Car.prototype.constructor的prototype，对实例化对象无影响</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Car.prototype.name = <span class="hljs-string">&#x27;Benz&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">var</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-comment">//相当于与上一次实例化之后在重写prototype(属于未实例化/实例化之前)</span><br><span class="hljs-comment">//(属于未实例化/实例化之前)就被放到Car.prototype.constructor里</span><br>Car.prototype = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Mazkda&#x27;</span>, <span class="hljs-comment">//此时重写的是实例化之前Car.prototype.constructor的prototype</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(car)<br><span class="hljs-comment">// Car &#123;&#125;</span><br><span class="hljs-comment">//    [[Prototype]]: Object</span><br><span class="hljs-comment">//    name: &quot;Benz&quot;</span><br><span class="hljs-comment">//    constructor: ƒ Car() //constructor保存的是实例化之前的东西</span><br><span class="hljs-comment">//       arguments: null</span><br><span class="hljs-comment">//       caller: null</span><br><span class="hljs-comment">//       length: 0</span><br><span class="hljs-comment">//       name: &quot;Car&quot;</span><br><span class="hljs-comment">//       prototype: &#123;name: &#x27;Mazkda&#x27;&#125;</span><br><span class="hljs-built_in">console</span>.log(car.name) <span class="hljs-comment">//Benz</span><br><span class="hljs-comment">//实例化对象的constructor指向的是Car构造函数</span><br><span class="hljs-built_in">console</span>.log(car.constructor.prototype) <span class="hljs-comment">//&#123;name: &#x27;Mazkda&#x27;&#125;</span><br><span class="hljs-comment">// function Car() &#123;</span><br><span class="hljs-comment">//   let this = &#123;</span><br><span class="hljs-comment">//     __proto__: (Car.prototype = &#123;</span><br><span class="hljs-comment">//       name: &#x27;Benz&#x27;,</span><br><span class="hljs-comment">//     &#125;),</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//Car.prototype.constructor -&gt; Car() -&gt; prototype -&gt; name : Benz</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">plus1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    a++<br>    <span class="hljs-built_in">console</span>.log(a)<br>  &#125;<br>  <span class="hljs-keyword">return</span> plus1<br>&#125;<br><span class="hljs-keyword">let</span> plus = test()<br>plus() <span class="hljs-comment">//2</span><br>plus() <span class="hljs-comment">//3</span><br>plus() <span class="hljs-comment">//4</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">plus1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    a++<br>    <span class="hljs-built_in">console</span>.log(a)<br>  &#125;<br>  <span class="hljs-built_in">window</span>.plus = plus1<br>&#125;<br>test()<br>plus() <span class="hljs-comment">//2</span><br>plus() <span class="hljs-comment">//3</span><br>plus() <span class="hljs-comment">//4</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> plus = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">plus1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    a++<br>    <span class="hljs-built_in">console</span>.log(a)<br>  &#125;<br>  <span class="hljs-keyword">return</span> plus1<br>&#125;)()<br>plus() <span class="hljs-comment">//2</span><br>plus() <span class="hljs-comment">//3</span><br>plus() <span class="hljs-comment">//4</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">plus1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    a++<br>    <span class="hljs-built_in">console</span>.log(a)<br>  &#125;<br>  <span class="hljs-built_in">window</span>.plus = plus1<br>&#125;)()<br>plus() <span class="hljs-comment">//2</span><br>plus() <span class="hljs-comment">//3</span><br>plus() <span class="hljs-comment">//4</span><br></code></pre></div></td></tr></table></figure><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>沿着__proto__( [[Prototype]] )去找原型里的属性，一层一层继承原型的属性这条链就是原型链。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Professor.prototype.tSkill = <span class="hljs-string">&#x27;JAVA&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Professor</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> professor = <span class="hljs-keyword">new</span> Professor()<br><br>Teacher.prototype = professor<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.mSkill = <span class="hljs-string">&#x27;JS&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> teacher = <span class="hljs-keyword">new</span> Teacher()<br><br>Student.prototype = teacher<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.pSkill = <span class="hljs-string">&#x27;HTML&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> student = <span class="hljs-keyword">new</span> Student()<br><br><span class="hljs-built_in">console</span>.log(student)<br><span class="hljs-comment">// Student &#123;pSkill: &#x27;HTML&#x27;&#125;</span><br><span class="hljs-comment">//    [Prototype]]: Professor</span><br><span class="hljs-comment">//       mSkill: &quot;JS&quot;</span><br><span class="hljs-comment">//       [[Prototype]]: Professor</span><br><span class="hljs-comment">//          [[Prototype]]: Object</span><br><span class="hljs-comment">//              tSkill: &quot;JAVA&quot;</span><br><span class="hljs-comment">//              constructor: ƒ Professor()</span><br><span class="hljs-comment">//              [[Prototype]]: Object</span><br></code></pre></div></td></tr></table></figure><p><strong>原型链的顶端是Object.prototype</strong><br>Object.prototype里边保存了toString方法<br>Object.prototype.__proto__是null</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__ === <span class="hljs-literal">null</span>) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><p>如果是<strong>引用值，子级可以更改/添加父级或者祖先的属性(不推荐)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Professor.prototype.tSkill = <span class="hljs-string">&#x27;JAVA&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Professor</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> professor = <span class="hljs-keyword">new</span> Professor()<br><br>Teacher.prototype = professor<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.mSkill = <span class="hljs-string">&#x27;JS&#x27;</span><br>  <span class="hljs-built_in">this</span>.success = &#123;<br>    <span class="hljs-attr">alibaba</span>: <span class="hljs-string">&#x27;10&#x27;</span>,<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> teacher = <span class="hljs-keyword">new</span> Teacher()<br><br>Student.prototype = teacher<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.pSkill = <span class="hljs-string">&#x27;THML&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> student = <span class="hljs-keyword">new</span> Student()<br><br>student.success.baidu = <span class="hljs-string">&#x27;1&#x27;</span><br>student.success.alibaba = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-built_in">console</span>.log(teacher, student)<br><span class="hljs-comment">// Professor &#123;mSkill: &#x27;JS&#x27;, success: &#123;…&#125;&#125;</span><br><span class="hljs-comment">//    mSkill: &quot;JS&quot;</span><br><span class="hljs-comment">//    success: &#123;alibaba: &#x27;1&#x27;, baidu: &#x27;1&#x27;&#125;</span><br><span class="hljs-comment">//    [[Prototype]]: Professor</span><br><br><span class="hljs-comment">// Student &#123;pSkill: &#x27;THML&#x27;&#125;</span><br><span class="hljs-comment">//    pSkill: &quot;THML&quot;</span><br><span class="hljs-comment">//    [[Prototype]]: Professor</span><br><span class="hljs-comment">//        mSkill: &quot;JS&quot;</span><br><span class="hljs-comment">//        success: &#123;alibaba: &#x27;1&#x27;, baidu: &#x27;1&#x27;&#125;</span><br><span class="hljs-comment">//        [[Prototype]]: Professor</span><br></code></pre></div></td></tr></table></figure><p>如果是<strong>原始值，子级不能修改/增加父级或者祖先的属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Professor.prototype.tSkill = <span class="hljs-string">&#x27;JAVA&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Professor</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> professor = <span class="hljs-keyword">new</span> Professor()<br><br>Teacher.prototype = professor<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.mSkill = <span class="hljs-string">&#x27;JS&#x27;</span><br>  <span class="hljs-built_in">this</span>.students = <span class="hljs-number">500</span><br>&#125;<br><span class="hljs-keyword">let</span> teacher = <span class="hljs-keyword">new</span> Teacher()<br><br>Student.prototype = teacher<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.pSkill = <span class="hljs-string">&#x27;THML&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> student = <span class="hljs-keyword">new</span> Student()<br><br>student.students++<br><span class="hljs-built_in">console</span>.log(teacher, student)<br><span class="hljs-comment">// Professor &#123;mSkill: &#x27;JS&#x27;, students: 500&#125;</span><br><span class="hljs-comment">//    mSkill: &quot;JS&quot;</span><br><span class="hljs-comment">//    students: 500</span><br><span class="hljs-comment">//    [[Prototype]]: Professor</span><br><br><span class="hljs-comment">// Student &#123;pSkill: &#x27;THML&#x27;, students: 501&#125;</span><br><span class="hljs-comment">//    pSkill: &quot;THML&quot;</span><br><span class="hljs-comment">//    students: 501</span><br><span class="hljs-comment">//    [[Prototype]]: Professor</span><br><span class="hljs-comment">//        mSkill: &quot;JS&quot;</span><br><span class="hljs-comment">//        students: 500</span><br><span class="hljs-comment">//        [[Prototype]]: Professor</span><br></code></pre></div></td></tr></table></figure><p>this谁用指向谁</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.brand = <span class="hljs-string">&#x27;Benz&#x27;</span><br>&#125;<br>Car.prototype = &#123;<br>  <span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;Mazda&#x27;</span>,<br>  <span class="hljs-attr">intro</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是&#x27;</span> + <span class="hljs-built_in">this</span>.brand)<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-comment">//实例化时构造函数内部产生空this，然后执行代码将数据给this。</span><br><span class="hljs-comment">//构造函数中有brand就用自己的，没有intro就在原型上找</span><br><span class="hljs-comment">// function Car() &#123;</span><br><span class="hljs-comment">//   let this=&#123;</span><br><span class="hljs-comment">//     barnd:&#x27;Benz&#x27;</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// Car.prototype = &#123;</span><br><span class="hljs-comment">//   brand: &#x27;Mazda&#x27;,</span><br><span class="hljs-comment">//   intro: function () &#123;...&#125;,</span><br><span class="hljs-comment">// &#125;</span><br>car.intro() <span class="hljs-comment">//我是Benz</span><br>Car.prototype.intro() <span class="hljs-comment">//我是Mazda. //this谁用指向谁</span><br></code></pre></div></td></tr></table></figure><p>不是所有的对象都继承于Object.prototype。<br><code>Object.create(null)</code>创建的实例对象不继承Object.prototype。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>)<br>obj.num = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(obj) <span class="hljs-comment">//&#123;num: 1&#125; //不继承Object.prototype</span><br><span class="hljs-comment">// obj.toString() //obj.toString is not a function //也没有toString方法</span><br><span class="hljs-keyword">let</span> obj1 = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">2</span>,<br>&#125;<br>obj.__proto__ = obj1 <span class="hljs-comment">//没有继承Object.prototype的情况下，手动设置__proto__是无用的，无法访问</span><br><span class="hljs-built_in">console</span>.log(obj.count) <span class="hljs-comment">//undefined</span><br></code></pre></div></td></tr></table></figure><p>原始值是没有属性，所以undefined和null没有toString方法<br>undefined和null不能经过包装类，还没有原型</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(num.toString()) <span class="hljs-comment">//打印出字符串 1</span><br><span class="hljs-comment">//这里原始值可以使用toString是因为进行了包装类new Number(1)所以才有toString()</span><br></code></pre></div></td></tr></table></figure><p>​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> obj = &#123;&#125;<br><span class="hljs-keyword">let</span> obj2 = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>)<br><span class="hljs-comment">//document.write会将数据隐式转换成string</span><br><span class="hljs-built_in">document</span>.write(num) <span class="hljs-comment">//1</span><br><span class="hljs-built_in">document</span>.write(obj) <span class="hljs-comment">//[object Object] //对象类型的Object</span><br><span class="hljs-comment">// document.write(obj2) //Cannot convert object to primitive value不能将对象转为为原始值</span><br><span class="hljs-built_in">console</span>.log(obj2)<br><span class="hljs-comment">// &#123;&#125;</span><br><span class="hljs-comment">//   No properties //没有内容</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-number">1</span>) <span class="hljs-comment">// &#x27;[object Number]&#x27;</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">// &#x27;[object String]&#x27;</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-literal">true</span>) <span class="hljs-comment">// &#x27;[object Boolean]&#x27;</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) <span class="hljs-comment">// &#x27;[object Array]&#x27;</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(&#123; <span class="hljs-attr">name</span>: <span class="hljs-number">1</span> &#125;) <span class="hljs-comment">// &#x27;[object Object]&#x27;</span><br><br><span class="hljs-built_in">Number</span>.prototype.toString.call(<span class="hljs-number">1</span>) <span class="hljs-comment">//&#x27;1&#x27;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>&#125;<br>Foo.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>&#125;<br>Foo.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br>&#125;<br><span class="hljs-keyword">var</span> getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNane</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>)<br>&#125;<br><span class="hljs-comment">//预编译</span><br><span class="hljs-comment">//1、变量声明</span><br><span class="hljs-comment">//2、函数声明</span><br><span class="hljs-comment">//3、运行 -&gt; 赋值</span><br>Foo.getName() <span class="hljs-comment">//2  getName只是Foo上的属性，和Foo()没有关系</span><br>getName() <span class="hljs-comment">//4   预编译时就有了</span><br><span class="hljs-comment">// GO=&#123;</span><br><span class="hljs-comment">//   getName:undefined//1</span><br><span class="hljs-comment">//           function getName() &#123;console.log(5)&#125; //2</span><br><span class="hljs-comment">//           function () &#123;console.log(4)&#125; //3</span><br><span class="hljs-comment">// &#125;</span><br>Foo().getName() <span class="hljs-comment">//1 Foo()中的getName是全局 替换掉GO中的</span><br><span class="hljs-comment">// GO=&#123;</span><br><span class="hljs-comment">//   getName:function getName() &#123;console.log(1)&#125;</span><br><span class="hljs-comment">// &#125;</span><br>getName() <span class="hljs-comment">//1 全局中已经是1了</span><br><span class="hljs-keyword">new</span> Foo.getName() <span class="hljs-comment">//2 点运算优先级大于new，new在这里不起作用</span><br><span class="hljs-keyword">new</span> Foo().getName() <span class="hljs-comment">//3 括号优先级大于点，但是括号前有new是一起执行的，最后执行点</span><br><span class="hljs-comment">//找构造函数里的this.getName()，没有就在原型上找</span><br><span class="hljs-keyword">new</span> <span class="hljs-keyword">new</span> Foo().getName() <span class="hljs-comment">//3 同上两个先实例化构造函数，然后执行点，第一个new不起作用</span><br></code></pre></div></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>最下边的对象会继承原型链上所有的属性，都可以通过__proto__找到。<br>同时有一个问题，在子级prototype修改或者添加属性时，会影响到整个原型链上的属性</p><h4 id="圣杯模式"><a href="#圣杯模式" class="headerlink" title="圣杯模式"></a>圣杯模式</h4><p>加一个空的中间缓存对象，将父级prototype赋值给缓存对象的prototype，然后将缓存对象的实例对象赋值给子级prototype。因为实例化对象不能修改prototype上的值，所以缓存对象的实例对象赋值给子级prototype，这样子级是无法修改prototype的。解决继承和隔离问题，避免原型链的全局污染</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;Mr.L&#x27;</span><br>  <span class="hljs-built_in">this</span>.tSkill = <span class="hljs-string">&#x27;JAVA&#x27;</span><br>&#125;<br>Teacher.prototype = &#123;<br>  <span class="hljs-attr">pSkill</span>: <span class="hljs-string">&#x27;JS&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">let</span> t = <span class="hljs-keyword">new</span> Teacher()<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;Mr.W&#x27;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Buffer</span>(<span class="hljs-params"></span>) </span>&#123;&#125; <span class="hljs-comment">//添加一个中间缓存构造函数</span><br>Buffer.prototype = Teacher.prototype <span class="hljs-comment">//父级的原型赋值给缓存的原型</span><br><span class="hljs-keyword">let</span> buffer = <span class="hljs-keyword">new</span> Buffer()<br><br>Student.prototype = buffer <span class="hljs-comment">//缓存的实例对象赋值给子级原型</span><br>Student.prototype.age = <span class="hljs-number">19</span><br><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> Student()<br><br><span class="hljs-built_in">console</span>.log(t) <span class="hljs-comment">//Teacher &#123;name: &#x27;Mr.L&#x27;, tSkill: &#x27;JAVA&#x27;&#125;</span><br><span class="hljs-built_in">console</span>.log(s)<br><span class="hljs-comment">// Student &#123;name: &#x27;Mr.W&#x27;&#125;</span><br><span class="hljs-comment">//    name: &quot;Mr.W&quot;</span><br><span class="hljs-comment">//    [[Prototype]]: Object</span><br><span class="hljs-comment">//        age: 19</span><br><span class="hljs-comment">//        [[Prototype]]: Object</span><br><span class="hljs-comment">//            pSkill: &quot;JS&quot;</span><br><span class="hljs-comment">//            [[Prototype]]: Object</span><br></code></pre></div></td></tr></table></figure><h5 id="封装圣杯模式"><a href="#封装圣杯模式" class="headerlink" title="封装圣杯模式"></a>封装圣杯模式</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">Target, Origin</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Buffer</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  Buffer.prototype = Origin.prototypr<br>  Target.prototype = <span class="hljs-keyword">new</span> Buffer()<br>  Target.prototype.constructor = Target <span class="hljs-comment">//构造器指向自己</span><br>  Target.prototype.supper_class = Origin <span class="hljs-comment">//继承源</span><br>&#125;<br><br>Teacher.prototype.name = <span class="hljs-string">&#x27;Mr.Z&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>inherit(Student, Teacher)<br><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> Student()<br><span class="hljs-keyword">let</span> t = <span class="hljs-keyword">new</span> Teacher()<br><span class="hljs-built_in">console</span>.log(s)<br><span class="hljs-built_in">console</span>.log(t)<br></code></pre></div></td></tr></table></figure><h5 id="企业模块化"><a href="#企业模块化" class="headerlink" title="企业模块化"></a>企业模块化</h5><p>这个模块化把圣杯模式写成闭包，然后用立即执行函数赋值给一个变量，需要时才执行。减少全局污染，代码更加优雅</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> inherit = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> Buffer = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Target, Origin</span>) </span>&#123;<br>    Buffer.prototype = Origin.prototype<br>    Target.prototype = <span class="hljs-keyword">new</span> Buffer()<br>    Target.prototype.constructor = Target<br>    Target.prototype.super_class = Origin<br>  &#125;<br>&#125;)()<br>Teacher.prototype.name = <span class="hljs-string">&#x27;Mr.Z&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>inherit(Student, Teacher)<br><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> Student()<br><span class="hljs-keyword">let</span> t = <span class="hljs-keyword">new</span> Teacher()<br><span class="hljs-built_in">console</span>.log(s)<br><span class="hljs-built_in">console</span>.log(t)<br></code></pre></div></td></tr></table></figure><h3 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h3><p>call/apply可以更改this指向，call/apply调用时this指向指定的那个对象<br>call和apply则是立即调用，但是call的后续参数同原函数，apply则为包含所有原函数参数的类数组<br>区别就是call直接传字符串，apply传数组</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">brand, color</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.brand = brand<br>  <span class="hljs-built_in">this</span>.color = color<br>  <span class="hljs-built_in">this</span>.run = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;running&#x27;</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> newCar = &#123;<br>  <span class="hljs-attr">displacement</span>: <span class="hljs-number">2.0</span>,<br>&#125;<br>Car.call(newCar, <span class="hljs-string">&#x27;Benz&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(newCar) <span class="hljs-comment">//&#123;displacement: 2, brand: &#x27;Benz&#x27;, color: &#x27;red&#x27;, run: ƒ&#125;</span><br>Car.apply(newCar, [<span class="hljs-string">&#x27;Benz2&#x27;</span>, <span class="hljs-string">&#x27;red2&#x27;</span>])<br><span class="hljs-built_in">console</span>.log(newCar) <span class="hljs-comment">//&#123;displacement: 2, brand: &#x27;Benz2&#x27;, color: &#x27;red2&#x27;, run: ƒ&#125;</span><br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&#x27;Ben1&#x27;</span>, <span class="hljs-string">&#x27;red1&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(car) <span class="hljs-comment">//Car &#123;brand: &#x27;Ben1&#x27;, color: &#x27;red1&#x27;, run: ƒ&#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Compute</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.plus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a + b)<br>  &#125;<br>  <span class="hljs-built_in">this</span>.minus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a - b)<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">FullCompute</span>(<span class="hljs-params"></span>) </span>&#123;<br>  Compute.apply(<span class="hljs-built_in">this</span>)<br>  <span class="hljs-built_in">this</span>.mul = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a * b)<br>  &#125;<br>  <span class="hljs-built_in">this</span>.div = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a / b)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> compute = <span class="hljs-keyword">new</span> FullCompute()<br>compute.plus(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">//2</span><br>compute.minus(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">//0</span><br>compute.mul(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">//1</span><br>compute.div(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">//1</span><br></code></pre></div></td></tr></table></figure><p>apply改变this指向，使其构造函数Person可以使用Car内部的属性</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params">brand, color, displacement</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.brand = brand<br>  <span class="hljs-built_in">this</span>.color = color<br>  <span class="hljs-built_in">this</span>.displacement = displacement<br>  <span class="hljs-built_in">this</span>.info = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;排量为&#x27;</span> + <span class="hljs-built_in">this</span>.displacement + <span class="hljs-string">&#x27;的&#x27;</span> + <span class="hljs-built_in">this</span>.color + <span class="hljs-built_in">this</span>.brand<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">opt</span>) </span>&#123;<br>  Car.apply(<span class="hljs-built_in">this</span>, [opt.brand, opt.color, opt.displacement])<br>  <span class="hljs-built_in">this</span>.name = opt.name<br>  <span class="hljs-built_in">this</span>.age = opt.age<br>  <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age + <span class="hljs-string">&#x27;岁的&#x27;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;买了一辆&#x27;</span> + <span class="hljs-built_in">this</span>.info())<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Person(&#123;<br>  <span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;奔驰&#x27;</span>,<br>  <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;红色&#x27;</span>,<br>  <span class="hljs-attr">displacement</span>: <span class="hljs-string">&#x27;3.0&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;25&#x27;</span>,<br>&#125;)<br>p.say() <span class="hljs-comment">//25岁的张三买了一辆排量为3.0的红色奔驰</span><br></code></pre></div></td></tr></table></figure><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> sched = &#123;<br>  <span class="hljs-attr">wakeup</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Running&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>  &#125;,<br>  <span class="hljs-attr">morning</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Going&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>  &#125;,<br>  <span class="hljs-attr">eventing</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Walking&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>  &#125;,<br>  <span class="hljs-attr">night</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Sleeping&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>  &#125;,<br>&#125;<br>sched.wakeup().morning().eventing().night()<br><span class="hljs-comment">// Running</span><br><span class="hljs-comment">// Going</span><br><span class="hljs-comment">// Walking</span><br><span class="hljs-comment">// Sleeping</span><br></code></pre></div></td></tr></table></figure><h3 id="对象属性与遍历"><a href="#对象属性与遍历" class="headerlink" title="对象属性与遍历"></a>对象属性与遍历</h3><h4 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h4><p>设置动态属性，属性名用中括号表示<br>JS引擎最早也是使用<code>obj[&#39;name&#39;]</code>处理</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> myLang = &#123;<br>  <span class="hljs-attr">No1</span>: <span class="hljs-string">&#x27;HTML&#x27;</span>,<br>  <span class="hljs-attr">No2</span>: <span class="hljs-string">&#x27;CSS&#x27;</span>,<br>  <span class="hljs-attr">No3</span>: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>  <span class="hljs-attr">myStudyingLang</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>[<span class="hljs-string">&#x27;No&#x27;</span> + num])<br>  &#125;,<br>&#125;<br>myLang.myStudyingLang(<span class="hljs-number">1</span>) <span class="hljs-comment">//HTML</span><br>myLang.myStudyingLang(<span class="hljs-number">2</span>) <span class="hljs-comment">//CSS</span><br><br>obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;123&#x27;</span>,<br>&#125;<br><span class="hljs-built_in">console</span>.log(obj[<span class="hljs-string">&#x27;name&#x27;</span>]) <span class="hljs-comment">//123</span><br></code></pre></div></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  <span class="hljs-built_in">console</span>.log(arr[i])<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> car = &#123;<br>  <span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;Bena&#x27;</span>,<br>  <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>  <span class="hljs-attr">displacement</span>: <span class="hljs-string">&#x27;3.0&#x27;</span>,<br>  <span class="hljs-attr">lang</span>: <span class="hljs-string">&#x27;5&#x27;</span>,<br>  <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;2.5&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> car) &#123;<br>  <span class="hljs-comment">// console.log(car.key) //undefined  //car.key -&gt; car[&#x27;key&#x27;] -&gt; undefined</span><br>  <span class="hljs-built_in">console</span>.log(key + <span class="hljs-string">&#x27;:&#x27;</span> + car[key])<br>  <span class="hljs-comment">// brand:Bena</span><br>  <span class="hljs-comment">// color:red</span><br>  <span class="hljs-comment">// displacement:3.0</span><br>  <span class="hljs-comment">// lang:5</span><br>  <span class="hljs-comment">// width:2.5</span><br>&#125;<br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> arr) &#123;<br>  <span class="hljs-built_in">console</span>.log(arr[i])<br>&#125;<br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// 5</span><br></code></pre></div></td></tr></table></figure><p>判断属性是否在对象里</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> car = &#123;<br>  <span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;Benz&#x27;</span>,<br>  <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>&#125;<br><span class="hljs-comment">//car[&#x27;displacement&#x27;] //判断displacement是否在对象里</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;displacement&#x27;</span> <span class="hljs-keyword">in</span> car) <span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure><p>判断属性是否在构造函数里( in 不排除原型)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.brand = <span class="hljs-string">&#x27;Benz&#x27;</span><br>  <span class="hljs-built_in">this</span>.color = <span class="hljs-string">&#x27;red&#x27;</span><br>&#125;<br>Car.prototype = &#123;<br>  <span class="hljs-attr">displacement</span>: <span class="hljs-string">&#x27;3.0&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;displacement&#x27;</span> <span class="hljs-keyword">in</span> car) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><p>for in 会把原型链上的属性打印出来</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.brand = <span class="hljs-string">&#x27;Benz&#x27;</span><br>  <span class="hljs-built_in">this</span>.color = <span class="hljs-string">&#x27;red&#x27;</span><br>  <span class="hljs-built_in">this</span>.displacement = <span class="hljs-string">&#x27;3.0&#x27;</span><br>&#125;<br>Car.prototype = &#123;<br>  <span class="hljs-attr">lang</span>: <span class="hljs-number">5</span>,<br>  <span class="hljs-attr">width</span>: <span class="hljs-number">2.5</span>,<br>&#125;<br><span class="hljs-built_in">Object</span>.prototype.name = <span class="hljs-string">&#x27;Object&#x27;</span><br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> car) &#123;<br>  <span class="hljs-built_in">console</span>.log(key + <span class="hljs-string">&#x27;:&#x27;</span> + car[key])<br>&#125;<br><span class="hljs-comment">// brand:Benz</span><br><span class="hljs-comment">// color:red</span><br><span class="hljs-comment">// displacement:3.0</span><br><span class="hljs-comment">// lang:5</span><br><span class="hljs-comment">// width:2.5</span><br><span class="hljs-comment">// name:Object</span><br></code></pre></div></td></tr></table></figure><h4 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h4><p>hasOwnProperty只打印自身的属性，会排除原型<br>对象.hasOwnProperty(属性名)会排除自身以外的属性</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.brand = <span class="hljs-string">&#x27;Benz&#x27;</span><br>  <span class="hljs-built_in">this</span>.color = <span class="hljs-string">&#x27;red&#x27;</span><br>  <span class="hljs-built_in">this</span>.displacement = <span class="hljs-string">&#x27;3.0&#x27;</span><br>&#125;<br>Car.prototype = &#123;<br>  <span class="hljs-attr">lang</span>: <span class="hljs-number">5</span>,<br>  <span class="hljs-attr">width</span>: <span class="hljs-number">2.5</span>,<br>&#125;<br><span class="hljs-built_in">Object</span>.prototype.name = <span class="hljs-string">&#x27;Object&#x27;</span><br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> car) &#123;<br>  <span class="hljs-keyword">if</span> (car.hasOwnProperty(key)) &#123;<br>    <span class="hljs-built_in">console</span>.log(key + <span class="hljs-string">&#x27;:&#x27;</span> + car[key])<br>  &#125;<br>&#125;<br><span class="hljs-comment">// brand:Benz</span><br><span class="hljs-comment">// color:red</span><br><span class="hljs-comment">// displacement:3.0</span><br></code></pre></div></td></tr></table></figure><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>可通过 instanceof 操作符来判断对象的具体类型<br>检测某个对象是不是另一个对象的实例(判断A对象的原型里有没有B的原型)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Car</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> Car()<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Person()<br><span class="hljs-built_in">console</span>.log(car <span class="hljs-keyword">instanceof</span> Car) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(p <span class="hljs-keyword">instanceof</span> Car) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(p <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log([] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log([] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><h5 id="判断一个数据是否为数组"><a href="#判断一个数据是否为数组" class="headerlink" title="判断一个数据是否为数组"></a>判断一个数据是否为数组</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = []<br><span class="hljs-built_in">console</span>.log(a.constructor) <span class="hljs-comment">//ƒ Array() &#123; [native code] &#125;</span><br><span class="hljs-built_in">console</span>.log(a <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(a)) <span class="hljs-comment">//[object Array]</span><br></code></pre></div></td></tr></table></figure><h4 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h4><p>toString原本是Object.prototype里边的一种方法，但是使用call()把this指向换了</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = []<br><span class="hljs-comment">// Object.prototype.toString.call(a)</span><br><span class="hljs-built_in">Object</span>.prototype = &#123;<br>  <span class="hljs-attr">toString</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// this.toString() //原本是this指向Object</span><br>    a.toString() <span class="hljs-comment">//使用了call(),改变了this指向</span><br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>为什么会打印出<code>[object Array]</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[1, 2, 3]</span><br><span class="hljs-comment">//调用arr本身的toString方法</span><br><span class="hljs-built_in">console</span>.log(arr.toString()) <span class="hljs-comment">//1,2,3</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString()) <span class="hljs-comment">//[object Object]</span><br><span class="hljs-comment">//调用Object原型上的toString，并改变this指向</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(arr)) <span class="hljs-comment">//[object Array]</span><br></code></pre></div></td></tr></table></figure><p>判断是否数组(推荐使用<code>Object.prototype.toString.call()</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = []<br><span class="hljs-keyword">let</span> str = <span class="hljs-built_in">Object</span>.prototype.toString,<br>  trueTip = <span class="hljs-string">&#x27;[object Array]&#x27;</span><br><br><span class="hljs-keyword">if</span> (str.call(a) === trueTip) &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;是数组&#x27;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;不是数组&#x27;</span>)<br>&#125;<br><span class="hljs-comment">//是数组</span><br></code></pre></div></td></tr></table></figure><h4 id="callee-caller"><a href="#callee-caller" class="headerlink" title="callee/caller"></a>callee/caller</h4><h5 id="callee"><a href="#callee" class="headerlink" title="callee"></a>callee</h5><p>callee执行到arguments时所指向的函数是谁，cellee就返回谁</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">a, b, c</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee) <span class="hljs-comment">//arguments所对应的函数是谁callee就返回谁</span><br>  <span class="hljs-built_in">console</span>.log(test.length) <span class="hljs-comment">//3 形参length</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee.length) <span class="hljs-comment">//3 形参length</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.length) <span class="hljs-comment">//2 实参length</span><br>&#125;<br>test(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment">// ƒ test(a, b, c) &#123;</span><br><span class="hljs-comment">//   console.log(arguments.callee)</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>, <span class="hljs-built_in">arguments</span>.callee)<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>, <span class="hljs-built_in">arguments</span>.callee)<br>  &#125;<br>  test2()<br>&#125;<br>test1()<br><span class="hljs-comment">// 1 ƒ test1() &#123;</span><br><span class="hljs-comment">//   console.log(1, arguments.callee)</span><br><span class="hljs-comment">//   function test2() &#123;</span><br><span class="hljs-comment">//     console.log(2, arguments.callee)</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">//   test2()</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// 2 ƒ test2() &#123;</span><br><span class="hljs-comment">//     console.log(2, arguments.callee)</span><br><span class="hljs-comment">//   &#125;</span><br></code></pre></div></td></tr></table></figure><p>在立即执行函数中使用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// function sum(n) &#123;</span><br>   <span class="hljs-comment">//   if (n &lt;= 1) return 1</span><br>   <span class="hljs-comment">//   return n + sum(n - 1)</span><br>   <span class="hljs-comment">// &#125;</span><br>   <span class="hljs-comment">// console.log(sum(100)) //5050</span><br><span class="hljs-keyword">let</span> sum = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>     <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>     <span class="hljs-keyword">return</span> n + <span class="hljs-built_in">arguments</span>.callee(n - <span class="hljs-number">1</span>)<br>   &#125;)(<span class="hljs-number">100</span>)<br>   <span class="hljs-built_in">console</span>.log(sum) <span class="hljs-comment">//5050</span><br></code></pre></div></td></tr></table></figure><h5 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h5><p>caller返回调用当前函数的函数引用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">test1()<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  test2()<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(test2.caller)<span class="hljs-comment">//返回当前谁调用test2</span><br>&#125;<br><span class="hljs-comment">// ƒ test1() &#123;</span><br><span class="hljs-comment">//   test2()</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="typeof-1"><a href="#typeof-1" class="headerlink" title="typeof"></a>typeof</h4><p>typeof可能返回的值有哪些？<br>object(null)、boolean、number、string、undefined、function、symbol、bigint</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;) <span class="hljs-comment">//function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>) <span class="hljs-comment">//object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> &#123;&#125;) <span class="hljs-comment">//object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span>) <span class="hljs-comment">//number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;abc&#x27;</span>) <span class="hljs-comment">//string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>) <span class="hljs-comment">//boolean</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>) <span class="hljs-comment">//undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>()) <span class="hljs-comment">//symbol</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-number">2n</span>) <span class="hljs-comment">//bigint</span><br></code></pre></div></td></tr></table></figure><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><p>全局this -&gt; window<br>构造函数的this指向实例化对象<br>预编译函数this -&gt; window<br>call/apply 改变this指向，this 指向指定的那个对象</p><h4 id="函数内部的this"><a href="#函数内部的this" class="headerlink" title="函数内部的this"></a>函数内部的this</h4><p>普通函数(未实例化)内部的this默认指向window</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">b</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.d = <span class="hljs-number">3</span> <span class="hljs-comment">//window.d=3</span><br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>&#125;<br>test(<span class="hljs-number">123</span>)<br><span class="hljs-built_in">console</span>.log(d) <span class="hljs-comment">//3</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.d) <span class="hljs-comment">//3</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.d) <span class="hljs-comment">//3</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   arguments: [123],</span><br><span class="hljs-comment">//   this:window</span><br><span class="hljs-comment">//   b:undefined</span><br><span class="hljs-comment">//      123</span><br><span class="hljs-comment">//   a:undefined</span><br><span class="hljs-comment">//   c:function c() &#123;&#125;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="构造函数内部的this"><a href="#构造函数内部的this" class="headerlink" title="构造函数内部的this"></a>构造函数内部的this</h4><p>构造函数实例化之后this指向实例化对象</p><h4 id="预编译函数this"><a href="#预编译函数this" class="headerlink" title="预编译函数this"></a>预编译函数this</h4><p>预编译函数this指向window</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//new的时候构造函数内部产生成this，然后生成__proto__被赋值构造函数的prototype，生成原型链</span><br>  <span class="hljs-comment">// let this = &#123;</span><br>  <span class="hljs-comment">//  __proto__: Test.prototype</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;123&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> test = <span class="hljs-keyword">new</span> Test()<br><span class="hljs-comment">// new 之前this指向window</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//  this: window</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// new 之后this接收属性和原型对象，生成原型链</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   this:&#123;</span><br><span class="hljs-comment">//      name:&#x27;123&#x27;, //接收属性</span><br><span class="hljs-comment">//      __proto__: Test.prototype //生成原型链</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//new的时候产生GO</span><br><span class="hljs-comment">// GO = &#123;</span><br><span class="hljs-comment">//   Test: function test() &#123;...&#125;</span><br><span class="hljs-comment">//   test:&#123; //new 之后</span><br><span class="hljs-comment">//      name:&#x27;123&#x27;, //接收属性</span><br><span class="hljs-comment">//      __proto__: Test.prototype //生成原型链</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="call-apply-1"><a href="#call-apply-1" class="headerlink" title="call/apply"></a>call/apply</h4><p>call/apply调用时this 指向指定的那个对象<br>apply 方法的第一个参数是作为函数上下文的对象，此时函数里的 this 便指向了构造函数Person。<br>所以实例对象p可以借用构造函数Person里边的属性</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;张三&#x27;</span><br>  <span class="hljs-built_in">this</span>.age = <span class="hljs-number">18</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Programmer</span>(<span class="hljs-params"></span>) </span>&#123;<br>  Person.apply(<span class="hljs-built_in">this</span>)<br>  <span class="hljs-built_in">this</span>.work = <span class="hljs-string">&#x27;Programmer&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Programmer()<br><span class="hljs-built_in">console</span>.log(p) <span class="hljs-comment">//Programmer &#123;name: &#x27;张三&#x27;, age: 18, work: &#x27;Programmer&#x27;&#125;</span><br><br><span class="hljs-comment">// function Person(name, age) &#123;</span><br><span class="hljs-comment">//   this.name = name</span><br><span class="hljs-comment">//   this.age = age</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// function Programmer(name, age) &#123;</span><br><span class="hljs-comment">//   Person.apply(this, [name, age])</span><br><span class="hljs-comment">//   this.work = &#x27;Programmer&#x27;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// let p = new Programmer(&#x27;张三&#x27;, 18)</span><br><span class="hljs-comment">// console.log(p) //Programmer &#123;name: &#x27;张三&#x27;, age: 18, work: &#x27;Programmer&#x27;&#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  bar.apply(<span class="hljs-literal">null</span>, <span class="hljs-built_in">arguments</span>) <span class="hljs-comment">//相当于bar.call() -&gt; bar(arguments)</span><br>  <span class="hljs-comment">// bar.call()</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)<br>&#125;<br>foo(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>) <br><span class="hljs-comment">//Arguments(5) [1, 2, 3, 4, 5, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">   <span class="hljs-keyword">let</span> f =<br>     (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;1&#x27;</span><br>     &#125;,<br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">g</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>     &#125;)<br><span class="hljs-comment">//f=( f(), g() ) -&gt; f=g()</span><br>   <span class="hljs-built_in">console</span>.log(f) <span class="hljs-comment">//ƒ g() &#123;return 2&#125;</span><br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> f) <span class="hljs-comment">//function</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> f = (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;1&#x27;</span><br>&#125;,<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">g</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>&#125;)()<br><span class="hljs-comment">//f=( f(), g() )() -&gt; f=g()() -&gt; f()=g()</span><br><span class="hljs-built_in">console</span>.log(f) <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> f) <span class="hljs-comment">//number</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">undefined</span> == <span class="hljs-literal">null</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">undefined</span> === <span class="hljs-literal">null</span>) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;100&#x27;</span>)) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;1a&#x27;</span>) == <span class="hljs-number">1</span>) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isNaN1</span>(<span class="hljs-params">num</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-built_in">Number</span>(num)<br>  <span class="hljs-keyword">if</span> (res == <span class="hljs-literal">NaN</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(isNaN1(<span class="hljs-string">&#x27;abc&#x27;</span>)) <span class="hljs-comment">//false</span><br><span class="hljs-comment">// console.log(NaN == NaN) //false</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isNaN2</span>(<span class="hljs-params">num</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-built_in">Number</span>(num) + <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">if</span> (res == <span class="hljs-string">&#x27;NaN&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(isNaN2(<span class="hljs-string">&#x27;abc&#x27;</span>)) <span class="hljs-comment">//true</span><br><span class="hljs-comment">// console.log(&#x27;NaN&#x27; == &#x27;NaN&#x27;) //true</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//两个空对象不相等</span><br><span class="hljs-built_in">console</span>.log(&#123;&#125; == &#123;&#125;) <span class="hljs-comment">//false //因为引用值对比的是地址，所以不相等</span><br><span class="hljs-comment">//如何让两个空对象相等</span><br><span class="hljs-keyword">let</span> obj1 = &#123;&#125;<br>obj2 = obj1<br><span class="hljs-built_in">console</span>.log(obj1 == obj2) <span class="hljs-comment">//true</span><br><span class="hljs-comment">//空对象先赋值给一个变量，这个变量赋值给另一个变量就相等了</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;2&#x27;</span><br>  <span class="hljs-built_in">this</span>.a = <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-comment">//这里this默认是全局window</span><br>  <span class="hljs-built_in">console</span>.log(a)<br>&#125;<br>test() <span class="hljs-comment">//2</span><br><span class="hljs-keyword">new</span> test() <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//3</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  a = <span class="hljs-number">0</span><br>  <span class="hljs-built_in">console</span>.log(a)<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a)<br>  <span class="hljs-keyword">var</span> a<br>  <span class="hljs-built_in">console</span>.log(a)<br>&#125;<br>test() <span class="hljs-comment">// 0 5 0</span><br><span class="hljs-comment">//0和0是自己有的，this.a是window上的</span><br><span class="hljs-keyword">new</span> test() <span class="hljs-comment">//0 undefined 0</span><br><span class="hljs-comment">//0和0是自己有的,实例化之后内部产生的this，但是没有给this加上a这个属性</span><br><br><span class="hljs-comment">// var b = 5</span><br><span class="hljs-comment">// function test2() &#123;</span><br><span class="hljs-comment">//   b = 0</span><br><span class="hljs-comment">//   console.log(this)</span><br><span class="hljs-comment">//   var b</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// new test2() //test2 &#123;&#125;  //没有任何属性</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params">a, b, c</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> d = <span class="hljs-number">0</span><br>  <span class="hljs-built_in">this</span>.a = a<br>  <span class="hljs-built_in">this</span>.b = b<br>  <span class="hljs-built_in">this</span>.c = c<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"></span>) </span>&#123;<br>    d++<br>    <span class="hljs-built_in">console</span>.log(d)<br>  &#125;<br>  <span class="hljs-built_in">this</span>.f = e<br>  <span class="hljs-comment">//new之后</span><br>  <span class="hljs-comment">// let this=&#123;</span><br>  <span class="hljs-comment">//     f:function () &#123;d++;console.log(d)&#125;</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// return this //隐式return this形成闭包</span><br>&#125;<br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   d: undefined, //1</span><br><span class="hljs-comment">//      0 //4</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">let</span> test1 = <span class="hljs-keyword">new</span> Test()<br>test1.f() <span class="hljs-comment">//1</span><br>test1.f() <span class="hljs-comment">//2</span><br><span class="hljs-keyword">let</span> test2 = <span class="hljs-keyword">new</span> Test()<br>test2.f() <span class="hljs-comment">//1</span><br></code></pre></div></td></tr></table></figure><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><h4 id="普通三目运算"><a href="#普通三目运算" class="headerlink" title="普通三目运算"></a>普通三目运算</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span><br><span class="hljs-comment">// if (a &gt; 0) &#123;</span><br><span class="hljs-comment">//   console.log(&#x27;大于0&#x27;)</span><br><span class="hljs-comment">// &#125; else &#123;</span><br><span class="hljs-comment">//   console.log(&#x27;小于等于0&#x27;)</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// //大于0</span><br><br>a &gt; <span class="hljs-number">0</span> ? <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;大于0&#x27;</span>) : <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;小于等于0&#x27;</span>)<br><span class="hljs-comment">//大于0</span><br></code></pre></div></td></tr></table></figure><h4 id="三目运算自带return功能"><a href="#三目运算自带return功能" class="headerlink" title="三目运算自带return功能"></a>三目运算自带return功能</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span><br><span class="hljs-keyword">let</span> str = a &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;大于0&#x27;</span> : <span class="hljs-string">&#x27;小于等于0&#x27;</span><br><span class="hljs-built_in">console</span>.log(str) <span class="hljs-comment">//大于0</span><br></code></pre></div></td></tr></table></figure><h4 id="三目运算嵌套"><a href="#三目运算嵌套" class="headerlink" title="三目运算嵌套"></a>三目运算嵌套</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span>,<br>  str = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">// if (a &gt; 0) &#123;</span><br><span class="hljs-comment">//   if (a &gt; 3) &#123;</span><br><span class="hljs-comment">//     str = &#x27;大于3&#x27;</span><br><span class="hljs-comment">//   &#125; else &#123;</span><br><span class="hljs-comment">//     str = &#x27;小于等于3&#x27;</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125; else &#123;</span><br><span class="hljs-comment">//   str = &#x27;小于等于0&#x27;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// console.log(str) //大于3</span><br>str = a &gt; <span class="hljs-number">0</span> ? (a &gt; <span class="hljs-number">3</span> ? <span class="hljs-string">&#x27;大于3&#x27;</span> : <span class="hljs-string">&#x27;小于等于3&#x27;</span>) : <span class="hljs-string">&#x27;小于等于0&#x27;</span><br><span class="hljs-built_in">console</span>.log(str) <span class="hljs-comment">//大于3</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-number">89</span> &gt; <span class="hljs-number">9</span> ? (<span class="hljs-string">&#x27;89&#x27;</span> &gt; <span class="hljs-string">&#x27;9&#x27;</span> ? <span class="hljs-string">&#x27;通过了&#x27;</span> : <span class="hljs-string">&#x27;内层未通过&#x27;</span>) : <span class="hljs-string">&#x27;外层未通过&#x27;</span><br><span class="hljs-built_in">console</span>.log(str) <span class="hljs-comment">//内层未通过</span><br></code></pre></div></td></tr></table></figure><p>判断是否闰年<br>1、整除4并且不能整除100，<br>2、整除400</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> year = <span class="hljs-built_in">window</span>.prompt(<span class="hljs-string">&#x27;请输入年份&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isLeapYear</span>(<span class="hljs-params">year</span>) </span>&#123;<br>  <span class="hljs-comment">// if ((year % 4 === 0 &amp;&amp; year % 100 !== 0) || year % 400 === 0) &#123;</span><br>  <span class="hljs-comment">//   return &#x27;是润年&#x27;</span><br>  <span class="hljs-comment">// &#125; else &#123;</span><br>  <span class="hljs-comment">//   return &#x27;不是闰年&#x27;</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-keyword">return</span> (year % <span class="hljs-number">4</span> === <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> !== <span class="hljs-number">0</span>) || year % <span class="hljs-number">400</span> === <span class="hljs-number">0</span><br>    ? <span class="hljs-string">&#x27;闰年&#x27;</span><br>    : <span class="hljs-string">&#x27;不是闰年&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(isLeapYear(year))<br></code></pre></div></td></tr></table></figure><h3 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h3><h4 id="拷贝-复制-克隆-clone"><a href="#拷贝-复制-克隆-clone" class="headerlink" title="拷贝/复制/克隆 clone"></a>拷贝/复制/克隆 clone</h4><p>普通克隆是将值赋值给i另一个新的对象，两个对象指向的同一个内存地址</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>  <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span>,<br>&#125;<br><span class="hljs-keyword">let</span> person2 = person1<br>person2.name = <span class="hljs-string">&#x27;李四&#x27;</span><br><span class="hljs-built_in">console</span>.log(person1, person2)<br><span class="hljs-comment">// &#123;name: &#x27;李四&#x27;, age: 18, sex: &#x27;male&#x27;, height: 180, weight: 140&#125;</span><br><span class="hljs-comment">// &#123;name: &#x27;李四&#x27;, age: 18, sex: &#x27;male&#x27;, height: 180, weight: 140&#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>遍历对象，将每一个属性和值分别赋值给一个空对象。<br>但是浅拷贝没有处理引用值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>  <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span>,<br>&#125;<br><span class="hljs-keyword">let</span> person2 = &#123;&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> person1) &#123;<br>  person2[key] = person1[key]<br>&#125;<br>person2.name = <span class="hljs-string">&#x27;李四&#x27;</span><br><span class="hljs-built_in">console</span>.log(person1, person2)<br><span class="hljs-comment">// &#123;name: &#x27;张三&#x27;, age: 18, sex: &#x27;male&#x27;, height: 180, weight: 140&#125;</span><br><span class="hljs-comment">// &#123;name: &#x27;李四&#x27;, age: 18, sex: &#x27;male&#x27;, height: 180, weight: 140&#125;</span><br></code></pre></div></td></tr></table></figure><h5 id="浅拷贝的问题"><a href="#浅拷贝的问题" class="headerlink" title="浅拷贝的问题"></a>浅拷贝的问题</h5><ul><li>没有处理引用值，引用值还是指向同一个地址。</li><li>如果原型上还有其他属性，浅拷贝也会拷贝下来<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.num = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>  <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span>,<br>  <span class="hljs-attr">son</span>: &#123;<br>    <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Jenney&#x27;</span>,<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">let</span> person2 = &#123;&#125;<br><span class="hljs-comment">//浅拷贝</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> person1) &#123;<br>  person2[key] = person1[key]<br>&#125;<br>person2.name = <span class="hljs-string">&#x27;李四&#x27;</span><br>person2.son.second = <span class="hljs-string">&#x27;Lucy&#x27;</span><br><span class="hljs-built_in">console</span>.log(person1, person2)<br><span class="hljs-comment">// age: 18</span><br><span class="hljs-comment">// height: 180</span><br><span class="hljs-comment">// name: &quot;张三&quot;</span><br><span class="hljs-comment">// sex: &quot;male&quot;</span><br><span class="hljs-comment">// son: &#123;first: &#x27;Jenney&#x27;, second: &#x27;Lucy&#x27;&#125;</span><br><span class="hljs-comment">// weight: 140</span><br><span class="hljs-comment">// [[Prototype]]: Object</span><br><span class="hljs-comment">//    num: 1</span><br><br><span class="hljs-comment">// age: 18</span><br><span class="hljs-comment">// height: 180</span><br><span class="hljs-comment">// name: &quot;李四&quot;</span><br><span class="hljs-comment">// num: 1</span><br><span class="hljs-comment">// sex: &quot;male&quot;</span><br><span class="hljs-comment">// son: &#123;first: &#x27;Jenney&#x27;, second: &#x27;Lucy&#x27;&#125;</span><br><span class="hljs-comment">// weight: 140</span><br><span class="hljs-comment">// [[Prototype]]: Object</span><br><span class="hljs-comment">//     num: 1</span><br></code></pre></div></td></tr></table></figure><h5 id="封装浅拷贝"><a href="#封装浅拷贝" class="headerlink" title="封装浅拷贝"></a>封装浅拷贝</h5>传入拷贝源和目标对象，考虑排除原型上的对象<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.num = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>  <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span>,<br>  <span class="hljs-attr">son</span>: &#123;<br>    <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Jenney&#x27;</span>,<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">let</span> person2 = &#123;&#125;<br><span class="hljs-comment">//浅拷贝</span><br>clone(person1, person2)<br>person2.name = <span class="hljs-string">&#x27;李四&#x27;</span><br>person2.son.second = <span class="hljs-string">&#x27;Lucy&#x27;</span><br><span class="hljs-built_in">console</span>.log(person1, person2)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span>(<span class="hljs-params">origin, target</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> origin)<br>    <span class="hljs-keyword">if</span> (origin.hasOwnProperty(key)) &#123;<span class="hljs-comment">//排除原型,只打印自身属性</span><br>      target[key] = origin[key]<br>    &#125;<br>&#125;<br><span class="hljs-comment">// age: 18</span><br><span class="hljs-comment">// height: 180</span><br><span class="hljs-comment">// name: &quot;张三&quot;</span><br><span class="hljs-comment">// sex: &quot;male&quot;</span><br><span class="hljs-comment">// son: &#123;first: &#x27;Jenney&#x27;, second: &#x27;Lucy&#x27;&#125;</span><br><span class="hljs-comment">// weight: 140</span><br><span class="hljs-comment">// [[Prototype]]: Object</span><br><span class="hljs-comment">//    num: 1</span><br><br><span class="hljs-comment">// age: 18</span><br><span class="hljs-comment">// height: 180</span><br><span class="hljs-comment">// name: &quot;李四&quot;</span><br><span class="hljs-comment">// sex: &quot;male&quot;</span><br><span class="hljs-comment">// son: &#123;first: &#x27;Jenney&#x27;, second: &#x27;Lucy&#x27;&#125;</span><br><span class="hljs-comment">// weight: 140</span><br><span class="hljs-comment">// [[Prototype]]: Object</span><br><span class="hljs-comment">//     num: 1</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.num = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>  <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span>,<br>  <span class="hljs-attr">son</span>: &#123;<br>    <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Jenney&#x27;</span>,<br>  &#125;,<br>&#125;<br><span class="hljs-comment">//浅拷贝</span><br><span class="hljs-keyword">let</span> person2 = clone(person1)<br>person2.name = <span class="hljs-string">&#x27;李四&#x27;</span><br>person2.son.second = <span class="hljs-string">&#x27;Lucy&#x27;</span><br><span class="hljs-built_in">console</span>.log(person1, person2)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clone</span>(<span class="hljs-params">origin, target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> tar = target || &#123;&#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> origin)<br>    <span class="hljs-keyword">if</span> (origin.hasOwnProperty(key)) &#123;<span class="hljs-comment">//排除原型,只打印自身属性</span><br>      tar[key] = origin[key]<br>    &#125;<br>  <span class="hljs-keyword">return</span> tar<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><h5 id="方法一（递归）"><a href="#方法一（递归）" class="headerlink" title="方法一（递归）"></a>方法一（递归）</h5>利用递归方法进行深拷贝，遇到原始值才退出循环<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.num = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>  <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span>,<br>  <span class="hljs-attr">children</span>: &#123;<br>    <span class="hljs-attr">first</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张一&#x27;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>    &#125;,<br>    <span class="hljs-attr">second</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张二&#x27;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">car</span>: [<span class="hljs-string">&#x27;Benz&#x27;</span>, <span class="hljs-string">&#x27;Mazda&#x27;</span>],<br>&#125;<br><span class="hljs-keyword">let</span> person2 = deepClone(person1)<br>person2.name = <span class="hljs-string">&#x27;李四&#x27;</span><br>person2.children.third = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">9</span>,<br>&#125;<br>person2.car.push(<span class="hljs-string">&#x27;BYD&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person1, person2)<br><span class="hljs-comment">//深拷贝</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">origin, target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> targets = target || &#123;&#125;<br>  toStr = <span class="hljs-built_in">Object</span>.prototype.toString<br>  arrType = <span class="hljs-string">&#x27;[object Array]&#x27;</span><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> origin) &#123;<br>    <span class="hljs-keyword">if</span> (origin.hasOwnProperty(key)) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> origin[key] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; origin[key] !== <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (toStr.call(origin[key]) === arrType) &#123;<br>          targets[key] = []<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          targets[key] = &#123;&#125;<br>        &#125;<br>        deepClone(origin[key], targets[key])<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        targets[key] = origin[key]<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> targets<br>&#125;<br><span class="hljs-comment">// age: 18</span><br><span class="hljs-comment">// car: (2) [&#x27;Benz&#x27;, &#x27;Mazda&#x27;]</span><br><span class="hljs-comment">// children:</span><br><span class="hljs-comment">//    first: &#123;name: &#x27;张一&#x27;, age: 12&#125;</span><br><span class="hljs-comment">//    second: &#123;name: &#x27;张二&#x27;, age: 10&#125;</span><br><span class="hljs-comment">//    [[Prototype]]: Object</span><br><span class="hljs-comment">// height: 180</span><br><span class="hljs-comment">// name: &quot;张三&quot;</span><br><span class="hljs-comment">// sex: &quot;male&quot;</span><br><span class="hljs-comment">// weight: 140</span><br><br><span class="hljs-comment">// age: 18</span><br><span class="hljs-comment">// car: (3) [&#x27;Benz&#x27;, &#x27;Mazda&#x27;, &#x27;BYD&#x27;]</span><br><span class="hljs-comment">// children:</span><br><span class="hljs-comment">//    first: &#123;name: &#x27;张一&#x27;, age: 12&#125;</span><br><span class="hljs-comment">//    second: &#123;name: &#x27;张二&#x27;, age: 10&#125;</span><br><span class="hljs-comment">//    third: &#123;name: &#x27;张三&#x27;, age: 9&#125;</span><br><span class="hljs-comment">//    [[Prototype]]: Object</span><br><span class="hljs-comment">// height: 180</span><br><span class="hljs-comment">// name: &quot;李四&quot;</span><br><span class="hljs-comment">// sex: &quot;male&quot;</span><br><span class="hljs-comment">// weight: 140</span><br></code></pre></div></td></tr></table></figure><h5 id="方法二（JSON-不推荐）"><a href="#方法二（JSON-不推荐）" class="headerlink" title="方法二（JSON 不推荐）"></a>方法二（JSON 不推荐）</h5>利用JSON.stringify将数据转换成字符串(原始值)，再用JSON.parse解析字符串转换成对象。但是无法拷贝其他引用类型、拷贝函数、循环引用等情况<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.num = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> person1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>  <span class="hljs-attr">weight</span>: <span class="hljs-number">140</span>,<br>  <span class="hljs-attr">children</span>: &#123;<br>    <span class="hljs-attr">first</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张一&#x27;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>    &#125;,<br>    <span class="hljs-attr">second</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张二&#x27;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">car</span>: [<span class="hljs-string">&#x27;Benz&#x27;</span>, <span class="hljs-string">&#x27;Mazda&#x27;</span>],<br>&#125;<br><br><span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(person1)<br><span class="hljs-keyword">let</span> person2 = <span class="hljs-built_in">JSON</span>.parse(str)<br><br>person2.name = <span class="hljs-string">&#x27;李四&#x27;</span><br>person2.children.third = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">9</span>,<br>&#125;<br>person2.car.push(<span class="hljs-string">&#x27;BYD&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(person1, person2)<br></code></pre></div></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(foo) <span class="hljs-comment">//undefined</span><br>  <span class="hljs-keyword">var</span> foo = <span class="hljs-number">2</span><br>  <span class="hljs-built_in">console</span>.log(foo) <span class="hljs-comment">//2</span><br>  <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//a is not defined</span><br>&#125;<br>test()<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> test<br>  test()<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>  &#125;<br>&#125;<br>a() <span class="hljs-comment">//1</span><br><span class="hljs-comment">// AO = &#123;</span><br><span class="hljs-comment">//   test: undefined, //1</span><br><span class="hljs-comment">//         function test() &#123;&#125; //2</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;222&#x27;</span><br><span class="hljs-keyword">var</span> a = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;111&#x27;</span>,<br>  <span class="hljs-attr">say</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">var</span> fun = a.say <span class="hljs-comment">//var fun=function() &#123;console.log(this.name)&#125;</span><br>fun() <span class="hljs-comment">///222 //this指向window</span><br>a.say() <span class="hljs-comment">//111 //对象内部的方法this指向a</span><br><span class="hljs-keyword">var</span> b = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;333&#x27;</span>,<br>  <span class="hljs-attr">say</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fun</span>) </span>&#123;<br>    fun() <span class="hljs-comment">//+function() &#123;console.log(this.name)&#125;();</span><br>  &#125;,<br>&#125;<br>b.say(a.say) <span class="hljs-comment">//222 //this指向window</span><br>b.say = a.say <span class="hljs-comment">//function() &#123;console.log(this.name)&#125;</span><br>b.say() <span class="hljs-comment">//333</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> marty = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;marty&#x27;</span>,<br>    <span class="hljs-attr">printNmae</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>    &#125;,<br>  &#125;<br>  <span class="hljs-keyword">var</span> test1 = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test1&#x27;</span>,<br>  &#125;<br>  <span class="hljs-keyword">var</span> test2 = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>,<br>  &#125;<br>  <span class="hljs-keyword">var</span> test3 = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test3&#x27;</span>,<br>  &#125;<br>  test3.printNmae = marty.printNmae<br>  marty.printNmae.call(test1) <span class="hljs-comment">//test1</span><br>  marty.printNmae.apply(test2) <span class="hljs-comment">//test2</span><br>  marty.printNmae() <span class="hljs-comment">//marty</span><br>  test3.printNmae() <span class="hljs-comment">//test3</span><br>&#125;<br>test()<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> bar = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  bar.a = <span class="hljs-string">&#x27;a&#x27;</span><br>  <span class="hljs-built_in">Object</span>.prototype.b = <span class="hljs-string">&#x27;b&#x27;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(bar.a) <span class="hljs-comment">//a</span><br>    <span class="hljs-built_in">console</span>.log(bar.b) <span class="hljs-comment">//b</span><br>  &#125;<br>&#125;<br>test()()<br></code></pre></div></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组基础"><a href="#数组基础" class="headerlink" title="数组基础"></a>数组基础</h3><p>数组字面量声明数组</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = []<br></code></pre></div></td></tr></table></figure><p>Array内置构造函数声明数组(不推荐)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>() <br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">//如果只填一个纯数字就是数组长度</span><br><span class="hljs-built_in">console</span>.log(arr1.length) <span class="hljs-comment">//2</span><br><span class="hljs-keyword">let</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-comment">//非纯数字就是数组元素</span><br><span class="hljs-built_in">console</span>.log(arr2.length) <span class="hljs-comment">//1</span><br></code></pre></div></td></tr></table></figure><p>不使用new声明函数(不使用)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = <span class="hljs-built_in">Array</span>()<br></code></pre></div></td></tr></table></figure><p>所有数组都继承于Array.prototype属性。<br>实际上数组就是对象的另一种形式</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-comment">//   index:0, 1, 2, 3</span><br><span class="hljs-comment">// index数组元素的下标（索引值）</span><br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-number">0</span>: <span class="hljs-number">1</span>, <span class="hljs-number">1</span>: <span class="hljs-number">2</span>, <span class="hljs-number">2</span>: <span class="hljs-number">3</span>, <span class="hljs-number">3</span>: <span class="hljs-number">4</span> &#125;<br><span class="hljs-keyword">let</span> obj1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>&#125;<br><span class="hljs-comment">//obj1.name -&gt; obj1[&#x27;name&#x27;]</span><br><br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">2</span>]) <span class="hljs-comment">//3</span><br><span class="hljs-built_in">console</span>.log(obj[<span class="hljs-number">2</span>]) <span class="hljs-comment">//3</span><br></code></pre></div></td></tr></table></figure><h4 id="稀松数组"><a href="#稀松数组" class="headerlink" title="稀松数组"></a>稀松数组</h4><p>数组不一定每一位都有值，也可以没有值，但是最后一位没有值，默认不计等于没有最后一位</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, , ,]<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[empty, 1, 2, empty × 2]</span><br><span class="hljs-built_in">console</span>.log(arr.length) <span class="hljs-comment">//5</span><br></code></pre></div></td></tr></table></figure><p>使用构造函数不可以创建稀松数组。因为字面量创建数组是已经成型的数组，构造函数创建数组是传参数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>,,<span class="hljs-number">2</span>)<span class="hljs-comment">//Unexpected token &#x27;,&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><p>数组的方法是继承数组原型上的方法Array.prototype<br>修改原数组：<code>push</code>/<code>unshift</code> <code>pop</code>/<code>shift</code> <code>reverse</code> <code>splice</code> <code>sort</code><br>新建数组：<code>concat</code> <code>toString</code> <code>slice</code> <code>join</code>/<code>split</code></p><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p>在数组最后添加元素，返回值是执行了方法以后数组的长度</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> a = arr.push(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//5</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[1, 2, 3, 2, 2]</span><br></code></pre></div></td></tr></table></figure><p>手写push方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">Array</span>.prototype.myPush = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123;<br>    <span class="hljs-built_in">this</span>[<span class="hljs-built_in">this</span>.length] = <span class="hljs-built_in">arguments</span>[i]<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.length<br>&#125;<br>arr.myPush(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[1, 2, 3, 1, 2]</span><br></code></pre></div></td></tr></table></figure><p>push原理</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.push = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">element</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>[<span class="hljs-built_in">this</span>.length] = element<br>  <span class="hljs-built_in">this</span>.length++<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><p>在数组最前面添加元素，返回值是执行了方法以后数组的长度</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> a = arr.unshift(<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//5</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[&#x27;2&#x27;, &#x27;4&#x27;, 1, 2, 3]</span><br></code></pre></div></td></tr></table></figure><p>手写unshift方法1，使用splice方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br><span class="hljs-built_in">Array</span>.prototype.myUnshift = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> pos = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123;<br>    <span class="hljs-built_in">this</span>.splice(pos, <span class="hljs-number">0</span>, <span class="hljs-built_in">arguments</span>[i])<br>    pos++<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.length<br>&#125;<br>arr.myUnshift(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]</span><br></code></pre></div></td></tr></table></figure><p>手写unshift方法2，将类数组arguments转换成数组，然后使用concat方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br><span class="hljs-built_in">Array</span>.prototype.myUnshift = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> argArr = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>)<br>  <span class="hljs-keyword">return</span> argArr.concat(<span class="hljs-built_in">this</span>)<br>&#125;<br><span class="hljs-keyword">let</span> newArr = arr.myUnshift(<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(newArr) <span class="hljs-comment">//[&#x27;a&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]</span><br></code></pre></div></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><p>删除数组最后一位，返回删除的值。pop没有参数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> a = arr.pop()<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//3</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[1, 2]</span><br></code></pre></div></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><p>删除现在数组第一位，返回删除的值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">let</span> a = arr.shift()<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//a</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[&#x27;b&#x27;, &#x27;c&#x27;]</span><br></code></pre></div></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><p>reverse数组倒序，返回值是倒序后的数组</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">let</span> a = arr.reverse()<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//[&#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[&#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span><br></code></pre></div></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><p>splice(开始项下标，剪切长度，剪切位置开始添加数据)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br>arr.splice(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[&#x27;a&#x27;]</span><br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br>arr1.splice(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">//[&#x27;a&#x27;, 1, 2, 3, &#x27;c&#x27;]</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>arr.splice(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;c&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br><br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>arr1.splice(-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;c&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br></code></pre></div></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>sort按照ASCII码排序，返回排序以后的数组</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [-<span class="hljs-number">1</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>]<br>arr.sort()<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">// [-1, -5, 0, 2, 8]</span><br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>]<br>arr1.sort()<br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;z&#x27;]</span><br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">27</span>, <span class="hljs-number">49</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]<br>arr2.sort()<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">//[27, 49, 5, 7]</span><br></code></pre></div></td></tr></table></figure><h5 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-comment">//(内部用的冒泡排序)</span><br>  <span class="hljs-comment">//return 返回值</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><p>参数 a，b<br>返回值：1、负值，a就排在前<br>2、正值，b就排在前<br>3、0        ，保持不动</p><h5 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">27</span>, <span class="hljs-number">49</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>  &#125;<br>&#125;)<br><span class="hljs-comment">// arr.sort(function (a, b) &#123;</span><br><span class="hljs-comment">//   return a - b</span><br><span class="hljs-comment">// &#125;)</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[5, 7, 27, 49]</span><br></code></pre></div></td></tr></table></figure><h5 id="降序"><a href="#降序" class="headerlink" title="降序"></a>降序</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">27</span>, <span class="hljs-number">49</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> b - a<br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[49, 27, 7, 5]</span><br></code></pre></div></td></tr></table></figure><h5 id="随机排序"><a href="#随机排序" class="headerlink" title="随机排序"></a>随机排序</h5><p><code>Math.random( )</code> 返回随机 ( 0, 1 ] 之间的数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> rand = <span class="hljs-built_in">Math</span>.random()<br>  <span class="hljs-keyword">if</span> (rand - <span class="hljs-number">0.5</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>  &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr)<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr2.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.random() - <span class="hljs-number">0.5</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr2)<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<br>  &#123;<br>    <span class="hljs-attr">son</span>: <span class="hljs-string">&#x27;Jenny&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">son</span>: <span class="hljs-string">&#x27;Jone&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">son</span>: <span class="hljs-string">&#x27;Crytal&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">16</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">son</span>: <span class="hljs-string">&#x27;Ben&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">3</span>,<br>  &#125;,<br>]<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-comment">// if (a.age &gt; b.age) &#123;</span><br>  <span class="hljs-comment">//   return 1</span><br>  <span class="hljs-comment">// &#125; else &#123;</span><br>  <span class="hljs-comment">//   return -1</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-keyword">return</span> a.age - b.age<br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr)<br><span class="hljs-comment">// 0: &#123;son: &#x27;Ben&#x27;, age: 3&#125;</span><br><span class="hljs-comment">// 1: &#123;son: &#x27;Jone&#x27;, age: 10&#125;</span><br><span class="hljs-comment">// 2: &#123;son: &#x27;Crytal&#x27;, age: 16&#125;</span><br><span class="hljs-comment">// 3: &#123;son: &#x27;Jenny&#x27;, age: 18&#125;</span><br><span class="hljs-comment">// length: 4</span><br><span class="hljs-comment">// [[Prototype]]: Array(0)</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;12345&#x27;</span>, <span class="hljs-string">&#x27;1234567&#x27;</span>]<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-comment">// if (a.length &gt; b.length) &#123;</span><br>  <span class="hljs-comment">//   return 1</span><br>  <span class="hljs-comment">// &#125; else &#123;</span><br>  <span class="hljs-comment">//   return -1</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-keyword">return</span> a.length - b.length<br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//[&#x27;1&#x27;, &#x27;123&#x27;, &#x27;12345&#x27;, &#x27;1234567&#x27;]</span><br></code></pre></div></td></tr></table></figure><p>数组按照元素的字节数排序<br>Unicode 0-255 一个字节，256-  两个字节</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBytes</span>(<span class="hljs-params">str</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> bytes = str.length<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (str.charCodeAt(i) &gt; <span class="hljs-number">255</span>) &#123;<br>      bytes++<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> bytes<br>&#125;<br><span class="hljs-built_in">console</span>.log(getBytes(<span class="hljs-string">&#x27;我爱你&#x27;</span>)) <span class="hljs-comment">//6</span><br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;我爱你&#x27;</span>, <span class="hljs-string">&#x27;Ok&#x27;</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-string">&#x27;你说什么&#x27;</span>, <span class="hljs-string">&#x27;可以&#x27;</span>]<br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> getBytes(a) - getBytes(b)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr) <br><span class="hljs-comment">//[&#x27;Ok&#x27;, &#x27;可以&#x27;, &#x27;Hello&#x27;, &#x27;我爱你&#x27;, &#x27;你说什么&#x27;]</span><br></code></pre></div></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><p>将两个数组合并，返回合并后的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]<br><span class="hljs-keyword">let</span> arr3 = arr1.concat(arr2)<br><span class="hljs-keyword">let</span> arr4 = arr2.concat(arr1)<br><span class="hljs-built_in">console</span>.log(arr3) <span class="hljs-comment">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]</span><br><span class="hljs-built_in">console</span>.log(arr4) <span class="hljs-comment">//[&#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></code></pre></div></td></tr></table></figure><h4 id="toString"><a href="#toString" class="headerlink" title="toString"></a>toString</h4><p>将数组转换成字符串</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(arr.toString()) <span class="hljs-comment">//a,b,c</span><br><span class="hljs-built_in">console</span>.log(arr1.toString()) <span class="hljs-comment">//1,2,3</span><br></code></pre></div></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p><code>array.slice(start, end)</code>，截取数组的一部分，返回截取的新数组<br>参数可选，[ start , end ) 包含start, end不包含</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">let</span> arr1 = arr.slice()<br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="hljs-keyword">let</span> arr2 = arr.slice(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">//[&#x27;b&#x27;]</span><br><span class="hljs-keyword">let</span> arr3 = arr.slice(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">console</span>.log(arr3) <span class="hljs-comment">//[&#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="hljs-keyword">let</span> arr4 = arr.slice(-<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(arr4) <span class="hljs-comment">//[&#x27;a&#x27;, &#x27;b&#x27;]</span><br></code></pre></div></td></tr></table></figure><h4 id="join-split"><a href="#join-split" class="headerlink" title="join/split"></a>join/split</h4><p>join( )把数组中的所有元素放入一个字符串，参数作为分隔符<br>split( )把一个字符串分割成字符串数组，第一个参数要和被分割的分隔符一致，第二个参数可选是分割结束位置</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">let</span> arr1 = arr.join(<span class="hljs-string">&#x27;-&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">//a-b-c</span><br><span class="hljs-keyword">let</span> arr2 = arr.join(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">console</span>.log(arr2) <span class="hljs-comment">//a0b0c</span><br><br><span class="hljs-keyword">let</span> arr3 = arr1.split(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(arr3) <span class="hljs-comment">//[&#x27;a&#x27;, &#x27;b&#x27;]</span><br><br><span class="hljs-keyword">let</span> arr4 = arr2.split(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">console</span>.log(arr4) <span class="hljs-comment">//[&#x27;a&#x27;, &#x27;0&#x27;, &#x27;b&#x27;, &#x27;0&#x27;]</span><br></code></pre></div></td></tr></table></figure><h3 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h3><p>类数组一定要有下标和值对应的形式，还有length属性<br>数组和类数组都有length属性</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//Object.prototype</span><br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-number">0</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-number">2</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-comment">// push: Array.prototype.push,</span><br>  <span class="hljs-comment">// splice: Array.prototype.splice,</span><br>&#125;<br><span class="hljs-built_in">Object</span>.prototype.push = <span class="hljs-built_in">Array</span>.prototype.push<br><span class="hljs-built_in">Object</span>.prototype.splice = <span class="hljs-built_in">Array</span>.prototype.splice<br>obj.push(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">console</span>.log(obj)<br><span class="hljs-comment">// Object(4) [1, 2, 3, 4]</span><br><span class="hljs-comment">// 0: 1</span><br><span class="hljs-comment">// 1: 2</span><br><span class="hljs-comment">// 2: 3</span><br><span class="hljs-comment">// 3: 4</span><br><span class="hljs-comment">// length: 4</span><br><span class="hljs-comment">// [[Prototype]]: Object</span><br></code></pre></div></td></tr></table></figure><p>arguments是类数组，因为它并没有继承Array.prototype,继承的是Object.prototype。所以没有数组的push方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)<br>&#125;<br>test(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br><span class="hljs-comment">//    0: 1</span><br><span class="hljs-comment">//    1: 2</span><br><span class="hljs-comment">//    2: 3</span><br><span class="hljs-comment">//    callee: ƒ test()</span><br><span class="hljs-comment">//    length: 3</span><br><span class="hljs-comment">//    Symbol(Symbol.iterator): ƒ values()</span><br><span class="hljs-comment">//    [[Prototype]]: Object</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">arguments</span>.push(<span class="hljs-number">4</span>) <span class="hljs-comment">// arguments.push is not a function</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)<br>&#125;<br>test2(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></div></td></tr></table></figure><p>自己声明的数组，原型上有Array.prototype</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.log(arr)<br><span class="hljs-comment">// [1, 2, 3]</span><br><span class="hljs-comment">// 0: 1</span><br><span class="hljs-comment">// 1: 2</span><br><span class="hljs-comment">// 2: 3</span><br><span class="hljs-comment">// length: 3</span><br><span class="hljs-comment">// [[Prototype]]: Array(0)</span><br></code></pre></div></td></tr></table></figure><h4 id="类数组转化成数组"><a href="#类数组转化成数组" class="headerlink" title="类数组转化成数组"></a>类数组转化成数组</h4><p><code>Array.prototype.slice.call()</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arArr = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>)<br>  arArr.push(<span class="hljs-number">1</span>)<br>  <span class="hljs-built_in">console</span>.log(arArr)<br>&#125;<br>test(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<span class="hljs-comment">//[1, 2, 3, 1]</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-number">2</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-number">3</span>: <span class="hljs-number">4</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">push</span>: <span class="hljs-built_in">Array</span>.prototype.push,<br>  <span class="hljs-attr">splice</span>: <span class="hljs-built_in">Array</span>.prototype.splice,<br>&#125;<br>obj.push(<span class="hljs-number">1</span>)<br>obj.push(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(obj)<br><span class="hljs-comment">//push了两次，长度变为4，第三位和第四位被替换掉了</span><br><span class="hljs-comment">//Object(4) [empty × 2, 1, 2, push: ƒ, splice: ƒ]</span><br><span class="hljs-comment">// 2: 1</span><br><span class="hljs-comment">// 3: 2</span><br><span class="hljs-comment">// length: 4</span><br><span class="hljs-comment">// push: ƒ push()</span><br><span class="hljs-comment">// splice: ƒ splice()</span><br><span class="hljs-comment">// [[Prototype]]: Object</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">arguments</span>) <span class="hljs-comment">//类数组</span><br>&#125;<br>test() <span class="hljs-comment">//object</span><br></code></pre></div></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>]<br><span class="hljs-built_in">Array</span>.prototype.unique = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> temp = &#123;&#125;,<br>    newArr = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (!temp.hasOwnProperty(<span class="hljs-built_in">this</span>[i])) &#123;<br>      <span class="hljs-comment">//解决temp[0]是0的情况</span><br>      temp[<span class="hljs-built_in">this</span>[i]] = <span class="hljs-built_in">this</span>[i]<br>      newArr.push(<span class="hljs-built_in">this</span>[i])<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> newArr<br>&#125;<br><span class="hljs-built_in">console</span>.log(arr.unique()) <span class="hljs-comment">//[0, 1, 2, 3, &#x27;a&#x27;]</span><br></code></pre></div></td></tr></table></figure><h4 id="字符串去重"><a href="#字符串去重" class="headerlink" title="字符串去重"></a>字符串去重</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;11122200aabb&#x27;</span><br><span class="hljs-built_in">String</span>.prototype.unique = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> temp = &#123;&#125;,<br>    newStr = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (!temp.hasOwnProperty(<span class="hljs-built_in">this</span>[i])) &#123;<br>      temp[<span class="hljs-built_in">this</span>[i]] = <span class="hljs-built_in">this</span>[i]<br>      newStr += <span class="hljs-built_in">this</span>[i]<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> newStr<br>&#125;<br><span class="hljs-built_in">console</span>.log(str.unique()) <span class="hljs-comment">//120ab</span><br></code></pre></div></td></tr></table></figure><p>找到重复的第一个数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;rnvhnvbdashguiqdrpjgdhrghbdrgd&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">str</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> temp = &#123;&#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (temp.hasOwnProperty(str[i])) &#123;<br>      temp[str[i]]++<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      temp[str[i]] = <span class="hljs-number">1</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> temp) &#123;<br>    <span class="hljs-keyword">if</span> (temp[key] === <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> key<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(test(str)) <span class="hljs-comment">//a</span><br></code></pre></div></td></tr></table></figure><h2 id="JS错误信息类型"><a href="#JS错误信息类型" class="headerlink" title="JS错误信息类型"></a>JS错误信息类型</h2><h3 id="SyntaxError-语法错误"><a href="#SyntaxError-语法错误" class="headerlink" title="SyntaxError 语法错误"></a>SyntaxError 语法错误</h3><h4 id="变量名不规范"><a href="#变量名不规范" class="headerlink" title="变量名不规范"></a>变量名不规范</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> <span class="hljs-comment">//Unexpected number 以外的数字</span><br><span class="hljs-keyword">let</span> 1ab=<span class="hljs-number">1</span> <span class="hljs-comment">//Invalid or unexpected token 无效或意外的令牌</span><br></code></pre></div></td></tr></table></figure><h4 id="关键字赋值"><a href="#关键字赋值" class="headerlink" title="关键字赋值"></a>关键字赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> = <span class="hljs-number">5</span> <span class="hljs-comment">// Unexpected token &#x27;=&#x27; 以外的标记</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> = 1 // <span class="hljs-title">Unexpected</span> <span class="hljs-title">token</span> &#x27;=&#x27; 以外的标记</span><br></code></pre></div></td></tr></table></figure><h4 id="基本语法错误"><a href="#基本语法错误" class="headerlink" title="基本语法错误"></a>基本语法错误</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span>: <span class="hljs-comment">//Unexpected token &#x27;:&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="ReferenceError-引用错误"><a href="#ReferenceError-引用错误" class="headerlink" title="ReferenceError 引用错误"></a>ReferenceError 引用错误</h3><h4 id="变量或者函数未声明"><a href="#变量或者函数未声明" class="headerlink" title="变量或者函数未声明"></a>变量或者函数未声明</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">test() <span class="hljs-comment">//test is not defined</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//a is not defined</span><br></code></pre></div></td></tr></table></figure><h4 id="给无法被赋值的对象赋值"><a href="#给无法被赋值的对象赋值" class="headerlink" title="给无法被赋值的对象赋值"></a>给无法被赋值的对象赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a=<span class="hljs-number">1</span>=<span class="hljs-number">2</span> <span class="hljs-comment">//Invalid left-hand side in assignment 赋值的左侧无效</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(a)=<span class="hljs-number">1</span>;<span class="hljs-comment">//1 Invalid left-hand side in assignment</span><br></code></pre></div></td></tr></table></figure><h3 id="RangeError-范围错误"><a href="#RangeError-范围错误" class="headerlink" title="RangeError 范围错误"></a>RangeError 范围错误</h3><h4 id="数组长度为负数"><a href="#数组长度为负数" class="headerlink" title="数组长度为负数"></a>数组长度为负数</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr.length = -<span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(arr) <span class="hljs-comment">//Invalid array length 数组无效的长度</span><br></code></pre></div></td></tr></table></figure><h4 id="对象参数超出可行范围"><a href="#对象参数超出可行范围" class="headerlink" title="对象参数超出可行范围"></a>对象参数超出可行范围</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">66.66</span>)<br><span class="hljs-built_in">console</span>.log(num.toFixed(-<span class="hljs-number">1</span>))<br><span class="hljs-comment">//toFixed() digits argument must be between 0 and 100 at Number.toFixed (&lt;anonymous&gt;)</span><br></code></pre></div></td></tr></table></figure><h3 id="TypeError-类型错误"><a href="#TypeError-类型错误" class="headerlink" title="TypeError 类型错误"></a>TypeError 类型错误</h3><h4 id="调用不存在的方法"><a href="#调用不存在的方法" class="headerlink" title="调用不存在的方法"></a>调用不存在的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">123</span>() <span class="hljs-comment">//123 is not a function</span><br><br><span class="hljs-keyword">let</span> obj = &#123;&#125;<br>obj.say() <span class="hljs-comment">//obj.say is not a function</span><br></code></pre></div></td></tr></table></figure><h4 id="实例化原始值"><a href="#实例化原始值" class="headerlink" title="实例化原始值"></a>实例化原始值</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-string">&#x27;string&#x27;</span>() <span class="hljs-comment">//&quot;string&quot; is not a constructor</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-number">123</span>() <span class="hljs-comment">//123 is not a constructor</span><br></code></pre></div></td></tr></table></figure><h3 id="URIError-URI错误"><a href="#URIError-URI错误" class="headerlink" title="URIError URI错误"></a>URIError URI错误</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&#x27;http://你好&#x27;</span>)) <span class="hljs-comment">//http://%E4%BD%A0%E5%A5%BD 将中文转译成对应编码</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">decodeURI</span>(<span class="hljs-string">&#x27;%E4%BD%A0%E5%A5%BD&#x27;</span>)) <span class="hljs-comment">//你好 将中文对应的编码转译成中文</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-built_in">decodeURI</span>(<span class="hljs-string">&#x27;%cvav&#x27;</span>) <span class="hljs-comment">//URI malformed at decodeURI (&lt;anonymous&gt;) URI格式不正确</span><br></code></pre></div></td></tr></table></figure><h3 id="EvalError-eval函数执行错误"><a href="#EvalError-eval函数执行错误" class="headerlink" title="EvalError eval函数执行错误"></a>EvalError eval函数执行错误</h3><h3 id="人为制造错误"><a href="#人为制造错误" class="headerlink" title="人为制造错误"></a>人为制造错误</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;代码错误&#x27;</span>)) <span class="hljs-comment">//Error: 代码错误</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">SyntaxError</span>(<span class="hljs-string">&#x27;代码错误&#x27;</span>)) <span class="hljs-comment">//SyntaxError: 代码错误</span><br></code></pre></div></td></tr></table></figure><h3 id="手动抛出错误的方法"><a href="#手动抛出错误的方法" class="headerlink" title="手动抛出错误的方法"></a>手动抛出错误的方法</h3><h4 id="try-catch-finally-throw"><a href="#try-catch-finally-throw" class="headerlink" title="try catch finally throw"></a>try catch finally throw</h4><p>try是可能出错的，finally是一定要执行的，<br>catch捕获try的错误信息，throw自定义错误信息</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;正常执行1&#x27;</span>) <span class="hljs-comment">//正常执行1</span><br>  <span class="hljs-built_in">console</span>.log(a)<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;正常执行2&#x27;</span>)<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-comment">// console.log(e) //eferenceError: a is not defined</span><br>  <span class="hljs-built_in">console</span>.log(e.name + <span class="hljs-string">&#x27;:&#x27;</span> + e.message) <span class="hljs-comment">//ReferenceError:a is not defined</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;正常执行3&#x27;</span>) <span class="hljs-comment">//正常执行3</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> jsonStr = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">if</span> (jsonStr === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;JSON字符串为空&#x27;</span><br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我要执行了&#x27;</span>) <span class="hljs-comment">//我要执行了</span><br>  <span class="hljs-keyword">let</span> json = <span class="hljs-built_in">JSON</span>.parse(jsonStr)<br>  <span class="hljs-built_in">console</span>.log(json)<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-built_in">console</span>.log(e) <span class="hljs-comment">//JSON字符串为空</span><br>  <span class="hljs-keyword">let</span> errorTip = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;数据传输失败&#x27;</span>,<br>    <span class="hljs-attr">errorCode</span>: <span class="hljs-string">&#x27;1020&#x27;</span>,<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(errorTip) <span class="hljs-comment">//&#123;name: &#x27;数据传输失败&#x27;, errorCode: &#x27;1020&#x27;&#125;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>标记清除、引用计数</p><ol><li>找出不再使用的变量</li><li>释放其占用内存</li><li>固定时间间隔运行<h3 id="闭包解除引用"><a href="#闭包解除引用" class="headerlink" title="闭包解除引用"></a>闭包解除引用</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    a++<br>    <span class="hljs-built_in">console</span>.log(a)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> test = test1()<br>test() <span class="hljs-comment">//2</span><br>test() <span class="hljs-comment">//3</span><br>test = <span class="hljs-literal">null</span><br>test() <span class="hljs-comment">//test is not a function</span><br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6导出资源以及引入方式</title>
    <link href="/2022/01/28/ES6%E5%AF%BC%E5%87%BA%E8%B5%84%E6%BA%90%E4%BB%A5%E5%8F%8A%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/01/28/ES6%E5%AF%BC%E5%87%BA%E8%B5%84%E6%BA%90%E4%BB%A5%E5%8F%8A%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="ES6导出资源以及引入方式"><a href="#ES6导出资源以及引入方式" class="headerlink" title="ES6导出资源以及引入方式"></a>ES6导出资源以及引入方式</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><h4 id="单独导出"><a href="#单独导出" class="headerlink" title="单独导出"></a>单独导出</h4><p>src\util.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;setData&quot;</span>);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;getData&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="解构赋值引入"><a href="#解构赋值引入" class="headerlink" title="解构赋值引入"></a>解构赋值引入</h4><p>src\pages\test\test.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> &#123; setData , getData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../util&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>如果是 export 单独导出，则解构赋值方法引入</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><h4 id="默认方式导出"><a href="#默认方式导出" class="headerlink" title="默认方式导出"></a>默认方式导出</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;setData&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;getData&quot;</span>);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> setData;<br></code></pre></div></td></tr></table></figure><h4 id="单独引入"><a href="#单独引入" class="headerlink" title="单独引入"></a>单独引入</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> getData <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../util&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>如果使用结构赋值方式引入会报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> &#123; getData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../util&quot;</span>;<span class="hljs-comment">//TypeError: Object(...) is not a function</span><br></code></pre></div></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><h4 id="对象方式导出"><a href="#对象方式导出" class="headerlink" title="对象方式导出"></a>对象方式导出</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;setData&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;getData&quot;</span>);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123; setData, getData &#125;;<br></code></pre></div></td></tr></table></figure><h4 id="调用方式引入"><a href="#调用方式引入" class="headerlink" title="调用方式引入"></a>调用方式引入</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">import</span> util <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../util&quot;</span>;<br><br><span class="hljs-comment">//调用</span><br>util.getData();<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>ES6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="/2022/01/18/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/18/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="vue核心"><a href="#vue核心" class="headerlink" title="vue核心"></a>vue核心</h2><h3 id="初识Vue："><a href="#初识Vue：" class="headerlink" title="初识Vue："></a>初识Vue：</h3><p>1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；<br>2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；<br>3.root容器里的代码被称为【Vue模板】；<br>4.Vue实例和容器是一一对应的；<br>5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；<br>6.中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；<br>7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；</p><h3 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a>Vue模板语法</h3><h4 id="1-插值语法："><a href="#1-插值语法：" class="headerlink" title="1.插值语法："></a>1.插值语法：</h4><ul><li>功能：用于解析标签体内容。</li><li>写法：，xxx是js表达式，且可以直接读取到data中的所有属性。</li></ul><h4 id="2-指令语法："><a href="#2-指令语法：" class="headerlink" title="2.指令语法："></a>2.指令语法：</h4><ul><li>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。</li><li>举例：v-bind:href=”xxx” 或  简写为 :href=”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性。</li></ul><blockquote><p>备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>插值语法<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>指令语法<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;school.url.toUpperCase()&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="xml">    点我去&#123;&#123;school.name&#125;&#125;学习1</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;school.url&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">school</span>: &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.atguigu.com&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">  &#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><h4 id="1-单向绑定-v-bind-："><a href="#1-单向绑定-v-bind-：" class="headerlink" title="1.单向绑定(v-bind)："></a>1.单向绑定(v-bind)：</h4><p>数据只能从data流向页面。</p><h4 id="2-双向绑定-v-model-："><a href="#2-双向绑定-v-model-：" class="headerlink" title="2.双向绑定(v-model)："></a>2.双向绑定(v-model)：</h4><p>数据不仅能从data流向页面，还可以从页面流向data。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!-- 普通写法 --&gt;<br>单向数据绑定：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-bind:value=<span class="hljs-string">&quot;name&quot;</span>&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>双向数据绑定：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model:value=<span class="hljs-string">&quot;name&quot;</span>&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span> --&gt;<br><br>&lt;!-- 简写 --&gt;<br>单向数据绑定：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> :value=<span class="hljs-string">&quot;name&quot;</span> /&gt;<br>双向数据绑定：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;name&quot;</span> /&gt;<br></code></pre></div></td></tr></table></figure><p>备注：<br>    1.双向绑定一般都应用在表单类元素上（如：input、select等具有value值的元素）<br>    2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-model:x</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>你好啊<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="data与el的2种写法"><a href="#data与el的2种写法" class="headerlink" title="data与el的2种写法"></a>data与el的2种写法</h3><h4 id="1-el有2种写法"><a href="#1-el有2种写法" class="headerlink" title="1.el有2种写法"></a>1.el有2种写法</h4><p>(1).new Vue时候配置el属性。<br>(2).先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//el的两种写法</span><br><span class="hljs-keyword">const</span> v = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-comment">//el:&#x27;#root&#x27;, //第一种写法</span><br>  <span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span><br>  &#125;<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(v)<br>v.$mount(<span class="hljs-string">&#x27;#root&#x27;</span>) <span class="hljs-comment">//第二种写法</span><br></code></pre></div></td></tr></table></figure><h4 id="2-data有2种写法"><a href="#2-data有2种写法" class="headerlink" title="2.data有2种写法"></a>2.data有2种写法</h4><p>(1).对象式<br>(2).函数式<br>如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//data的两种写法</span><br>    <span class="hljs-keyword">new</span> Vue(&#123;<br>      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,<br>      <span class="hljs-comment">//data的第一种写法：对象式</span><br>      <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;尚硅谷&#x27;</span>,<br>      &#125;,<br>    &#125;)<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br><span class="hljs-comment">//data的第二种写法：函数式</span><br><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;@@@&#x27;</span>,<span class="hljs-built_in">this</span>) <span class="hljs-comment">//此处的this是Vue实例对象</span><br><span class="hljs-keyword">return</span>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span><br>&#125;<br>&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="3-一个重要的原则："><a href="#3-一个重要的原则：" class="headerlink" title="3.一个重要的原则："></a>3.一个重要的原则：</h4><p>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了而是window。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//错误写法</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,<br><span class="hljs-comment">//data的第二种写法：函数式</span><br><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;@@@&#x27;</span>, <span class="hljs-built_in">this</span>) <span class="hljs-comment">//此处的this是Vue实例对象</span><br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>,<br>&#125;<br>&#125;,<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h3><ol><li>M：模型(Model) ：对应 data 中的数据</li><li>V：视图(View) ：模板</li><li>VM：视图模型(ViewModel) ： Vue 实例对象</li></ol><p><img src="https://s2.loli.net/2021/12/08/BL8Il7FsmSerRyJ.png#crop=0&crop=0&crop=1&crop=1&height=393&id=snFo5&originHeight=206&originWidth=392&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=748.0000305175781"><br><img src="https://s2.loli.net/2021/12/08/BOujAGts5nDKJCh.png#crop=0&crop=0&crop=1&crop=1&height=363&id=EGmBg&originHeight=366&originWidth=816&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=808.86669921875"><br>虽然没有完全遵循 <a href="https://zh.wikipedia.org/wiki/MVVM">MVVM 模型</a>，但是 Vue 的设计也受到了它的启发。因此在文档中经常会使用 vm (ViewModel 的缩写) 这个变量名表示 Vue 实例。</p><h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><h4 id="1-Vue中的数据代理："><a href="#1-Vue中的数据代理：" class="headerlink" title="1.Vue中的数据代理："></a>1.Vue中的数据代理：</h4><p>通过vm对象来代理data对象中属性的操作（读/写）</p><h4 id="2-Vue中数据代理的好处："><a href="#2-Vue中数据代理的好处：" class="headerlink" title="2.Vue中数据代理的好处："></a>2.Vue中数据代理的好处：</h4><p>更加方便的操作data中的数据</p><h4 id="3-基本原理："><a href="#3-基本原理：" class="headerlink" title="3.基本原理："></a>3.基本原理：</h4><ul><li>通过 <strong>Object.defineProperty()</strong> 把data对象中所有属性添加到vm上。</li><li>为每一个添加到vm上的属性，都指定一个getter/setter。</li><li>在<strong>getter</strong>/<strong>setter</strong>内部去操作（读/写）data中对应的属性。</li></ul><p><img src="https://s2.loli.net/2021/12/08/prQqymwbc23PtBJ.jpg#crop=0&crop=0&crop=1&crop=1&height=513&id=DvJav&originHeight=576&originWidth=960&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=854.86669921875"></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;尚硅谷&#x27;</span>,<br>  <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;宏福科技园&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,<br>  data,<br>&#125;)<br><span class="hljs-built_in">console</span>.log(vm._data === data) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><p>可以看出vm中的_data等于自定义的data。实际上是vue通过事件代理将_data内的内容暴露出来方便操作，在<strong>getter</strong>/<strong>setter</strong>内部去操作（读/写）data中对应的属性。<br>但是在_data内部使用了事件劫持，可以监听data内部数据的变化，实时展示在页面上<br><img src="https://s2.loli.net/2021/12/08/OJ6cAP5gWKtQs1u.png#crop=0&crop=0&crop=1&crop=1&id=ncbrP&originHeight=741&originWidth=683&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h4><p>1.使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；<br>2.事件的回调需要配置在methods对象中，最终会在vm上；<br>3.methods中配置的函数，不要用箭头函数！否则this就不是vm了；<br>4.methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；<br>5.@click=”demo” 和 @click=”demo($event)” 效果一致，但后者可以传参；</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;showInfo1&quot;</span>&gt;点我提示信息<span class="hljs-number">1</span>（不传参）&lt;/button&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2（传参）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">    Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">showInfo1</span>(<span class="hljs-params">event</span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-comment">// console.log(event.target.innerText)</span></span></span><br><span class="javascript"><span class="xml">          <span class="hljs-comment">// console.log(this) //此处的this是vm</span></span></span><br><span class="javascript"><span class="xml">        &#125;,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">showInfo2</span>(<span class="hljs-params">event, number</span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-built_in">console</span>.log(event, number)</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-comment">// console.log(event.target.innerText)</span></span></span><br><span class="javascript"><span class="xml">          <span class="hljs-comment">// console.log(this) //此处的this是vm</span></span></span><br><span class="javascript"><span class="xml">        &#125;,</span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">    &#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>1.<strong>prevent</strong>：阻止默认事件（常用）；<br>2.<strong>stop</strong>：阻止事件冒泡（常用）；<br>3.<strong>once</strong>：事件只触发一次（常用）；<br>4.capture：使用事件的捕获模式；<br>5.self：只有event.target是当前操作的元素时才触发事件；<br>6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&lt;!-- 阻止默认事件（常用） --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.atguigu.com&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>&lt;!-- 阻止事件冒泡（常用） --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- 修饰符可以连续写 --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;!-- 事件只触发一次（常用） --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;!-- 使用事件的捕获模式 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> @<span class="hljs-attr">click.capture</span>=<span class="hljs-string">&quot;showMsg(1)&quot;</span>&gt;</span></span><br><span class="xml">div1</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showMsg(2)&quot;</span>&gt;</span></span><br><span class="xml">div2</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span> @<span class="hljs-attr">click.self</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> @<span class="hljs-attr">wheel.passive</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span></span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">showInfo</span>(<span class="hljs-params">e</span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">alert(<span class="hljs-string">&#x27;同学你好！&#x27;</span>)</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// console.log(e.target)</span></span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">showMsg</span>(<span class="hljs-params">msg</span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">console</span>.log(msg)</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">demo</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;#&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;累坏了&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml">*&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.demo1</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">background-color</span>: skyblue;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.box1</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">background-color</span>: skyblue;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.box2</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">background-color</span>: orange;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.list</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">background-color</span>: peru;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">overflow</span>: auto;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-tag">li</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><h4 id="1-Vue中常用的按键别名："><a href="#1-Vue中常用的按键别名：" class="headerlink" title="1.Vue中常用的按键别名："></a>1.Vue中常用的按键别名：</h4><ul><li>回车 =&gt; enter</li><li>删除 =&gt; delete (捕获“删除”和“退格”键)</li><li>退出 =&gt; esc</li><li>空格 =&gt; space</li><li>换行 =&gt; tab (特殊，必须配合keydown去使用)</li><li>上 =&gt; up</li><li>下 =&gt; down</li><li>左 =&gt; left</li><li>右 =&gt; right</li></ul><h4 id="2-Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）"><a href="#2-Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）" class="headerlink" title="2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）"></a>2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</h4><h4 id="3-系统修饰键（用法特殊）：ctrl、alt、shift、meta"><a href="#3-系统修饰键（用法特殊）：ctrl、alt、shift、meta" class="headerlink" title="3.系统修饰键（用法特殊）：ctrl、alt、shift、meta"></a>3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</h4><ul><li>(1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</li><li>(2).配合keydown使用：正常触发事件。</li></ul><h4 id="4-也可以使用keyCode去指定具体的按键（不推荐）"><a href="#4-也可以使用keyCode去指定具体的按键（不推荐）" class="headerlink" title="4.也可以使用keyCode去指定具体的按键（不推荐）"></a>4.也可以使用keyCode去指定具体的按键（不推荐）</h4><h4 id="5-Vue-config-keyCodes-自定义键名-键码，可以去定制按键别名"><a href="#5-Vue-config-keyCodes-自定义键名-键码，可以去定制按键别名" class="headerlink" title="5.Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名"></a>5.Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;按下回车提示输入&quot;</span> @<span class="hljs-attr">keydown.huiche</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="javascript"><span class="xml">Vue.config.keyCodes.huiche = <span class="hljs-number">13</span> <span class="hljs-comment">//定义了一个别名按键</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">showInfo</span>(<span class="hljs-params">e</span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// console.log(e.key,e.keyCode)</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">console</span>.log(e.target.value)</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="计算属性-computed-和-监视属性-watch"><a href="#计算属性-computed-和-监视属性-watch" class="headerlink" title="计算属性-computed 和 监视属性-watch"></a>计算属性-computed 和 监视属性-watch</h3><h4 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性-computed"></a>计算属性-computed</h4><p>1.定义：要用的属性不存在，要通过已有属性计算得来。<br>2.原理：底层借助了Objcet.defineproperty方法提供的getter和setter。<br>3.get函数什么时候执行？</p><ul><li>(1).初次读取时会执行一次。</li><li>(2).当依赖的数据发生改变时会被再次调用。</li></ul><p>4.优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。<br>5.备注：</p><ul><li>1.计算属性最终会出现在vm上，直接读取使用即可。</li><li>2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</li><li>3.计算属性第一次调用时就进行缓存，再次调用时读取缓存。修改计算属性时重新缓存</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>姓：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;firstName&quot;</span>&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;lastName&quot;</span>&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>测试：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;x&quot;</span>&gt; <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;<span class="hljs-regexp">/span&gt; &lt;br/</span>&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>        <span class="xml">&lt;-- 计算属性可以缓存，第一次调用时缓存，再次调用就读取缓存的数据，fullName修改时才重新缓存 --&gt;</span><br><span class="xml">全名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="xml">全名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="xml">全名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;张&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;三&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">x</span>:<span class="hljs-string">&#x27;你好&#x27;</span></span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">computed</span>:&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">//完整写法</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">fullName</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">//get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">//get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;get被调用了&#x27;</span>)</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// console.log(this) //此处的this是vm</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-built_in">this</span>.lastName</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">//set什么时候调用? 当fullName被修改时。</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;set&#x27;</span>,value)</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> arr = value.split(<span class="hljs-string">&#x27;-&#x27;</span>)</span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">this</span>.firstName = arr[<span class="hljs-number">0</span>]</span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">this</span>.lastName = arr[<span class="hljs-number">1</span>]</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">     <span class="hljs-comment">// //简写 确定只读不改就可以去掉set和get</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// fullName() &#123;</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">//   console.log(&#x27;get被调用了&#x27;)</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">//   return this.firstName + &#x27;-&#x27; + this.lastName</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// &#125;,</span></span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="监视属性-watch"><a href="#监视属性-watch" class="headerlink" title="监视属性-watch"></a>监视属性-watch</h4><h5 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h5><p>1.当被监视的属性变化时, 回调函数自动调用, 进行相关操作<br>2.监视的属性必须存在，才能进行监视！！<br>3.监视的两种写法：</p><ul><li>(1).new Vue时传入watch配置</li><li>(2).通过vm.$watch监视</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">isHot</span>:<span class="hljs-literal">true</span>,</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">computed</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">info</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.isHot ? <span class="hljs-string">&#x27;炎热&#x27;</span> : <span class="hljs-string">&#x27;凉爽&#x27;</span></span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">changeWeather</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">this</span>.isHot = !<span class="hljs-built_in">this</span>.isHot</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">/* watch:&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">isHot:&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">immediate:true, //初始化时让handler调用一下</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">//handler什么时候调用？当isHot发生改变时。</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">handler(newValue,oldValue)&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125; */</span></span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml">vm.$watch(<span class="hljs-string">&#x27;isHot&#x27;</span>,&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//初始化时让handler调用一下</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">//handler什么时候调用？当isHot发生改变时。</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newValue,oldValue</span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h5 id="深度监视："><a href="#深度监视：" class="headerlink" title="深度监视："></a>深度监视：</h5><p>(1).Vue中的watch默认不监测对象内部值的改变（一层）。<br>(2).配置deep:true可以监测对象内部值改变（多层）。<br>备注：<br>(1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！<br>(2).使用watch时根据数据的具体结构，决定是否采用深度监视。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">watch:&#123;<br>  <span class="hljs-attr">isHot</span>:&#123;<br>    <span class="hljs-comment">// immediate:true, //初始化时让handler调用一下</span><br>    <span class="hljs-comment">//handler什么时候调用？当isHot发生改变时。</span><br>    <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newValue,oldValue</span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)<br>    &#125;<br>  &#125;,<br>    <span class="hljs-comment">//监视多级结构中某个属性的变化</span><br>    <span class="hljs-comment">/* &#x27;numbers.a&#x27;:&#123;</span><br><span class="hljs-comment">            handler()&#123;</span><br><span class="hljs-comment">              console.log(&#x27;a被改变了&#x27;)</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">          &#125; */</span><br>    <span class="hljs-comment">//监视多级结构中所有属性的变化</span><br>    <span class="hljs-attr">numbers</span>:&#123;<br>      <span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;numbers改变了&#x27;</span>)<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="watch简写"><a href="#watch简写" class="headerlink" title="watch简写"></a>watch简写</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">watch:&#123;<br><span class="hljs-comment">//正常写法</span><br><span class="hljs-comment">/* isHot:&#123;</span><br><span class="hljs-comment">// immediate:true, //初始化时让handler调用一下</span><br><span class="hljs-comment">// deep:true,//深度监视</span><br><span class="hljs-comment">handler(newValue,oldValue)&#123;</span><br><span class="hljs-comment">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;, */</span><br><span class="hljs-comment">//简写</span><br><span class="hljs-comment">/* isHot(newValue,oldValue)&#123;</span><br><span class="hljs-comment">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span><br><span class="hljs-comment">&#125; */</span><br>&#125;<br>...<br><br><span class="hljs-comment">//正常写法</span><br><span class="hljs-comment">/* vm.$watch(&#x27;isHot&#x27;,&#123;</span><br><span class="hljs-comment">immediate:true, //初始化时让handler调用一下</span><br><span class="hljs-comment">deep:true,//深度监视</span><br><span class="hljs-comment">handler(newValue,oldValue)&#123;</span><br><span class="hljs-comment">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;) */</span><br><br><span class="hljs-comment">//简写 //不可以使用箭头函数，箭头函数this指向window</span><br><span class="hljs-comment">/* vm.$watch(&#x27;isHot&#x27;,function(newValue,oldValue)&#123;</span><br><span class="hljs-comment">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span><br><span class="hljs-comment">&#125;) */</span><br></code></pre></div></td></tr></table></figure><h4 id="computed和watch之间的区别："><a href="#computed和watch之间的区别：" class="headerlink" title="computed和watch之间的区别："></a>computed和watch之间的区别：</h4><p>1.computed能完成的功能，watch都可以完成。<br>2.watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。</p><h5 id="两个重要的小原则："><a href="#两个重要的小原则：" class="headerlink" title="两个重要的小原则："></a>两个重要的小原则：</h5><ul><li>1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</li><li>2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm 或 组件实例对象。</li></ul><h3 id="绑定样式："><a href="#绑定样式：" class="headerlink" title="绑定样式："></a>绑定样式：</h3><h4 id="1-class样式"><a href="#1-class样式" class="headerlink" title="1. class样式"></a>1. class样式</h4><ul><li>写法:class=”xxx” xxx可以是字符串、对象、数组。</li><li>字符串写法适用于：类名不确定，要动态获取。</li></ul><p><strong>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</strong><br><strong>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</strong></p><h4 id="2-style样式"><a href="#2-style样式" class="headerlink" title="2. style样式"></a>2. style样式</h4><ul><li>:style=”{fontSize: xxx}”其中xxx是动态值。</li><li>:style=”[a,b]”其中a、b是样式对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>&lt;!-- 绑定<span class="hljs-class"><span class="hljs-keyword">class</span>样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span></span>=<span class="hljs-string">&quot;basic&quot;</span> :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;mood&quot;</span> @click=<span class="hljs-string">&quot;changeMood&quot;</span>&gt;&#123;&#123;name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt; &lt;br/</span>&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><br>&lt;!-- 绑定<span class="hljs-class"><span class="hljs-keyword">class</span>样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span></span>=<span class="hljs-string">&quot;basic&quot;</span> :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;classArr&quot;</span>&gt;&#123;&#123;name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt; &lt;br/</span>&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><br>&lt;!-- 绑定<span class="hljs-class"><span class="hljs-keyword">class</span>样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span></span>=<span class="hljs-string">&quot;basic&quot;</span> :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;classObj&quot;</span>&gt;&#123;&#123;name&#125;&#125;&lt;<span class="hljs-regexp">/div&gt; &lt;br/</span>&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><br>&lt;!-- 绑定style样式--对象写法 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>&lt;!-- 绑定style样式--数组写法 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="hljs-literal">false</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">mood</span>:<span class="hljs-string">&#x27;normal&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">classArr</span>:[<span class="hljs-string">&#x27;atguigu1&#x27;</span>,<span class="hljs-string">&#x27;atguigu2&#x27;</span>,<span class="hljs-string">&#x27;atguigu3&#x27;</span>],</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">classObj</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">atguigu1</span>:<span class="hljs-literal">false</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">atguigu2</span>:<span class="hljs-literal">false</span>,</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">styleObj</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;40px&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;red&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">styleObj2</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&#x27;orange&#x27;</span></span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">styleArr</span>:[</span></span><br><span class="javascript"><span class="xml">&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;40px&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;blue&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml">&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&#x27;gray&#x27;</span></span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">]</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">changeMood</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;happy&#x27;</span>,<span class="hljs-string">&#x27;sad&#x27;</span>,<span class="hljs-string">&#x27;normal&#x27;</span>]</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> index = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">3</span>)</span></span><br><span class="javascript"><span class="xml"><span class="hljs-built_in">this</span>.mood = arr[index]</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.basic</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.happy</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">border</span>: <span class="hljs-number">4px</span> solid red;;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.644</span>);</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">30deg</span>,yellow,pink,orange,yellow);</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.sad</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">border</span>: <span class="hljs-number">4px</span> dashed <span class="hljs-built_in">rgb</span>(<span class="hljs-number">2</span>, <span class="hljs-number">197</span>, <span class="hljs-number">2</span>);</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">background-color</span>: gray;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.normal</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">background-color</span>: skyblue;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.atguigu1</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">background-color</span>: yellowgreen;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.atguigu2</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">text-shadow</span>:<span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">10px</span> red;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.atguigu3</span>&#123;</span></span><br><span class="css"><span class="xml"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1.v-if"></a>1.v-if</h4><p>写法：</p><ul><li>(1).v-if=”表达式” </li><li>(2).v-else-if=”表达式”</li><li>(3).v-else=”表达式”</li></ul><p>适用于：切换频率较低的场景。<br>特点：不展示的DOM元素直接被移除。<br>注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</p><h4 id="2-v-show"><a href="#2-v-show" class="headerlink" title="2.v-show"></a>2.v-show</h4><p>写法：v-show=”表达式”<br>适用于：切换频率较高的场景。<br>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉<br>​</p><p>备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  &lt;!-- 使用v-show做条件渲染 --&gt;<br>  &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span> --&gt;<br>  &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;1 === 1&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span> --&gt;<br><br>  &lt;!-- 使用v-<span class="hljs-keyword">if</span>做条件渲染 --&gt;<br>  &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span> --&gt;<br>  &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;1 === 1&quot;</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span> --&gt;<br><br>  &lt;!-- v-<span class="hljs-keyword">else</span>和v-<span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span> --&gt;<br>  &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;n === 1&quot;</span>&gt;</span>Angular<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;n === 2&quot;</span>&gt;</span>React<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;n === 3&quot;</span>&gt;</span>Vue<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span>哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> --&gt;<br><br>  &lt;!-- v-<span class="hljs-keyword">if</span>与template的配合使用 --&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;n === 1&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">    Vue.config.productionTip = <span class="hljs-literal">false</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">n</span>: <span class="hljs-number">0</span>,</span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">    &#125;)</span></span><br><span class="javascript"><span class="xml"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><h4 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令:"></a>v-for指令:</h4><p>1.用于展示列表数据<br>2.语法：v-for=”(item, index) in xxx” :key=”yyy”<br>3.可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>&lt;!-- 遍历数组 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表（遍历数组）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) of persons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="xml">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>&lt;!-- 遍历对象 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,k) of car&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;k&quot;</span>&gt;</span></span><br><span class="xml">&#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><br>&lt;!-- 遍历字符串 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>测试遍历字符串（用得少）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(char,index) of str&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="xml">&#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><br>&lt;!-- 遍历指定次数 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>测试遍历指定次数（用得少）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(number,index) of 5&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="xml">&#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  Vue.config.productionTip = <span class="hljs-literal">false</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">persons</span>:[</span></span><br><span class="javascript"><span class="xml">        &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,</span></span><br><span class="javascript"><span class="xml">        &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,</span></span><br><span class="javascript"><span class="xml">        &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;</span></span><br><span class="javascript"><span class="xml">      ],</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">car</span>:&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;奥迪A8&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">price</span>:<span class="hljs-string">&#x27;70万&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;黑色&#x27;</span></span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">str</span>:<span class="hljs-string">&#x27;hello&#x27;</span></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="key的原理"><a href="#key的原理" class="headerlink" title="key的原理"></a>key的原理</h4><h5 id="1-虚拟DOM中key的作用："><a href="#1-虚拟DOM中key的作用：" class="headerlink" title="1. 虚拟DOM中key的作用："></a>1. 虚拟DOM中key的作用：</h5><p>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p><h5 id="2-对比规则："><a href="#2-对比规则：" class="headerlink" title="2.对比规则："></a>2.对比规则：</h5><ul><li>(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：<ul><li>①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</li><li>②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</li></ul></li><li>(2).旧虚拟DOM中未找到与新虚拟DOM相同的key<ul><li>创建新的真实DOM，随后渲染到到页面。</li></ul></li></ul><h5 id="3-用index作为key可能会引发的问题："><a href="#3-用index作为key可能会引发的问题：" class="headerlink" title="3. 用index作为key可能会引发的问题："></a>3. 用index作为key可能会引发的问题：</h5><ul><li><ol><li>若对数据进行：逆序添加、逆序删除等破坏顺序操作:</li></ol><ul><li>会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</li></ul></li><li><ol start="2"><li>如果结构中还包含输入类的DOM：</li></ol><ul><li>会产生错误DOM更新 ==&gt; 界面有问题。</li></ul></li></ul><h5 id="4-开发中如何选择key"><a href="#4-开发中如何选择key" class="headerlink" title="4. 开发中如何选择key?:"></a>4. 开发中如何选择key?:</h5><ul><li>1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</li><li>2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li></ul><h4 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入名字&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) of filPerons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="xml">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="hljs-literal">false</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">//用watch实现</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">//#region </span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">/* new Vue(&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">el:&#x27;#root&#x27;,</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">data:&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">keyWord:&#x27;&#x27;,</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">persons:[</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">],</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">filPerons:[]</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">watch:&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">keyWord:&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">immediate:true,</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">handler(val)&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">this.filPerons = this.persons.filter((p)=&gt;&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">return p.name.indexOf(val) !== -1</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;) */</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">//#endregion</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">//用computed实现</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">keyWord</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">persons</span>:[</span></span><br><span class="javascript"><span class="xml">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;马冬梅&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="javascript"><span class="xml">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周冬雨&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="javascript"><span class="xml">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周杰伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">21</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="javascript"><span class="xml">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;004&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;温兆伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">22</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="javascript"><span class="xml">]</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">computed</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">filPerons</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.persons.filter(<span class="hljs-function">(<span class="hljs-params">p</span>)=&gt;</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">return</span> p.name.indexOf(<span class="hljs-built_in">this</span>.keyWord) !== -<span class="hljs-number">1</span></span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;) </span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入名字&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sortType = 2&quot;</span>&gt;</span>年龄升序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sortType = 1&quot;</span>&gt;</span>年龄降序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) of filPerons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="xml">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="hljs-literal">false</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">keyWord</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">sortType</span>:<span class="hljs-number">0</span>, <span class="hljs-comment">//0原顺序 1降序 2升序</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">persons</span>:[</span></span><br><span class="javascript"><span class="xml">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;马冬梅&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">30</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="javascript"><span class="xml">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周冬雨&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">31</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="javascript"><span class="xml">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周杰伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="javascript"><span class="xml">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;004&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;温兆伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="javascript"><span class="xml">]</span></span><br><span class="javascript"><span class="xml">&#125;,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">computed</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-function"><span class="hljs-title">filPerons</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> arr = <span class="hljs-built_in">this</span>.persons.filter(<span class="hljs-function">(<span class="hljs-params">p</span>)=&gt;</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">return</span> p.name.indexOf(<span class="hljs-built_in">this</span>.keyWord) !== -<span class="hljs-number">1</span></span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">//判断一下是否需要排序</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.sortType)&#123;</span></span><br><span class="javascript"><span class="xml">arr.sort(<span class="hljs-function">(<span class="hljs-params">p1,p2</span>)=&gt;</span>&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.sortType === <span class="hljs-number">1</span> ? p2.age-p1.age : p1.age-p2.age</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">return</span> arr</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;) </span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"></span><br></code></pre></div></td></tr></table></figure><h3 id="Vue监视数据的原理"><a href="#Vue监视数据的原理" class="headerlink" title="Vue监视数据的原理"></a>Vue监视数据的原理</h3><ol><li>vue会监视data中所有层次的数据。</li><li>如何监测对象中的数据？<br>通过setter实现监视，且要在new Vue时就传入要监测的数据。</li></ol><ul><li>(1).对象中后追加的属性，Vue默认不做响应式处理</li><li>(2).如需给后添加的属性做响应式，请使用如下API：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Vue.set(target，propertyName/index，value) <span class="hljs-comment">//或 </span><br>vm.$set(target，propertyName/index，value)<br></code></pre></div></td></tr></table></figure><ol start="3"><li>如何监测数组中的数据？<br>通过包裹数组更新元素的方法实现，本质就是做了两件事：<br>(1).调用原生对应的方法对数组进行更新。<br>(2).重新解析模板，进而更新页面。</li><li>在Vue修改数组中的某个元素一定要用如下方法：<br>1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()<br>2.Vue.set() 或 vm.$set()</li></ol><blockquote><p>特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象添加属性！！！</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">  &lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>学生信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;student.age++&quot;</span>&gt;</span>年龄+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <br><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addSex&quot;</span>&gt;</span>添加性别属性 默认 男<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;student.sex=&#x27;未知&#x27;&quot;</span>&gt;</span>修改性别<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <br><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addFriend&quot;</span>&gt;</span>添加一个朋友<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateFristFriend&quot;</span>&gt;</span>修改第一个朋友的名字为张三<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <br><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addhobby&quot;</span>&gt;</span>添加一个爱好<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateHobby&quot;</span>&gt;</span>修改对一个爱好为开车<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removeSmoke&quot;</span>&gt;</span>移除掉爱好中的抽烟<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>姓名：&#123;&#123;student.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>年龄：&#123;&#123;student.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(h,index) in student.hobby&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123;h&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>朋友们：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(f,index) in student.friends&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><br><span class="xml">        &#123;&#123;f.name&#125;&#125;---&#123;&#123;f.age&#125;&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  &lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">student</span>: &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">hobby</span>: [<span class="hljs-string">&#x27;抽烟&#x27;</span>, <span class="hljs-string">&#x27;喝酒&#x27;</span>, <span class="hljs-string">&#x27;烫头&#x27;</span>],</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">friends</span>: [</span></span><br><span class="javascript"><span class="xml">          &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jerry&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">35</span> &#125;,</span></span><br><span class="javascript"><span class="xml">          &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tony&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span> &#125;,</span></span><br><span class="javascript"><span class="xml">        ],</span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-title">addSex</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// Vue.set(this.student, &#x27;sex&#x27;, &#x27;男&#x27;)</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">this</span>.$set(<span class="hljs-built_in">this</span>.student, <span class="hljs-string">&#x27;sex&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-title">addFriend</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">this</span>.student.friends.unshift(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;70&#x27;</span> &#125;)</span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-title">updateFristFriend</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">this</span>.student.friends[<span class="hljs-number">0</span>].name = <span class="hljs-string">&#x27;张三&#x27;</span></span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-title">addhobby</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">this</span>.student.hobby.push(<span class="hljs-string">&#x27;学习&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-title">updateHobby</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// this.student.hobby.splice(0, 1, &#x27;开车&#x27;)</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// Vue.set(this.student.hobby, 0, &#x27;开车&#x27;)</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">this</span>.$set(<span class="hljs-built_in">this</span>.student.hobby, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;开车&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-title">removeSmoke</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">this</span>.student.hobby = <span class="hljs-built_in">this</span>.student.hobby.filter(<span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> &#123;</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-keyword">return</span> h !== <span class="hljs-string">&#x27;抽烟&#x27;</span></span></span><br><span class="javascript"><span class="xml">        &#125;)</span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">  &#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h3><p>若：<input type="text"/>，则v-model收集的是value值，用户输入的就是value值。<br>若：<input type="radio"/>，则v-model收集的是value值，且要给标签配置value值。<br>若：<input type="checkbox"/></p><ul><li>1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li>2.配置input的value属性:<ul><li>(1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li>(2)v-model的初始值是数组，那么收集的的就是value组成的数组</li></ul></li></ul><p>备注：v-model的三个修饰符：<br>lazy：失去焦点再收集数据<br>number：输入字符串转为有效的数字<br>trim：输入首尾空格过滤</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>&lt;form @submit.prevent=&quot;demo&quot;&gt;<br>账号：&lt;input type=&quot;text&quot; v-model.trim=&quot;userInfo.account&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>密码：&lt;input type=&quot;password&quot; v-model=&quot;userInfo.password&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>年龄：&lt;input type=&quot;number&quot; v-model.number=&quot;userInfo.age&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>性别：<br>男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;male&quot;&gt;<br>女&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;female&quot;&gt; &lt;br/&gt;&lt;br/&gt;<br>爱好：<br>学习&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;study&quot;&gt;<br>打游戏&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;game&quot;&gt;<br>吃饭&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;eat&quot;&gt;<br>&lt;br/&gt;&lt;br/&gt;<br>所属校区<br>&lt;select v-model=&quot;userInfo.city&quot;&gt;<br>&lt;option value=&quot;&quot;&gt;请选择校区&lt;/option&gt;<br>&lt;option value=&quot;beijing&quot;&gt;北京&lt;/option&gt;<br>&lt;option value=&quot;shanghai&quot;&gt;上海&lt;/option&gt;<br>&lt;option value=&quot;shenzhen&quot;&gt;深圳&lt;/option&gt;<br>&lt;option value=&quot;wuhan&quot;&gt;武汉&lt;/option&gt;<br>&lt;/select&gt;<br>&lt;br/&gt;&lt;br/&gt;<br>其他信息：<br>&lt;textarea v-model.lazy=&quot;userInfo.other&quot;&gt;&lt;/textarea&gt; &lt;br/&gt;&lt;br/&gt;<br>&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.agree&quot;&gt;阅读并接受&lt;a href=&quot;http://www.atguigu.com&quot;&gt;《用户协议》&lt;/a&gt;<br>&lt;button&gt;提交&lt;/button&gt;<br>&lt;/form&gt;<br>&lt;/div&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br>Vue.config.productionTip = false<br>new Vue(&#123;<br>el:&#x27;#root&#x27;,<br>data:&#123;<br>userInfo:&#123;<br>account:&#x27;&#x27;,<br>password:&#x27;&#x27;,<br>age:18,<br>sex:&#x27;female&#x27;,<br>hobby:[],<br>city:&#x27;beijing&#x27;,<br>other:&#x27;&#x27;,<br>agree:&#x27;&#x27;<br>&#125;<br>&#125;,<br>methods: &#123;<br>demo()&#123;<br>console.log(JSON.stringify(this.userInfo))<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。<br>语法：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">- <span class="hljs-number">1</span>.注册过滤器：Vue.<span class="hljs-built_in">filter</span>(name,callback) 或 <span class="hljs-keyword">new</span> Vue&#123;<span class="hljs-built_in">filter</span><span class="hljs-variable">s:</span>&#123;&#125;&#125;<br>- <span class="hljs-number">2</span>.使用过滤器：&#123;&#123; xxx | 过滤器名&#125;&#125;  或  v-bind:属性 = <span class="hljs-string">&quot;xxx | 过滤器名&quot;</span><br></code></pre></div></td></tr></table></figure><p>备注：</p><ul><li>1.过滤器也可以接收额外参数、多个过滤器也可以串联</li><li>2.并没有改变原本的数据, 是产生新的对应的数据  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>     <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>显示格式化后的时间<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>     &lt;!-- 计算属性实现 --&gt;<br>     <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>现在是：&#123;&#123;fmtTime&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>     &lt;!-- methods实现 --&gt;<br>     <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>现在是：&#123;&#123;getFmtTime()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>     &lt;!-- 过滤器实现 --&gt;<br>     <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>     &lt;!-- 过滤器实现（传参） --&gt;<br>     <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>     <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">:x</span>=<span class="hljs-string">&quot;msg | mySlice&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>   &lt;/div&gt;<br><br>   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root2&quot;</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;msg | mySlice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">   Vue.config.productionTip = <span class="hljs-literal">false</span></span></span><br><span class="javascript"><span class="xml">   <span class="hljs-comment">//全局过滤器</span></span></span><br><span class="javascript"><span class="xml">   Vue.filter(<span class="hljs-string">&#x27;mySlice&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;</span></span><br><span class="javascript"><span class="xml">     <span class="hljs-keyword">return</span> value.slice(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>)</span></span><br><span class="javascript"><span class="xml">   &#125;)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">   <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">     <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="javascript"><span class="xml">       <span class="hljs-attr">time</span>: <span class="hljs-number">1621561377603</span>, <span class="hljs-comment">//时间戳</span></span></span><br><span class="javascript"><span class="xml">       <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;你好&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">     &#125;,</span></span><br><span class="javascript"><span class="xml">     <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="javascript"><span class="xml">       <span class="hljs-function"><span class="hljs-title">fmtTime</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">         <span class="hljs-keyword">return</span> dayjs(<span class="hljs-built_in">this</span>.time).format(<span class="hljs-string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">       &#125;,</span></span><br><span class="javascript"><span class="xml">     &#125;,</span></span><br><span class="javascript"><span class="xml">     <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml">       <span class="hljs-function"><span class="hljs-title">getFmtTime</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">         <span class="hljs-keyword">return</span> dayjs(<span class="hljs-built_in">this</span>.time).format(<span class="hljs-string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">       &#125;,</span></span><br><span class="javascript"><span class="xml">     &#125;,</span></span><br><span class="javascript"><span class="xml">     <span class="hljs-comment">//局部过滤器</span></span></span><br><span class="javascript"><span class="xml">     <span class="hljs-attr">filters</span>: &#123;</span></span><br><span class="javascript"><span class="xml">       <span class="hljs-function"><span class="hljs-title">timeFormater</span>(<span class="hljs-params">value, str = <span class="hljs-string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">         <span class="hljs-comment">// console.log(&#x27;@&#x27;,value)</span></span></span><br><span class="javascript"><span class="xml">         <span class="hljs-keyword">return</span> dayjs(value).format(str)</span></span><br><span class="javascript"><span class="xml">       &#125;,</span></span><br><span class="javascript"><span class="xml">     &#125;,</span></span><br><span class="javascript"><span class="xml">   &#125;)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">   <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">     <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root2&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">     <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="javascript"><span class="xml">       <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello!&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">     &#125;,</span></span><br><span class="javascript"><span class="xml">   &#125;)</span></span><br><span class="javascript"><span class="xml"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h3><h4 id="常用内置指令"><a href="#常用内置指令" class="headerlink" title="常用内置指令"></a>常用内置指令</h4><ol><li>v-text : 更新元素的 textContent</li><li>v-html : 更新元素的 innerHTML</li><li>v-if : 如果为 true, 当前标签才会输出到页面</li><li>v-else: 如果为 false, 当前标签才会输出到页面</li><li>v-show : 通过控制 display 样式来控制显示/隐藏</li><li>v-for : 遍历数组/对象</li><li>v-on : 绑定事件监听, 一般简写为@</li><li>v-bind : 绑定解析表达式, 可以省略 v-bind</li><li>v-model : 双向数据绑定</li><li>v-cloak : 防止闪现, 与 css 配合: [v-cloak] { display: none }</li></ol><h4 id="之前写过的指令"><a href="#之前写过的指令" class="headerlink" title="之前写过的指令"></a>之前写过的指令</h4><p>v-bind    : 单向绑定解析表达式, 可简写为 :xxx<br>v-model    : 双向数据绑定<br>v-for      : 遍历数组/对象/字符串<br>v-on       : 绑定事件监听, 可简写为@<br>v-if          : 条件渲染（动态控制节点是否存在）<br>v-else     : 条件渲染（动态控制节点是否存在）<br>v-show     : 条件渲染 (动态控制节点是否展示)</p><h4 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h4><ul><li>1.作用：向其所在的节点中渲染文本内容。</li><li>2.与插值语法的区别：v-text会替换掉节点中的内容，则不会。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;str&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">str</span>:<span class="hljs-string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span></span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h4><p>1.作用：向指定节点中渲染包含html结构的内容。<br>2.与插值语法的区别：</p><ul><li>(1).v-html会替换掉节点中所有的内容，则不会。</li><li>(2).v-html可以识别html结构。</li></ul><p>3.严重注意：v-html有安全性问题！！！！</p><ul><li>(1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。</li><li>(2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;str&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;str2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">str</span>:<span class="hljs-string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">str2</span>:<span class="hljs-string">&#x27;&lt;a href=javascript:location.href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="v-cloak指令（没有值）"><a href="#v-cloak指令（没有值）" class="headerlink" title="v-cloak指令（没有值）"></a>v-cloak指令（没有值）</h4><p>1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。<br>2.使用css配合v-cloak可以解决网速慢时页面展示出的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>[v-cloak]&#123;<br><span class="hljs-attr">display</span>:none;<br>&#125;<br>&lt;/style&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://xxx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)</span></span><br><span class="javascript"><span class="xml">  Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">  &#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h4><p>1.v-once所在节点在初次动态渲染后，就视为静态内容了。<br>2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-once</span>&gt;</span>初始化的n值是:&#123;&#123;n&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">n</span>:<span class="hljs-number">1</span></span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></div></td></tr></table></figure><h4 id="v-pre指令"><a href="#v-pre指令" class="headerlink" title="v-pre指令"></a>v-pre指令</h4><p>1.跳过其所在节点的编译过程。<br>2.可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-pre</span>&gt;</span>Vue其实很简单<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> &gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml"><span class="hljs-attr">n</span>:<span class="hljs-number">1</span></span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></div></td></tr></table></figure><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><h4 id="一、定义语法："><a href="#一、定义语法：" class="headerlink" title="一、定义语法："></a>一、定义语法：</h4><h5 id="1-局部指令："><a href="#1-局部指令：" class="headerlink" title="(1).局部指令："></a>(1).局部指令：</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> Vue(&#123;<br><span class="hljs-attr">directives</span>:&#123;指令名:配置对象&#125;    <br>&#125;) <br><span class="hljs-comment">//或</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br>directives&#123;指令名:回调函数&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h5 id="2-全局指令："><a href="#2-全局指令：" class="headerlink" title="(2).全局指令："></a>(2).全局指令：</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Vue.directive(指令名,配置对象) <br><span class="hljs-comment">//或   </span><br>Vue.directive(指令名,回调函数)<br></code></pre></div></td></tr></table></figure><h4 id="二、配置对象中常用的3个回调："><a href="#二、配置对象中常用的3个回调：" class="headerlink" title="二、配置对象中常用的3个回调："></a>二、配置对象中常用的3个回调：</h4><ul><li>(1).bind：指令与元素成功绑定时调用。</li><li>(2).inserted：指令所在元素被插入页面时调用。</li><li>(3).update：指令所在模板结构被重新解析时调用。</li></ul><h4 id="三、备注："><a href="#三、备注：" class="headerlink" title="三、备注："></a>三、备注：</h4><ul><li>1.指令定义时不加v-，但使用时要加v-；</li><li>2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</li></ul><p>需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。<br>需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">    &lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">        当前的n值是：</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>      &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>放大10倍后的n值是：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-big-number</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span> --&gt;<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">        放大10倍后的n值是：</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-big</span>=<span class="hljs-string">&quot;n&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-fbind:value</span>=<span class="hljs-string">&quot;n&quot;</span> /&gt;</span></span><br>    &lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">    Vue.config.productionTip = <span class="hljs-literal">false</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-comment">//定义全局指令</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-comment">/* Vue.directive(&#x27;fbind&#x27;,&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">//指令与元素成功绑定时（一上来）</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">bind(element,binding)&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">element.value = binding.value</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">//指令所在元素被插入页面时</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">inserted(element,binding)&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">element.focus()</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">//指令所在的模板被重新解析时</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">update(element,binding)&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">element.value = binding.value</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;) */</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">n</span>: <span class="hljs-number">1</span>,</span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">directives</span>: &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">//big函数何时会被调用？1.指令与元素成功绑定时（一上来）。2.指令所在的模板被重新解析时。</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">/* &#x27;big-number&#x27;(element,binding)&#123;</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">// console.log(&#x27;big&#x27;)</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">element.innerText = binding.value * 10</span></span></span><br><span class="hljs-comment"><span class="javascript"><span class="xml">&#125;, */</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">big</span>(<span class="hljs-params">element, binding</span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;big&#x27;</span>, <span class="hljs-built_in">this</span>) <span class="hljs-comment">//注意此处的this是window</span></span></span><br><span class="javascript"><span class="xml">          <span class="hljs-comment">// console.log(&#x27;big&#x27;)</span></span></span><br><span class="javascript"><span class="xml">          element.innerText = binding.value * <span class="hljs-number">10</span></span></span><br><span class="javascript"><span class="xml">        &#125;,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">fbind</span>: &#123;</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-comment">//指令与元素成功绑定时（一上来）</span></span></span><br><span class="javascript"><span class="xml">          <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">element, binding</span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">            element.value = binding.value</span></span><br><span class="javascript"><span class="xml">          &#125;,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-comment">//指令所在元素被插入页面时</span></span></span><br><span class="javascript"><span class="xml">          <span class="hljs-function"><span class="hljs-title">inserted</span>(<span class="hljs-params">element, binding</span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">            element.focus()</span></span><br><span class="javascript"><span class="xml">          &#125;,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-comment">//指令所在的模板被重新解析时</span></span></span><br><span class="javascript"><span class="xml">          <span class="hljs-function"><span class="hljs-title">update</span>(<span class="hljs-params">element, binding</span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">            element.value = binding.value</span></span><br><span class="javascript"><span class="xml">          &#125;,</span></span><br><span class="javascript"><span class="xml">        &#125;,</span></span><br><span class="javascript"><span class="xml">      &#125;,</span></span><br><span class="javascript"><span class="xml">    &#125;)</span></span><br><span class="javascript"><span class="xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></div></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="什么是生命周期"></a>什么是生命周期</h4><p>1.又名：生命周期回调函数、生命周期函数、生命周期钩子。<br>2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。<br>3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。<br>4.生命周期函数中的this指向是vm 或 组件实例对象。<br><img src="https://s2.loli.net/2021/12/18/FQYldazsqEg6kBT.png#crop=0&crop=0&crop=1&crop=1&id=gm2ul&originHeight=1892&originWidth=1469&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h4 id="初始化显示"><a href="#初始化显示" class="headerlink" title="初始化显示"></a>初始化显示</h4><h5 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate()"></a>beforeCreate()</h5><ul><li>初始化：数据监测、数据代理之前，此时：无法通过vm访问到data中的数</li></ul><h5 id="created"><a href="#created" class="headerlink" title="created()"></a>created()</h5><ul><li>初始化：数据监测、数据代理之后，此时：可以通过vm访问到data中的数</li></ul><h5 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount()"></a>beforeMount()</h5><ul><li>将内存中的虚拟DOM 转为真实DOM 插入页面之前，此时: 页面呈现的是未经Vue编译的DOM结构。所有对DOM的操作，最终都不奏效。</li></ul><h5 id="mounted"><a href="#mounted" class="headerlink" title="mounted()"></a>mounted()</h5><ul><li>将内存中的虚拟DOM 转为真实DOM 插入页面之后，此时：页面中呈现的是经过Vue编译的DOM 。对DOM的操作均有效（尽可能避免）。至此初始化过程结束，一般在此进行：开启定时器、发送网络请求、订阅消息、绑定自定义事件、等初始化操作。</li></ul><h4 id="更新状态-this-xxx-value"><a href="#更新状态-this-xxx-value" class="headerlink" title="更新状态: this.xxx = value"></a>更新状态: this.xxx = value</h4><h5 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate()"></a>beforeUpdate()</h5><ul><li>此时：数据是新的，但页面是旧的，即：页面尚未和数据保持同步</li></ul><h5 id="updated"><a href="#updated" class="headerlink" title="updated()"></a>updated()</h5><ul><li>此时：数据是新的，但页面也是新的，即：页面和数据保持同步</li></ul><h4 id="销毁-vue-实例-vm-destory"><a href="#销毁-vue-实例-vm-destory" class="headerlink" title="销毁 vue 实例: vm.$destory()"></a>销毁 vue 实例: vm.$destory()</h4><h5 id="beforeDestory"><a href="#beforeDestory" class="headerlink" title="beforeDestory()"></a>beforeDestory()</h5><ul><li>此时：vm中所有的：data、methods、指令等等，都处于可用状态，马上要执行销毁过程，般在此阶段：关闭定时器、取消订阅消息解绑自定义事件等收尾操作</li></ul><h5 id="destoryed"><a href="#destoryed" class="headerlink" title="destoryed()"></a>destoryed()</h5><h4 id="其他生命周期"><a href="#其他生命周期" class="headerlink" title="其他生命周期"></a>其他生命周期</h4><h5 id="activated和deactivated"><a href="#activated和deactivated" class="headerlink" title="activated和deactivated"></a>activated和deactivated</h5><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字： <ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h5 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h5><ol><li>语法：this.$nextTick(回调函数)</li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h4 id="常用的生命周期方法"><a href="#常用的生命周期方法" class="headerlink" title="常用的生命周期方法"></a>常用的生命周期方法</h4><ol><li>mounted(): 发送 ajax 请求, 启动定时器等异步任务、绑定自定义事件、订阅消息等【初始化操作】</li><li>beforeDestory(): 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】</li></ol><h4 id="关于销毁Vue实例"><a href="#关于销毁Vue实例" class="headerlink" title="关于销毁Vue实例"></a>关于销毁Vue实例</h4><p>1.销毁后借助Vue开发者工具看不到任何信息。<br>2.销毁后自定义事件会失效，但原生DOM事件依然有效。<br>3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</p><h3 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h3><h4 id="Vue中使用组件的三大步骤："><a href="#Vue中使用组件的三大步骤：" class="headerlink" title="Vue中使用组件的三大步骤："></a>Vue中使用组件的三大步骤：</h4><ul><li>一、定义组件(创建组件)</li><li>二、注册组件</li><li>三、使用组件(写组件标签)</li></ul><h4 id="一、如何定义一个组件？"><a href="#一、如何定义一个组件？" class="headerlink" title="一、如何定义一个组件？"></a>一、如何定义一个组件？</h4><p>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；<br>区别如下：</p><ul><li>1.el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</li><li>2.data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。</li></ul><p>备注：使用template可以配置组件结构。</p><h4 id="二、如何注册组件？"><a href="#二、如何注册组件？" class="headerlink" title="二、如何注册组件？"></a>二、如何注册组件？</h4><p>1.局部注册：靠new Vue的时候传入components选项<br>2.全局注册：靠Vue.component(‘组件名’,组件)</p><h4 id="三、编写组件标签："><a href="#三、编写组件标签：" class="headerlink" title="三、编写组件标签："></a>三、编写组件标签：</h4><p><code>&lt;school&gt;&lt;/school&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span></span><br>&lt;hr&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;hr&gt;<br>&lt;!-- 第三步：编写组件标签 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span></span><br>&lt;hr&gt;<br>&lt;!-- 第三步：编写组件标签 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root2&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">Vue.config.productionTip = false</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//第一步：创建school组件</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">const school = Vue.extend(&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">template:`</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名称：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">schoolName</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">address</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showName&quot;</span>&gt;</span>点我提示学校名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">`,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">// el:&#x27;#root&#x27;, //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">data()&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">return &#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">schoolName:&#x27;jack&#x27;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">address:&#x27;重庆</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">         &#x27;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">methods: &#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">showName()&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">alert(this.schoolName)</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//第一步：创建student组件</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">const student = Vue.extend(&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">template:`</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">studentName</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">age</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">`,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">data()&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">return &#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">studentName:&#x27;张三&#x27;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">age:18</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//第一步：创建hello组件</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">const hello = Vue.extend(&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">template:`</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你好啊！</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">`,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">data()&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">return &#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">name:&#x27;Tom&#x27;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//第二步：全局注册组件</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">Vue.component(&#x27;hello&#x27;,hello)</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//创建vm</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">new Vue(&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">el:&#x27;#root&#x27;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">data:&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">msg:&#x27;你好啊！&#x27;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//第二步：注册组件（局部注册）</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">components:&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">school,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">student</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">new Vue(&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">el:&#x27;#root2&#x27;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><br></code></pre></div></td></tr></table></figure><h4 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h4><h5 id="1-关于组件名"><a href="#1-关于组件名" class="headerlink" title="1.关于组件名:"></a>1.关于组件名:</h5><ul><li>一个单词组成：<ul><li>第一种写法(首字母小写)：school</li><li>第二种写法(首字母大写)：School</li></ul></li><li>多个单词组成：<ul><li>第一种写法(kebab-case命名)：my-school</li><li>第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</li></ul></li></ul><p>备注：<br>(1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。<br>(2).可以使用name配置项指定组件在开发者工具中呈现的名字。</p><h5 id="2-关于组件标签"><a href="#2-关于组件标签" class="headerlink" title="2.关于组件标签:"></a>2.关于组件标签:</h5><p>第一种写法：<school></school><br>第二种写法：<school/><br>备注：不用使用脚手架时，<school/>会导致后续组件不能渲染。</p><h5 id="3-一个简写方式："><a href="#3-一个简写方式：" class="headerlink" title="3.一个简写方式："></a>3.一个简写方式：</h5><p>const school = Vue.extend(options) 可简写为：const school = options</p><h4 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//定义student组件</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">const student = Vue.extend(&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">name:&#x27;student&#x27;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">template:`</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生姓名：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学生年龄：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">age</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">`,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">data()&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">return &#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">name:&#x27;jack&#x27;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">age:18</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//定义school组件</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">const school = Vue.extend(&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">name:&#x27;school&#x27;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">template:`</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名称：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">address</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">`,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">data()&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">return &#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">name:&#x27;jack&#x27;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">address:&#x27;重庆&#x27;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//注册组件（局部）</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">components:&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">student</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//定义hello组件</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">const hello = Vue.extend(&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">template:`<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>`,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">data()&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">return &#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">msg:&#x27;欢迎学习！&#x27;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//定义app组件</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">const app = Vue.extend(&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">template:`</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">`,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">components:&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">school,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">hello</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//创建vm</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">new Vue(&#123;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">app</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app</span>&gt;</span>&#x27;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">el:&#x27;#root&#x27;,</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">//注册组件（局部）</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">components:&#123;app&#125;</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span><br><span class="xml"><span class="handlebars"><span class="xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="关于VueComponent"><a href="#关于VueComponent" class="headerlink" title="关于VueComponent"></a>关于VueComponent</h4><p>1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。<br>2.我们只需要写<school/>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。<br>3.特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！<br>4.关于this指向：<br>(1).组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。<br>(2).new Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。<br>5.VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。Vue的实例对象，以后简称vm。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。<br><br><span class="hljs-number">2.</span>我们只需要写&lt;school/&gt;或&lt;school&gt;&lt;/school&gt;，Vue解析时会帮我们创建school组件的实例对象，<br>即Vue帮我们执行的：<span class="hljs-keyword">new</span> VueComponent(options)。<br><br><span class="hljs-number">3.</span>特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！<br><br><span class="hljs-number">4.</span>关于<span class="hljs-built_in">this</span>指向：<br>(<span class="hljs-number">1</span>).组件配置中：<br>data函数、methods中的函数、watch中的函数、computed中的函数 它们的<span class="hljs-built_in">this</span>均是【VueComponent实例对象】。<br>(<span class="hljs-number">2</span>).new Vue(options)配置中：<br>data函数、methods中的函数、watch中的函数、computed中的函数 它们的<span class="hljs-built_in">this</span>均是【Vue实例对象】。<br><br><span class="hljs-number">5.</span>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。<br>Vue的实例对象，以后简称vm。<br></code></pre></div></td></tr></table></figure><h5 id="一个重要的内置关系"><a href="#一个重要的内置关系" class="headerlink" title="一个重要的内置关系"></a>一个重要的内置关系</h5><p><code>VueComponent.prototype.__proto__ === Vue.prototype</code><br>为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法<br><img src="https://s2.loli.net/2021/12/22/6Jidfj4YnWPLG79.jpg#crop=0&crop=0&crop=1&crop=1&height=1200&id=HuxF5&originHeight=1200&originWidth=2000&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=2000"></p><h4 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h4><p> 一个.vue 文件的组成(3个部分） </p><h5 id="模板页面"><a href="#模板页面" class="headerlink" title="模板页面"></a>模板页面</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>&lt;!-- 页面模板 --&gt;<br>&lt;/template&gt;<br></code></pre></div></td></tr></table></figure><h5 id="JS-模块对象"><a href="#JS-模块对象" class="headerlink" title="JS 模块对象"></a>JS 模块对象</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;&#125;<br>    &#125;, <br>    <span class="hljs-attr">methods</span>: &#123;&#125;, <br>    <span class="hljs-attr">computed</span>: &#123;&#125;, <br>    <span class="hljs-attr">components</span>: &#123;&#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h5 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h2 id="Vue框架使用"><a href="#Vue框架使用" class="headerlink" title="Vue框架使用"></a>Vue框架使用</h2><h3 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h3><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">├── node_modules <br>├── public<br>│   ├── favicon<span class="hljs-selector-class">.ico</span>: 页签图标<br>│   └── index<span class="hljs-selector-class">.html</span>: 主页面<br>├── <span class="hljs-attribute">src</span><br>│   ├── assets: 存放静态资源<br>│   │   └── logo<span class="hljs-selector-class">.png</span><br>│   │── component: 存放组件<br>│   │   └── HelloWorld<span class="hljs-selector-class">.vue</span><br>│   │── App<span class="hljs-selector-class">.vue</span>: 汇总所有组件<br>│   │── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.js</span>: 入口文件<br>├── <span class="hljs-selector-class">.gitignore</span>: git版本管制忽略的配置<br>├── babel<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.js</span>: babel的配置文件<br>├── package<span class="hljs-selector-class">.json</span>: 应用包配置文件 <br>├── README<span class="hljs-selector-class">.md</span>: 应用描述文件<br>├── package-lock.json：包版本控制文件<br></code></pre></div></td></tr></table></figure><h4 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h4><ol><li>vue.js与vue.runtime.xxx.js的区别： <ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h4 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h4><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式： <ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><p>App.vue</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;btn&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showDOM&quot;</span>&gt;</span>点我输出上方的DOM元素<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">School</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sch&quot;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> School <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/School.vue&#x27;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">components</span>: &#123; School &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;欢迎学习Vue&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">showDOM</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.title)</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.btn)</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.sch)</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h3><ol><li> 功能：让组件接收外部传过来的数据 </li><li> 传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code> </li><li>接收数据： <ol><li> 第一种方式（只接收）：<code>props:[&#39;name&#39;]</code> </li><li> 第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code> </li><li> 第三种方式（限制类型、限制必要性、指定默认值）：  </li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">props:&#123;<br><span class="hljs-attr">name</span>:&#123;<br><span class="hljs-attr">type</span>:<span class="hljs-built_in">String</span>, <span class="hljs-comment">//类型</span><br><span class="hljs-attr">required</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//必要性</span><br><span class="hljs-attr">default</span>:<span class="hljs-string">&#x27;老王&#x27;</span> <span class="hljs-comment">//默认值</span><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote><h3 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h3><ol><li> 功能：可以把多个组件共用的配置提取成一个混入对象 </li><li>使用方式：<br> 第一步定义混合： </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;....&#125;,<br>  <span class="hljs-attr">methods</span>:&#123;....&#125;<br>  ....<br>&#125;<br></code></pre></div></td></tr></table></figure><p>第二步使用混入：<br>        全局混入：<code>Vue.mixin(xxx)</code><br>        局部混入：<code>mixins:[&#39;xxx&#39;]</code> </p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ol><li> 功能：用于增强Vue </li><li> 本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。 </li><li> 定义插件：  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">对象.install = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Vue, options</span>) </span>&#123;<br>    <span class="hljs-comment">// 1. 添加全局过滤器</span><br>    Vue.filter(....)<br><br>    <span class="hljs-comment">// 2. 添加全局指令</span><br>    Vue.directive(....)<br><br>    <span class="hljs-comment">// 3. 配置全局混入(合)</span><br>    Vue.mixin(....)<br><br>    <span class="hljs-comment">// 4. 添加实例方法</span><br>    Vue.prototype.$myMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;...&#125;<br>    Vue.prototype.$myProperty = xxxx<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li> 使用插件：<code>Vue.use()</code> </li></ol><h3 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h3><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h3 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h3><ol><li>组件化编码流程：<br> (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。<br> (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：<br> 1).一个组件在用：放在组件自身即可。<br> 2). 一些组件在用：放在他们共同的父组件上（状态提升）。<br> (3).实现交互：从绑定事件开始。 </li><li>props适用于：<br> (1).父组件 ==&gt; 子组件 通信<br> (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数） </li><li> 使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！ </li><li> props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。 </li></ol><h3 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h3><ol><li>存储内容大小一般支持5MB左右（不同浏览器可能还不一样） </li><li>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。 </li><li>相关API： <ol><li><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。 </li><li><code>xxxxxStorage.getItem(&#39;person&#39;);</code>该方法接受一个键名作为参数，返回键名对应的值。 </li><li><code>xxxxxStorage.removeItem(&#39;key&#39;);</code>该方法接受一个键名作为参数，并把该键名从存储中删除。 </li><li><code>xxxxxStorage.clear()</code>该方法会清空存储中的所有数据。 </li></ol></li><li>备注： <ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h3 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h3><ol><li> 一种组件间通信的方式，适用于：<strong>子组件 ===&gt; 父组件</strong> </li><li> 使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）。 </li><li>绑定自定义事件： <ol><li> 第一种方式，在父组件中：<code>&lt;Demo @jack=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:jack=&quot;test&quot;/&gt;</code> </li><li> 第二种方式，在父组件中：  </li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Demo ref=<span class="hljs-string">&quot;demo&quot;</span>/&gt;<br>......<br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-built_in">this</span>.$refs.xxx.$on(<span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-built_in">this</span>.test)<br>&#125;<br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>  3.  若想让自定义事件只能触发一次，可以使用`once`修饰符，或`$once`方法。 </code></pre></div><ol start="4"><li> 触发自定义事件：<code>this.$emit(&#39;jack&#39;,数据)</code> </li><li> 解绑自定义事件<code>this.$off(&#39;jack&#39;)</code> </li><li> 组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。 </li><li> 注意：通过<code>this.$refs.xxx.$on(&#39;jack&#39;,回调)</code>绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题！ </li></ol><h3 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h3><h4 id="Vue-原型对象上包含事件处理的方法"><a href="#Vue-原型对象上包含事件处理的方法" class="headerlink" title="Vue 原型对象上包含事件处理的方法"></a>Vue 原型对象上包含事件处理的方法</h4><ol><li>$on(eventName, listener): 绑定自定义事件监听</li><li>$emit(eventName, data): 分发自定义事件</li><li>$off(eventName): 解绑自定义事件监听</li><li>$once(eventName, listener): 绑定事件监听, 但只能处理一次</li></ol><h4 id="所有组件实例对象的原型对象的原型对象就是-Vue-的原型对象"><a href="#所有组件实例对象的原型对象的原型对象就是-Vue-的原型对象" class="headerlink" title="所有组件实例对象的原型对象的原型对象就是 Vue 的原型对象"></a>所有组件实例对象的原型对象的原型对象就是 Vue 的原型对象</h4><ol><li>所有组件对象都能看到 Vue 原型对象上的属性和方法 </li><li>Vue.prototype.$bus = new Vue(), 所有的组件对象都能看到$bus 这个属性对象  </li></ol><h4 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h4><ol><li>包含事件处理相关方法的对象(只有一个) </li><li>所有的组件都可以得到  </li></ol><ol><li>一种组件间通信的方式，适用于任意组件间通信。 </li><li>安装全局事件总线：  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> Vue(&#123;<br>......<br><span class="hljs-function"><span class="hljs-title">beforeCreate</span>(<span class="hljs-params"></span>)</span> &#123;<br>Vue.prototype.$bus = <span class="hljs-built_in">this</span> <span class="hljs-comment">//安装全局事件总线，$bus就是当前应用的vm</span><br>&#125;,<br>    ......<br>&#125;)<br></code></pre></div></td></tr></table></figure><ol start="3"><li>使用事件总线： <ol><li>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。  </li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">methods</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">demo</span>(<span class="hljs-params">data</span>)</span>&#123;......&#125;<br>&#125;<br>......<br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$bus.$on(<span class="hljs-string">&#x27;xxxx&#x27;</span>,<span class="hljs-built_in">this</span>.demo)<br>&#125;<br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>  2. 提供数据：`this.$bus.$emit(&#39;xxxx&#39;,数据)` </code></pre></div><ol start="3"><li>最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件。 </li></ol><h3 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h3><p>这种方式的思想与全局事件总线很相似<br>它包含以下操作:<br>(1) 订阅消息 –对应绑定事件监听<br>(2) 发布消息 –分发事件<br>(3) 取消消息订阅 –解绑事件监听<br>需要引入一个消息订阅与发布的第三方实现库: PubSubJS</p><ol><li>一种组件间通信的方式，适用于任意组件间通信。 </li><li>使用步骤： <ol><li>安装pubsub：<code>npm i pubsub-js</code> </li><li>引入: <code>import pubsub from &#39;pubsub-js&#39;</code> </li><li>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身。  </li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">methods</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">demo</span>(<span class="hljs-params">data</span>)</span>&#123;......&#125;<br>&#125;<br>......<br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.pid = pubsub.subscribe(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-built_in">this</span>.demo) <span class="hljs-comment">//订阅消息</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code> </li><li>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去取消订阅。 </li></ol><p>相关语法 </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-number">1</span>) <span class="hljs-keyword">import</span> PubSub <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span> <span class="hljs-comment">// 引入 </span><br>(<span class="hljs-number">2</span>) PubSub.subscribe(<span class="hljs-string">&#x27;msgName&#x27;</span>, <span class="hljs-function"><span class="hljs-title">functon</span>(<span class="hljs-params">msgName, data</span>)</span>&#123; &#125;) <br>(<span class="hljs-number">3</span>) PubSub.publish(<span class="hljs-string">&#x27;msgName&#x27;</span>, data): 发布消息, 触发订阅的回调函数调用 <br>(<span class="hljs-number">4</span>) PubSub.unsubscribe(token): 取消消息的订阅  <br></code></pre></div></td></tr></table></figure><h3 id="nextTick-1"><a href="#nextTick-1" class="headerlink" title="nextTick"></a>nextTick</h3><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h3 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h3><ol><li>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。 </li><li>写法： <ol><li>准备好样式： <ol><li>元素进入的样式： <ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式： <ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ol></li><li>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：  </li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;transition name=&quot;hello&quot;&gt;<br>&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;<br>&lt;/transition&gt;<br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>  1. 备注：若有多个元素需要过度，则需要使用：`&lt;transition-group&gt;`，且每个元素都要指定`key`值。 </code></pre></div><h3 id="跨域解决办法"><a href="#跨域解决办法" class="headerlink" title="跨域解决办法"></a>跨域解决办法</h3><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><ul><li>nginx</li><li>vue-cli</li></ul><h3 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在vue.config.js中添加如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">devServer:&#123;<br>  <span class="hljs-attr">proxy</span>:<span class="hljs-string">&quot;http://localhost:5000&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>编写vue.config.js配置具体代理规则：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br><span class="hljs-attr">devServer</span>: &#123;<br>      <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api1&#x27;</span>: &#123;<span class="hljs-comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>,<span class="hljs-comment">// 代理目标的基础路径</span><br>        <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;,<br>        <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//用于支持websocket</span><br>        <span class="hljs-comment">// changeOrigin: true,//用于控制请求头中的host值</span><br>      &#125;,<br>      <span class="hljs-string">&#x27;/api2&#x27;</span>: &#123;<span class="hljs-comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5001&#x27;</span>,<span class="hljs-comment">// 代理目标的基础路径</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span><br><span class="hljs-comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span><br><span class="hljs-comment">   changeOrigin默认值为true</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><ol><li>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong>父组件 ===&gt; 子组件</strong> 。 </li><li>分类：默认插槽、具名插槽、作用域插槽 </li><li>使用方式： <ol><li>默认插槽：  </li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">父组件中：<br>        &lt;Category&gt;<br>           &lt;div&gt;html结构1&lt;/div&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>            &lt;div&gt;<br>               &lt;!-- 定义插槽 --&gt;<br>               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;<br>            &lt;/div&gt;<br>        &lt;/template&gt;<br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>  2. 具名插槽：  </code></pre></div><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">父组件中：<br>        &lt;Category&gt;<br>            &lt;template slot=&quot;center&quot;&gt;<br>              &lt;div&gt;html结构1&lt;/div&gt;<br>            &lt;/template&gt;<br><br>            &lt;template v-slot:footer&gt;<br>               &lt;div&gt;html结构2&lt;/div&gt;<br>            &lt;/template&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>            &lt;div&gt;<br>               &lt;!-- 定义插槽 --&gt;<br>               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;<br>               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;<br>            &lt;/div&gt;<br>        &lt;/template&gt;<br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>  3. 作用域插槽：      1. 理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）      1. 具体编码：  </code></pre></div><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">父组件中：<br>&lt;Category&gt;<br>&lt;template scope=&quot;scopeData&quot;&gt;<br>&lt;!-- 生成的是ul列表 --&gt;<br>&lt;ul&gt;<br>&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/template&gt;<br>&lt;/Category&gt;<br><br>&lt;Category&gt;<br>&lt;template slot-scope=&quot;scopeData&quot;&gt;<br>&lt;!-- 生成的是h4标题 --&gt;<br>&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;<br>&lt;/template&gt;<br>&lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>            &lt;div&gt;<br>                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;<br>            &lt;/div&gt;<br>        &lt;/template&gt;<br><br>        &lt;script&gt;<br>            export default &#123;<br>                name:&#x27;Category&#x27;,<br>                props:[&#x27;title&#x27;],<br>                //数据在子组件自身<br>                data() &#123;<br>                    return &#123;<br>                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]<br>                    &#125;<br>                &#125;,<br>            &#125;<br>        &lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。<br><img src="https://s2.loli.net/2021/12/31/8pUJmciKV1NILlA.png#crop=0&crop=0&crop=1&crop=1&id=i7DNg&originHeight=1412&originWidth=1800&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h4 id="vuex-核心概念和-API"><a href="#vuex-核心概念和-API" class="headerlink" title="vuex 核心概念和 API"></a>vuex 核心概念和 API</h4><h5 id="state"><a href="#state" class="headerlink" title="state"></a>state</h5><ol><li>vuex 管理的状态对象</li><li>它应该是唯一的</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> state=&#123;<br><span class="hljs-attr">xxx</span>:initValue<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h5><ol><li>值为一个对象，包含多个响应用户动作的回调函数</li><li>通过 commit( )来触发 mutation 中函数的调用, 间接更新 state</li><li>如何触发 actions 中的回调？<br>在组件中使用: $store.dispatch(‘对应的 action 回调名’) 触发</li><li>可以包含异步代码（定时器, ajax 等等)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> actions = &#123;<br>  <span class="hljs-function"><span class="hljs-title">jia</span>(<span class="hljs-params">context, value</span>)</span> &#123;<br>    context.commit(<span class="hljs-string">&#x27;JIA&#x27;</span>, value)<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h5><ol><li>值是一个对象，包含多个直接更新 state 的方法</li><li>谁能调用 mutations 中的方法？如何调用？<br>在 action 中使用：commit(‘对应的 mutations 方法名’) 触发</li><li>mutations 中方法的特点：不能写异步代码、只能单纯的操作 state</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mutations = &#123;<br>  <span class="hljs-function"><span class="hljs-title">JIA</span>(<span class="hljs-params">state, value</span>)</span> &#123;<br>    state.sum += value<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h5><ol><li>值为一个对象，包含多个用于返回数据的函数</li><li>如何使用？—— $store.getters.xxx</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> getters = &#123;<br>  <span class="hljs-function"><span class="hljs-title">bigSum</span>(<span class="hljs-params">state</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> state.sum * <span class="hljs-number">10</span><br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h5><ol><li>包含多个 module</li><li>一个 module 是一个 store 的配置对象</li><li>与一个组件（包含有共享数据）对应</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    <span class="hljs-attr">countAbout</span>: countOptions,<br>    <span class="hljs-attr">personAbout</span>: personOptions,<br>  &#125;,<br>&#125;)<br><br></code></pre></div></td></tr></table></figure><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>多个组件需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li> 创建文件：<code>src/store/index.js</code>  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//引入Vue核心库</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">//应用Vuex插件</span><br>Vue.use(Vuex)<br><br><span class="hljs-comment">//准备actions对象——响应组件中用户的动作</span><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><span class="hljs-comment">//准备mutations对象——修改state中的数据</span><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;<br><span class="hljs-comment">//准备state对象——保存具体的数据</span><br><span class="hljs-keyword">const</span> state = &#123;&#125;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>actions,<br>mutations,<br>state<br>&#125;)<br></code></pre></div></td></tr></table></figure><ol start="2"><li> 在<code>main.js</code>中创建vm时传入<code>store</code>配置项  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">......<br><span class="hljs-comment">//引入store</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br>......<br><br><span class="hljs-comment">//创建vm</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br><span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>store<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li> 初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code>  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//引入Vue核心库</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">//引入Vuex</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">//引用Vuex</span><br>Vue.use(Vuex)<br><br><span class="hljs-keyword">const</span> actions = &#123;<br>    <span class="hljs-comment">//响应组件中加的动作</span><br><span class="hljs-function"><span class="hljs-title">jia</span>(<span class="hljs-params">context,value</span>)</span>&#123;<br><span class="hljs-comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span><br>context.commit(<span class="hljs-string">&#x27;JIA&#x27;</span>,value)<br>&#125;,<br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;<br>    <span class="hljs-comment">//执行加</span><br><span class="hljs-function"><span class="hljs-title">JIA</span>(<span class="hljs-params">state,value</span>)</span>&#123;<br><span class="hljs-comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span><br>state.sum += value<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//初始化数据</span><br><span class="hljs-keyword">const</span> state = &#123;<br>   <span class="hljs-attr">sum</span>:<span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>actions,<br>mutations,<br>state,<br>&#125;)<br></code></pre></div></td></tr></table></figure><ol start="2"><li> 组件中读取vuex中的数据：<code>$store.state.sum</code> </li><li> 组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code>  </li></ol><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li> 概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。 </li><li> 在<code>store.js</code>中追加<code>getters</code>配置  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">......<br><br><span class="hljs-keyword">const</span> getters = &#123;<br><span class="hljs-function"><span class="hljs-title">bigSum</span>(<span class="hljs-params">state</span>)</span>&#123;<br><span class="hljs-keyword">return</span> state.sum * <span class="hljs-number">10</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//创建并暴露store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>......<br>getters<br>&#125;)<br></code></pre></div></td></tr></table></figure><ol start="3"><li> 组件中读取数据：<code>$store.getters.bigSum</code> </li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed: &#123;<br>    <span class="hljs-comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span><br>     ...mapState(&#123;<span class="hljs-attr">sum</span>:<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-attr">school</span>:<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-attr">subject</span>:<span class="hljs-string">&#x27;subject&#x27;</span>&#125;),<br>         <br>    <span class="hljs-comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span><br>    ...mapState([<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-string">&#x27;subject&#x27;</span>]),<br>&#125;,<br></code></pre></div></td></tr></table></figure><ol start="2"><li><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed: &#123;<br>    <span class="hljs-comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span><br>    ...mapGetters(&#123;<span class="hljs-attr">bigSum</span>:<span class="hljs-string">&#x27;bigSum&#x27;</span>&#125;),<br><br>    <span class="hljs-comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span><br>    ...mapGetters([<span class="hljs-string">&#x27;bigSum&#x27;</span>])<br>&#125;,<br></code></pre></div></td></tr></table></figure><ol start="3"><li><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">methods:&#123;<br>    <span class="hljs-comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span><br>    ...mapActions(&#123;<span class="hljs-attr">incrementOdd</span>:<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-attr">incrementWait</span>:<span class="hljs-string">&#x27;jiaWait&#x27;</span>&#125;)<br><br>    <span class="hljs-comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span><br>    ...mapActions([<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-string">&#x27;jiaWait&#x27;</span>])<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="4"><li><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">methods:&#123;<br>    <span class="hljs-comment">//靠mapActions生成：increment、decrement（对象形式）</span><br>    ...mapMutations(&#123;<span class="hljs-attr">increment</span>:<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-attr">decrement</span>:<span class="hljs-string">&#x27;JIAN&#x27;</span>&#125;),<br>    <br>    <span class="hljs-comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span><br>    ...mapMutations([<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-string">&#x27;JIAN&#x27;</span>]),<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li>目的：让代码更好维护，让多种数据分类更加明确。 </li><li>修改<code>store.js</code>  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> countAbout = &#123;<br>  <span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//开启命名空间</span><br>  <span class="hljs-attr">state</span>:&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>&#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">bigSum</span>(<span class="hljs-params">state</span>)</span>&#123;<br>       <span class="hljs-keyword">return</span> state.sum * <span class="hljs-number">10</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> personAbout = &#123;<br>  <span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//开启命名空间</span><br>  <span class="hljs-attr">state</span>:&#123; ... &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; ... &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    countAbout,<br>    personAbout<br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><ol start="3"><li>开启命名空间后，组件中读取state数据：  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//方式一：自己直接读取</span><br><span class="hljs-built_in">this</span>.$store.state.personAbout.list<br><span class="hljs-comment">//方式二：借助mapState读取：</span><br>...mapState(<span class="hljs-string">&#x27;countAbout&#x27;</span>,[<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-string">&#x27;subject&#x27;</span>]),<br></code></pre></div></td></tr></table></figure><ol start="4"><li>开启命名空间后，组件中读取getters数据：  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//方式一：自己直接读取</span><br><span class="hljs-built_in">this</span>.$store.getters[<span class="hljs-string">&#x27;personAbout/firstPersonName&#x27;</span>]<br><span class="hljs-comment">//方式二：借助mapGetters读取：</span><br>...mapGetters(<span class="hljs-string">&#x27;countAbout&#x27;</span>,[<span class="hljs-string">&#x27;bigSum&#x27;</span>])<br></code></pre></div></td></tr></table></figure><ol start="5"><li>开启命名空间后，组件中调用dispatch  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//方式一：自己直接dispatch</span><br><span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&#x27;personAbout/addPersonWang&#x27;</span>,person)<br><span class="hljs-comment">//方式二：借助mapActions：</span><br>...mapActions(<span class="hljs-string">&#x27;countAbout&#x27;</span>,&#123;<span class="hljs-attr">incrementOdd</span>:<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,<span class="hljs-attr">incrementWait</span>:<span class="hljs-string">&#x27;jiaWait&#x27;</span>&#125;)<br></code></pre></div></td></tr></table></figure><ol start="6"><li>开启命名空间后，组件中调用commit  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//方式一：自己直接commit</span><br><span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)<br><span class="hljs-comment">//方式二：借助mapMutations：</span><br>...mapMutations(<span class="hljs-string">&#x27;countAbout&#x27;</span>,&#123;<span class="hljs-attr">increment</span>:<span class="hljs-string">&#x27;JIA&#x27;</span>,<span class="hljs-attr">decrement</span>:<span class="hljs-string">&#x27;JIAN&#x27;</span>&#125;),<br></code></pre></div></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由： key 为路径, value 可能是 function 或 component  。</li></ol><h3 id="相关-API："><a href="#相关-API：" class="headerlink" title="相关 API："></a>相关 API：</h3><ul><li><ol><li>this.$router.push(path): 相当于点击路由链接(可以返回到当前路由界面) </li></ol></li><li><ol start="2"><li>this.$router.replace(path): 用新路由替换当前路由(不可以返回到当前路由界面) </li></ol></li><li><ol start="3"><li>this.$router.back(): 请求(返回)上一个记录路由 </li></ol></li><li><ol start="4"><li>this.$router.go(-1): 请求(返回)上一个记录路由 </li></ol></li><li><ol start="5"><li>this.$router.go(1): 请求下一个记录路由  </li></ol></li></ul><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><p> 1.定义路由组件 2. 注册路由 3. 使用路由  </p><ol><li> 安装vue-router，命令：<code>npm i vue-router</code> </li><li> 应用插件：<code>Vue.use(VueRouter)</code> </li><li> 编写router配置项:  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//引入VueRouter</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-comment">//引入Luyou 组件</span><br><span class="hljs-keyword">import</span> About <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/About&#x27;</span><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Home&#x27;</span><br><br><span class="hljs-comment">//创建router实例对象，去管理一组一组的路由规则</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:About<br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:Home<br>&#125;<br>]<br>&#125;)<br><br><span class="hljs-comment">//暴露router</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></div></td></tr></table></figure><ol start="4"><li> 实现切换（active-class可配置高亮样式）  </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><ol start="5"><li> 指定展示位置  </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;router-view&gt;&lt;/router-view&gt;<br></code></pre></div></td></tr></table></figure><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li> 配置路由规则，使用children配置项：  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">routes:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:About,<br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:Home,<br><span class="hljs-attr">children</span>:[ <span class="hljs-comment">//通过children配置子级路由</span><br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>, <span class="hljs-comment">//此处一定不要写：/news</span><br><span class="hljs-attr">component</span>:News<br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;message&#x27;</span>,<span class="hljs-comment">//此处一定不要写：/message</span><br><span class="hljs-attr">component</span>:Message<br>&#125;<br>]<br>&#125;<br>]<br></code></pre></div></td></tr></table></figure><ol start="2"><li> 跳转（要写完整路径）：  </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li> 传递参数  </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;<br>&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;<br>&lt;router-link <br>:to=&quot;&#123;<br>path:&#x27;/home/message/detail&#x27;,<br>query:&#123;<br>   id:666,<br>       title:&#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><ol start="2"><li> 接收参数：  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$route.query.id<br>$route.query.title<br></code></pre></div></td></tr></table></figure><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li> 作用：可以简化路由的跳转。 </li><li>如何使用 <ol><li> 给路由命名：  </li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/demo&#x27;</span>,<br><span class="hljs-attr">component</span>:Demo,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;test&#x27;</span>,<br><span class="hljs-attr">component</span>:Test,<br><span class="hljs-attr">children</span>:[<br>&#123;<br>          <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">//给路由命名</span><br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;welcome&#x27;</span>,<br><span class="hljs-attr">component</span>:Hello,<br>&#125;<br>]<br>&#125;<br>]<br>&#125;<br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>  2.  简化跳转：  </code></pre></div><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;!--简化前，需要写完整的路径 --&gt;<br>&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化后，直接通过名字跳转 --&gt;<br>&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化写法配合传递参数 --&gt;<br>&lt;router-link <br>:to=&quot;&#123;<br>name:&#x27;hello&#x27;,<br>query:&#123;<br>   id:666,<br>       title:&#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li> 配置路由，声明接收params参数  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:Home,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br><span class="hljs-attr">component</span>:News<br>&#125;,<br>&#123;<br><span class="hljs-attr">component</span>:Message,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id/:title&#x27;</span>, <span class="hljs-comment">//使用占位符声明接收params参数</span><br><span class="hljs-attr">component</span>:Detail<br>&#125;<br>]<br>&#125;<br>]<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li> 传递参数   </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;<br>&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;<br>&lt;router-link <br>:to=&quot;&#123;<br>name:&#x27;xiangqing&#x27;,<br>params:&#123;<br>   id:666,<br>            title:&#x27;你好&#x27;<br>&#125;<br>&#125;&quot;<br>&gt;跳转&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote><ol start="3"><li> 接收参数：  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$route.params.id<br>$route.params.title<br></code></pre></div></td></tr></table></figure><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><div class="hljs code-wrapper"><pre><code>作用：让路由组件更方便的收到参数</code></pre></div><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id&#x27;</span>,<br><span class="hljs-attr">component</span>:Detail,<br><br><span class="hljs-comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span><br><span class="hljs-comment">// props:&#123;a:900&#125;</span><br><br><span class="hljs-comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span><br><span class="hljs-comment">// props:true</span><br><br><span class="hljs-comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span><br><span class="hljs-function"><span class="hljs-title">props</span>(<span class="hljs-params">route</span>)</span>&#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">id</span>:route.query.id,<br><span class="hljs-attr">title</span>:route.query.title<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li> 作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活 </li><li> 具体编码：  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//$router的两个API</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">params</span>:&#123;<br><span class="hljs-attr">id</span>:xxx,<br><span class="hljs-attr">title</span>:xxx<br>&#125;<br>&#125;)<br><br><span class="hljs-built_in">this</span>.$router.replace(&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br><span class="hljs-attr">params</span>:&#123;<br><span class="hljs-attr">id</span>:xxx,<br><span class="hljs-attr">title</span>:xxx<br>&#125;<br>&#125;)<br><span class="hljs-built_in">this</span>.$router.forward() <span class="hljs-comment">//前进</span><br><span class="hljs-built_in">this</span>.$router.back() <span class="hljs-comment">//后退</span><br><span class="hljs-built_in">this</span>.$router.go() <span class="hljs-comment">//可前进也可后退</span><br></code></pre></div></td></tr></table></figure><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li> 作用：让不展示的路由组件保持挂载，不被销毁。 </li><li> 具体编码：  </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;!-- 缓存多个路由组件 --&gt;<br>&lt;!-- &lt;keep-alive :include=&quot;[&#x27;News&#x27;,&#x27;Message&#x27;]&quot;&gt; --&gt;<br><br>&lt;!-- 缓存一个路由组件 --&gt;<br>&lt;keep-alive include=&quot;News&quot;&gt; //include=&quot;News&quot;组件名<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/keep-alive&gt;<br></code></pre></div></td></tr></table></figure><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字： <ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li> 作用：对路由进行权限控制 </li><li> 分类：全局守卫、独享守卫、组件内守卫 </li><li> 全局守卫:  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span><br>router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;beforeEach&#x27;</span>,to,<span class="hljs-keyword">from</span>)<br><span class="hljs-keyword">if</span>(to.meta.isAuth)&#123; <span class="hljs-comment">//判断当前路由是否需要进行权限控制</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;school&#x27;</span>) === <span class="hljs-string">&#x27;atguigu&#x27;</span>)&#123; <span class="hljs-comment">//权限控制的具体规则</span><br>next() <span class="hljs-comment">//放行</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>alert(<span class="hljs-string">&#x27;暂无权限查看&#x27;</span>)<br><span class="hljs-comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span><br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>next() <span class="hljs-comment">//放行</span><br>&#125;<br>&#125;)<br><br><span class="hljs-comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span><br>router.afterEach(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span></span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;afterEach&#x27;</span>,to,<span class="hljs-keyword">from</span>)<br><span class="hljs-keyword">if</span>(to.meta.title)&#123; <br><span class="hljs-built_in">document</span>.title = to.meta.title <span class="hljs-comment">//修改网页的title</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">document</span>.title = <span class="hljs-string">&#x27;vue_test&#x27;</span><br>&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><ol start="4"><li> 独享守卫:  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">beforeEnter</span>(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;beforeEnter&#x27;</span>,to,<span class="hljs-keyword">from</span>)<br><span class="hljs-keyword">if</span>(to.meta.isAuth)&#123; <span class="hljs-comment">//判断当前路由是否需要进行权限控制</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;school&#x27;</span>) === <span class="hljs-string">&#x27;atguigu&#x27;</span>)&#123;<br>next()<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>alert(<span class="hljs-string">&#x27;暂无权限查看&#x27;</span>)<br><span class="hljs-comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span><br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>next()<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="5"><li> 组件内守卫：  </li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//进入守卫：通过路由规则，进入该组件时被调用</span><br>beforeRouteEnter (to, <span class="hljs-keyword">from</span>, next) &#123;<br>&#125;,<br><span class="hljs-comment">//离开守卫：通过路由规则，离开该组件时被调用</span><br>beforeRouteLeave (to, <span class="hljs-keyword">from</span>, next) &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li><li>hash模式： <ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history模式： <ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol><p>nodejs解决history模式下刷新网页404的问题<br>[<a href="https://www.npmjs.com/package/connect-history-api-fallback]">https://www.npmjs.com/package/connect-history-api-fallback]</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue2.0</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react、vue中的key有什么作用？(key的内部原理)</title>
    <link href="/2021/12/12/react%E3%80%81vue%E4%B8%AD%E7%9A%84key%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F(key%E7%9A%84%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86)/"/>
    <url>/2021/12/12/react%E3%80%81vue%E4%B8%AD%E7%9A%84key%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%EF%BC%9F(key%E7%9A%84%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86)/</url>
    
    <content type="html"><![CDATA[<h2 id="react、vue-中的-key-有什么作用？（key-的内部原理）"><a href="#react、vue-中的-key-有什么作用？（key-的内部原理）" class="headerlink" title="react、vue 中的 key 有什么作用？（key 的内部原理）"></a>react、vue 中的 key 有什么作用？（key 的内部原理）</h2><h3 id="1-虚拟-DOM-中-key-的作用："><a href="#1-虚拟-DOM-中-key-的作用：" class="headerlink" title="1. 虚拟 DOM 中 key 的作用："></a>1. 虚拟 DOM 中 key 的作用：</h3><p>key 是虚拟 DOM 对象的标识，当数据发生变化时，Vue 会根据【新数据】生成【新的虚拟 DOM】, 随后 Vue 进行【新虚拟 DOM】与【旧虚拟 DOM】的差异比较，比较规则如下：</p><h3 id="2-对比规则："><a href="#2-对比规则：" class="headerlink" title="2.对比规则："></a>2.对比规则：</h3><ul><li>旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：<ul><li>若虚拟 DOM 中内容没变, 直接使用之前的真实 DOM！</li><li>若虚拟 DOM 中内容变了, 则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM。</li></ul></li><li>旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key<ul><li>创建新的真实 DOM，随后渲染到到页面。</li></ul></li></ul><h3 id="3-用-index-作为-key-可能会引发的问题："><a href="#3-用-index-作为-key-可能会引发的问题：" class="headerlink" title="3. 用 index 作为 key 可能会引发的问题："></a>3. 用 index 作为 key 可能会引发的问题：</h3><ul><li><p>若对数据进行：逆序添加、逆序删除等破坏顺序操作:</p><ul><li>会产生没有必要的真实 DOM 更新 ==&gt; 界面效果没问题, 但效率低。</li></ul></li><li><p>如果结构中还包含输入类的 DOM：</p><ul><li>会产生错误 DOM 更新 ==&gt; 界面有问题。</li></ul></li></ul><h3 id="4-开发中如何选择-key"><a href="#4-开发中如何选择-key" class="headerlink" title="4. 开发中如何选择 key?:"></a>4. 开发中如何选择 key?:</h3><ul><li>最好使用每条数据的唯一标识作为 key, 比如 id、手机号、身份证号、学号等唯一值。</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选择Object还是Map</title>
    <link href="/2021/12/07/%E9%80%89%E6%8B%A9Object%E8%BF%98%E6%98%AFMap/"/>
    <url>/2021/12/07/%E9%80%89%E6%8B%A9Object%E8%BF%98%E6%98%AFMap/</url>
    
    <content type="html"><![CDATA[<h2 id="选择-Object-还是-Map"><a href="#选择-Object-还是-Map" class="headerlink" title="选择 Object 还是 Map"></a>选择 Object 还是 Map</h2><p>对于多数 Web 开发任务来说，选择 Object 还是 Map 只是个人偏好问题，影响不大。不过，对于在乎内存和性能的开发者来说，对象和映射之间确实存在显著的差别。</p><h3 id="内存占用"><a href="#内存占用" class="headerlink" title="内存占用"></a>内存占用</h3><p>Object 和 Map 的工程级实现在不同浏览器间存在明显差异，但存储单个键/值对所占用的内存数量都会随键的数量线性增加。批量添加或删除键/值对则取决于各浏览器对该类型内存分配的工程实现。<strong>不同浏览器的情况不同，但给定固定大小的内存，Map 大约可以比 Object 多存储 50%的键/值对。</strong></p><h3 id="插入性能"><a href="#插入性能" class="headerlink" title="插入性能"></a>插入性能</h3><p>向 Object 和 Map 中插入新键/值对的消耗大致相当，不过插入 Map 在所有浏览器中一般会稍微快一点儿。对这两个类型来说，插入速度并不会随着键/值对数量而线性增加。**如果代码涉及大量插入操作，那么显然 Map 的性能更佳。 **</p><h3 id="查找速度"><a href="#查找速度" class="headerlink" title="查找速度"></a>查找速度</h3><p>与插入不同，从大型 Object 和 Map 中查找键/值对的性能差异极小，但如果只包含少量键/值对， 则 Object 有时候速度更快。在把 Object 当成数组使用的情况下（比如使用连续整数作为属性），浏览器引擎可以进行优化，在内存中使用更高效的布局。这对 Map 来说是不可能的。对这两个类型而言， 查找速度不会随着键/值对数量增加而线性增加。<strong>如果代码涉及大量查找操作，那么某些情况下可能选择 Object 更好一些。</strong></p><h3 id="删除性能"><a href="#删除性能" class="headerlink" title="删除性能"></a>删除性能</h3><p>使用 delete 删除 Object 属性的性能一直以来饱受诟病，目前在很多浏览器中仍然如此。为此， 出现了一些伪删除对象属性的操作，包括把属性值设置为 undefined 或 null。但很多时候，这都是一种讨厌的或不适宜的折中。而对大多数浏览器引擎来说，<strong>Map 的 delete()操作都比插入和查找更快</strong>。 <strong>如果代码涉及大量删除操作，那么毫无疑问应该选择 Map。</strong></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>JavaScript高级程序设计第四版笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Object</tag>
      
      <tag>Map</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组</title>
    <link href="/2021/12/07/%E6%95%B0%E7%BB%84/"/>
    <url>/2021/12/07/%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>有几种基本的方式可以创建数组。一种是使用<strong>Array 构造函数</strong>，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>()<br><span class="hljs-keyword">let</span> colors = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// 创建一个包含 3 个元素的数组</span><br><span class="hljs-keyword">let</span> names = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&#x27;Greg&#x27;</span>) <span class="hljs-comment">// 创建一个只包含一个元素，即字符串&quot;Greg&quot;的数组</span><br></code></pre></div></td></tr></table></figure><p>另一种创建数组的方式是使用<strong>数组字面量</strong>（array literal）表示法。数组字面量是在中括号中包含以逗号分隔的元素列表，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>] <span class="hljs-comment">// 创建一个包含 3 个元素的数组</span><br><span class="hljs-keyword">let</span> names = [] <span class="hljs-comment">// 创建一个空数组</span><br><span class="hljs-keyword">let</span> values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>] <span class="hljs-comment">// 创建一个包含 2 个元素的数组</span><br></code></pre></div></td></tr></table></figure><p>Array 构造函数还有两个 ES6 新增的用于创建数组的静态方法：from()和 of()。<strong>from()用于将类数组结构转换为数组实例</strong>，而<strong>of()用于将一组参数转换为数组实例</strong>。<br>Array.from()的第一个参数是一个类数组对象，即任何可迭代的结构，或者有一个 length 属性和可索引元素的结构。这种方式可用于很多场合：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 字符串会被拆分为单字符数组</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(<span class="hljs-string">&#x27;Matt&#x27;</span>)) <span class="hljs-comment">// [&quot;M&quot;, &quot;a&quot;, &quot;t&quot;, &quot;t&quot;]</span><br><span class="hljs-comment">// 可以使用 from()将集合和映射转换为一个新数组</span><br><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>().set(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>).set(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>().add(<span class="hljs-number">1</span>).add(<span class="hljs-number">2</span>).add(<span class="hljs-number">3</span>).add(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(m)) <span class="hljs-comment">// [[1, 2], [3, 4]]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(s)) <span class="hljs-comment">// [1, 2, 3, 4]</span><br><span class="hljs-comment">// Array.from()对现有数组执行浅复制</span><br><span class="hljs-keyword">const</span> a1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">const</span> a2 = <span class="hljs-built_in">Array</span>.from(a1)<br><span class="hljs-built_in">console</span>.log(a1) <span class="hljs-comment">// [1, 2, 3, 4]</span><br>alert(a1 === a2) <span class="hljs-comment">// false</span><br><span class="hljs-comment">// 可以使用任何可迭代对象</span><br><span class="hljs-keyword">const</span> iter = &#123;<br>  *[<span class="hljs-built_in">Symbol</span>.iterator]() &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">4</span><br>  &#125;,<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(iter)) <span class="hljs-comment">// [1, 2, 3, 4]</span><br><span class="hljs-comment">// arguments 对象可以被轻松地转换为数组</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getArgsArray</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">arguments</span>)<br>&#125;<br><span class="hljs-built_in">console</span>.log(getArgsArray(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)) <span class="hljs-comment">// [1, 2, 3, 4]</span><br><span class="hljs-comment">// from()也能转换带有必要属性的自定义对象</span><br><span class="hljs-keyword">const</span> arrayLikeObject = &#123;<br>  <span class="hljs-number">0</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-number">2</span>: <span class="hljs-number">3</span>,<br>  <span class="hljs-number">3</span>: <span class="hljs-number">4</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">4</span>,<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.from(arrayLikeObject)) <span class="hljs-comment">// [1, 2, 3, 4]</span><br></code></pre></div></td></tr></table></figure><p>Array.from()还接收第二个可选的映射函数参数。<br>这个函数可以直接增强新数组的值，而无须像调用 Array.from().map()那样先创建一个中间数组。<br>还可以接收第三个可选参数，用于指定映射函 数中 this 的值。但这个重写的 this 值在箭头函数中不适用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">const</span> a2 = <span class="hljs-built_in">Array</span>.from(a1, <span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x ** <span class="hljs-number">2</span>)<br><span class="hljs-keyword">const</span> a3 = <span class="hljs-built_in">Array</span>.from(<br>  a1,<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> x ** <span class="hljs-built_in">this</span>.exponent<br>  &#125;,<br>  &#123; <span class="hljs-attr">exponent</span>: <span class="hljs-number">2</span> &#125;<br>)<br><span class="hljs-built_in">console</span>.log(a2) <span class="hljs-comment">// [1, 4, 9, 16]</span><br><span class="hljs-built_in">console</span>.log(a3) <span class="hljs-comment">// [1, 4, 9, 16]</span><br></code></pre></div></td></tr></table></figure><p>Array.of()可以把一组参数转换为数组。这个方法用于替代在 ES6 之前常用的 Array.prototype.slice.call(arguments)，一种异常笨拙的将 arguments 对象转换为数组的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)) <span class="hljs-comment">// [1, 2, 3, 4]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.of(<span class="hljs-literal">undefined</span>)) <span class="hljs-comment">// [undefined]</span><br></code></pre></div></td></tr></table></figure><h3 id="数组空位"><a href="#数组空位" class="headerlink" title="数组空位"></a>数组空位</h3><p>使用数组字面量初始化数组时，可以使用一串逗号来创建空位（hole）。ECMAScript 会将逗号之间相应索引位置的值当成空位，ES6 规范重新定义了该如何处理这些空位。 可以像下面这样创建一个空位数组：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> options = [, , , , ,] <span class="hljs-comment">// 创建包含 5 个元素的数组</span><br><span class="hljs-built_in">console</span>.log(options.length) <span class="hljs-comment">// 5</span><br><span class="hljs-built_in">console</span>.log(options) <span class="hljs-comment">// [,,,,,]</span><br></code></pre></div></td></tr></table></figure><p>ES6 新增的方法和迭代器与早期 ECMAScript 版本中存在的方法行为不同。ES6 新增方法普遍将这些空位当成存在的元素，只不过值为 undefined：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> options = [<span class="hljs-number">1</span>, , , , <span class="hljs-number">5</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> option <span class="hljs-keyword">of</span> options) &#123;<br>  <span class="hljs-built_in">console</span>.log(option === <span class="hljs-literal">undefined</span>)<br>&#125;<br><span class="hljs-comment">// false</span><br><span class="hljs-comment">// true</span><br><span class="hljs-comment">// true</span><br><span class="hljs-comment">// true</span><br><span class="hljs-comment">// false</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">Array</span>.from([, , ,]) <span class="hljs-comment">// 使用 ES6 的 Array.from()创建的包含 3 个空位的数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> val <span class="hljs-keyword">of</span> a) &#123;<br>  <span class="hljs-built_in">console</span>.log(val === <span class="hljs-literal">undefined</span>)<br>&#125;<br><span class="hljs-comment">// true</span><br><span class="hljs-comment">// true</span><br><span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.of(...[, , ,])) <span class="hljs-comment">// [undefined, undefined, undefined]</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [index, value] <span class="hljs-keyword">of</span> options.entries()) &#123;<br>  <span class="hljs-built_in">console</span>.log(value)<br>&#125;<br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// 5</span><br></code></pre></div></td></tr></table></figure><p>ES6 之前的方法则会忽略这个空位，但具体的行为也会因方法而异：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> options = [<span class="hljs-number">1</span>, , , , <span class="hljs-number">5</span>]<br><span class="hljs-comment">// map()会跳过空位置</span><br><span class="hljs-built_in">console</span>.log(options.map(<span class="hljs-function">() =&gt;</span> <span class="hljs-number">6</span>)) <span class="hljs-comment">// [6, undefined, undefined, undefined, 6]</span><br><span class="hljs-comment">// join()视空位置为空字符串</span><br><span class="hljs-built_in">console</span>.log(options.join(<span class="hljs-string">&#x27;-&#x27;</span>)) <span class="hljs-comment">// &quot;1----5&quot;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>注意 由于行为不一致和存在性能隐患，因此实践中要避免使用数组空位。如果确实需要 空位，则可以显式地用 undefined 值代替。</p></blockquote><h3 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h3><p>要取得或设置数组的值，需要使用中括号并提供相应值的数字索引，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>] <span class="hljs-comment">// 定义一个字符串数组</span><br>alert(colors[<span class="hljs-number">0</span>]) <span class="hljs-comment">// 显示第一项</span><br>colors[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;black&#x27;</span> <span class="hljs-comment">// 修改第三项</span><br>colors[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;brown&#x27;</span> <span class="hljs-comment">// 添加第四项</span><br></code></pre></div></td></tr></table></figure><p>数组 length 属性的独特之处在于，它不是只读的。通过修改 length 属性，可以从数组末尾删除或添加元素。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>] <span class="hljs-comment">// 创建一个包含 3 个字符串的数组</span><br>colors.length = <span class="hljs-number">2</span><br>alert(colors[<span class="hljs-number">2</span>]) <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure><p>这里，数组 colors 一开始有 3 个值。将 length 设置为 2，就删除了最后一个（位置 2 的）值， 因此 colors[2]就没有值了。如果将 length 设置为大于数组元素数的值，则新添加的元素都将以 undefined 填充</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>] <span class="hljs-comment">// 创建一个包含 3 个字符串的数组</span><br>colors.length = <span class="hljs-number">4</span><br>alert(colors[<span class="hljs-number">3</span>]) <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure><p>这里将数组 colors 的 length 设置为 4，虽然数组只包含 3 个元素。位置 3 在数组中不存在，因此访问其值会返回特殊值 undefined。<br>使用 length 属性可以方便地向数组末尾添加元素</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>] <span class="hljs-comment">// 创建一个包含 3 个字符串的数组</span><br>colors[colors.length] = <span class="hljs-string">&#x27;black&#x27;</span> <span class="hljs-comment">// 添加一种颜色（位置 3）</span><br>colors[colors.length] = <span class="hljs-string">&#x27;brown&#x27;</span> <span class="hljs-comment">// 再添加一种颜色（位置 4）</span><br><br>colors[<span class="hljs-number">99</span>] = <span class="hljs-string">&#x27;black&#x27;</span> <span class="hljs-comment">// 添加一种颜色（位置 99）</span><br>alert(colors.length) <span class="hljs-comment">// 100</span><br></code></pre></div></td></tr></table></figure><p>这里，colors 数组有一个值被插入到位置 99，结果新 length 就变成了 100（99 + 1）。这中间的所有元素，即位置 3~98，实际上并不存在，因此在访问时会返回 undefined。</p><h3 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h3><p>在只有一个网页（因而只有一个全局作用域）的情况下，使用 instanceof 操作符就足矣：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>)&#123;  <span class="hljs-comment">// 操作数组&#125;</span><br></code></pre></div></td></tr></table></figure><p>使用 instanceof 的问题是假定只有一个全局执行上下文。如果网页里有多个框架，则可能涉及两个不同的全局执行上下文，因此就会有两个不同版本的 Array 构造函数。如果要把数组从一个框架传给另一个框架，则这个数组的构造函数将有别于在第二个框架内本地创建的数组。<br>为解决这个问题，ECMAScript 提供了 Array.isArray()方法。这个方法的目的就是确定一个值是否为数组，而不用管它是在哪个全局执行上下文中创建的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(value))&#123;  <span class="hljs-comment">// 操作数组&#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="迭代器方法"><a href="#迭代器方法" class="headerlink" title="迭代器方法"></a>迭代器方法</h3><p>ES6 中，Array 的原型上暴露了 3 个用于检索数组内容的方法：<strong>keys()<strong>、</strong>values()</strong> 和 **entries()**。<br>keys()返回数组索引的迭代器，values()返回数组元素的迭代器，而 entries()返回索引/值对的迭代器</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-string">&#x27;baz&#x27;</span>, <span class="hljs-string">&#x27;qux&#x27;</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [idx, element] <span class="hljs-keyword">of</span> a.entries()) &#123;<br>  <span class="hljs-built_in">console</span>.log(idx)<br>  <span class="hljs-built_in">console</span>.log(element)<br>&#125;<br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// foo</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// bar</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// baz</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// qux</span><br></code></pre></div></td></tr></table></figure><p>使用 ES6 的解构可以非常容易地在循环中拆分键/值对：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-string">&#x27;baz&#x27;</span>, <span class="hljs-string">&#x27;qux&#x27;</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [idx, element] <span class="hljs-keyword">of</span> a.entries()) &#123;<br>  <span class="hljs-built_in">console</span>.log(idx)<br>  <span class="hljs-built_in">console</span>.log(element)<br>&#125; <span class="hljs-comment">// 0 // foo // 1 // bar // 2 // baz // 3 // qux</span><br></code></pre></div></td></tr></table></figure><h3 id="复制和填充方法"><a href="#复制和填充方法" class="headerlink" title="复制和填充方法"></a>复制和填充方法</h3><p>ES6 新增了两个方法：**批量复制方法 copyWithin()<strong>，以及</strong>填充数组方法 fill()**。这两个方法的函数签名类似，都需要指定既有数组实例上的一个范围，包含开始索引，不包含结束索引。使用这个方法不会改变数组的大小。<br>使用 fill()方法可以向一个已有的数组中插入全部或部分相同的值。开始索引用于指定开始填充的位置，它是可选的。如果不提供结束索引，则一直填充到数组末尾。负值索引从数组末尾开始计算。也可以将负索引想象成数组长度加上它得到的一个正索引：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> zeroes = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><span class="hljs-comment">// 用 5 填充整个数组</span><br>zeroes.fill(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">console</span>.log(zeroes) <span class="hljs-comment">// [5, 5, 5, 5, 5]</span><br>zeroes.fill(<span class="hljs-number">0</span>) <span class="hljs-comment">// 重置</span><br><span class="hljs-comment">// 用 6 填充索引大于等于 3 的元素</span><br>zeroes.fill(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.log(zeroes) <span class="hljs-comment">// [0, 0, 0, 6, 6]</span><br>zeroes.fill(<span class="hljs-number">0</span>) <span class="hljs-comment">// 重置</span><br><span class="hljs-comment">// 用 7 填充索引大于等于 1 且小于 3 的元素</span><br>zeroes.fill(<span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.log(zeroes) <span class="hljs-comment">// [0, 7, 7, 0, 0];</span><br>zeroes.fill(<span class="hljs-number">0</span>) <span class="hljs-comment">// 重置</span><br><span class="hljs-comment">// 用 8 填充索引大于等于 1 且小于 4 的元素</span><br><span class="hljs-comment">// (-4 + zeroes.length = 1)</span><br><span class="hljs-comment">// (-1 + zeroes.length = 4)</span><br>zeroes.fill(<span class="hljs-number">8</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-built_in">console</span>.log(zeroes) <span class="hljs-comment">// [0, 8, 8, 8, 0];</span><br></code></pre></div></td></tr></table></figure><p>fill()静默忽略超出数组边界、零长度及方向相反的索引范围：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> zeroes = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><span class="hljs-comment">// 索引过低，忽略</span><br>zeroes.fill(<span class="hljs-number">1</span>, -<span class="hljs-number">10</span>, -<span class="hljs-number">6</span>)<br><span class="hljs-built_in">console</span>.log(zeroes) <span class="hljs-comment">// [0, 0, 0, 0, 0]</span><br><span class="hljs-comment">// 索引过高，忽略</span><br>zeroes.fill(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>)<br><span class="hljs-built_in">console</span>.log(zeroes) <span class="hljs-comment">// [0, 0, 0, 0, 0]</span><br><span class="hljs-comment">// 索引反向，忽略</span><br>zeroes.fill(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(zeroes) <span class="hljs-comment">// [0, 0, 0, 0, 0]</span><br><span class="hljs-comment">// 索引部分可用，填充可用部分</span><br>zeroes.fill(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>)<br><span class="hljs-built_in">console</span>.log(zeroes) <span class="hljs-comment">// [0, 0, 0, 4, 4]</span><br></code></pre></div></td></tr></table></figure><p>copyWithin()会按照指定范围浅复制数组中的部分内容，然后将它们插入到指 定索引开始的位置。开始索引和结束索引则与 fill()使用同样的计算方法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ints,<br>  reset = <span class="hljs-function">() =&gt;</span> (ints = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br>reset()<br><span class="hljs-comment">// 从 ints 中复制索引 0 开始的内容，插入到索引 5 开始的位置</span><br><span class="hljs-comment">// 在源索引或目标索引到达数组边界时停止</span><br>ints.copyWithin(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">console</span>.log(ints) <span class="hljs-comment">// [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]</span><br>reset()<br><span class="hljs-comment">// 从 ints 中复制索引 5 开始的内容，插入到索引 0 开始的位置</span><br>ints.copyWithin(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">console</span>.log(ints) <span class="hljs-comment">// [5, 6, 7, 8, 9, 5, 6, 7, 8, 9]</span><br>reset()<br><span class="hljs-comment">// 从 ints 中复制索引 0 开始到索引 3 结束的内容</span><br><span class="hljs-comment">// 插入到索引 4 开始的位置</span><br>ints.copyWithin(<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>)<br>alert(ints) <span class="hljs-comment">// [0, 1, 2, 3, 0, 1, 2, 7, 8, 9]</span><br>reset()<br><span class="hljs-comment">// JavaScript 引擎在插值前会完整复制范围内的值</span><br><span class="hljs-comment">// 因此复制期间不存在重写的风险</span><br>ints.copyWithin(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>)<br>alert(ints) <span class="hljs-comment">// [0, 1, 0, 1, 2, 3, 4, 5, 8, 9]</span><br>reset()<br><span class="hljs-comment">// 支持负索引值，与 fill()相对于数组末尾计算正向索引的过程是一样的</span><br>ints.copyWithin(-<span class="hljs-number">4</span>, -<span class="hljs-number">7</span>, -<span class="hljs-number">3</span>)<br>alert(ints) <span class="hljs-comment">// [0, 1, 2, 3, 4, 5, 3, 4, 5, 6]</span><br></code></pre></div></td></tr></table></figure><p>copyWithin()静默忽略超出数组边界、零长度及方向相反的索引范围：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ints,<br>  reset = <span class="hljs-function">() =&gt;</span> (ints = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br>reset()<br><span class="hljs-comment">// 索引过低，忽略</span><br>ints.copyWithin(<span class="hljs-number">1</span>, -<span class="hljs-number">15</span>, -<span class="hljs-number">12</span>)<br>alert(ints) <span class="hljs-comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];</span><br>reset()<br><span class="hljs-comment">// 索引过高，忽略</span><br>ints.copyWithin(<span class="hljs-number">1</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>)<br>alert(ints) <span class="hljs-comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];</span><br>reset()<br><span class="hljs-comment">// 索引反向，忽略</span><br>ints.copyWithin(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>)<br>alert(ints) <span class="hljs-comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];</span><br>reset()<br><span class="hljs-comment">// 索引部分可用，复制、填充可用部分</span><br>ints.copyWithin(<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>)<br>alert(ints) <span class="hljs-comment">// [0, 1, 2, 3, 7, 8, 9, 7, 8, 9];</span><br></code></pre></div></td></tr></table></figure><h3 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h3><p>所有对象都有 toLocaleString()、toString()和 valueOf()方法。<br>其中，valueOf() 返回的还是数组本身。而 toString()返回由数组中每个值的等效字符串拼接而成的一个逗号分隔的字符串。也就是说，对数组的每个值都会调用其 toString()方法，以得到最终的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>] <span class="hljs-comment">// 创建一个包含 3 个字符串的数组</span><br>alert(colors.toString()) <span class="hljs-comment">// red,blue,green</span><br>alert(colors.valueOf()) <span class="hljs-comment">// red,blue,green</span><br>alert(colors) <span class="hljs-comment">// red,blue,green</span><br></code></pre></div></td></tr></table></figure><p>继承的方法 toLocaleString()以及 toString()都返回数组值的逗号分隔的字符串。如果想使用不同的分隔符，则可以使用 join()方法。join()方法接收一个参数，即字符串分隔符，返回包含所有项的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]<br>alert(colors.join(<span class="hljs-string">&#x27;,&#x27;</span>)) <span class="hljs-comment">// red,green,blue</span><br>alert(colors.join(<span class="hljs-string">&#x27;||&#x27;</span>)) <span class="hljs-comment">// red||green||blue</span><br></code></pre></div></td></tr></table></figure><blockquote><p>注意 如果数组中某一项是 null 或 undefined，则在 join()、toLocaleString()、 toString()和 valueOf()返回的结果中会以空字符串表示。</p></blockquote><h3 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h3><p>数组对象可以像栈一样， 也就是一种限制插入和删除项的数据结构。栈是一种后进先出（LIFO，Last-In-First-Out）的结构，也就是最近添加的项先被删除。数据项的插入（称为推入，push）和删除（称为弹出，pop）只在栈的一个 地方发生，即栈顶。ECMAScript 数组提供了 push()和 pop()方法，以实现类似栈的行为。<br><strong>push()方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度。</strong><br><strong>pop()方法则用于删除数组的最后一项，同时减少数组的 length 值，返回被删除的项。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>() <span class="hljs-comment">// 创建一个数组</span><br><span class="hljs-keyword">let</span> count = colors.push(<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>) <span class="hljs-comment">// 推入两项</span><br>alert(count) <span class="hljs-comment">// 2</span><br>count = colors.push(<span class="hljs-string">&#x27;black&#x27;</span>) <span class="hljs-comment">// 再推入一项</span><br>alert(count) <span class="hljs-comment">// 3</span><br><span class="hljs-keyword">let</span> item = colors.pop() <span class="hljs-comment">// 取得最后一项</span><br>alert(item) <span class="hljs-comment">// black</span><br>alert(colors.length) <span class="hljs-comment">// 2</span><br></code></pre></div></td></tr></table></figure><h3 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h3><p>就像栈是以 LIFO 形式限制访问的数据结构一样，队列以先进先出（FIFO，First-In-First-Out）形式限制访问。队列在列表末尾添加数据，但从列表开头获取数据。因为有了在数据末尾添加数据的 push() 方法，所以要模拟队列就差一个从数组开头取得数据的方法了。<br><strong>这个数组方法叫 shift()，它会删除数组的第一项并返回它，然后数组长度减 1。</strong><br>使用 shift()和 push()，可以把数组当成队列来使用：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>() <span class="hljs-comment">// 创建一个数组</span><br><span class="hljs-keyword">let</span> count = colors.push(<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>) <span class="hljs-comment">// 推入两项</span><br>alert(count) <span class="hljs-comment">// 2</span><br>count = colors.push(<span class="hljs-string">&#x27;black&#x27;</span>) <span class="hljs-comment">// 再推入一项</span><br>alert(count) <span class="hljs-comment">// 3</span><br><span class="hljs-keyword">let</span> item = colors.shift() <span class="hljs-comment">// 取得第一项</span><br>alert(item) <span class="hljs-comment">// red</span><br>alert(colors.length) <span class="hljs-comment">// 2</span><br></code></pre></div></td></tr></table></figure><p>ECMAScript 也为数组提供了 unshift()方法。<br><strong>unshift()就是执行跟 shift()相反的 操作：在数组开头添加任意多个值，然后返回新的数组长度</strong>。<br>通过使用 unshift()和 pop()，可以在 相反方向上模拟队列，即在数组开头添加新数据，在数组末尾取得数据，</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>() <span class="hljs-comment">// 创建一个数组</span><br><span class="hljs-keyword">let</span> count = colors.unshift(<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>) <span class="hljs-comment">// 从数组开头推入两项</span><br>alert(count) <span class="hljs-comment">// 2</span><br>count = colors.unshift(<span class="hljs-string">&#x27;black&#x27;</span>) <span class="hljs-comment">// 再推入一项</span><br>alert(count) <span class="hljs-comment">// 3</span><br><span class="hljs-keyword">let</span> item = colors.pop() <span class="hljs-comment">// 取得最后一项</span><br>alert(item) <span class="hljs-comment">// green</span><br>alert(colors.length) <span class="hljs-comment">// 2</span><br></code></pre></div></td></tr></table></figure><h3 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a>排序方法</h3><p>数组有两个方法可以用来对元素重新排序：reverse()和 sort()。<br><strong>reverse()方法就是将数组元素反向排列。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>values.reverse()<br>alert(values) <span class="hljs-comment">// 5,4,3,2,1</span><br></code></pre></div></td></tr></table></figure><p><strong>sort()会按照升序重新排列数组元素，即最小的值在前面，最大的值在后面。</strong>为此，sort()会在每一项上调用 String()转型函数，然后比较字符串来决定顺序。即使**数组的元素都是数值， 也会先把数组转换为字符串再比较、排序。 **</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> values = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>]<br>values.sort()<br>alert(values) <span class="hljs-comment">// 0,1,10,15,5</span><br></code></pre></div></td></tr></table></figure><p>为此，sort()方法可以接收一个比较函数，用于判断哪个值应该排在前面。<br>比较函数接收两个参数，如果第一个参数应该排在第二个参数前面，就返回负值；如果两个参数相等，就返回 0；如果第一个参数应该排在第二个参数后面，就返回正值。 下面是使用简单比较函数的一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">value1, value2</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (value1 &lt; value2) &#123;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value1 &gt; value2) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在给 sort()方法传入比较函数后，数组中的数值在排序后保持了正确的顺序。当然，比较函数也可以产生降序效果，只要把返回值交换一下即可：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">value1, value2</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (value1 &lt; value2) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value1 &gt; value2) &#123;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> values = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>]<br>values.sort(compare)<br><span class="hljs-built_in">console</span>.log(values) <span class="hljs-comment">// 15,10,5,1,0</span><br></code></pre></div></td></tr></table></figure><p>箭头函数简写</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> values = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>]<br>values.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> (a &lt; b ? <span class="hljs-number">1</span> : a &gt; b ? -<span class="hljs-number">1</span> : <span class="hljs-number">0</span>))<br><span class="hljs-built_in">console</span>.log(values) <span class="hljs-comment">// 15,10,5,1,0</span><br></code></pre></div></td></tr></table></figure><p>要比较数字而非字符串，比较函数可以简单的以 a 减 b，如下的函数将会将数组升序排列</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compareNumbers</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a - b<br>&#125;<br></code></pre></div></td></tr></table></figure><p>sort 方法可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/function">函数表达式</a> 方便地书写：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]<br>numbers.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a - b<br>&#125;)<br><span class="hljs-built_in">console</span>.log(numbers)<br><span class="hljs-comment">//也可以写成：</span><br><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]<br>numbers.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b)<br><span class="hljs-built_in">console</span>.log(numbers)<br><span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></div></td></tr></table></figure><p>对象可以按照某个属性排序：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> items = [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Edward&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">21</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Sharpe&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">37</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;And&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">45</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;The&#x27;</span>, <span class="hljs-attr">value</span>: -<span class="hljs-number">12</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Magnetic&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Zeros&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">37</span> &#125;,<br>]<br><span class="hljs-comment">// sort by value</span><br>items.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a.value - b.value<br>&#125;)<br><span class="hljs-comment">// sort by name</span><br>items.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> nameA = a.name.toUpperCase() <span class="hljs-comment">// ignore upper and lowercase</span><br>  <span class="hljs-keyword">var</span> nameB = b.name.toUpperCase() <span class="hljs-comment">// ignore upper and lowercase</span><br>  <span class="hljs-keyword">if</span> (nameA &lt; nameB) &#123;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (nameA &gt; nameB) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-comment">// names must be equal</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><blockquote><p>注意 reverse()和 sort()都返回调用它们的数组的引用。</p></blockquote><p>如果数组的元素是数值，或者是其 valueOf()方法返回数值的对象（如 Date 对象），这个比较函数还可以写得更简单，因为这时可以直接用第二个值减去第一个值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">value1, value2</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> value2 - value1<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><p>对于数组中的元素，我们有很多操作方法。</p><h4 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat()方法"></a>concat()方法</h4><p>concat()方法可以在现有数组全部元素基础上创建一个新数组。它首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组。如果传入一个或多个数组，则 concat()会把这些数组的每一项都添加到结果数组。 如果参数不是数组，则直接把它们添加到结果数组末尾。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]<br><span class="hljs-keyword">let</span> colors2 = colors.concat(<span class="hljs-string">&#x27;yellow&#x27;</span>, [<span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-string">&#x27;brown&#x27;</span>])<br><span class="hljs-built_in">console</span>.log(colors) <span class="hljs-comment">// [&quot;red&quot;, &quot;green&quot;,&quot;blue&quot;]</span><br><span class="hljs-built_in">console</span>.log(colors2) <span class="hljs-comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;]</span><br></code></pre></div></td></tr></table></figure><h4 id="打平数组"><a href="#打平数组" class="headerlink" title="打平数组"></a>打平数组</h4><p>打平数组参数的行为可以重写，方法是在参数数组上指定一个特殊的符号：<strong>Symbol.isConcatSpreadable</strong>。这个符号能够阻止 concat()打平参数数组。相反，把这个值设置为 true 可以强制打平类数组对象：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]<br><span class="hljs-keyword">let</span> newColors = [<span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-string">&#x27;brown&#x27;</span>]<br><span class="hljs-keyword">let</span> moreNewColors = &#123;<br>  [<span class="hljs-built_in">Symbol</span>.isConcatSpreadable]: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">length</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;pink&#x27;</span>,<br>  <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;cyan&#x27;</span>,<br>&#125;<br>newColors[<span class="hljs-built_in">Symbol</span>.isConcatSpreadable] = <span class="hljs-literal">false</span><br><span class="hljs-comment">// 强制不打平数组</span><br><span class="hljs-keyword">let</span> colors2 = colors.concat(<span class="hljs-string">&#x27;yellow&#x27;</span>, newColors)<br><span class="hljs-comment">// 强制打平类数组对象</span><br><span class="hljs-keyword">let</span> colors3 = colors.concat(moreNewColors)<br><span class="hljs-built_in">console</span>.log(colors) <span class="hljs-comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]</span><br><span class="hljs-built_in">console</span>.log(colors2) <span class="hljs-comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, [&quot;black&quot;, &quot;brown&quot;]]</span><br><span class="hljs-built_in">console</span>.log(colors3) <span class="hljs-comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;pink&quot;, &quot;cyan&quot;]</span><br></code></pre></div></td></tr></table></figure><h4 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice()方法"></a>slice()方法</h4><p><strong>slice()用于创建一个包含原有数组中一个或多个元素的新数组</strong>。<strong>slice()方法可以接收一个或两个参数：返回元素的开始索引和结束索引</strong>。<br>如果只有一个参数，则 slice()会返回该索引到数组末尾的所有元素。<br>如果有两个参数，则 slice()返回从开始索引到结束索引对应的所有元素，其中不包含结束索引对应的元素。<br>记住，这个操作不影响原始数组。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;purple&#x27;</span>]<br><span class="hljs-keyword">let</span> colors2 = colors.slice(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">let</span> colors3 = colors.slice(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)<br>alert(colors2) <span class="hljs-comment">// green,blue,yellow,purple</span><br>alert(colors3) <span class="hljs-comment">// green,blue,yellow</span><br></code></pre></div></td></tr></table></figure><h4 id="splice-方法"><a href="#splice-方法" class="headerlink" title="splice()方法"></a>splice()方法</h4><p>splice()的主要目的是在数组中间插入元素，但有 3 种不同的方式使用这个方法。</p><ul><li><strong>删除</strong>。需要给 splice()传<strong>2 个参数：要删除的第一个元素的位置和要删除的元素数量</strong>。可以从数组中删除任意多个元素，比如 splice(0, 2)会删除前两个元素。</li><li><strong>插入</strong>。需要给 splice()传<strong>3 个参数：开始位置、0（要删除的元素数量）和要插入的元素</strong>，可以在数组中指定的位置插入元素。第三个参数之后还可以传第四个、第五个参数，乃至任意多个要插入的元素。比如，splice(2, 0, “red”, “green”)会从数组位置 2 开始插入字符串 “red”和”green”。</li><li><strong>替换</strong>。splice()在删除元素的同时可以在指定位置插入新元素，同样要传入 <strong>3 个参数：开始位置、要删除元素的数量和要插入的任意多个元素</strong>。要插入的元素数量不一定跟删除的元素数量一致。比如，splice(2, 1, “red”, “green”)会在位置 2 删除一个元素，然后从该位置开始向数组中插入”red”和”green”。</li></ul><p>splice()方法始终返回这样一个数组，它包含从数组中被删除的元素（如果没有删除元素，则返回空数组）。以下示例展示了上述 3 种使用方式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]<br><span class="hljs-keyword">let</span> removed = colors.splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// 删除第一项</span><br>alert(colors) <span class="hljs-comment">// green,blue</span><br>alert(removed) <span class="hljs-comment">// red，只有一个元素的数组</span><br>removed = colors.splice(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>) <span class="hljs-comment">// 在位置 1 插入两个元素</span><br>alert(colors) <span class="hljs-comment">// green,yellow,orange,blue</span><br>alert(removed) <span class="hljs-comment">// 空数组</span><br>removed = colors.splice(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;purple&#x27;</span>) <span class="hljs-comment">// 插入两个值，删除一个元素</span><br>alert(colors) <span class="hljs-comment">// green,red,purple,orange,blue</span><br>alert(removed) <span class="hljs-comment">// yellow，只有一个元素的数组</span><br></code></pre></div></td></tr></table></figure><h4 id="搜索和位置方法"><a href="#搜索和位置方法" class="headerlink" title="搜索和位置方法"></a>搜索和位置方法</h4><p>ECMAScript 提供两类搜索数组的方法：按严格相等搜索和按断言函数搜索。</p><h5 id="严格相等"><a href="#严格相等" class="headerlink" title="严格相等"></a>严格相等</h5><p>ECMAScript 提供了 3 个严格相等的搜索方法：indexOf()、lastIndexOf()和 includes()。其中，前两个方法在所有版本中都可用，而第三个方法是 ECMAScript 7 新增的。<br>这些方法都接收两个参数：<strong>要查找的元素和一个可选的起始搜索位置</strong>。indexOf()和 includes()方法从数组前头（第一项） 开始向后搜索，而 lastIndexOf()从数组末尾（最后一项）开始向前搜索。<br>indexOf()和 lastIndexOf()都返回要查找的元素在数组中的位置，如果没找到则返回-1。<br>includes()返回布尔值，表示是否至少找到一个与指定元素匹配的项。<br>在比较第一个参数跟数组每一项时，会使用全等（===）比较，也就是说两项必须严格相等。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br>alert(numbers.indexOf(<span class="hljs-number">4</span>)) <span class="hljs-comment">// 3</span><br>alert(numbers.lastIndexOf(<span class="hljs-number">4</span>)) <span class="hljs-comment">// 5</span><br>alert(numbers.includes(<span class="hljs-number">4</span>)) <span class="hljs-comment">// true</span><br>alert(numbers.indexOf(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>)) <span class="hljs-comment">// 5</span><br>alert(numbers.lastIndexOf(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>)) <span class="hljs-comment">// 3</span><br>alert(numbers.includes(<span class="hljs-number">4</span>, <span class="hljs-number">7</span>)) <span class="hljs-comment">// false</span><br><span class="hljs-keyword">let</span> person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Nicholas&#x27;</span> &#125;<br><span class="hljs-keyword">let</span> people = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Nicholas&#x27;</span> &#125;]<br><span class="hljs-keyword">let</span> morePeople = [person]<br>alert(people.indexOf(person)) <span class="hljs-comment">// -1</span><br>alert(morePeople.indexOf(person)) <span class="hljs-comment">// 0</span><br>alert(people.includes(person)) <span class="hljs-comment">// false</span><br>alert(morePeople.includes(person)) <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><h5 id="断言函数"><a href="#断言函数" class="headerlink" title="断言函数"></a>断言函数</h5><p>ECMAScript 也允许按照定义的断言函数搜索数组，每个索引都会调用这个函数。断言函数的返回值决定了相应索引的元素是否被认为匹配。<br>断言函数接收<strong>3 个参数：元素、索引和数组本身</strong>。其中元素是数组中当前搜索的元素，索引是当前元素的索引，而数组就是正在搜索的数组。断言函数返回真值，表示是否匹配<br>find()和 findIndex()方法使用了断言函数。这两个方法都从数组的最小索引开始。<strong>find()返回第一个匹配的元素</strong>，<strong>findIndex()返回第一个匹配元素的索引</strong>。这两个方法也都接收第二个可选的参数， 用于指定断言函数内部 this 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> people = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Matt&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Nicholas&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">29</span>,<br>  &#125;,<br>]<br><span class="hljs-built_in">console</span>.log(people.find(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> element.age &lt; <span class="hljs-number">28</span>)) <span class="hljs-comment">// &#123;name: &quot;Matt&quot;, age: 27&#125;</span><br><span class="hljs-built_in">console</span>.log(people.findIndex(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> element.age &lt; <span class="hljs-number">28</span>)) <span class="hljs-comment">// 0</span><br></code></pre></div></td></tr></table></figure><p>找到匹配项后，这两个方法都不再继续搜索。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> evens = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]<br><span class="hljs-comment">// 找到匹配后，永远不会检查数组的最后一个元素</span><br>evens.find(<span class="hljs-function">(<span class="hljs-params">element, index, array</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(element)<br>  <span class="hljs-built_in">console</span>.log(index)<br>  <span class="hljs-built_in">console</span>.log(array)<br>  <span class="hljs-keyword">return</span> element === <span class="hljs-number">4</span><br>&#125;)<br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// [2, 4, 6]</span><br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// [2, 4, 6]</span><br></code></pre></div></td></tr></table></figure><h4 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h4><p>ECMAScript 为数组定义了 5 个迭代方法。<br>每个方法接收两个参数：以每一项为参数运行的函数， 以及可选的作为函数运行上下文的作用域对象（影响函数中 this 的值）。<br>传给每个方法的函数接收 3 个参数：数组元素、元素索引和数组本身。<br>​</p><ul><li>every()：对数组每一项都运行传入的函数，如果对每一项函数都返回 true，则这个方法返回 true。</li><li>filter()：对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回。</li><li>forEach()：对数组每一项都运行传入的函数，没有返回值。</li><li>map()：对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组。</li><li>some()：对数组每一项都运行传入的函数，如果有一项函数返回 true，则这个方法返回 true。</li></ul><p>这些方法都不改变调用它们的数组。<br>every()和 some()是最相似的，都是从数组中搜索符合某个条件的元素。<br><strong>对 every() 来说，传入的函数必须对每一项都返回 true，它才会返回 true；否则，它就返回 false。</strong><br><strong>而对 some() 来说，只要有一项让传入的函数返回 true，它就会返回 true。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br><span class="hljs-keyword">let</span> everyResult = numbers.every(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item &gt; <span class="hljs-number">2</span>)<br>alert(everyResult) <span class="hljs-comment">// false</span><br><span class="hljs-keyword">let</span> someResult = numbers.some(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item &gt; <span class="hljs-number">2</span>)<br>alert(someResult) <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><p>filter()方法，这个方法基于给定的函数来决定某一项是否应该包含在它返回的数组中。比如，要返回一个所有数值都大于 2 的数组，可以使用如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br><span class="hljs-keyword">let</span> filterResult = numbers.filter(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item &gt; <span class="hljs-number">2</span>)<br>alert(filterResult) <span class="hljs-comment">// 3,4,5,4,3</span><br></code></pre></div></td></tr></table></figure><p>map()方法也会返回一个数组。这个数组的每一项都是对原始数组中同样位置的元素运行传入函数而返回的结果。例如，可以将一个数组中的每一项都乘以 2，并返回包含所有结果的数组，如下所示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br><span class="hljs-keyword">let</span> mapResult = numbers.map(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> item * <span class="hljs-number">2</span>)<br>alert(mapResult) <span class="hljs-comment">// 2,4,6,8,10,8,6,4,2</span><br></code></pre></div></td></tr></table></figure><p>forEach()方法。这个方法只会对每一项运行传入的函数，没有返回值。本质上，forEach()方法相当于使用 for 循环遍历数组。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br>numbers.forEach(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 执行某些操作</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h4><p>ECMAScript 为数组提供了两个归并方法：**reduce()**和 <strong>reduceRight()<strong>。这两个方法都会迭代数组的所有项，并在此基础上构建一个最终返回值。<br><strong>reduce()方法从数组第一项开始遍历到最后一项。</strong> <strong>而 reduceRight()从最后一项开始遍历至第一项。</strong><br>这两个方法都接收两个参数：对每一项都会运行的归并函数，以及可选的以之为归并起点的初始值。 传给 reduce()和 reduceRight()的函数接收 4 个参数：</strong>上一个归并值、当前项、当前项的索引和数组本身</strong>。这个函数返回的任何值都会作为下一次调用同一个函数的第一个参数。如果没有给这两个方法传入可选的第二个参数（作为归并起点值），则第一次迭代将从数组的第二项开始，因此传给归并函数的第一个参数是数组的第一项，第二个参数是数组的第二项。<br>可以使用 reduce()函数执行累加数组中所有数值的操作，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> sum = values.reduce(<span class="hljs-function">(<span class="hljs-params">prev, cur, index, array</span>) =&gt;</span> prev + cur)<br>alert(sum) <span class="hljs-comment">// 15</span><br></code></pre></div></td></tr></table></figure><p>第一次执行归并函数时，prev 是 1，cur 是 2。第二次执行时，prev 是 3（1 + 2），cur 是 3（数组第三项）。如此递进，直到把所有项都遍历一次，最后返回归并结果。<br>reduceRight()方法与之类似，只是方向相反。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> sum = values.reduceRight(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">prev, cur, index, array</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> prev + cur<br>&#125;)<br>alert(sum) <span class="hljs-comment">// 15</span><br></code></pre></div></td></tr></table></figure><p>究竟是使用 reduce()还是 reduceRight()，只取决于遍历数组元素的方向。除此之外，这两个方法没什么区别。<br>​</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>JavaScript高级程序设计第四版笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Taro多端小程序学习笔记</title>
    <link href="/2021/12/03/Taro%E5%A4%9A%E7%AB%AF%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/12/03/Taro%E5%A4%9A%E7%AB%AF%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Taro-多端小程序学习笔记"><a href="#Taro-多端小程序学习笔记" class="headerlink" title="Taro 多端小程序学习笔记"></a>Taro 多端小程序学习笔记</h2><h3 id="快速搭建项目"><a href="#快速搭建项目" class="headerlink" title="快速搭建项目"></a>快速搭建项目</h3><p>项目初始化以及配置推荐看<a href="https://taro-docs.jd.com/taro/docs/GETTING-STARTED">Taro</a>官网更详细</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"># 使用 npm 安装 CLI<br>npm install -g @tarojs/cli<br><br># OR 使用 yarn 安装 CLI<br>yarn <span class="hljs-built_in">global</span> add @tarojs/cli<br><br># OR 安装了 cnpm，使用 cnpm 安装 CLI<br>cnpm install -g @tarojs/cli<br></code></pre></div></td></tr></table></figure><h4 id="查看-Taro-全部版本信息"><a href="#查看-Taro-全部版本信息" class="headerlink" title="查看 Taro 全部版本信息"></a>查看 Taro 全部版本信息</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm info @tarojs/cli<br></code></pre></div></td></tr></table></figure><h4 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">taro init myApp<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/30/Kzh5ln67UuHSEtj.png#crop=0&crop=0&crop=1&crop=1&id=me34h&originHeight=647&originWidth=984&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h4 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm run dev:h5 <span class="hljs-comment">//H5小程序</span><br>npm run build:h5<br><br>npm run dev:weapp <span class="hljs-comment">//微信小程序</span><br>npm run build:weapp<br><br>npm run dev:swan <span class="hljs-comment">//百度小程序</span><br>npm run build:swan<br><br>npm run dev:alipay <span class="hljs-comment">//支付宝小程序</span><br>npm run build:alipay<br><br>npm run dev:tt <span class="hljs-comment">//字节跳动小程序</span><br>npm run build:tt<br><br>npm run dev:qq <span class="hljs-comment">//QQ小程序</span><br>npm run build:qq<br><br>npm run dev:jd <span class="hljs-comment">//京东小程序</span><br>npm run build:jd<br><br>......<br></code></pre></div></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><h4 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">├── dist                        编译结果目录<br>|<br>├── config                      项目编译配置目录<br>|   ├── index.js                默认配置<br>|   ├── dev.js                  开发环境配置<br>|   └── prod.js                 生产环境配置<br>|<br>├── src                         源码目录<br>|   ├── pages                   页面文件目录<br>|   |   └── index               index 页面目录<br>|   |       ├── index.js        index 页面逻辑<br>|   |       ├── index.css       index 页面样式<br>|   |       └── index.config.js index 页面配置<br>|   |<br>|   ├── app.js                  项目入口文件<br>|   ├── app.css                 项目总通用样式<br>|   └── app.config.js           项目入口配置<br>|<br>├── project.config.json         微信小程序项目配置 project.config.json<br>├── project.tt.json             字节跳动小程序项目配置 project.config.json<br>├── project.swan.json           百度小程序项目配置 project.swan.json<br>├── project.qq.json             QQ 小程序项目配置 project.config.json<br>|<br>├── babel.config.js             Babel 配置<br>├── tsconfig.json               TypeScript 配置<br>├── .eslintrc                   ESLint 配置<br>|<br>└── package.json<br></code></pre></div></td></tr></table></figure><h4 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">└── config                      项目编译配置目录<br>    ├── index.js                默认配置<br>    ├── dev.js                  开发环境配置<br>    └── prod.js                 生产环境配置<br></code></pre></div></td></tr></table></figure><h4 id="源码组织"><a href="#源码组织" class="headerlink" title="源码组织"></a>源码组织</h4><h5 id="app"><a href="#app" class="headerlink" title="app"></a>app</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">└── src                         源码目录<br>    ├── app.js                  项目入口文件<br>    ├── app.css                 项目总通用样式<br>    └── app.config.js           项目入口配置<br></code></pre></div></td></tr></table></figure><p>小程序的主体由下面三个文件组成：</p><table><thead><tr><th>文件</th><th>必须</th><th>作用</th></tr></thead><tbody><tr><td>app.js</td><td>是</td><td>小程序入口逻辑</td></tr><tr><td>app.css</td><td>否</td><td>小程序全局样式</td></tr><tr><td>app.config.js</td><td>是</td><td>小程序全局配置</td></tr></tbody></table><h5 id="page"><a href="#page" class="headerlink" title="page"></a>page</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">└── src                         源码目录<br>    └── pages                   页面文件目录<br>        └── index               index 页面目录<br>            ├── index.js        index 页面逻辑<br>            ├── index.css       index 页面样式<br>            └── index.config.js index 页面配置<br></code></pre></div></td></tr></table></figure><p>一个小程序页面由三个文件组成，如下：</p><table><thead><tr><th>文件</th><th>必须</th><th>作用</th></tr></thead><tbody><tr><td>page.js</td><td>是</td><td>页面入口逻辑</td></tr><tr><td>page.css</td><td>否</td><td>页面样式</td></tr><tr><td>page.config.js</td><td>否</td><td>页面配置</td></tr></tbody></table><h5 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">└──project.config.json         微信小程序项目配置 project.config.json<br></code></pre></div></td></tr></table></figure><h5 id="Babel-配置"><a href="#Babel-配置" class="headerlink" title="Babel 配置"></a>Babel 配置</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">└── babel.config.js             Babel 配置<br></code></pre></div></td></tr></table></figure><h5 id="ESLint-配置"><a href="#ESLint-配置" class="headerlink" title="ESLint 配置"></a>ESLint 配置</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">└── .eslintrc                   ESLint 配置<br></code></pre></div></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h4><p>taro 的组件使用支持 react 的组件方式，如果使用 taro 创建组件会报错。<br>child.jsx 子组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/taro&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/components&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>我是Child组件<span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Child;<br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">import</span> Taro, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/taro&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/components&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Taro</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>我是Child组件<span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Child;<br><br><span class="hljs-comment">//这两种方式都会报错</span><br></code></pre></div></td></tr></table></figure><p>Error: TypeError: Super expression must either be null or a function<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1638277204349-b9910b94-811b-4874-b186-bd24723698c3.png#clientId=u447cf860-36f2-4&crop=0&crop=0&crop=1&crop=1&id=zSeMZ&name=image.png&originHeight=382&originWidth=339&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20905&status=done&style=none&taskId=u411f3ab5-66e8-4f29-aabf-775b9d573f9&title=" alt="image.png"><br>所以推荐使用 react 创建组件的方式<br>child.jsx 子组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/components&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>我是Child组件<span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Child;<br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/components&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>我是Child组件<span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Child;<br><br><br></code></pre></div></td></tr></table></figure><h4 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h4><p>父子组件通过 props 传递数据，子组件不能修改，只能接收父组件的数据<br>父组件在组件内部设置一个属性传递给子组件<br>src\pages\index\index.jsx 父组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><span class="hljs-keyword">import</span> Child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-attr">text</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;李四&#x27;</span> &#125;,<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;render...&#x27;</span>)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span> */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;this.state.text&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>src\pages\index\child.jsx 子组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; text &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>我是Child组件&#123;text.username&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Child<br></code></pre></div></td></tr></table></figure><h4 id="设置默认属性"><a href="#设置默认属性" class="headerlink" title="设置默认属性"></a>设置默认属性</h4><p>如果父组件没有传递任何属性，可以在子组件通过<code>Child.defaultProps=&#123;&#125;</code>设置默认属性<br>src\pages\index\index.jsx 父组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><span class="hljs-keyword">import</span> Child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>src\pages\index\child.jsx 子组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; text &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>我是Child组件&#123;text.username&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  &#125;<br>&#125;<br><span class="hljs-comment">//设置默认属性 如果父组件没有传递属性给子组件</span><br>Child.defaultProps = &#123;<br>  <span class="hljs-attr">text</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;111111&#x27;</span> &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Child<br></code></pre></div></td></tr></table></figure><h3 id="常用生命周期"><a href="#常用生命周期" class="headerlink" title="常用生命周期"></a>常用生命周期</h3><h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount( )"></a>componentWillMount( )</h4><p>componentWillMount( ) 组件挂载之前</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">componentWillMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;组件挂载之前，componentWillMount&#x27;</span>)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount( )"></a>componentDidMount( )</h4><p>componentDidMount( ) 组件挂载之后</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,<br>  &#125;;<br>  componentDidMount () &#123;<br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;组件挂载之后，componentDidMount&quot;</span>);<br>      <span class="hljs-comment">//更改组件状态</span><br>      <span class="hljs-comment">//想要获取最新的状态，需要在setSate的第二个参数函数内部获取</span><br>      <span class="hljs-built_in">this</span>.setState(<br>        &#123;<br>          <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;李四&quot;</span>,<br>        &#125;,<br>        <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>, <span class="hljs-built_in">this</span>.state.text); <span class="hljs-comment">//李四 同步最新的状态</span><br>        &#125;<br>      );<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>, <span class="hljs-built_in">this</span>.state.text); <span class="hljs-comment">//张三 异步更新还是更改之前的状态</span><br>    &#125;<br>  &#125;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>&#123;this.state.text&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>&#123;this.state.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>注意<strong>更改 state 只能用 setState，但是 setState 是异步更新</strong>。在 setState 之后获取的值是更改之前的值，想要得到最新的值只能在 setState 的第二个参数中的回调函数中拿到最新值</p><h5 id="setState-更新最新数据"><a href="#setState-更新最新数据" class="headerlink" title="setState 更新最新数据"></a>setState 更新最新数据</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.setState(<br>  &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-comment">//更改的值</span><br>  &#125;,<br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">//在第二个参数的回调函数中拿到最新的值</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>, <span class="hljs-built_in">this</span>.state.text) <span class="hljs-comment">//李四 同步最新的状态</span><br>  &#125;<br>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>, <span class="hljs-built_in">this</span>.state.text) <span class="hljs-comment">//张三 异步更新还是更改之前的状态</span><br></code></pre></div></td></tr></table></figure><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount( )"></a>componentWillUnmount( )</h4><p>componentWillUnmount( ) 组件销毁时</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">componentWillUnmount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;组件销毁时，componentWillUnmount&#x27;</span>)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="componentDidShow"><a href="#componentDidShow" class="headerlink" title="componentDidShow( )"></a>componentDidShow( )</h4><p>componentDidShow( ) 页面显示的时候，在 react 中不存在</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">componentDidShow</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//react中不存在</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;页面显示的时候，componentDidShow&#x27;</span>)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="componentWillHide"><a href="#componentWillHide" class="headerlink" title="componentWillHide( )"></a>componentWillHide( )</h4><p>componentWillHide( ) 页面隐藏的时候，在 react 中不存在</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">componentWillHide</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//react中不存在</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;页面隐藏的时候，componentDidHide&#x27;</span>)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate( )"></a>componentWillUpdate( )</h4><p>componentWillUpdate( ) state 数据将要更新之前</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">componentWillUpdate</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;state数据将要更新之前，componentWillUpdate&#x27;</span>)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate( )"></a>componentDidUpdate( )</h4><p>componentDidUpdate( ) state 数据将要更新之后</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">componentDidUpdate</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;state数据更新之后，componentDidUpdate&#x27;</span>)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="shouldComponentUpdate-nextProps-nextState"><a href="#shouldComponentUpdate-nextProps-nextState" class="headerlink" title="shouldComponentUpdate(nextProps, nextState)"></a>shouldComponentUpdate(nextProps, nextState)</h4><p>shouldComponentUpdate(nextProps, nextState) 检查此次 setState 是否进行 render 调用 默认返回 true，一般用来多次的 setState 调用时，提升 render 的性能。只需要判断最后一次是否修改 然后返回 true，再进行 render 渲染<br>两个参数 nextState 最新的状态，nextProps 最新的属性</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,<br>  &#125;;<br>  componentDidMount () &#123;<br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;组件挂载之后，componentDidMount&quot;</span>);<br>      <span class="hljs-comment">//更改组件状态</span><br>      <span class="hljs-comment">//想要获取最新的状态，需要在setSate的第二个参数函数内部获取</span><br>      <span class="hljs-built_in">this</span>.setState(<br>        &#123;<br>          <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;李四&quot;</span>,<br>        &#125;,<br>        <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>, <span class="hljs-built_in">this</span>.state.text); <span class="hljs-comment">//李四 同步最新的状态</span><br>        &#125;<br>      );<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>, <span class="hljs-built_in">this</span>.state.text); <span class="hljs-comment">//张三 异步更新还是更改之前的状态</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">shouldComponentUpdate</span>(<span class="hljs-params">nextProps, nextState</span>)</span> &#123;<br>    <span class="hljs-comment">//检查此次setState是否进行render调用 默认返回true</span><br>    <span class="hljs-comment">//一般用来多次的setState调用时，提升render的性能</span><br>    <span class="hljs-comment">// console.log(&quot;shouldComponentUpdate&quot;, nextState.text); //nextState最新的状态，nextProps最新的属性</span><br>    <span class="hljs-keyword">if</span> (nextState.text === <span class="hljs-string">&quot;李四&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  render () &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>&#123;this.state.text&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>&#123;this.state.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="componentWillReceiveProps-nextProps-nextState"><a href="#componentWillReceiveProps-nextProps-nextState" class="headerlink" title="componentWillReceiveProps(nextProps, nextState)"></a>componentWillReceiveProps(nextProps, nextState)</h4><p>componentWillReceiveProps(nextProps, nextState) 父组件传递给子组件的属性发送变化的时候，此钩子函数才会执行，初始化的时候不会执行。nextProps 才是最新的属性<br>src\pages\index\index.jsx 父组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><span class="hljs-keyword">import</span> Child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-attr">text</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;李四&#x27;</span> &#125;,<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//更改组件的状态</span><br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      <span class="hljs-attr">text</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;王五&#x27;</span> &#125;,<br>    &#125;)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;this.state.text&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>src\pages\index\child.jsx 子组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-comment">//初始化的时候不会执行</span><br>  <span class="hljs-comment">//父组件传递给子组件的属性发送变化的时候，此钩子函数才会执行</span><br>  <span class="hljs-function"><span class="hljs-title">componentWillReceiveProps</span>(<span class="hljs-params">nextProps, nextState</span>)</span> &#123;<br>    <span class="hljs-comment">// console.log(this.props.text.username); //这里还是以前的属性</span><br>    <span class="hljs-built_in">console</span>.log(nextProps.text.username) <span class="hljs-comment">//nextProps才是最新的属性</span><br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; text &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span>我是Child组件&#123;text.username&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Child<br></code></pre></div></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="基本路由配置"><a href="#基本路由配置" class="headerlink" title="基本路由配置"></a>基本路由配置</h4><p>src\pages\test\test.jsx 新建一个文件以及配置文件 test.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;render...&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span>test!!<span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>src\app.config.js 配置默认路径</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">pages</span>: [<span class="hljs-string">&#x27;pages/test/test&#x27;</span>, <span class="hljs-string">&#x27;pages/index/index&#x27;</span>],<br>  <span class="hljs-attr">window</span>: &#123;<br>    <span class="hljs-attr">backgroundTextStyle</span>: <span class="hljs-string">&#x27;light&#x27;</span>,<br>    <span class="hljs-attr">navigationBarBackgroundColor</span>: <span class="hljs-string">&#x27;#fff&#x27;</span>,<br>    <span class="hljs-attr">navigationBarTitleText</span>: <span class="hljs-string">&#x27;WeChat&#x27;</span>,<br>    <span class="hljs-attr">navigationBarTextStyle</span>: <span class="hljs-string">&#x27;black&#x27;</span>,<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>将<code>&quot;pages/test/test&quot;</code>写在数组前面就是默认路径，然后重启项目</p><h4 id="基本页面跳转"><a href="#基本页面跳转" class="headerlink" title="基本页面跳转"></a>基本页面跳转</h4><h5 id="navigateTo"><a href="#navigateTo" class="headerlink" title="navigateTo"></a>navigateTo</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> Taro <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/taro&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。</span><br>    <span class="hljs-comment">//使用 Taro.navigateBack 可以返回到原页面。小程序中页面栈最多十层。</span><br>    <span class="hljs-comment">//相当于 h5：$router.push</span><br>    Taro.navigateTo(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/index/index&#x27;</span>,<br>    &#125;)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>test!!<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="redirectTo"><a href="#redirectTo" class="headerlink" title="redirectTo"></a>redirectTo</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> Taro <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/taro&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。</span><br>    <span class="hljs-comment">//相当于 h5：$router.replace</span><br>    Taro.redirectTo(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/index/index&#x27;</span>,<br>    &#125;)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>test!!<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h4><p>src\pages\test\test.jsx 发送参数的页面，将参数拼接到 url 上</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> Taro <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/taro&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。</span><br>    <span class="hljs-comment">//相当于 h5：$router.replace</span><br>    Taro.redirectTo(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/index/index?id=1&#x27;</span>,<br>    &#125;)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>test!!<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>src\pages\index\index.jsx 接收参数的页面，<code>const id = this.$router.params.id;</code>//已经失效 taro3 有更新用<code>getCurrentInstance()</code><br>taro3 中更新开发中我们常常会调用 <a href="https://taro-docs.jd.com/taro/blog/2021-02-08-taro-jxpp#23-%E5%BB%BA%E8%AE%AE%E6%8A%8A-tarogetcurrentinstance-%E7%9A%84%E7%BB%93%E6%9E%9C%E4%BF%9D%E5%AD%98%E4%B8%8B%E6%9D%A5">Taro.getCurrentInstance()</a> 获取小程序的 app、page 对象、路由参数等数据。但频繁调用它可能会导致问题。把 Taro.getCurrentInstance() 的结果在组件中保存起来</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><span class="hljs-keyword">import</span> Child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child&#x27;</span><br><span class="hljs-keyword">import</span> Taro <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/taro&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-attr">text</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;李四&#x27;</span> &#125;,<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">componentWillMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//获取到test页面传递过来的参数</span><br>    <span class="hljs-comment">// const id = this.$router.params.id;//已经失效taro3有更新用getCurrentInstance()</span><br>    <span class="hljs-comment">//taro3中更新开发中我们常常会调用 Taro.getCurrentInstance() 获取小程序的 app、page 对象、路由参数等数据。</span><br>    <span class="hljs-comment">//但频繁调用它可能会导致问题。把 Taro.getCurrentInstance() 的结果在组件中保存起来</span><br>    <span class="hljs-keyword">const</span> id = Taro.getCurrentInstance().router.params.id<br>    <span class="hljs-built_in">console</span>.log(id)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span> */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;this.state.text&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="导出资源以及导入方式"><a href="#导出资源以及导入方式" class="headerlink" title="导出资源以及导入方式"></a>导出资源以及导入方式</h3><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>单独导出<br>src\util.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;setData&quot;</span>);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;getData&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>解构赋值引入<br>src\pages\test\test.jsx</p><figure class="highlight capnproto"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123; setData , getData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../util&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>如果是 export 单独导出，则解构赋值方法引入</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>默认方式导出</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;setData&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;getData&quot;</span>);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> setData;<br></code></pre></div></td></tr></table></figure><p>单独引入</p><figure class="highlight capnproto"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> getData <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../util&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>如果使用结构赋值方式引入会报错</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123; getData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../util&quot;</span>;<span class="hljs-comment">//TypeError: Object(...) is not a function</span><br></code></pre></div></td></tr></table></figure><h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><p>对象方式导出</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;setData&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;getData&quot;</span>);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123; setData, getData &#125;;<br></code></pre></div></td></tr></table></figure><p>调用方式引入</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>引入<br>import util from <span class="hljs-string">&quot;../../util&quot;</span>;<br><br><span class="hljs-regexp">//</span>调用<br>util.getData();<br></code></pre></div></td></tr></table></figure><h4 id="导入图片资源"><a href="#导入图片资源" class="headerlink" title="导入图片资源"></a>导入图片资源</h4><h5 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h5><p>require 方式导入</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Image &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;require(</span>&#x27;<span class="hljs-attr">..</span>/<span class="hljs-attr">..</span>/<span class="hljs-attr">img</span>/<span class="hljs-attr">1.png</span>&#x27;)&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h5><p>import 方式导入</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text, Button, Image &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> img <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../img/1.png&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;img&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="导入样式资源"><a href="#导入样式资源" class="headerlink" title="导入样式资源"></a>导入样式资源</h4><p>src\pages\test\test.less</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.index &#123;<br>  .img &#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>%;<br>    margin-top: 30px; <span class="hljs-comment">//小写px会自动转换成rem，大小PX不会转换</span><br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>src\pages\test\test.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text, Button, Image &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./test.less&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;img&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;img&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a><a href="https://taro-docs.jd.com/taro/docs/condition">条件渲染</a></h3><p>三目运算符加上函数调用的方式</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text, Button, Image &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-attr">isShow</span>: <span class="hljs-literal">false</span>,<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">getDom</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> &#123; isShow &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> isShow ? (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>test!!<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br>    ) : (<br>      <span class="hljs-string">&#x27;isShow:false&#x27;</span><br>    )<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span>&#123;this.getDom()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="列表循环"><a href="#列表循环" class="headerlink" title="列表循环"></a><a href="https://taro-docs.jd.com/taro/docs/2.x/list">列表循环</a></h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>Keys 可以在 DOM 中的某些元素被增加或删除的时候帮助 Nerv/小程序 识别哪些元素发生了变化。因此你应当给数组中的每一个元素赋予一个确定的标识。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text, Button, Image &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-attr">isShow</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">list</span>: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;张三&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;李四&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;王五&#x27;</span> &#125;,<br>    ],<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; list &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        &#123;list.map((item, index) =&gt; &#123;</span><br><span class="xml">          return <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br><span class="xml">        &#125;)&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="key-的取值"><a href="#key-的取值" class="headerlink" title="key 的取值"></a>key 的取值</h4><p>必须同时满足三个条件：</p><ol><li>稳定</li><li>可预测</li><li>唯一（相对于其他兄弟元素）</li></ol><p>最好的 key 就是数组里的 ID（通常由后端生成），他能同时满足以上三个条件，同时也不需要自己去生成。如果没有 ID，你能保证数组的元素某个键值字符串都是不同的（例如 item.title），那么使用那个字符串键值也可以。如果源数据没有提供很好的 key 值，或者需要遍历的数组生成的。那么你最好在数据创建或者修改之后给他添加一个好的 key 值：</p><h4 id="与-React-的不同"><a href="#与-React-的不同" class="headerlink" title="与 React 的不同"></a>与 React 的不同</h4><p>在 React 中，JSX 是会编译成普通的 JS 的执行，每一个 JSX 元素，其实会通过 createElement 函数创建成一个 JavaScript 对象（React Element），因此实际上你可以这样写代码 React 也是完全能渲染的：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> list = <span class="hljs-built_in">this</span>.state.list<br>  .map(<span class="hljs-function">(<span class="hljs-params">l</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (l.selected) &#123;<br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;l.text&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    &#125;<br>  &#125;)<br>  .filter(React.isValidElement)<br></code></pre></div></td></tr></table></figure><p>你甚至可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> list = <span class="hljs-built_in">this</span>.state.list<br>  .map(<span class="hljs-function">(<span class="hljs-params">l</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (l.selected) &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">$$typeof</span>: <span class="hljs-built_in">Symbol</span>(react.element),<br>        <span class="hljs-attr">props</span>: &#123;<br>          <span class="hljs-attr">children</span>: l.text,<br>        &#125;,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;li&#x27;</span>,<br>      &#125;<br>    &#125;<br>  &#125;)<br>  .filter(React.isValidElement)<br></code></pre></div></td></tr></table></figure><p>但是 Taro 中，JSX 会编译成微信小程序模板字符串，<strong>因此你不能把 map 函数生成的模板当做一个数组来处理</strong>。当你需要这么做时，应该先处理需要循环的数组，再用处理好的数组来调用 map 函数。例如上例应该写成：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> list = <span class="hljs-built_in">this</span>.state.list<br>  .filter(<span class="hljs-function">(<span class="hljs-params">l</span>) =&gt;</span> l.selected)<br>  .map(<span class="hljs-function">(<span class="hljs-params">l</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;l.text&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  &#125;)<br></code></pre></div></td></tr></table></figure><h3 id="Children-与组合"><a href="#Children-与组合" class="headerlink" title="Children 与组合"></a>Children 与组合</h3><p>src\pages\dialog\testDialog.jsx 父组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text, Image &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><span class="hljs-keyword">import</span> Dialog <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dialog&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDialog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Dialog</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>我是第一个Dialog组件<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Dialog</span>&gt;</span></span><br><span class="xml">        &#123;/* myTxt=&quot;你好！！！&quot; //传递属性 */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Dialog</span> <span class="hljs-attr">myTxt</span>=<span class="hljs-string">&#x27;你好！！！&#x27;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;require(</span>&#x27;<span class="hljs-attr">..</span>/<span class="hljs-attr">..</span>/<span class="hljs-attr">img</span>/<span class="hljs-attr">1.png</span>&#x27;)&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Image</span>&gt;</span></span><br><span class="xml">          &#123;/*类似插槽 */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Dialog</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>src\pages\dialog\dialog.jsx 子组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dialog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  config = &#123;<br>    <span class="hljs-attr">navigationBarTitleText</span>: <span class="hljs-string">&#x27;弹出框&#x27;</span>,<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        &#123;/* &#123;this.props.myTxt&#125;传递的属性 */&#125;</span><br><span class="xml">        &#123;/* &#123;this.props.children&#125;类似插槽的功能 */&#125;</span><br><span class="xml">        &#123;this.props.myTxt&#125;弹出框组件！！！&#123;this.props.children&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><strong>请不要对 this.props.children 进行任何操作</strong>。Taro 在小程序中实现这个功能使用的是小程序的 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html">slot</a> 功能，也就是说你可以把 this.props.children 理解为 slot 的语法糖，this.props.children 在 Taro 中并不是 React 的 ReactElement 对象，因此形如 this.props.children &amp;&amp; this.props.children、this.props.children[0] 在 Taro 中都是非法的。<br><strong>this.props.children 无法用 defaultProps 设置默认内容</strong>。由于小程序的限制，Taro 也无法知道组件的消费者是否传入内容，所以无法应用默认内容。<br><strong>不能把 this.props.children 分解为变量再使用</strong>。由于普通的 props 有一个确切的值，所以当你把它们分解为变量运行时可以处理，this.props.children 则不能这样操作，你必须显性地把 this.props.children 全部都写完整才能实现它的功能。</p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>src\pages\event\event.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张山&#x27;</span>,<br>  &#125;<br>  <span class="hljs-comment">//第一个参数是传递的参数，第二个参数是event事件</span><br>  <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params">param, event</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(param, event)<br>    <span class="hljs-comment">//如果有两个div包裹且都要点击事件类似的情况，这就有事件冒泡</span><br>    <span class="hljs-comment">//阻止事件冒泡</span><br>    event.stopPropagation()<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span></span><br><span class="xml">        &#123;/* .bind第一个参数绑定this指向，第二个参数是传递的参数 */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick.bind(this,</span> <span class="hljs-attr">this.state.name</span>)&#125;&gt;</span></span><br><span class="xml">          event</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>.bind 第一个参数绑定 this 指向，第二个参数是传递的参数。<br>如果遇到事件冒泡需要阻止用<code>event.stopPropagation()</code></p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a><a href="https://taro-docs.jd.com/taro/docs/2.x/envs/#processenvtaro_env">运行环境</a></h3><h5 id="内置环境变量"><a href="#内置环境变量" class="headerlink" title="内置环境变量"></a>内置环境变量</h5><p>注意：环境变量在代码中的使用方式，<a href="https://taro-docs.jd.com/taro/docs/2.x/best-practice#%E6%9C%80%E4%BD%B3%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F">参考</a><br>Taro 在编译时提供了一些内置的环境变量来帮助用户做一些特殊处理</p><h4 id="process-env-TARO-ENV"><a href="#process-env-TARO-ENV" class="headerlink" title="process.env.TARO_ENV"></a>process.env.TARO_ENV</h4><p>用于判断当前编译类型，目前有 weapp / swan / alipay / h5 / rn / tt / qq / quickapp 八个取值，可以通过这个变量来书写对应一些不同环境下的代码，在编译时会将不属于当前编译类型的代码去掉，只保留当前编译类型下的代码，例如想在微信小程序和 H5 端分别引用不同资源</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><br><span class="hljs-keyword">const</span> isH5 = process.env.TARO_ENV<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">componentWillUnmount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (isH5) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;现在的环境是web&#x27;</span>)<br>      <span class="hljs-comment">// require(&quot;path/to/h5/name&quot;); //引入h5的样式或者资源也能加载不同的组件</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;现在的环境是小程序端&#x27;</span>)<br>      <span class="hljs-comment">// require(&quot;path/to/weapp/name&quot;);</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;index&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>不同的运行环境可以引入不同的样式或者资源也能加载不同的组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (process.env.TARO_ENV === <span class="hljs-string">&#x27;weapp&#x27;</span>) &#123;<br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path/to/weapp/name&#x27;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.env.TARO_ENV === <span class="hljs-string">&#x27;h5&#x27;</span>) &#123;<br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path/to/h5/name&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>同时也可以在 JSX 中使用，决定不同端要加载的组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">render () &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span></span><br><span class="xml">      &#123;process.env.TARO_ENV === &#x27;weapp&#x27; &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">ScrollViewWeapp</span> /&gt;</span>&#125;</span><br><span class="xml">      &#123;process.env.TARO_ENV === &#x27;h5&#x27; &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">ScrollViewH5</span> /&gt;</span>&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="接口请求"><a href="#接口请求" class="headerlink" title="接口请求"></a><a href="https://taro-docs.jd.com/taro/docs/2.x/apis/network/request/request">接口请求</a></h3><h4 id="Taro-request-option"><a href="#Taro-request-option" class="headerlink" title="Taro.request(option)"></a>Taro.request(option)</h4><p>src\pages\blog\blog.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Taro <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/taro&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; View, Text, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/components&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Blog</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [articleList, setArticleList] = useState([])<br><br>  <span class="hljs-keyword">const</span> testHandler = <span class="hljs-function">() =&gt;</span> &#123;<br>    Taro.request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://apiblog.jspang.com/default/getArticleList&#x27;</span>,<br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(res.data)<br>      setArticleList(res.data.list)<br>    &#125;)<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">View</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Text</span>&gt;</span>接口请求<span class="hljs-tag">&lt;/<span class="hljs-name">Text</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;testHandler&#125;</span>&gt;</span>获取数据<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      &#123;articleList.map((item, index) =&gt; &#123;</span><br><span class="xml">        return <span class="hljs-tag">&lt;<span class="hljs-name">View</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>- &#123;item.title&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br><span class="xml">      &#125;)&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">View</span>&gt;</span></span><br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Blog<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Taro</tag>
      
      <tag>多端小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>垃圾回收</title>
    <link href="/2021/11/23/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <url>/2021/11/23/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>JavaScript 是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。JavaScript 为开发者卸下了这个负担，通过自动内存管理实现内存分配和闲置资源回收。<br>基本思路很简单：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间（或者说在代码执行过程中某个预定的收集时间）就会自动运行。垃圾回收过程是一个近似且不完美的方案，因为某块内存是否还有用，属于“不可判定的”问题， 意味着靠算法是解决不了的。<br>​</p><p>我们以函数中局部变量的正常生命周期为例。函数中的局部变量会在函数执行时存在。此时，栈（或堆）内存会分配空间以保存相应的值。函数在内部使用了变量，然后退出。此时，就不再需要那个局部变量了，它占用的内存可以释放，供后面使用。这种情况下显然不再需要局部变量了，但并不是所有时候都会这么明显。<br>垃圾回收程序必须跟踪记录哪个变量还会使用，以及哪个变量不会再使用，以便回收内存。如何标记未使用的变量也许有不同的实现方式。不过，在浏览器的发展史上，用到过两种主要的标记策略：<strong>标记清理</strong>和<strong>引用计数</strong>。<br>​</p><h3 id="标记清理"><a href="#标记清理" class="headerlink" title="标记清理"></a>标记清理</h3><p>JavaScript 最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记。而不在上下文中的变量，逻辑上讲，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。当变量离开上下文时，也会被加上离开上下文的标记。<br>给变量加标记的方式有很多种。比如，当变量进入上下文时，反转某一位；或者可以维护“在上下文中”和“不在上下文中”两个变量列表，可以把变量从一个列表转移到另一个列表。标记过程的实现并不重要，关键是策略。<br>垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。</p><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>另一种没那么常用的垃圾回收策略是引用计数（reference counting）。<br>其思路是对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为 1。如果同一个值又被赋给另一个变量，那么引用数加 1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减 1。当一个值的引用数为 0 时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序 下次运行的时候就会释放引用数为 0 的值的内存。<br>引用计数最早由 Netscape Navigator 3.0 采用，但很快就遇到了严重的问题：<strong>循环引用</strong>。所谓循环引用，就是<strong>对象 A 有一个指针指向对象 B，而对象 B 也引用了对象 A</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">problem</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> objectA = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>  <span class="hljs-keyword">let</span> objectB = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>  objectA.someOtherObject = objectB<br>  objectB.anotherObject = objectA<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在这个例子中， objectA 和 objectB 通过各自的属性相互引 用，意味着它们的引用数都是 2。在标记清理策略下，这不是问题，因为在函数结束后，这两个对象都不在作用域中。而在引用计数策略下， objectA 和 objectB 在函数结束后还会存在，因为它们的引 用数永远不会变成 0。如果函数被多次调用，则会导致大量内存永远不会被释放。为此，Netscape 在 4.0 版放弃了引用计数，转而采用标记清理。<br>为避免类似的循环引用问题，应该在确保不使用的情况下切断原生 JavaScript 对象与 DOM 元素之间的连接。比如，通过以下代码可以清除前面的例子中建立的循环引用：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">myObject.element = <span class="hljs-literal">null</span><br>element.someObject = <span class="hljs-literal">null</span><br></code></pre></div></td></tr></table></figure><p>把变量设置为 null 实际上会切断变量与其之前引用值之间的关系。当下次垃圾回收程序运行时，这些值就会被删除，内存也会被回收。 为了补救这一点，IE9 把 BOM 和 DOM 对象都改成了 JavaScript 对 象，这同时也避免了由于存在两套垃圾回收算法而导致的问题，还消除了常见的内存泄漏现象</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>垃圾回收程序会周期性运行，如果内存中分配了很多变量，则可能造成性能损失，因此垃圾回收的时间调度很重要。尤其是在内存有限的移动设备上，垃圾回收有可能会明显拖慢渲染的速度和帧速率。 开发者不知道什么时候运行时会收集垃圾，因此最好的办法是在写代码时就要做到：无论什么时候开始收集垃圾，都能让它尽快结束工 作。<br>​</p><p>现代垃圾回收程序会基于对 JavaScript 运行时环境的探测来决定何时运行。探测机制因引擎而异，但基本上都是根据已分配对象的大小和数量来判断的。比如，根据 V8 团队 2016 年的一篇博文的说法：“在 一次完整的垃圾回收之后，V8 的堆增长策略会根据活跃对象的数量外加一些余量来确定何时再次垃圾回收。”<br>​</p><p>由于调度垃圾回收程序方面的问题会导致性能下降，IE 曾饱受诟病。它的策略是根据分配数，比如分配了 256 个变量、4096 个对象/数组字面量和数组槽位（slot），或者 64KB 字符串。只要满足其中某个条件，垃圾回收程序就会运行。这样实现的问题在于，分配那么多变量的脚本，很可能在其整个生命周期内始终需要那么多变量，结果就 会导致垃圾回收程序过于频繁地运行。由于对性能的严重影响，IE7 最终更新了垃圾回收程序。</p><p>IE7 发布后，JavaScript 引擎的垃圾回收程序被调优为动态改变分配变量、字面量或数组槽位等会触发垃圾回收的阈值。IE7 的起始阈值都与 IE6 的相同。如果垃圾回收程序回收的内存不到已分配的 15%，这些变量、字面量或数组槽位的阈值就会翻倍。如果有一次回收的内存达到已分配的 85%，则阈值重置为默认值。这么一个简单的修改，极大地提升了重度依赖 JavaScript 的网页在浏览器中的性能。</p><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>在使用垃圾回收的编程环境中，开发者通常无须关心内存管理。 不过，JavaScript 运行在一个内存管理与垃圾回收都很特殊的环境。分配给浏览器的内存通常比分配给桌面软件的要少很多，分配给移动浏览器的就更少了。<br>这更多出于安全考虑而不是别的，就是为了避免运行大量 JavaScript 的网页耗尽系统内存而导致操作系统崩溃。这个内存限制不仅影响变量分配，也影响调用栈以及能够同时在一个线程中执行的语句数量。<br>将内存占用量保持在一个较小的值可以让页面性能更好。优化内存占用的最佳手段就是保证在执行代码时只保存必要的数据。如果数据不再必要，那么把它设置为 null ，从而释放其引用。这也可以叫作<strong>解除引用</strong>。这个建议最适合全局变量和全局对象的属性。局部变量在超出作用域后会被自动解除引用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPerson</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> localPerson = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>  localPerson.name = name<br>  <span class="hljs-keyword">return</span> localPerson<br>&#125;<br><span class="hljs-keyword">let</span> globalPerson = createPerson(<span class="hljs-string">&#x27;Nicholas&#x27;</span>)<br><span class="hljs-comment">// 解除globalPerson对值的引用</span><br>globalPerson = <span class="hljs-literal">null</span><br></code></pre></div></td></tr></table></figure><p>在上面的代码中，变量 globalPerson 保存着 createPerson() 函数调用返回的值。在 createPerson() 内部， localPerson 创建了一个对象并给它添加了一个 name 属性。然后， localPerson 作为函数值被返回，并被赋值给 globalPerson 。 localPerson 在 createPerson() 执行完成超出上下文后会自动被解除引用，不需要显式处理。但 globalPerson 是一个全局变量，应该在不再需要时手动解除其引用，最后一行就是这么做的。<br>不过要注意，<strong>解除对一个值的引用并不会自动导致相关内存被回收。解除引用的关键在于确保相关的值已经不在上下文里了</strong>，因此它在下次垃圾回收时会被回收。</p><h4 id="通过-const-和-let-声明提升性能"><a href="#通过-const-和-let-声明提升性能" class="headerlink" title="通过 const 和 let 声明提升性能"></a>通过 const 和 let 声明提升性能</h4><p>ES6 增加这两个关键字不仅有助于改善代码风格，而且同样有助于改进垃圾回收的过程。因为 const 和 let 都以块（而非函数）为作用域，所以相比于使用 var ，使用这两个新关键字可能会更早地让垃圾回收程序介入，尽早回收应该回收的内存。在块作用域比函数作用域更早终止的情况下，这就有可能发生。</p><h4 id="隐藏类和删除操作"><a href="#隐藏类和删除操作" class="headerlink" title="隐藏类和删除操作"></a>隐藏类和删除操作</h4><p>根据 JavaScript 所在的运行环境，有时候需要根据浏览器使用的 JavaScript 引擎来采取不同的性能优化策略。截至 2017 年，Chrome 是最流行的浏览器，使用 V8 JavaScript 引擎。V8 在将解释后的 JavaScript 代码编译为实际的机器码时会利用“隐藏类”。如果你的代码非常注重性能，那么这一点可能对你很重要。<br>运行期间，V8 会将创建的对象与隐藏类关联起来，以跟踪它们的属性特征。能够共享相同隐藏类的对象性能会更好，V8 会针对这种情况进行优化，但不一定总能够做到。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Article</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.title = <span class="hljs-string">&#x27;Inauguration Ceremony Features Kazoo Band&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> a1 = <span class="hljs-keyword">new</span> Article()<br><span class="hljs-keyword">let</span> a2 = <span class="hljs-keyword">new</span> Article()<br></code></pre></div></td></tr></table></figure><p>V8 会在后台配置，让这两个类实例共享相同的隐藏类，因为这两个实例共享同一个构造函数和原型。假设之后又添加了下面这行 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">a2.author = <span class="hljs-string">&#x27;Jake&#x27;</span><br></code></pre></div></td></tr></table></figure><p>此时两个 Article 实例就会对应两个不同的隐藏类。根据这种操作的频率和隐藏类的大小，这有可能对性能产生明显影响。 当然，解决方案就是避免 JavaScript 的“先创建再补充”（ready-fireaim）式的动态属性赋值，并在构造函数中一次性声明所有属性， 如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Article</span>(<span class="hljs-params">opt_author</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.title = <span class="hljs-string">&#x27;Inauguration Ceremony</span><br><span class="hljs-string">  Features Kazoo Band&#x27;</span>;<br>  <span class="hljs-built_in">this</span>.author = opt_author;<br>&#125;<br><span class="hljs-keyword">let</span> a1 = <span class="hljs-keyword">new</span> Article();<br><span class="hljs-keyword">let</span> a2 = <span class="hljs-keyword">new</span> Article(<span class="hljs-string">&#x27;Jake&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>这样，两个实例基本上就一样了（不考虑 hasOwnProperty 的返回值），因此可以共享一个隐藏类，从而带来潜在的性能提 升。不过要记住，使用 delete 关键字会导致生成相同的隐藏类片段。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Article</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.title = <span class="hljs-string">&#x27;Inauguration Ceremony</span><br><span class="hljs-string">  Features Kazoo Band&#x27;</span>;<br>  <span class="hljs-built_in">this</span>.author = <span class="hljs-string">&#x27;Jake&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">let</span> a1 = <span class="hljs-keyword">new</span> Article();<br><span class="hljs-keyword">let</span> a2 = <span class="hljs-keyword">new</span> Article();<br><span class="hljs-keyword">delete</span> a1.author;<br></code></pre></div></td></tr></table></figure><p>在代码结束后，即使两个实例使用了同一个构造函数，它们也不再共享一个隐藏类。动态删除属性与动态添加属性导致的后果一 样。最佳实践是把不想要的属性设置为 null 。这样可以保持隐藏类不变和继续共享，同时也能达到删除引用值供垃圾回收程序回收的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Article</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.title = <span class="hljs-string">&#x27;Inauguration Ceremony</span><br><span class="hljs-string">  Features Kazoo Band&#x27;</span>;<br>  <span class="hljs-built_in">this</span>.author = <span class="hljs-string">&#x27;Jake&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">let</span> a1 = <span class="hljs-keyword">new</span> Article();<br><span class="hljs-keyword">let</span> a2 = <span class="hljs-keyword">new</span> Article();<br>a1.author = <span class="hljs-literal">null</span>;<br></code></pre></div></td></tr></table></figure><h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><p>写得不好的 JavaScript 可能出现难以察觉且有害的内存泄漏问题。 在内存有限的设备上，或者在函数会被调用很多次的情况下，内存泄漏可能是个大问题。JavaScript 中的内存泄漏大部分是由不合理的引用导致的。<br>意外声明全局变量是最常见但也最容易修复的内存泄漏问题。下面的代码没有使用任何关键字声明变量</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setName</span>(<span class="hljs-params"></span>) </span>&#123;<br>  name = <span class="hljs-string">&#x27;Jake&#x27;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>此时，解释器会把变量 name 当作 window 的属性来创建（相 当于 window.name = ‘Jake’ ）。可想而知，在 window 对象上创建的属性，只要 window 本身不被清理就不会消失。这个问题很容易解决，只要在变量声明前头加上 var 、 let 或 const 关键字即可，这样变量就会在函数执行完毕后离开作用域。<br>定时器也可能会悄悄地导致内存泄漏。下面的代码中，定时器的回调通过闭包引用了外部变量</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;Jake&#x27;</span><br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(name)<br>&#125;, <span class="hljs-number">100</span>)<br></code></pre></div></td></tr></table></figure><p>只要定时器一直运行，回调函数中引用的 name 就会一直占用内存。垃圾回收程序当然知道这一点，因而就不会清理外部变量。 使用 JavaScript 闭包很容易在不知不觉间造成内存泄漏。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> outer = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;Jake&#x27;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> name<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这会导致分配给 name 的内存被泄漏。以上代码创建了一个内部 闭包，只要 outer 函数存在就不能清理 name ，因为闭包一直在引用着它。假如 name 的内容很大（不止是一个小字符串）， 那可能就是个大问题了。</p><h4 id="静态分配与对象池"><a href="#静态分配与对象池" class="headerlink" title="静态分配与对象池"></a>静态分配与对象池</h4><p>为了提升 JavaScript 性能，最后要考虑的一点往往就是压榨浏览器了。此时，一个关键问题就是如何减少浏览器执行垃圾回收的次数。开发者无法直接控制什么时候开始收集垃圾，但可以间接控制触发垃圾回收的条件。理论上，<strong>如果能够合理使用分配的内存，同时避免多余的垃圾回收，那就可以保住因释放内存而损失的性能</strong>。<br><strong>浏览器决定何时运行垃圾回收程序的一个标准就是对象更替的速度</strong>。如果有很多对象被初始化，然后一下子又都超出了作用域， 那么浏览器就会采用更激进的方式调度垃圾回收程序运行，这样当然会影响性能。看一看下面的例子，这是一个计算二维矢量加法的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addVector</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> resultant = <span class="hljs-keyword">new</span> Vector()<br>  resultant.x = a.x + b.x<br>  resultant.y = a.y + b.y<br>  <span class="hljs-keyword">return</span> resultant<br>&#125;<br></code></pre></div></td></tr></table></figure><p>调用这个函数时，会在堆上创建一个新对象，然后修改它，最后再把它返回给调用者。如果这个矢量对象的生命周期很短，那么它会很快失去所有对它的引用，成为可以被回收的值。假如这个矢量加法函数频繁被调用，那么垃圾回收调度程序会发现这里对象更替的速度很快，从而会更频繁地安排垃圾回收。<br>该问题的解决方案是不要动态创建矢量对象，比如可以修改上面的函数，让它使用一个已有的矢量对象：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addVector</span>(<span class="hljs-params">a, b, resultant</span>) </span>&#123;<br>  resultant.x = a.x + b.x<br>  resultant.y = a.y + b.y<br>  <span class="hljs-keyword">return</span> resultant<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当然，这需要在其他地方实例化矢量参数 resultant ，但这个函数的行为没有变。那么在哪里创建矢量可以不让垃圾回收调度程序盯上呢?<br>一个策略是使用对象池。在初始化的某一时刻，可以创建一个对象池，用来管理一组可回收的对象。应用程序可以向这个对象池请求一个对象、设置其属性、使用它，然后在操作完成后再把它还给对象池。由于没发生对象初始化，垃圾回收探测就不会发现有对象更替，因此垃圾回收程序就不会那么频繁地运行。<br>下面是一个对象池的伪实现</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// vectorPool是已有的对象池</span><br><span class="hljs-keyword">let</span> v1 = vectorPool.allocate()<br><span class="hljs-keyword">let</span> v2 = vectorPool.allocate()<br><span class="hljs-keyword">let</span> v3 = vectorPool.allocate()<br>v1.x = <span class="hljs-number">10</span><br>v1.y = <span class="hljs-number">5</span><br>v2.x = -<span class="hljs-number">3</span><br>v2.y = -<span class="hljs-number">6</span><br>addVector(v1, v2, v3)<br><span class="hljs-built_in">console</span>.log([v3.x, v3.y]) <span class="hljs-comment">// [7, -1]</span><br>vectorPool.free(v1)<br>vectorPool.free(v2)<br>vectorPool.free(v3)<br><span class="hljs-comment">// 如果对象有属性引用了其他对象</span><br><span class="hljs-comment">// 则这里也需要把这些属性设置为null</span><br>v1 = <span class="hljs-literal">null</span><br>v2 = <span class="hljs-literal">null</span><br>v3 = <span class="hljs-literal">null</span><br></code></pre></div></td></tr></table></figure><p>如果对象池只按需分配矢量（在对象不存在时创建新的，在对象存在时则复用存在的），那么这个实现本质上是一种贪婪算法， 有单调增长但为静态的内存。这个对象池必须使用某种结构维护所有对象，数组是比较好的选择。不过，使用数组来实现，必须留意不要招致额外的垃圾回收。比如下面这个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> vectorList = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">100</span>)<br><span class="hljs-keyword">let</span> vector = <span class="hljs-keyword">new</span> Vector()<br>vectorList.push(vector)<br></code></pre></div></td></tr></table></figure><p>由于 JavaScript 数组的大小是动态可变的，引擎会删除大小为 100 的数组，再创建一个新的大小为 200 的数组。垃圾回收程序会看到这个删除操作，说不定因此很快就会跑来收一次垃圾。要避免这种动态分配操作，可以在初始化时就创建一个大小够用的数组， 从而避免上述先删除再创建的操作。不过，必须事先想好这个数组有多大。</p><blockquote><p><strong>注意</strong> 静态分配是优化的一种极端形式。如果你的应用程序被垃圾回收严重地拖了后腿，可以利用它提升性能。但这种情况并不多见。大多数情况下，这都属于过早优化，因此不用考虑。</p></blockquote><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>离开作用域的值会被自动标记为可回收，然后在垃圾回收期间被删除。</li><li>主流的垃圾回收算法是标记清理，即先给当前不使用的值加上标记，再回来回收它们的内存。</li><li>引用计数是另一种垃圾回收策略，需要记录值被引用了多少次。 JavaScript 引擎不再使用这种算法，但某些旧版本的 IE 仍然会受这种算法的影响，原因是 JavaScript 会访问非原生 JavaScript 对象（如 DOM 元素）。</li><li>引用计数在代码中存在循环引用时会出现问题。</li><li>解除变量的引用不仅可以消除循环引用，而且对垃圾回收也有帮助。为促进内存回收，全局对象、全局对象的属性和循环引用都应该在不需要时解除引用。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>JavaScript高级程序设计第四版笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>垃圾回收</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>执行上下文与作用域</title>
    <link href="/2021/11/23/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2021/11/23/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="执行上下文与作用域"><a href="#执行上下文与作用域" class="headerlink" title="执行上下文与作用域"></a>执行上下文与作用域</h2><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><p>执行上下文（以下简称“上下文”）的概念在 JavaScript 中是颇为重要的。变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的<strong>变量对象</strong>（variable object），而这个上下文中定义的所有变量和函数都存在于这个对象上。<br>全局上下文是最外层的上下文。根据 ECMAScript 实现的宿主环境，表示全局上下文的对象可能不一样。在浏览器中，全局上下文就是我们常说的 window 对象），因此所有通过 var 定义的全局变量和函数都会成为 window 对象的属性和方法。<br>使用 let 和 const 的顶级声明不会定义在全局上下文中，但在作用域链解析上效果是一样的。上下文在其所有代码都执行完毕后会被销毁，包括定义在它上面的所有变量和函数（全局上下文在应用程序退出前才会被销毁，比如关闭网页或退出浏览器）。<br>每个函数调用都有自己的上下文。当代码执行流进入函数时，函数的上下文被推到一个上下文栈上。在函数执行完之后，上下文栈会弹出该函数上下文，将控制权返还给之前的执行上下文。ECMAScript 程序的执行流就是通过这个上下文栈进行控制的。<br>上下文中的代码在执行的时候，会创建变量对象的一个作用域链 （scope chain）。这个作用域链决定了各级上下文中的代码在访问变量和函数时的顺序。代码正在执行的上下文的变量对象始终位于作用域链的最前端。如果上下文是函数，则其活动对象（activation object）用作变量对象。<br> 活动对象最初只有一个定义变量： arguments 。（全局上下文中没有这个变量）作用域链中的下一个变量对象来自包含上下文，再下一个对象来自再下一个包含上下文。以此类推直至全局上下文；全局上下文的变量对象始终是作用域链的最后一个变量对象。 代码执行时的标识符解析是通过沿作用域链逐级搜索标识符名称完成的。搜索过程始终从作用域链的最前端开始，然后逐级往后，直到找到标识符。（如果没有找到标识符，那么通常会报错。）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> color = <span class="hljs-string">&#x27;blue&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeColor</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (color === <span class="hljs-string">&#x27;blue&#x27;</span>) &#123;<br>    color = <span class="hljs-string">&#x27;red&#x27;</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    color = <span class="hljs-string">&#x27;blue&#x27;</span><br>  &#125;<br>&#125;<br>changeColor()<br><span class="hljs-built_in">console</span>.log(color) <span class="hljs-comment">// red</span><br></code></pre></div></td></tr></table></figure><p>对这个例子而言，函数 changeColor() 的作用域链包含两个对象：一个是它自己的变量对象（就是定义 arguments 对象的那个），另一个是全局上下文的变量对象。这个函数内部之所以能够访问变量 color ，就是因为可以在作用域链中找到它。<br>此外，局部作用域中定义的变量可用于在局部上下文中替换全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> color = <span class="hljs-string">&#x27;blue&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeColor</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> anotherColor = <span class="hljs-string">&#x27;red&#x27;</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swapColors</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> tempColor = anotherColor<br>    anotherColor = color<br>    color = tempColor<br>    <span class="hljs-comment">// 这里可以访问color、anotherColor和tempColor</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>, color, anotherColor, tempColor) <span class="hljs-comment">// 1 red blue red</span><br>  &#125;<br>  <span class="hljs-comment">// 这里可以访问color和anotherColor，但访问不到tempColor</span><br>  swapColors()<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>, color, anotherColor) <span class="hljs-comment">// 2 red blue</span><br>&#125;<br><span class="hljs-comment">// 这里只能访问color</span><br>changeColor()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>, color) <span class="hljs-comment">// 3 red</span><br><span class="hljs-comment">// 1 red blue red</span><br><span class="hljs-comment">// 2 red blue</span><br><span class="hljs-comment">// 3 red</span><br></code></pre></div></td></tr></table></figure><p>以上代码涉及 3 个上下文：<strong>全局上下文</strong>、<strong>changeColor() 的局部上下文</strong>和 <strong>swapColors() 的局部上下文</strong>。<br>全局上下文中有一个变量 color 和一个函数 chageColor() 。<br>changeColor() 的局部上下文中有一个变量 anotherColor 和一个函数 swapColors() ，但在这里可以访问全局上下文中的变量 color 。<br>swapColors() 的局部上下文中有一个变量 tempColor ，只能在这个上下文中访问到。全局上下文和 changeColor() 的局部上下文都无法访问到 tempColor 。而在 swapColors() 中则可以访问另外两个上下文中的变量，因为它们都是父上下文。<br><img src="https://i.loli.net/2021/11/20/LS8kqP5wiH6JnoI.png#crop=0&crop=0&crop=1&crop=1&id=HT2zB&originHeight=472&originWidth=594&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>内部上下文可以通过作用域链访问外部上下文中的一切，但外部上下文无法访问内部上下文中的任何东西。上下文之间的连接是线性的、有序的。每个上下文都可以到上一级上下文中去搜索变量和函数，但任何上下文都不能到下一级上下文中去搜索。<br>swapColors() 局部上下文的作用域链中有 3 个对 象： swapColors() 的变量对象、 changeColor() 的变量对象 和全局变量对象。 swapColors() 的局部上下文首先从自己的变量对象开始搜索变量和函数，搜不到就去搜索上一级变量对象。<br>changeColor() 上下文的作用域链中只有 2 个对象：它自己的变量对象和全局变量对象。因此，它不能访问 swapColors() 的上下 文。</p><h3 id="作用域链增强"><a href="#作用域链增强" class="headerlink" title="作用域链增强"></a>作用域链增强</h3><p>虽然执行上下文主要有全局上下文和函数上下文两种（ eval() 调用内部存在第三种上下文），但有其他方式来增强作用域链。某些语句会导致在作用域链前端临时添加一个上下文，这个上下文在代码 执行后会被删除。<br>通常在两种情况下会出现这个现象，即代码执行到下面任意一种情况时：</p><ul><li>try / catch 语句的 catch 块</li><li>with 语句</li></ul><p>这两种情况下，都会在作用域链前端添加一个变量对象。对 with 语句来说，会向作用域链前端添加指定的对象；对 catch 语句而言，则会创建一个新的变量对象，这个变量对象会包含要抛出的错误对象的声明</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buildUrl</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> qs = <span class="hljs-string">&#x27;?debug=true&#x27;</span><br>  <span class="hljs-keyword">with</span> (location) &#123;<br>    <span class="hljs-keyword">let</span> url = href + qs<br>  &#125;<br>  <span class="hljs-keyword">return</span> url<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里， with 语句将 location 对象作为上下文，因此 location 会被添加到作用域链前端。 buildUrl() 函数中定义了一个变量 qs 。当 with 语句中的代码引用变量 href 时，实际上引用的是 location.href ，也就是自己变量对象的属性。在引用 qs 时，引用的则是定义在 buildUrl() 中的那个变量，它定义在函数上下文的变量对象上。而在 with 语句中使用 var 声明的变量 url 会成为函数上下文的一部分，可以作为函数的值被返回；但像这里使用 let 声明的变量 url ，因为被限制在块级作用域（稍后介 绍），所以在 with 块之外没有定义</p><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>直到 ECMAScript 5.1， var 都是声明变量的唯一关键字。ES6 不仅增加了 let 和 const 两个关键字，而且还让这两个关键字压倒性地超越 var 成为首选。</p><h4 id="使用-var-的函数作用域声明"><a href="#使用-var-的函数作用域声明" class="headerlink" title="使用 var 的函数作用域声明"></a>使用 var 的函数作用域声明</h4><p>在使用 var 声明变量时，变量会被自动添加到最接近的上下文。在函数中，最接近的上下文就是函数的局部上下文。在 with 语句中，最接近的上下文也是函数上下文。如果变量未经声明就被初始化了，那么它就会自动被添加到全局上下文</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> sum = num1 + num2<br>  <span class="hljs-keyword">return</span> sum<br>&#125;<br><span class="hljs-keyword">let</span> result = add(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>) <span class="hljs-comment">// 30</span><br><span class="hljs-built_in">console</span>.log(sum) <span class="hljs-comment">// 报错：sum在这里不是有效变量</span><br></code></pre></div></td></tr></table></figure><p>这里，函数 add() 定义了一个局部变量 sum ，保存加法操作的结果。这个值作为函数的值被返回，但变量 sum 在函数外部是访问不到的。如果省略上面例子中的关键字 var ，那么 sum 在 add() 被调用之后就变成可以访问的了</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;<br>  sum = num1 + num2<br>  <span class="hljs-keyword">return</span> sum<br>&#125;<br><span class="hljs-keyword">let</span> result = add(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>) <span class="hljs-comment">// 30</span><br><span class="hljs-built_in">console</span>.log(sum)<br></code></pre></div></td></tr></table></figure><p>这一次，变量 sum 被用加法操作的结果初始化时并没有使用 var 声明。在调用 add() 之后， sum 被添加到了全局上下文，在函数退出之后依然存在，从而在后面可以访问到。</p><blockquote><p>注意 未经声明而初始化变量是 JavaScript 编程中一个非常常见的错误，会导致很多问题。</p></blockquote><p>var 声明会被拿到函数或全局作用域的顶部，位于作用域中所有代码之前。这个现象叫作“提升”（hoisting）。提升让同一作用域中的代码不必考虑变量是否已经声明就可以直接使用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Jake&#x27;</span><br><span class="hljs-comment">// 等价于：</span><br>name = <span class="hljs-string">&#x27;Jake&#x27;</span><br><span class="hljs-keyword">var</span> name<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Jake&#x27;</span><br>&#125;<br><span class="hljs-comment">// 等价于：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> name<br>  name = <span class="hljs-string">&#x27;Jake&#x27;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过在声明之前打印变量，可以验证变量会被提升。声明的提升意味着会输出 undefined 而不是 Reference Error</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(name1) <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> name1 = <span class="hljs-string">&#x27;Jake&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(name2) <span class="hljs-comment">// undefined</span><br>  <span class="hljs-keyword">var</span> name2 = <span class="hljs-string">&#x27;Jake&#x27;</span><br>&#125;<br>a1()<br></code></pre></div></td></tr></table></figure><h4 id="使用-let-的块级作用域声明"><a href="#使用-let-的块级作用域声明" class="headerlink" title="使用 let 的块级作用域声明"></a>使用 let 的块级作用域声明</h4><p>ES6 新增的 let 关键字跟 var 很相似，但它的作用域是块级的，这也是 JavaScript 中的新概念。块级作用域由最近的一对包含花括号 {} 界定。换句话说， if 块、 while 块、 function 块，甚至连单独的块也是 let 声明变量的作用域</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">let</span> a<br>&#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// ReferenceError: a没有定义</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">let</span> b<br>&#125;<br><span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">// ReferenceError: b没有定义</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> c<br>&#125;<br><span class="hljs-built_in">console</span>.log(c) <span class="hljs-comment">// ReferenceError: c没有定义</span><br><span class="hljs-comment">// 这没什么可奇怪的</span><br><span class="hljs-comment">// var声明也会导致报错</span><br><span class="hljs-comment">// 这不是对象字面量，而是一个独立的块</span><br><span class="hljs-comment">// JavaScript解释器会根据其中内容识别出它来</span><br>&#123;<br>  <span class="hljs-keyword">let</span> d<br>&#125;<br><span class="hljs-built_in">console</span>.log(d) <span class="hljs-comment">// ReferenceError: d没有定义</span><br></code></pre></div></td></tr></table></figure><p>let 与 var 的另一个不同之处是在同一作用域内不能声明两次。重复的 var 声明会被忽略，而重复的 let 声明会抛出 SyntaxError 。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a;<br><span class="hljs-keyword">var</span> a;<br><span class="hljs-comment">// 不会报错</span><br>&#123;<br>  <span class="hljs-keyword">let</span> b;<br>  <span class="hljs-keyword">let</span> b;<br>&#125;<br><span class="hljs-comment">// SyntaxError: 标识符b已经声明过</span><br></code></pre></div></td></tr></table></figure><p>let 的行为非常适合在循环中声明迭代变量。使用 var 声明的迭代变量会泄漏到循环外部，这种情况应该避免。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;&#125;<br><span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">// 10</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; ++j) &#123;&#125;<br><span class="hljs-built_in">console</span>.log(j); <span class="hljs-comment">// ReferenceError: j没有定义</span><br></code></pre></div></td></tr></table></figure><p>严格来讲， let 在 JavaScript 运行时中也会被提升，但由于“暂时性死区”（temporal dead zone）的缘故，实际上不能在声明之前使用 let 变量。因此，从写 JavaScript 代码的角度说， let 的提升跟 var 是不一样的。</p><h4 id="使用-const-的常量声明"><a href="#使用-const-的常量声明" class="headerlink" title="使用 const 的常量声明"></a>使用 const 的常量声明</h4><p>除了 let ，ES6 同时还增加了 const 关键字。使用 const 声明的变量必须同时初始化为某个值。一经声明，在其生命周期的任何时候都不能再重新赋予新值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a; <span class="hljs-comment">// SyntaxError: 常量声明时没有初始化</span><br><span class="hljs-keyword">const</span> b = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">console</span>.log(b); <span class="hljs-comment">// 3</span><br>b = <span class="hljs-number">4</span>; <span class="hljs-comment">// TypeError: 给常量赋值</span><br></code></pre></div></td></tr></table></figure><p>const 除了要遵循以上规则，其他方面与 let 声明是一样的<br>const 声明只应用到顶级原语或者对象。换句话说，**赋值为对象的 const 变量不能再被重新赋值为其他引用值，但对象的键则不受限制。 **</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> o1 = &#123;&#125;;<br>o1 = &#123;&#125;; <span class="hljs-comment">// TypeError: 给常量赋值</span><br><span class="hljs-keyword">const</span> o2 = &#123;&#125;;<br>o2.name = <span class="hljs-string">&#x27;Jake&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(o2.name); <span class="hljs-comment">// &#x27;Jake&#x27;</span><br></code></pre></div></td></tr></table></figure><p>如果想让整个对象都不能修改，可以使用 Object.freeze() ，这样再给属性赋值时虽然不会报错，但会静默失败：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> o3 = <span class="hljs-built_in">Object</span>.freeze(&#123;&#125;)<br>o3.name = <span class="hljs-string">&#x27;Jake&#x27;</span><br><span class="hljs-built_in">console</span>.log(o3.name) <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure><p><strong>Object.freeze()</strong> 方法可以<strong>冻结</strong>一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">prop</span>: <span class="hljs-number">42</span><br>&#125;;<br><span class="hljs-built_in">Object</span>.freeze(obj);<br>obj.prop = <span class="hljs-number">33</span>;<br><span class="hljs-comment">// Throws an error in strict mode</span><br><span class="hljs-built_in">console</span>.log(obj.prop);<br><span class="hljs-comment">// expected output: 42</span><br></code></pre></div></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>任何变量（不管包含的是原始值还是引用值）都存在于某个执行上下文中（也称为作用域）。这个上下文（作用域）决定了变量的生命周期，以及它们可以访问代码的哪些部分。</p><ul><li>执行上下文分全局上下文、函数上下文和块级上下文。</li><li>代码执行流每进入一个新上下文，都会创建一个作用域链，用于搜索变量和函数。</li><li>函数或块的局部上下文不仅可以访问自己作用域内的变量，而且也可以访问任何包含上下文乃至全局上下文中的变量。</li><li>全局上下文只能访问全局上下文中的变量和函数，不能直接访问局部上下文中的任何数据。</li><li>变量的执行上下文用于确定什么时候释放内存。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>JavaScript高级程序设计第四版笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>执行上下文</tag>
      
      <tag>作用域</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript数据类型</title>
    <link href="/2021/11/17/JavaScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/11/17/JavaScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>ECMAScript 有 7 种简单数据类型（也称为原始类型）：<br><strong>Undefined</strong>、 <strong>Null</strong>、 <strong>Boolean</strong>、 <strong>Number</strong>、 <strong>String</strong>、 <strong>Symbol</strong> 和 <strong>BigInt</strong>(ES2020) 。<br>Symbol（符号）是 ECMAScript 6 新增的，BigInt 是 ES2020 新增<br>还有一种复杂数据类型叫 <strong>Object</strong>（对象）。Object 是一种无序名值对的集合。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt"><strong>BigInt</strong></a> 是一种内置对象，它提供了一种方法来表示大于 253 - 1 的整数。这原本是 Javascript 中可以用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number">Number</a> 表示的最大数字。<strong>BigInt</strong> 可以表示任意大的整数。可以用在一个整数字面量后面加 n 的方式定义一个 BigInt ，如：10n，或者调用函数 BigInt()。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> theBiggestInt = <span class="hljs-number">9007199254740991n</span><br><span class="hljs-comment">//使用 typeof 测试时， BigInt 对象返回 &quot;bigint&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">1n</span> === <span class="hljs-string">&#x27;bigint&#x27;</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">BigInt</span>(<span class="hljs-string">&#x27;1&#x27;</span>) === <span class="hljs-string">&#x27;bigint&#x27;</span> <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><h3 id="原始值与引用值"><a href="#原始值与引用值" class="headerlink" title="原始值与引用值"></a>原始值与引用值</h3><p>ECMAScript 变量可以包含两种不同类型的数据：原始值和引用值。<strong>原始值</strong>（primitive value）就是最简单的数据，<strong>引用值</strong>（reference value）则是由多个值构成的对象<br>​</p><p><strong>原始值(基本类型)</strong> ：<strong>Undefined</strong>、 <strong>Null</strong>、 <strong>Boolean</strong>、 <strong>Number</strong>、 <strong>String</strong>、 <strong>Symbol <strong>和 <strong>BigInt</strong>(ES2020)。保存原始值的变量是 <strong>按值</strong>（by value）访问的，因为我们操作的就是存储在变量中的实际值。 特点：</strong>直接存储在栈(stack)中的数据</strong></p><p><strong>引用值(引用数据类型)<strong>：Object、Array、Function。<br>引用值是保存在内存中的对象。 在操作对象时，实际上操作的是对该对象的</strong>引用</strong>（reference）而非实际的对象本身。为此，保存引用值的变量是<strong>按引用</strong>（by reference）访问的。 特点：<strong>存储的是该对象在栈中引用，真实的数据存放在堆内存里</strong><br>​</p><h4 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h4><p>原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值。对于引用值而言，可以随时添加、修改和删除其属性和方法。 在此之后，就可以访问这个新属性，直到对象被销毁或属性被显式地删除。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>person.name = <span class="hljs-string">&#x27;Nicholas&#x27;</span><br><span class="hljs-built_in">console</span>.log(person.name) <span class="hljs-comment">// &quot;Nicholas&quot;</span><br></code></pre></div></td></tr></table></figure><p>原始值不能有属性，尽管尝试给原始值添加属性不会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;Nicholas&#x27;</span><br>name.age = <span class="hljs-number">27</span><br><span class="hljs-built_in">console</span>.log(name.age) <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure><p>只有引用值可以动态添加后面可以使用的属性。原始类型的初始化可以只使用原始字面量形式。<br>如果使用的是 new 关键字，则 JavaScript 会创建一个 Object 类型的实例，但其行为类似原始值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name1 = <span class="hljs-string">&#x27;Nicholas&#x27;</span><br><span class="hljs-keyword">let</span> name2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;Matt&#x27;</span>)<br>name1.age = <span class="hljs-number">27</span><br>name2.age = <span class="hljs-number">26</span><br><span class="hljs-built_in">console</span>.log(name1.age) <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.log(name2.age) <span class="hljs-comment">// 26</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> name1) <span class="hljs-comment">// string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> name2) <span class="hljs-comment">// object</span><br></code></pre></div></td></tr></table></figure><h4 id="复制值"><a href="#复制值" class="headerlink" title="复制值"></a>复制值</h4><p>在通过变量把一个原始值赋值到另一个变量时，原始值会被复制到新变量的位置。 这两个变量可以独立使用，互不干扰</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num1 = <span class="hljs-number">5</span><br><span class="hljs-keyword">let</span> num2 = num1<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/20/FTl7hLmHZAiIUyz.png#crop=0&crop=0&crop=1&crop=1&id=nXFhP&originHeight=346&originWidth=440&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>在把引用值从一个变量赋给另一个变量时，存储在变量中的值也会被复制到新变量所在的位置。区别在于，这里复制的值实际上是一个指针，它指向存储在堆内存中的对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br><span class="hljs-keyword">let</span> obj2 = obj1<br>obj1.name = <span class="hljs-string">&#x27;Nicholas&#x27;</span><br><span class="hljs-built_in">console</span>.log(obj2.name) <span class="hljs-comment">// &quot;Nicholas&quot;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/20/NQAtG1b2hedE8Ul.png#crop=0&crop=0&crop=1&crop=1&height=396&id=UfHpO&originHeight=329&originWidth=578&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=696.0000610351562"></p><h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><p>ECMAScript 中所有函数的参数都是按值传递的。这意味着函数外的值会被复制到函数内部的参数中，就像从一个变量复制到另一个变量一样。如果是原始值，那么就跟原始值变量的复制一样，如果是引用值，那么就跟引用值变量的复制一样<br>在按引用传递参数时，值在内存中的位置会被保存在一个局部变量，这意味着对本地变量的修改会反映到函数外部。（这在 ECMAScript 中是不可能的。）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTen</span>(<span class="hljs-params">num</span>) </span>&#123;<br>  num += <span class="hljs-number">10</span><br>  <span class="hljs-keyword">return</span> num<br>&#125;<br><span class="hljs-keyword">let</span> count = <span class="hljs-number">20</span><br><span class="hljs-keyword">let</span> result = addTen(count)<br><span class="hljs-built_in">console</span>.log(count) <span class="hljs-comment">// 20，没有变化</span><br><span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">// 30</span><br></code></pre></div></td></tr></table></figure><p>如果 num 是按引用传递的，那么 count 的值也会被修改为 30。这个事实在使用数值这样的原始值时是非常明显的 。如果变量中传递的是对象，就没那么清楚了</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setName</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  obj.name = <span class="hljs-string">&#x27;Nicholas&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>setName(person)<br><span class="hljs-built_in">console</span>.log(person.name) <span class="hljs-comment">// &quot;Nicholas</span><br></code></pre></div></td></tr></table></figure><p>在函数内部， obj 和 person 都指向同一个对象。结果就是，即使对象是按值传进函数的， obj 也会通过引用问对象。当函数内部 给 obj 设置了 name 属性时，函数外部的对象也会反映这个变化， 因为 obj 指向的对象保存在全局作用域的堆内存上。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setName</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  obj.name = <span class="hljs-string">&#x27;Nicholas&#x27;</span><br>  obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>  obj.name = <span class="hljs-string">&#x27;Greg&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>setName(person)<br><span class="hljs-built_in">console</span>.log(person.name) <span class="hljs-comment">// &quot;Nicholas&quot;</span><br></code></pre></div></td></tr></table></figure><p>这个例子前后唯一的变化就是 setName() 中多了两行代码， 将 obj 重新定义为一个有着不同 name 的新对象。当 person 传 入 setName() 时，其 name 属性被设置为 “Nicholas” 。然后变 量 obj 被设置为一个新对象且 name 属性被设置为 “Greg” 。如果 person 是按引用传递的，那么 person 应该自动将指针改为指向 name 为 “Greg” 的对象。可是，当我们再次访问 person.name 时，它的值是 “Nicholas” ，这表明函数中参数的值改变之后，原始的引用仍然没变。当 obj 在函数内部被重写时， 它变成了一个指向本地对象的指针。而那个本地对象在函数执行结束时就被销毁了。</p><blockquote><p>注意 ECMAScript 中函数的参数就是局部变量。</p></blockquote><h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3><p>因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。typeof 操作符最适合用来判断一个变量是否为原始类型。更确切地说，它是判断一个变量是否为字符串、数值、布尔值或 undefined 的最好方式。如果值是对象或 null ，那么 typeof 返回 “object”<br>对一个值使用 typeof 操作符会返回下列字符串之一：</p><ul><li>“undefined” 表示值未定义；</li><li>“boolean” 表示值为布尔值；</li><li>“string” 表示值为字符串；</li><li>“number” 表示值为数值；</li><li>“object” 表示值为对象（而不是函数）或 null ；</li><li>“function” 表示值为函数；</li><li>“symbol” 表示值为符号。</li><li>“bigint” 表示值为任意大的整数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s = <span class="hljs-string">&quot;Nicholas&quot;</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">let</span> i = <span class="hljs-number">22</span>;<br><span class="hljs-keyword">let</span> u;<br><span class="hljs-keyword">let</span> a=<span class="hljs-number">1n</span><br><span class="hljs-keyword">let</span> n = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> s); <span class="hljs-comment">// string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> i); <span class="hljs-comment">// number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> b); <span class="hljs-comment">// boolean</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> u); <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> a); <span class="hljs-comment">//bigint</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> n); <span class="hljs-comment">// object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> o); <span class="hljs-comment">// object</span><br></code></pre></div></td></tr></table></figure><blockquote><p>注意 typeof 在某些情况下返回的结果可能会让人费解，但技术上讲还是正确的。比如，调用 typeof null 返回的是 “object” 。这是因为特殊值 null 被认为是一个对空对象的引用。</p></blockquote><h3 id="instanceof-操作符"><a href="#instanceof-操作符" class="headerlink" title="instanceof 操作符"></a>instanceof 操作符</h3><p>typeof 虽然对原始值很有用，但它对引用值的用处不大。我们通常不关心一个值是不是对象，而是想知道它是什么类型的对象。为了解决这个问题，ECMAScript 提供了 instanceof 操作符</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">result = variable <span class="hljs-keyword">instanceof</span> <span class="hljs-title">constructor</span><br></code></pre></div></td></tr></table></figure><p>如果变量是给定引用类型的实例，则 instanceof 操作符返回 true</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(person <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>); <span class="hljs-comment">// 变量persion是Object吗？</span><br><span class="hljs-built_in">console</span>.log(colors <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// 变量colors是Array吗？</span><br><span class="hljs-built_in">console</span>.log(pattern <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">RegExp</span>); <span class="hljs-comment">// 变量pattern是RegExp吗？</span><br></code></pre></div></td></tr></table></figure><p>所有引用值都是 Object 的实例，因此通过 instanceof 操作符检测任何引用值和 Object 构造函数都会返回 true 。类似地，如果用 instanceof 检测原始值，则始终会返回 false ，因为原始值不是对象</p><h3 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h3><p>Undefined 类型只有一个值，就是特殊值 undefined 。当使 用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予 了 undefined 值：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> message<br><span class="hljs-built_in">console</span>.log(message == <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><blockquote><p>注意，包含 undefined 值的变量跟未定义变量是有区别的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> message; <span class="hljs-comment">// 这个变量被声明了，只是值为undefined</span><br><br><span class="hljs-comment">// let age // 确保没有声明过这个变量</span><br><span class="hljs-built_in">console</span>.log(message); <span class="hljs-comment">// &quot;undefined&quot;</span><br><span class="hljs-built_in">console</span>.log(age); <span class="hljs-comment">// 报错</span><br></code></pre></div></td></tr></table></figure><p>在对未初始化的变量调用 typeof 时，返回的结果 是 “undefined” ，但对未声明的变量调用它时，返回的结果还 是 “undefined” 。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> message; <span class="hljs-comment">// 这个变量被声明了，只是值为undefined</span><br><span class="hljs-comment">// make sure this variable isn&#x27;t declared</span><br><span class="hljs-comment">// let age</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> message); <span class="hljs-comment">// &quot;undefined&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> age); <span class="hljs-comment">// &quot;undefined&quot;</span><br></code></pre></div></td></tr></table></figure><p>无论是声明还是未声明， typeof 返回的都是字符串 “undefined” 。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> message; <span class="hljs-comment">// 这个变量被声明了，只是值为undefined</span><br><span class="hljs-comment">// age没有声明</span><br><span class="hljs-keyword">if</span> (message) &#123;<br><span class="hljs-comment">// 这个块不会执行</span><br>&#125;<br><span class="hljs-keyword">if</span> (!message) &#123;<br><span class="hljs-comment">// 这个块会执行</span><br>&#125;<br><span class="hljs-keyword">if</span> (age) &#123;<br><span class="hljs-comment">// 这里会报错</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Null-类型"><a href="#Null-类型" class="headerlink" title="Null 类型"></a>Null 类型</h3><p>Null 类型同样只有一个值，即特殊值 null 。逻辑上讲， null 值表示一个空对象指针，这也是给 typeof 传一个 null 会返回 “object” 的原因</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> car = <span class="hljs-literal">null</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> car) <span class="hljs-comment">// &quot;object&quot;</span><br></code></pre></div></td></tr></table></figure><p>undefined 值是由 null 值派生而来的，因此 ECMA-262 将它们定义为表面上相等</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><p>用等于操作符（ == ）比较 null 和 undefined 始终返回 true 。<br>只要变量要保存对象，而当时又没有那个对象可保存，就要用 null 来填充该变量。这样就可以保持 null 是空对象指针的语义，并进一步将其与 undefined 区分开来。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> message = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> age;<br><span class="hljs-keyword">if</span> (message) &#123;<br><span class="hljs-comment">// 这个块不会执行</span><br>&#125;<br><span class="hljs-keyword">if</span> (!message) &#123;<br><span class="hljs-comment">// 这个块会执行</span><br>&#125;<br><span class="hljs-keyword">if</span> (age) &#123;<br><span class="hljs-comment">// 这个块不会执行</span><br>&#125;<br><span class="hljs-keyword">if</span> (!age) &#123;<br><span class="hljs-comment">// 这个块会执行</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h3><p>Boolean （布尔值）类型是 ECMAScript 中使用最频繁的类型之 一，有两个字面值： true 和 false 。这两个布尔值不同于数值， 因此 true 不等于 1，<br>虽然布尔值只有两个，但所有其他 ECMAScript 类型的值都有相应 布尔值的等价形式。要将一个其他类型的值转换为布尔值，可以调用特定的 Boolean() 转型函数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> message = <span class="hljs-string">&#x27;Hello world!&#x27;</span><br><span class="hljs-keyword">let</span> messageAsBoolean = <span class="hljs-built_in">Boolean</span>(message)<br></code></pre></div></td></tr></table></figure><p>字符串 message 会被转换为布尔值并保存在变 量 messageAsBoolean 中。 Boolean() 转型函数可以在任意类型的数据上调用，而且始终返回一个布尔值</p><table><thead><tr><th>数据类型</th><th>转换为 true 的值</th><th>转换为 false 的值</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>非空字符串</td><td>“” （空字符串）</td></tr><tr><td>Number</td><td>非零数值（包括无穷值、bigint）</td><td>0 、 NaN （参见后面的相关内容）</td></tr><tr><td>Object</td><td>任意对象</td><td>null</td></tr><tr><td>Undefined</td><td>N/A（不存在）</td><td>undefined</td></tr></tbody></table><p>理解以上转换非常重要，因为像 if 等流控制语句会自动执行其 他类型值到布尔值的转换，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> message = <span class="hljs-string">&#x27;Hello world!&#x27;</span><br><span class="hljs-keyword">if</span> (message) &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Value is true&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h3><p>最基本的数值字面量格式是十进制整数，直接写出来即可：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> intNum = <span class="hljs-number">55</span> <span class="hljs-comment">// 整数</span><br></code></pre></div></td></tr></table></figure><p>整数也可以用八进制（以 8 为基数）或十六进制（以 16 为基数）字面量表示。对于八进制字面量，第一个数字必须是零（0），然后是相应的八进制数字（数值 0~7）。如果字面量中包含的数字超出了应有的范围，就会忽略前缀的零，后面的数字序列会被当成十进制数，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> octalNum1 = <span class="hljs-number">070</span>; <span class="hljs-comment">// 八进制的56</span><br><span class="hljs-keyword">let</span> octalNum2 = <span class="hljs-number">079</span>; <span class="hljs-comment">// 无效的八进制值，当成79处理</span><br><span class="hljs-keyword">let</span> octalNum3 = <span class="hljs-number">08</span>; <span class="hljs-comment">// 无效的八进制值，当成8处理</span><br></code></pre></div></td></tr></table></figure><blockquote><p>注意 由于 JavaScript 保存数值的方式，实际中可能存在正零（+0） 和负零（-0）。正零和负零在所有情况下都被认为是等同的</p></blockquote><h4 id="浮点值"><a href="#浮点值" class="headerlink" title="浮点值"></a>浮点值</h4><p>要定义浮点值，数值中必须包含小数点，而且小数点后面必须至 少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> floatNum1 = <span class="hljs-number">1.1</span><br><span class="hljs-keyword">let</span> floatNum2 = <span class="hljs-number">0.1</span><br><span class="hljs-keyword">let</span> floatNum3 = <span class="hljs-number">0.1</span> <span class="hljs-comment">// 有效，但不推荐</span><br></code></pre></div></td></tr></table></figure><p>因为存储浮点值使用的内存空间是存储整数值的两倍，所以 ECMAScript 总是想方设法把值转换为整数。在小数点后面没有数字的情况下，数值就会变成整数。<br>ECMAScript 中科学记数法的格式要求是一个数值（整数或浮点 数）后跟一个大写或小写的字母 e，再加上一个要乘的 10 的多少次幂。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> floatNum = <span class="hljs-number">3.125e7</span> <span class="hljs-comment">// 等于31250000</span><br></code></pre></div></td></tr></table></figure><p>浮点值的精确度最高可达 17 位小数，但在算术计算中远不如整数精确。例如，0.1 加 0.2 得到的不是 0.3，而是 0.300 000 000 000 000 04。由于这种微小的舍入错误，导致很难测试特定的浮点值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (a + b == <span class="hljs-number">0.3</span>) &#123; <span class="hljs-comment">// 别这么干！</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;You got 0.3.&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="值的范围"><a href="#值的范围" class="headerlink" title="值的范围"></a>值的范围</h4><p>由于内存的限制，ECMAScript 并不支持表示这个世界上的所有数值。<br>ECMAScript 可以表示的最小数值保存在 <code>Number.MIN_VALUE</code> 中，这个值在多数浏览器中是 5e-324；可以表示的最大数值保存在 <code>Number.MAX_VALUE</code> 中，这个值在多数浏览器中是 1.797 693 134 862 315 7e+308<br>​</p><p>如果某个计算得到的 数值结果超出了 JavaScript 可以表示的范围，那么这个数值会被自动转换为一个特殊的 <code>Infinit</code>（无穷）值。任何无法表示的负数以<code>-Infinity</code>（负无穷大）表示，任何无法表示的正数以<code>Infinity</code> （正无穷大）表示。<br>​</p><p>如果计算返回正 Infinity 或负 Infinity ，则该值将不能再进一步用于任何计算。<br> 要确定一个值是不是有限大（即介于 JavaScript 能表示的最小值和最大值之间），可以使用<code>isFinite()</code> 函数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> result = <span class="hljs-built_in">Number</span>.MAX_VALUE + <span class="hljs-built_in">Number</span>.MAX_VALUE<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isFinite</span>(result)) <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><p>有一个特殊的数值叫 NaN ，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用 0 除任意数值在其他语言中通常都会导致错误， 从而中止代码执行。但在 ECMAScript 中，0、+0 或-0 相除会返回 NaN</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span>/<span class="hljs-number">0</span>); <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">console</span>.log(-<span class="hljs-number">0</span>/+<span class="hljs-number">0</span>); <span class="hljs-comment">// NaN</span><br><br><span class="hljs-comment">//如果分子是非0值，分母是有符号0或无符号0，则会返回Infinity 或 -Infinity ：</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>/<span class="hljs-number">0</span>); <span class="hljs-comment">// Infinity</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>/-<span class="hljs-number">0</span>); <span class="hljs-comment">// -Infinity</span><br><span class="hljs-comment">// NaN 不等于包括 NaN 在内的任何值</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">NaN</span> == <span class="hljs-literal">NaN</span>); <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><p>ECMAScript 提供了 <code>isNaN()</code> 函数。该函数接收一个参数，可以是任意数据类型，然后判断这个参数是否“不是数值”。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">NaN</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-number">10</span>)); <span class="hljs-comment">// false，10是数值</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;10&quot;</span>)); <span class="hljs-comment">// false，可以转换为数值10</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;blue&quot;</span>)); <span class="hljs-comment">// true，不可以转换为数值</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">true</span>)); <span class="hljs-comment">// false，可以转换为数值1</span><br></code></pre></div></td></tr></table></figure><p>把一个值传给 <code>isNaN()</code> 后，该函数会尝试把它转换为数值。某些非数值的值可以直接转换成数值，如字符串 “10” 或布尔值。 任何不能转换为数值的值都会导致这个函数返回 true</p><blockquote><p>isNaN() 可以用于测试对象。此时， 首先会调用对象的 valueOf() 方法，然后再确定返回的值是否可以转换为数值。如果不能，再调用 toString() 方法， 并测试其返回值</p></blockquote><h4 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h4><p>有 3 个函数可以将非数值转换为数值： <code>Number() </code>、 <code>parseInt()</code> 和<code>parseFloat() </code>。<br>Number() 是转型函数， 可用于任何数据类型。后两个函数主要用于将字符串转换为数值。</p><h5 id="Number-函数基于如下规则执行转换。"><a href="#Number-函数基于如下规则执行转换。" class="headerlink" title="Number() 函数基于如下规则执行转换。"></a>Number() 函数基于如下规则执行转换。</h5><ul><li>布尔值， true 转换为 1， false 转换为 0。</li><li>数值，直接返回。 null ，返回 0。</li><li>undefined ，返回 NaN 。</li><li>字符串，应用以下规则。<ul><li>如果字符串包含数值字符，包括数值字符前面带加、减号的情况，则转换为一个十进制数值。</li><li>如果字符串包含有效的浮点值格式如 “1.1” ，则会转换为相应的浮点值（同样，忽略前面的零）。</li><li>如果字符串包含有效的十六进制格式如 “0xf” ，则会转换为与该十六进制值对应的十进制整数值。</li><li>如果是空字符串（不包含字符），则返回 0。</li><li>如果字符串包含除上述情况之外的其他字符，则返回 NaN 。 对象，调用 valueOf() 方法，并按照上述规则转换返回的值。</li><li>如果转换结果是 NaN ，则调用 toString() 方法，再按照转换字符串的规则转换</li></ul></li><li>对象，调用 valueOf() 方法，并按照上述规则转换返回的值。如果转换结果是 NaN ，则调用 toString() 方法，再按照转换字符串的规则转换。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num1 = <span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;Hello world!&quot;</span>); <span class="hljs-comment">// NaN</span><br><span class="hljs-keyword">let</span> num2 = <span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">let</span> num3 = <span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;000011&quot;</span>); <span class="hljs-comment">// 11</span><br><span class="hljs-keyword">let</span> num4 = <span class="hljs-built_in">Number</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 1</span><br></code></pre></div></td></tr></table></figure><p>考虑到用 Number() 函数转换字符串时相对复杂且有点反常规，通常在需要得到整数时可以优先使用 parseInt() 函数。</p><h5 id="parseInt-函数更专注于字符串是否包含数值模式。"><a href="#parseInt-函数更专注于字符串是否包含数值模式。" class="headerlink" title="parseInt() 函数更专注于字符串是否包含数值模式。"></a>parseInt() 函数更专注于字符串是否包含数值模式。</h5><p>如果第一个字符不是数值字符、加号或减号， parseInt() 立即返回 NaN 。这意味着空字符串也会返回 NaN （这一点跟 Number() 不一样，它返回 0）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num1 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;1234blue&quot;</span>); <span class="hljs-comment">// 1234</span><br><span class="hljs-keyword">let</span> num2 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// NaN</span><br><span class="hljs-keyword">let</span> num3 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;0xA&quot;</span>); <span class="hljs-comment">// 10，解释为十六进制整数</span><br><span class="hljs-keyword">let</span> num4 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-number">22.5</span>); <span class="hljs-comment">// 22</span><br><span class="hljs-keyword">let</span> num5 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;70&quot;</span>); <span class="hljs-comment">// 70，解释为十进制值</span><br><span class="hljs-keyword">let</span> num6 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;0xf&quot;</span>); <span class="hljs-comment">// 15，解释为十六进制整数</span><br></code></pre></div></td></tr></table></figure><p>不同的数值格式很容易混淆，因此 parseInt() 也接收第二个参数，用于指定底数（进制数）。如果知道要解析的值是十六进制，那么可以传入 16 作为第二个参数，以便正确解析：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;0xAF&quot;</span>, <span class="hljs-number">16</span>); <span class="hljs-comment">// 175</span><br><span class="hljs-keyword">let</span> num1 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;AF&quot;</span>, <span class="hljs-number">16</span>); <span class="hljs-comment">// 175</span><br><span class="hljs-keyword">let</span> num2 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;AF&quot;</span>); <span class="hljs-comment">// NaN 转换检测到第一个字符就是非数值字符，随即自动停止并返回 NaN </span><br></code></pre></div></td></tr></table></figure><p>通过第二个参数，可以极大扩展转换后获得的结果类型</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num1 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 2，按二进制解析</span><br><span class="hljs-keyword">let</span> num2 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-number">8</span>); <span class="hljs-comment">// 8，按八进制解析</span><br><span class="hljs-keyword">let</span> num3 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">// 10，按十进制解析</span><br><span class="hljs-keyword">let</span> num4 = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-number">16</span>); <span class="hljs-comment">// 16，按十六进制解析</span><br></code></pre></div></td></tr></table></figure><h5 id="parseFloat-函数的工作方式跟-parseInt-函数类似，-都是从位置-0-开始检测每个字符"><a href="#parseFloat-函数的工作方式跟-parseInt-函数类似，-都是从位置-0-开始检测每个字符" class="headerlink" title="parseFloat() 函数的工作方式跟 parseInt() 函数类似， 都是从位置 0 开始检测每个字符"></a>parseFloat() 函数的工作方式跟 parseInt() 函数类似， 都是从位置 0 开始检测每个字符</h5><p>它也是解析到字符串末尾或者解析到一个无效的浮点数值字符为止。这意味着第一次出现的小数点是有效的，但第二次出现的小数点就无效了，此时字符串的剩余字符都会被忽略。因此，”22.34.5” 将转换成 22.34<br>parseFloat() 函数的另一个不同之处在于，它始终忽略字符串开头的零。 十六进制数值始终会返回 0。 因为 parseFloat() 只解析十进制值，因此不能指定底数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num1 = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;1234blue&quot;</span>); <span class="hljs-comment">// 1234，按整数解析</span><br><span class="hljs-keyword">let</span> num2 = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;0xA&quot;</span>); <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">let</span> num3 = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;22.5&quot;</span>); <span class="hljs-comment">// 22.5</span><br><span class="hljs-keyword">let</span> num4 = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;22.34.5&quot;</span>); <span class="hljs-comment">// 22.34</span><br><span class="hljs-keyword">let</span> num5 = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;0908.5&quot;</span>); <span class="hljs-comment">// 908.5</span><br><span class="hljs-keyword">let</span> num6 = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;3.125e7&quot;</span>); <span class="hljs-comment">//31250000</span><br></code></pre></div></td></tr></table></figure><h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h3><p>String （字符串）数据类型表示零或多个 16 位 Unicode 字符序列</p><h4 id="字符字面量"><a href="#字符字面量" class="headerlink" title="字符字面量"></a>字符字面量</h4><p>字符串数据类型包含一些字符字面量，用于表示非打印字符或有 其他用途的字符，如下表所示：</p><table><thead><tr><th>字面量</th><th>含义</th></tr></thead><tbody><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>制表</td></tr><tr><td>\b</td><td>退格</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\\</td><td>反斜杠（ \ ）</td></tr><tr><td>&#39;</td><td>单引号（ ‘ ），在字符串以单引号标示时使 用，例如 ‘He said, &#39;hey.&#39;‘</td></tr><tr><td>&quot;</td><td>双引号（ “ ），在字符串以双引号标示时使 用，例如 “He said, &quot;hey.&quot;“</td></tr><tr><td>\`</td><td>反引号（ ` ），在字符串以反引号标示时 使用，例如 `He said, \`hey.\``</td></tr><tr><td>\xnn</td><td>以十六进制编码 nn 表示的字符（其中 n 是 十六进制数字 0~F），例如 \x41 等于 “A”</td></tr><tr><td>\unnnn</td><td>以十六进制编码 nnnn 表示的 Unicode 字符 （其中 n 是十六进制数字 0~F），例如 \u03a3 等于希腊字符 “Σ”</td></tr></tbody></table><h4 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h4><p>ECMAScript 中的字符串是不可变的（immutable），意思是一旦创建，它们的值就不能变了。要修改某个变量中的字符串值，必须先销毁原始的字符串，然后将包含新值的另一个字符串保存到该变量</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> lang = <span class="hljs-string">&#x27;Java&#x27;</span><br>lang = lang + <span class="hljs-string">&#x27;Script&#x27;</span> <span class="hljs-comment">//JavaScript</span><br></code></pre></div></td></tr></table></figure><h4 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h4><p>有两种方式把一个值转换为字符串。首先是使用几乎所有值都有的<code>toString()</code> 方法。这个方法唯一的用途就是返回当前值的字符串等价物。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age = <span class="hljs-number">11</span>;<br><span class="hljs-keyword">let</span> ageAsString = age.toString(); <span class="hljs-comment">// 字符串&quot;11&quot;</span><br><span class="hljs-keyword">let</span> found = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">let</span> foundAsString = found.toString(); <span class="hljs-comment">// 字符串&quot;true&quot;</span><br></code></pre></div></td></tr></table></figure><p><strong>toString() 方法可见于数值、布尔值、对象和字符串值。</strong>（没错，字符串值也有 toString() 方法，该方法只是简单地返回自身的一个副本。）<strong>null 和 undefined 值没有 toString() 方法</strong>。<br>toString() 返回数值的十进制字符串表示。而通过传入参 数，可以得到数值的二进制、八进制、十六进制，或者其他任何 有效基数的字符串表示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(num.toString()); <span class="hljs-comment">// &quot;10&quot;</span><br><span class="hljs-built_in">console</span>.log(num.toString(<span class="hljs-number">2</span>)); <span class="hljs-comment">// &quot;1010&quot;</span><br><span class="hljs-built_in">console</span>.log(num.toString(<span class="hljs-number">8</span>)); <span class="hljs-comment">// &quot;12&quot;</span><br><span class="hljs-built_in">console</span>.log(num.toString(<span class="hljs-number">10</span>)); <span class="hljs-comment">// &quot;10&quot;</span><br><span class="hljs-built_in">console</span>.log(num.toString(<span class="hljs-number">16</span>)); <span class="hljs-comment">// &quot;a&quot;</span><br></code></pre></div></td></tr></table></figure><p>如果你不确定一个值是不是 null 或 undefined ，可以使用 String() 转型函数，它始终会返回表示相应类型值的字符串。<br><code>String()</code> 函数遵循如下规则。</p><ul><li>如果值有 toString() 方法，则调用该方法（不传参数） 并返回结果。</li><li>如果值是 null ，返回 “null” 。</li><li>如果值是 undefined ，返回 “undefined” 。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> value1 = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> value2 = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">let</span> value3 = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> value4;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>(value1)); <span class="hljs-comment">// &quot;10&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>(value2)); <span class="hljs-comment">// &quot;true&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>(value3)); <span class="hljs-comment">// &quot;null&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>(value4)); <span class="hljs-comment">// &quot;undefined&quot;</span><br></code></pre></div></td></tr></table></figure><p>因为 null 和 undefined 没有 toString() 方法，所以 String() 方法就直接返回了这两个 值的字面量文本。</p><h4 id="模板字面量"><a href="#模板字面量" class="headerlink" title="模板字面量"></a>模板字面量</h4><p>ECMAScript 6 新增了使用模板字面量定义字符串的能力。与使用 单引号或双引号不同，模板字面量保留换行字符，可以跨行定义字符串</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> pageHTML = <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;div&gt;</span><br><span class="hljs-string">    &lt;a href=&quot;#&quot;&gt;</span><br><span class="hljs-string">    &lt;span&gt;Jake&lt;/span&gt;</span><br><span class="hljs-string">    &lt;/a&gt;</span><br><span class="hljs-string">  &lt;/div&gt;`</span>;<br><br></code></pre></div></td></tr></table></figure><p>由于模板字面量会保持反引号内部的空格，因此在使用时要格外注意</p><h4 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h4><p>模板字面量最常用的一个特性是支持字符串插值，也就是可以在一个连续定义中插入一个或多个值<br>字符串插值通过在<code>$&#123;&#125;</code>中使用一个 JavaScript 表达式实现</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> value = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">let</span> exponent = <span class="hljs-string">&#x27;second&#x27;</span>;<br><span class="hljs-comment">// 以前，字符串插值是这样实现的：</span><br><span class="hljs-keyword">let</span> interpolatedString =value + <span class="hljs-string">&#x27; to the &#x27;</span> + exponent + <span class="hljs-string">&#x27; power is &#x27;</span> + (value * value);<br><span class="hljs-comment">// 现在，可以用模板字面量这样实现：</span><br><span class="hljs-keyword">let</span> interpolatedTemplateLiteral =<span class="hljs-string">`<span class="hljs-subst">$&#123; value &#125;</span> to the <span class="hljs-subst">$&#123; exponent &#125;</span> power is <span class="hljs-subst">$&#123; value * value &#125;</span>`</span>;<br><span class="hljs-built_in">console</span>.log(interpolatedString); <span class="hljs-comment">//5 to the second power is 25</span><br><span class="hljs-built_in">console</span>.log(interpolatedTemplateLiteral); <span class="hljs-comment">//5 to the second power is 25</span><br></code></pre></div></td></tr></table></figure><h4 id="模板字面量标签函数"><a href="#模板字面量标签函数" class="headerlink" title="模板字面量标签函数"></a>模板字面量标签函数</h4><p>模板字面量也支持定义标签函数（tag function），而通过标签函数可以自定义插值行为。标签函数会接收被插值记号分隔后的模板和对每个表达式求值的结果</p><h4 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h4><p>使用模板字面量也可以直接获取原始的模板字面量内容（如换行符或 Unicode 字符），而不是被转换后的字符表示。为此，可以使用默认的 String.raw 标签函数：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// Unicode示例</span><br><span class="hljs-comment">// \u00A9是版权符号</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`\u00A9`</span>); <span class="hljs-comment">// ©</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>.raw<span class="hljs-string">`\u00A9`</span>); <span class="hljs-comment">// \u00A9</span><br></code></pre></div></td></tr></table></figure><h3 id="Symbol-类型"><a href="#Symbol-类型" class="headerlink" title="Symbol 类型"></a>Symbol 类型</h3><p>Symbol （符号）是 ECMAScript 6 新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。</p><h4 id="符号的基本用法"><a href="#符号的基本用法" class="headerlink" title="符号的基本用法"></a>符号的基本用法</h4><p>符号需要使用 Symbol() 函数初始化。因为符号本身是原始类型，所以 typeof 操作符对符号返回 symbol</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> sym = <span class="hljs-built_in">Symbol</span>()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> sym) <span class="hljs-comment">// symbol</span><br></code></pre></div></td></tr></table></figure><p>Symbol() 函数不能用作构造函数，与 new 关键字一起使用。这样做是为了避免创建符号包装对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> mySymbol = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Symbol</span>() <span class="hljs-comment">// TypeError:Symbol is not a constructor</span><br></code></pre></div></td></tr></table></figure><p>如果你确实想使用符号包装对象，可以借用 Object() 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> mySymbol = <span class="hljs-built_in">Symbol</span>()<br><span class="hljs-keyword">let</span> myWrappedSymbol = <span class="hljs-built_in">Object</span>(mySymbol)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> myWrappedSymbol) <span class="hljs-comment">//&quot;object&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="BigInt-类型"><a href="#BigInt-类型" class="headerlink" title="BigInt 类型"></a>BigInt 类型</h3><p>在 ES2020 之前，JavaScript 只有一种数值类型：number(数字)，而之后为了安全表达比 -9007199254740991 ~ 9007199254740991 安全范围之外的数字。引入了 BigInt 类型<br>BigInt 可以表示任意大的整数。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul><li>直接在数字后面加一个 n</li><li>调用 BigInt()构造函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">BigInt</span>(value) <span class="hljs-comment">//value: 创建对象的数值。可以是字符串或者整数。</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> bigInt = <span class="hljs-number">9007199254740992n</span>; <span class="hljs-comment">//通过直接在数字后面加n</span><br><span class="hljs-keyword">const</span> bigNumber = <span class="hljs-built_in">BigInt</span>(<span class="hljs-number">9007199254740992</span>); <span class="hljs-comment">// 对十进制数字使用BigInt函数</span><br><span class="hljs-keyword">const</span> bigString = <span class="hljs-built_in">BigInt</span>(<span class="hljs-string">&quot;9007199254740992&quot;</span>); <span class="hljs-comment">//对String类型的使用BigInt函数，先隐式转换为十进制的数字，再显式转换为BigIn类型</span><br><span class="hljs-keyword">const</span> bigHex = <span class="hljs-built_in">BigInt</span>(<span class="hljs-number">0x20000000000000</span>); <span class="hljs-comment">// 对十六进制数字使用BigInt函数</span><br><span class="hljs-keyword">const</span> bigBin = <span class="hljs-built_in">BigInt</span>(<span class="hljs-number">0b100000000000000000000000000000000000000000000000000000</span>); <span class="hljs-comment">//对二进制数字使用BigInt函数</span><br></code></pre></div></td></tr></table></figure><blockquote><p>注意， BigInt() 不是构造函数，因此不能使用 new 操作符</p></blockquote><h4 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h4><p>我们可以通过 typeof 操作符来判断是否为 BigInt 类型（返回字符串”bigint”）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> <span class="hljs-number">1n</span> === <span class="hljs-string">&#x27;bigint&#x27;</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">BigInt</span>(<span class="hljs-string">&#x27;1&#x27;</span>) === <span class="hljs-string">&#x27;bigint&#x27;</span>; <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><p>同样的，我们也可以用最通用的 Object.prototype.toString 方法（返回字符串”[object BigInt]”）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-number">10n</span>) === <span class="hljs-string">&#x27;[object BigInt]&#x27;</span> <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><p>使用 Object 包装后， BigInt 被认为是一个普通 “object” ：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Object</span>(<span class="hljs-number">1n</span>) === <span class="hljs-string">&#x27;object&#x27;</span> <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><p>以下操作符可以和 BigInt 一起使用： +、*、-、**、% 。<br>除 &gt;&gt;&gt; （无符号右移）之外的 位操作 也可以支持。（因为 BigInt 都是有符号的 &gt;&gt;&gt; （无符号右移）不能用于 BigInt）。</p><table><thead><tr><th><strong>符号</strong></th><th><strong>名称</strong></th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>%</td><td>求余</td></tr><tr><td>**</td><td>求幂</td></tr><tr><td>&lt;&lt;</td><td>左移位</td></tr><tr><td>&gt;&gt;</td><td>右移位</td></tr></tbody></table><p>当 BigInt 使用/操作符时，带小数的运算会被取整。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> expected = <span class="hljs-number">4n</span> / <span class="hljs-number">2n</span> <span class="hljs-comment">//2n</span><br><span class="hljs-keyword">const</span> rounded = <span class="hljs-number">5n</span> / <span class="hljs-number">2n</span>; <span class="hljs-comment">//2n, not 2.5n</span><br></code></pre></div></td></tr></table></figure><p>BigInt 类型虽然和 Number 很像，可以做各种数学运算，但是在运算过程中要注意两点:</p><ul><li>BigInt 类型不能用 Math 对象中的方法。</li><li>不能和 Number 示例混合运算。因为 JavaScript 在处理不同类型的运算时，会把他们先转换为同一类型，而 BigInt 类型变量在被隐式转换为 Number 类型时，可能会丢失精度，或者直接报错</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> number = <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> bigInt = <span class="hljs-number">9007199254740993n</span><br>number + bigInt <span class="hljs-comment">//  TypeError: Cannot mix BigInt and other types</span><br></code></pre></div></td></tr></table></figure><h4 id="BigInt-类型和其他类型比较"><a href="#BigInt-类型和其他类型比较" class="headerlink" title="BigInt 类型和其他类型比较"></a>BigInt 类型和其他类型比较</h4><h5 id="BigInt-和-Number-不是严格相等的，但是宽松相等的"><a href="#BigInt-和-Number-不是严格相等的，但是宽松相等的" class="headerlink" title="BigInt 和 Number 不是严格相等的，但是宽松相等的"></a>BigInt 和 Number 不是严格相等的，但是宽松相等的</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">10n</span> === <span class="hljs-number">10</span> <span class="hljs-comment">// false</span><br><span class="hljs-number">10n</span> == <span class="hljs-number">10</span><span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><p>Number 和 BigInt 可以进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">1n</span> &lt; <span class="hljs-number">2</span>;        <span class="hljs-comment">// true</span><br><span class="hljs-number">2n</span> &gt; <span class="hljs-number">1</span>;        <span class="hljs-comment">// true</span><br><br><span class="hljs-number">2n</span> &lt; <span class="hljs-number">2</span>;        <span class="hljs-comment">// false</span><br><span class="hljs-number">2n</span> &lt;= <span class="hljs-number">2</span>; <span class="hljs-comment">// true</span><br><br><span class="hljs-number">2n</span> &gt; <span class="hljs-number">2</span>;        <span class="hljs-comment">// false</span><br><span class="hljs-number">2n</span> &gt;= <span class="hljs-number">2</span>;     <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><p>两者也可以混在一个数组内并排序。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mixed = [<span class="hljs-number">4n</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">12n</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0n</span>];    <span class="hljs-comment">// [4n, 6, -12n, 10, 4, 0, 0n]</span><br>mixed.sort();    <span class="hljs-comment">// [-12n, 0, 0n, 10, 4n, 4, 6]</span><br></code></pre></div></td></tr></table></figure><p>BigInt 在需要转换成 Boolean 的时表现跟 Number 类似：如通过 Boolean 函数转换；用于 Logical Operators ||, &amp;&amp;, 和 ! 的操作数；或者用于在像 if statement 这样的条件语句中。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-number">0n</span>) &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hello from the if!&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hello from the else!&#x27;</span>);<br>&#125;<span class="hljs-comment">// ↪ &quot;Hello from the else!&quot;</span><br><br><span class="hljs-number">0n</span> || <span class="hljs-number">12n</span><span class="hljs-comment">// ↪ 12n</span><br><br><span class="hljs-number">0n</span> &amp;&amp; <span class="hljs-number">12n</span><span class="hljs-comment">// ↪ 0n</span><br><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0n</span>)<span class="hljs-comment">// ↪ false</span><br><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-number">12n</span>)<span class="hljs-comment">// ↪ true</span><br><br>!<span class="hljs-number">12n</span><span class="hljs-comment">// ↪ false</span><br><br>!<span class="hljs-number">0n</span><span class="hljs-comment">// ↪ true</span><br><br></code></pre></div></td></tr></table></figure><p>它在某些方面类似于 Number ，但是也有几个关键的不同点：不能用与 Math 对象中的方法；不能和任何 Number 实例混合运算，两者必须转换成同一种类型。在两种类型来回转换时要小心，因为 BigInt 变量在转换成 Number 变量时可能会丢失精度。</p><h5 id="不允许隐式类型转换"><a href="#不允许隐式类型转换" class="headerlink" title="不允许隐式类型转换"></a>不允许隐式类型转换</h5><p>因为隐式类型转换可能丢失信息，所以不允许在 bigint 和 Number 之间进行混合操作。当混合使用大整数和浮点数时，结果值可能无法由 BigInt 或 Number 精确表示。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">10n</span> + <span class="hljs-number">1</span>;    <span class="hljs-comment">// Uncaught TypeError: Cannot mix BigInt and other types, use explicit conversions</span><br><span class="hljs-built_in">Math</span>.max(<span class="hljs-number">2n</span>, <span class="hljs-number">4n</span>, <span class="hljs-number">6n</span>);    <span class="hljs-comment">// TypeError...</span><br></code></pre></div></td></tr></table></figure><h5 id="BigInt-和-String"><a href="#BigInt-和-String" class="headerlink" title="BigInt 和 String"></a>BigInt 和 String</h5><p>难免会遇到数字和字符串的转换，BigInt 也不例外，不过可惜的是 BigInt 转为 String 时，其标志性的 n 会被省略，如</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">String</span>(<span class="hljs-number">10n</span>) <span class="hljs-comment">// &#x27;10&#x27;</span><br><span class="hljs-string">&#x27;&#x27;</span> + <span class="hljs-number">11n</span>;    <span class="hljs-comment">// &#x27;11&#x27;</span><br></code></pre></div></td></tr></table></figure><h5 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h5><p>BigInt 没有 Number 的正零(+0)和负零(-0)之分。因为 BigInt 表示的是整数</p><h5 id="无穷和-NaN-判断"><a href="#无穷和-NaN-判断" class="headerlink" title="无穷和 NaN 判断"></a>无穷和 NaN 判断</h5><p>很有趣的现象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">isFinite</span>(<span class="hljs-number">10n</span>);    <span class="hljs-comment">// Uncaught TypeError: Cannot convert a BigInt value to a number</span><br><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-number">10n</span>);    <span class="hljs-comment">// false</span><br><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-number">10n</span>);    <span class="hljs-comment">// Uncaught TypeError: Cannot convert a BigInt value to a number</span><br><span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-number">10n</span>);    <span class="hljs-comment">// false</span><br><br><span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-number">10n</span>)===<span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-number">10n</span>) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><p>由此我们可以看出 isFinite()和 Number.isFinite()、isNaN()和 Number.isNaN()的区别：<br>isFinite(val)/isNaN(val)的工作机制都是讲参数值 val 转为数值后再进行比较判断，而 Number.isFinite(val)/Number.isNaN(val)则可以理解为直接简单粗暴的变量全等判断（val === Infinity/val === NaN）</p><h3 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h3><p>ECMAScript 中的对象其实就是一组数据和功能的集合。对象通过 new 操作符后跟对象类型的名称来创建。开发者可以通过创建 Object 类型的实例来创建自己的对象，然后再给对象添加属性和方法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br></code></pre></div></td></tr></table></figure><p>但 ECMAScript 只要求在给构造函数提供参数时使用括号。如果没有参数，如上面的例子所示，那么完全可以省略括号（不推荐）：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>() <span class="hljs-comment">// 合法，但不推荐</span><br></code></pre></div></td></tr></table></figure><h4 id="每个-Object-实例都有如下属性和方法。"><a href="#每个-Object-实例都有如下属性和方法。" class="headerlink" title="每个 Object 实例都有如下属性和方法。"></a>每个 Object 实例都有如下属性和方法。</h4><ul><li>constructor ：用于创建当前对象的函数。在前面的例子中，这个属性的值就是 Object() 函数。</li><li>hasOwnProperty(propertyName) ：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如 o.hasOwnProperty(“name”) ）。</li><li>isPrototypeof(object) ：用于判断当前对象是否为另一个对象的原型。</li><li>propertyIsEnumerable(propertyName) ：用于判断给定的属性是否可以使用 for-in 语句枚举。与 hasOwnProperty() 一样，属性名必须是字符串。</li><li>toLocaleString() ：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。</li><li>toString() ：返回对象的字符串表示。</li><li>valueOf() ：返回对象对应的字符串、数值或布尔值表示。通常与 toString() 的返回值相同。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>JavaScript 变量可以保存两种类型的值：原始值和引用值。原始值 可能是以下 7 种原始数据类型之一： Undefined 、 Null 、 Boolean 、 Number 、 String 、 Symbol 和 Bigint 。原始值和引用值有以下特点。</p><ul><li>原始值大小固定，因此保存在栈内存上。</li><li>从一个变量到另一个变量复制原始值会创建该值的第二个副本。</li><li>引用值是对象，存储在堆内存上。 包含引用值的变量实际上只包含指向相应对象的一个指针，而不是对象本身。</li><li>从一个变量到另一个变量复制引用值只会复制指针，因此结果是两个变量都指向同一个对象。</li><li>typeof 操作符可以确定值的原始类型，而 instanceof 操作符用于确保值的引用类型</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>JavaScript高级程序设计第四版笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React使用require动态加载图片不显示问题</title>
    <link href="/2021/11/11/React%E4%BD%BF%E7%94%A8require%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
    <url>/2021/11/11/React%E4%BD%BF%E7%94%A8require%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="React-使用-require-动态加载图片不显示"><a href="#React-使用-require-动态加载图片不显示" class="headerlink" title="React 使用 require 动态加载图片不显示"></a>React 使用 require 动态加载图片不显示</h1><h3 id="图片、头像加载不出来"><a href="#图片、头像加载不出来" class="headerlink" title="图片、头像加载不出来"></a>图片、头像加载不出来</h3><p>发现头像使用本地导入方法不能正常显示<br>导入头像</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">icon: require(`..<span class="hljs-regexp">/../</span>assets<span class="hljs-regexp">/images/</span>头像<span class="hljs-variable">$&#123;i + 1&#125;</span>.png`), <span class="hljs-regexp">//</span> 不能使用import<br></code></pre></div></td></tr></table></figure><p>结果会报错</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-link">http://localhost:3000/</span>[<span class="hljs-string">object%20Module</span>] 404 (Not Found)<br></code></pre></div></td></tr></table></figure><p>打印头像</p><p>仔细检查发现图片的 base64 编码是在 default 属性里面，如下：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Module</span> &#123;default: &#x27;data:image/png;base<span class="hljs-number">64</span>,iVBORw<span class="hljs-number">0</span>KGgoAAAANSUhEUgAAADAA…LGcWTnrPs<span class="hljs-number">8</span>HKz<span class="hljs-number">6</span>/<span class="hljs-number">8</span>FGADjS<span class="hljs-number">7</span>ldZb/fjwAAAABJRU<span class="hljs-number">5</span>ErkJggg==&#x27;, __esModule: true, Symbol(Symbol.toStringTag): &#x27;Module&#x27;&#125;<br></code></pre></div></td></tr></table></figure><h4 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h4><p>将头像上传到自己的服务器上，使用线上的文件就能成功显示</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">icon</span>: `http://imgs.jackhoo.icu/%E<span class="hljs-number">5</span>%A<span class="hljs-number">4</span>%B<span class="hljs-number">4</span>%E<span class="hljs-number">5</span>%<span class="hljs-number">83</span>%<span class="hljs-number">8</span>F<span class="hljs-variable">$&#123;i + 1&#125;</span>.png`,<br><br></code></pre></div></td></tr></table></figure><h4 id="第二种方法："><a href="#第二种方法：" class="headerlink" title="第二种方法："></a>第二种方法：</h4><p>因为图片的 base64 编码是在 default 属性里面<br>在此进行 require 进行引入图片时，加入 default 即可，代码如下：<br>例如</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript">&lt;img src=&#123;<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./cs.jpg&#x27;</span>).<span class="hljs-keyword">default</span>&#125;/&gt;<br></code></pre></div></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">icon: require(`..<span class="hljs-regexp">/../</span>assets<span class="hljs-regexp">/images/</span>头像<span class="hljs-variable">$&#123;i + 1&#125;</span>.png`).default<br></code></pre></div></td></tr></table></figure><p>加入.default 后图片进行正常显示.</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>require</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>启动MongoDB数据库时报错</title>
    <link href="/2021/11/11/%E5%90%AF%E5%8A%A8MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E6%8A%A5%E9%94%99/"/>
    <url>/2021/11/11/%E5%90%AF%E5%8A%A8MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="启动-MongoDB-数据库时报错"><a href="#启动-MongoDB-数据库时报错" class="headerlink" title="启动 MongoDB 数据库时报错"></a>启动 MongoDB 数据库时报错</h1><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> utf8Encoder = <span class="hljs-keyword">new</span> TextEncoder();<br></code></pre></div></td></tr></table></figure><p>还是老问题，加入 util 包</p><p>在 node_modules&gt;whatwg url&gt;dist 中打开 encoding.js 文件夹</p><p>然后写下这个代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-keyword">var</span> util= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><span class="hljs-keyword">const</span> utf8Encoder = <span class="hljs-keyword">new</span> util.TextEncoder();<br><span class="hljs-keyword">const</span> utf8Decoder = <span class="hljs-keyword">new</span> util.TextEncoder(<span class="hljs-string">&quot;utf-8&quot;</span>, &#123; <span class="hljs-attr">ignoreBOM</span>: <span class="hljs-literal">true</span> &#125;);<br></code></pre></div></td></tr></table></figure><p>代替</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-keyword">const</span> utf8Encoder = <span class="hljs-keyword">new</span> TextEncoder();<br><span class="hljs-keyword">const</span> utf8Decoder = <span class="hljs-keyword">new</span> TextEncoder(<span class="hljs-string">&quot;utf-8&quot;</span>, &#123; <span class="hljs-attr">ignoreBOM</span>: <span class="hljs-literal">true</span> &#125;);<br></code></pre></div></td></tr></table></figure><p>您所缺少的只是包含 util 的这一小部分</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> util= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><span class="hljs-keyword">const</span> utf8Encoder = <span class="hljs-keyword">new</span> util.TextEncoder();<br><span class="hljs-keyword">const</span> utf8Decoder = <span class="hljs-keyword">new</span> util.TextEncoder(<span class="hljs-string">&quot;utf-8&quot;</span>, &#123; <span class="hljs-attr">ignoreBOM</span>: <span class="hljs-literal">true</span> &#125;);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="/2021/10/14/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/10/14/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MongoDB-学习笔记"><a href="#MongoDB-学习笔记" class="headerlink" title="MongoDB 学习笔记"></a>MongoDB 学习笔记</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="数据库-database"><a href="#数据库-database" class="headerlink" title="数据库(database)"></a>数据库(database)</h3><h4 id="什么是数据库？"><a href="#什么是数据库？" class="headerlink" title="什么是数据库？"></a>什么是数据库？</h4><p>存储数据的仓库<br>​</p><h4 id="为什么要有数据库？"><a href="#为什么要有数据库？" class="headerlink" title="为什么要有数据库？"></a>为什么要有数据库？</h4><p>首先数据是存储在内存里运行的，如果一断电的话，数据就会丢失，所以可以将数据存储到硬盘，但是硬盘没有联网，所以有了可以联网也可以存储数据的数据库。<br>​</p><h4 id="数据库能做什么？"><a href="#数据库能做什么？" class="headerlink" title="数据库能做什么？"></a>数据库能做什么？</h4><p>数据库可以存储数据，并且这些数据还可以连接网络，也就是和硬盘相比，可以不用将数据库到处带，就像是网盘。<br>​</p><h4 id="数据库的服务器和客户端"><a href="#数据库的服务器和客户端" class="headerlink" title="数据库的服务器和客户端"></a>数据库的服务器和客户端</h4><p>值得注意的是数据库它也是分为服务器和客户端的</p><ul><li>服务器：保存数据的</li><li>客户端：操作和存储数据的(CRUD)</li></ul><h4 id="数据库的分类"><a href="#数据库的分类" class="headerlink" title="数据库的分类"></a>数据库的分类</h4><h5 id="按照关系型分类："><a href="#按照关系型分类：" class="headerlink" title="按照关系型分类："></a>按照关系型分类：</h5><ul><li>1、关系型数据库(MySQL、Orcal 等)</li><li>2、非关系型数据库(MongoDB)</li></ul><p>​</p><h5 id="关系型和非关系型的区别"><a href="#关系型和非关系型的区别" class="headerlink" title="关系型和非关系型的区别:"></a>关系型和非关系型的区别:</h5><p>总而言之就是：关系型的是创建表格, 非关系型是可以创建任意多个文档。<br>​</p><p>1、数据存储方式不同。<br>关系型和非关系型数据库的主要差异是数据存储的方式。关系型数据天然就是表格式的，因此存储在数据表的行和列中。数据表可以彼此关联协作存储，也很容易提取数据。<br>与其相反，非关系型数据不适合存储在数据表的行和列中，而是大块组合在一起。非关系型数据通常存储在数据集中，就像文档、键值对或者图结构。你的数据及其特性是选择数据存储和提取方式的首要影响因素。<br>​</p><p>2、扩展方式不同。<br>SQL 和 NoSQL 数据库最大的差别可能是在扩展方式上，要支持日益增长的需求当然要扩展。<br>要支持更多并发量，SQL 数据库是纵向扩展，也就是说提高处理能力，使用速度更快速的计算机，这样处理相同的数据集就更快了。<br>因为数据存储在关系表中，操作的性能瓶颈可能涉及很多个表，这都需要通过提高计算机性能来客服。虽然 SQL 数据库有很大扩展空间，但最终肯定会达到纵向扩展的上限。而 NoSQL 数据库是横向扩展的。<br>而非关系型数据存储天然就是分布式的，NoSQL 数据库的扩展可以通过给资源池添加更多普通的数据库服务器(节点)来分担负载。<br>​</p><p>3、对事务性的支持不同。<br>如果数据操作需要高事务性或者复杂数据查询需要控制执行计划，那么传统的 SQL 数据库从性能和稳定性方面考虑是你的最佳选择。SQL 数据库支持对事务原子性细粒度控制，并且易于回滚事务。</p><h2 id="什么是-MongoDB"><a href="#什么是-MongoDB" class="headerlink" title="什么是 MongoDB?"></a>什么是 MongoDB?</h2><p>一种数据库，而且是非关系型数据库。<br>MongoDB 是由 C++语言编写的，是一个基于分布式文件存储的开源数据库系统。<br>在高负载的情况下，添加更多的节点，可以保证服务器性能。<br>MongoDB 旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。<br>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档<br>​</p><h3 id="MongoDB-的优点"><a href="#MongoDB-的优点" class="headerlink" title="MongoDB 的优点"></a>MongoDB 的优点</h3><p>1、可以快速开发 web 型应用，因为灵活，不用像关系型数据库一样需要建表<br>2、MongoDB 存储的是文档（document），文档内存储的是类似 json 的结构，所谓 json 就是字符串数组</p><h3 id="MongoDB-常见的命令"><a href="#MongoDB-常见的命令" class="headerlink" title="MongoDB 常见的命令"></a>MongoDB 常见的命令</h3><ul><li>开启服务器: net start MongoDB</li><li>关闭服务器: net stop MongoDB</li><li>打开客户端: mongo，在 cmd 窗口输入便可以连接上数据库</li></ul><h3 id="MongoDB-的数据库分类"><a href="#MongoDB-的数据库分类" class="headerlink" title="MongoDB 的数据库分类"></a>MongoDB 的数据库分类</h3><ul><li>数据库（database）：用来存储集合的，而且数据库也有分大小。</li><li>集合（collection）：集合类似于数组，用于存放文档的</li><li>文档（document）： 文档是 MongoDB 数据库中最小的单位，我们要操作的目标就是文档。</li></ul><p><img src="https://i.loli.net/2021/10/13/ClDB28tgM4mHKNx.png#id=Gm3RW&originHeight=304&originWidth=679&originalType=binary&ratio=1&status=done&style=none"></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">MongoDB关系: 数据库（database） &gt; 集合（collection）&gt; 文档（<span class="hljs-built_in">document</span>）<br></code></pre></div></td></tr></table></figure><blockquote><p>在 MongoDB 中不需要自己创建数据库和集合，便可以直接创建文档，其实就是在创建文档的同时，会将数据库和集合创建了。</p></blockquote><h2 id="安装配置-MongoDB"><a href="#安装配置-MongoDB" class="headerlink" title="安装配置 MongoDB"></a>安装配置 MongoDB</h2><h3 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h3><p>在官网下载<a href="https://www.mongodb.com/try/download/community">MongoDB</a>，选择免费的社区服务，对应操作系统版本<br>​</p><p><img src="https://i.loli.net/2021/10/13/Eoxh5NT4yWvmwzt.png#id=tTBHa&originHeight=418&originWidth=1001&originalType=binary&ratio=1&status=done&style=none"></p><blockquote><p>推荐下载最新版本，4.0 以上版本集成了系统服务，不用自己去配置系统服务了</p></blockquote><p>下载之后就直接安装，建议 D 盘</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>打开高级系统设置找到环境变量，在用户变量的 Path 中配置环境变量，<br>我的是 D:\Program Files\MongoDB\Server\5.0\bin<br><img src="https://i.loli.net/2021/10/13/k3xIK6v15PegRV7.png#id=gSOZ4&originHeight=764&originWidth=1690&originalType=binary&ratio=1&status=done&style=none"></p><h3 id="启动-MongoDB"><a href="#启动-MongoDB" class="headerlink" title="启动 MongoDB"></a>启动 MongoDB</h3><p>如果是安装的最新版 5.0 以上可以不用配置 data/db 和系统服务，因为默认配置好了，可以直接命令行启动<br>在安装路径下可以找到数据库，储存位置和 log<br><img src="https://i.loli.net/2021/10/13/leNrLdFSwhp2Z3f.png#id=L5S6Z&originHeight=372&originWidth=804&originalType=binary&ratio=1&status=done&style=none"></p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>打开 cmd 命令行输入 <code>mongod</code> 启动服务，有如下说明启动成功。<br>​</p><p><img src="https://i.loli.net/2021/10/13/b9yV2SzG8f5mKI1.png#id=T98ac&originHeight=367&originWidth=1175&originalType=binary&ratio=1&status=done&style=none"></p><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>不要关闭此窗口，再开一个 cmd 命令行输入 <code>mongo</code>，默认端口 27017<br>​</p><p><img src="https://i.loli.net/2021/10/13/Kb7Gy9dMahNjcom.png#id=woag7&originHeight=639&originWidth=1223&originalType=binary&ratio=1&status=done&style=none"><br>浏览器访问 <a href="http://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb">http://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb</a><br>浏览器显示，数据库就链接成功</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">It looks like you are trying to access MongoDB over HTTP on the native driver port.<br></code></pre></div></td></tr></table></figure><p>如果是安装的 4.0 以上的版本就不用配置系统服务，<br>先关闭 cmd 命令行，打开任务管理，选择 服务 找到 MongoDB。如果 MongoDB 正在启动就说明，已经配置好了开机自启，不用手动配置，也不用每次都手动启动 mongo<br><img src="https://i.loli.net/2021/10/13/mUISaYsrXAGZLOg.png#id=adt23&originHeight=742&originWidth=834&originalType=binary&ratio=1&status=done&style=none"></p><h2 id="MongoDB-操作"><a href="#MongoDB-操作" class="headerlink" title="MongoDB 操作"></a>MongoDB 操作</h2><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><p>先打开 cmd 命令行，输入<code>mongo</code>连接数据库</p><h4 id="显示当前所有的数据库"><a href="#显示当前所有的数据库" class="headerlink" title="显示当前所有的数据库"></a>显示当前所有的数据库</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">show dbs<br><span class="hljs-comment">//或者</span><br>show databases<br></code></pre></div></td></tr></table></figure><h4 id="进入到指定数据库"><a href="#进入到指定数据库" class="headerlink" title="进入到指定数据库"></a>进入到指定数据库</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">use 数据库名<br></code></pre></div></td></tr></table></figure><blockquote><p>在 MongoDB 中不需要自己创建数据库和集合，便可以直接创建文档，其实就是在创建文档的同时，会将数据库和集合创建了。<br>所以如果没有这个数据库 <code>use 数据库名</code> 会自动创建该数据库</p></blockquote><h4 id="查看当前所处数据库"><a href="#查看当前所处数据库" class="headerlink" title="查看当前所处数据库"></a>查看当前所处数据库</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db<br></code></pre></div></td></tr></table></figure><h4 id="显示当前数据库所有集合"><a href="#显示当前数据库所有集合" class="headerlink" title="显示当前数据库所有集合"></a>显示当前数据库所有集合</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">show collections<br></code></pre></div></td></tr></table></figure><h3 id="数据库的-CRUD（增删改查）的操作"><a href="#数据库的-CRUD（增删改查）的操作" class="headerlink" title="数据库的 CRUD（增删改查）的操作"></a>数据库的 CRUD（增删改查）的操作</h3><p><strong>​</strong></p><p>MongoDB<a href="https://docs.mongodb.com/manual/crud/">CRUD</a>官方文档<br><strong>核心: 增: insert() 删: remove() 查: find() 改: update()</strong><br>也有官方图形化工具 MongoDB Compass</p><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><h5 id="向集合中插入一个或者多个文档"><a href="#向集合中插入一个或者多个文档" class="headerlink" title="向集合中插入一个或者多个文档"></a>向集合中插入一个或者多个文档</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.&lt;collection&gt;.insert(<span class="hljs-built_in">document</span>)<br><span class="hljs-comment">//&lt;collection&gt;表示集合名</span><br><span class="hljs-comment">//document表示插入的文档</span><br></code></pre></div></td></tr></table></figure><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.piyou.insert(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">28</span>, <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;花果山&#x27;</span> &#125;)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">表示向 集合名为piyou插入了文档, 文档内容是对象。</span><br><span class="hljs-comment">集合名是自己创建的，想用什么名称就用什么。</span><br><span class="hljs-comment">*/</span><br><br>db.piyou.insert([<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;猪八戒&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;高老庄&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;沙和尚&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">45</span>, <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;流沙河&#x27;</span> &#125;,<br>])<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">可以注意到: 传递的数据是数组，数组内部是对象，</span><br><span class="hljs-comment">其实对象就相当于文档，这就是插入了两个文档。</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><p>当我们在向集合中插入文档时，如果没有给文档指定 <code>_id</code> 属性，则数据库会自动为文档添加<code>_id</code>，该属性用来作为文档的唯一标识。<br>自己也能指定<code>_id</code>，但是要必须保证唯一性，不建议这样做<br><img src="https://i.loli.net/2021/10/13/AHY9uOypfKMsnCZ.png#id=ZgB1O&originHeight=89&originWidth=1076&originalType=binary&ratio=1&status=done&style=none"><br>输入指令<code>ObjectId()</code></p><p>会输出一个唯一 id <code>ObjectId(&quot;6166daec105f2c7be7b963e5&quot;)</code><br>​</p><h5 id="向集合中插入一个文档"><a href="#向集合中插入一个文档" class="headerlink" title="向集合中插入一个文档"></a>向集合中插入一个文档</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.piyou.insertOne(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;唐僧&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;女儿国&#x27;</span> &#125;)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">表示向集合名为piyou的 插入了一个文档。</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h5 id="向集合中插入多个文档"><a href="#向集合中插入多个文档" class="headerlink" title="向集合中插入多个文档"></a>向集合中插入多个文档</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.piyou.insertMany([<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;白骨精&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;白骨洞&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;蜘蛛精&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">24</span>, <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;蜘蛛洞&#x27;</span> &#125;,<br>])<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">可以看到，用法是和insert是相差不多的。数组里面有对象，对象即是文档。</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><blockquote><p><code>insertOne</code>和<code>insertMany</code>相对于<code>insert</code>增加了语义化</p></blockquote><p>​</p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.&lt;collection&gt;.find();<br><span class="hljs-comment">//db.&lt;collection&gt;.find([&#123;属性：值&#125;,&#123;属性：值&#125;]) 查询符合条件的集合</span><br><br>db.集合名.find(condition);查询一个或多个文档 condition是查询条件 ，返回的是数组<br>db.集合名.findOne(condition);    查询一个文档，返回的是文档对象<br>db.集合名.findMany(condition)查询多个文档<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&gt; db.students.find(&#123;<span class="hljs-attr">_id</span>:<span class="hljs-number">222</span>&#125;).name  <span class="hljs-comment">//错误</span><br>&gt; db.students.findOne(&#123;<span class="hljs-attr">_id</span>:<span class="hljs-number">222</span>&#125;).name <span class="hljs-comment">//正确</span><br></code></pre></div></td></tr></table></figure><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.piyou.find(&#123; <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> &#125;)<br><span class="hljs-comment">//这条语句表示的是查询age是18的文档。 值得注意的是，条件也是写在了对象里面，</span><br><span class="hljs-comment">//也是因为传入的值需要是json语句</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.集合名.find(condition).count();使用count()来计数<br>db.piyou.find().count();<span class="hljs-comment">// 执行结果是: 6, 因为在插入那边是一共插入了6条数据</span><br></code></pre></div></td></tr></table></figure><p>总结：</p><ul><li>find()返回的是数组，数组内存放着文档，</li><li>findOne()返回的就是一个文档，</li><li>findMany()返回的也是数组内存放着文档的形式。</li><li>find()的返回值还可以调用 count(),<br>用来获取符合条件的数量</li></ul><p>​</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">查询操作符的使用<br>#比较操作符<br>$gt 大于<br>$gte 大于等于<br>$lt 小于<br>$lte 小于等于<br>$ne 不等于<br>$eq 等于的另一种写法<br><br>db.users.find(&#123;num:&#123;$gt:200&#125;&#125;) #大于200<br>db.users.find(&#123;num:&#123;$gt:200,$lt:300&#125;&#125;) #大于200小于300<br><br>$or 或者<br>db.users.find(<br>    &#123;<br>        $or:[<br>            &#123;<span class="hljs-attr">num</span>:&#123;<span class="hljs-attr">$gt</span>:<span class="hljs-number">300</span>&#125;&#125;,<br>            &#123;<span class="hljs-attr">num</span>:&#123;<span class="hljs-attr">$lt</span>:<span class="hljs-number">200</span>&#125;&#125;<br>        ]<br>    &#125;<br>) #大于300或小于200<br><br><br>#分页查询<br>db.users.find().skip(页码-<span class="hljs-number">1</span> * 每页显示的条数).limit(每页显示的条数)<br><br>db.users.find().limit(10) #前10条数据<br>db.users.find().skip(50).limit(10) #跳过前50条数据，即查询的是第61-70条数据，即第6页的数据<br><br><br>#排序<br>db.emp.find().sort(&#123;sal:1&#125;) #1表示升序排列，-1表示降序排列<br>db.emp.find().sort(&#123;sal:1,empno:-1&#125;) #先按照sal升序排列，如果遇到相同的sal，则按empno降序排列<br><br>#注意：skip,limit,sort可以以任意的顺序调用，最终的结果都是先调sort，再调skip，最后调limit<br><br>#5.设置查询结果的投影，即只过滤出自己想要的字段<br>db.emp.find(&#123;&#125;,&#123;ename:1,_id:0&#125;) #在匹配到的文档中只显示ename字段<br></code></pre></div></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><h5 id="默认替换"><a href="#默认替换" class="headerlink" title="默认替换"></a>默认替换</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.&lt;collection&gt;.update(查询条件，新对象)<br><span class="hljs-comment">//update()默认条件下是使用新对象替换就对象</span><br><span class="hljs-comment">//在使用update()时，需要一个新的玩意加入，叫做修改操作符</span><br><span class="hljs-comment">//update()默认条件下只会修改一个</span><br></code></pre></div></td></tr></table></figure><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.piyou.update(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;猪八戒&#x27;</span> &#125;, &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">39</span> &#125;)<br><span class="hljs-comment">//这样使用的话，会使用&#123;age:18&#125;覆盖掉&#123;name:“猪八戒”…&#125;这整条语句。</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.集合名.update(condition,newObject);修改一个或多个文档<br>db.集合名.uodateOne(condition,newObject);修改一个文档<br>db.集合名.updateMany(condition, newObject);  修改多个文档<br>condition: 查询的条件newObject: 需要修改的语句<br><br></code></pre></div></td></tr></table></figure><h5 id="修改操作符"><a href="#修改操作符" class="headerlink" title="修改操作符"></a>修改操作符</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$set表示需要设置指定的属性<br>$unset表示需要删除指定的属性<br>$push表示给数组添加一个新元素，因为文档内也会有数组，数组便会有数组元素<br>$addToset 表示给数组添加一个新元素，和push的区别是，如果出现同名的数组元素，则不会再添加<br>$gt大于<br>$gte大于等于<br>$lt小于<br>$lte小于等于<br>$or [&#123;条件一,条件二&#125;]表示或的意思，符合条件一或者条件二<br>$inc表示自增，用在在原来数据的基础上对数据加减，可用于加薪减薪的操作<br><br></code></pre></div></td></tr></table></figure><h5 id="使用修饰符修改属性"><a href="#使用修饰符修改属性" class="headerlink" title="使用修饰符修改属性"></a>使用修饰符修改属性</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.piyou.update(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;孙悟空&#x27;</span> &#125;, &#123; <span class="hljs-attr">$set</span>: &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125; &#125;)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">表示根据条件&#123;name:&quot;孙悟空&quot;&#125;, 找到了孙悟空的这个文档, 使用了$set(修改指定属性)</span><br><span class="hljs-comment">这个修改操作符，将age修改成了29</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h5 id="修饰符删除指定属性"><a href="#修饰符删除指定属性" class="headerlink" title="修饰符删除指定属性"></a>修饰符删除指定属性</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.piyou.update(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;唐僧&#x27;</span> &#125;, &#123; <span class="hljs-attr">$unset</span>: &#123; <span class="hljs-attr">address</span>: <span class="hljs-number">1</span> &#125; &#125;)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">表示使用 $unset(删除指定属性), 将唐僧的address的属性值给删掉了</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h5 id="替换一个"><a href="#替换一个" class="headerlink" title="替换一个"></a>替换一个</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.collection.replaceOne(查询条件，新对象)<br><span class="hljs-comment">//第一个参数是查找条件，第二个是替换内容</span><br></code></pre></div></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">修改对应的属性，需要用到修改操作符，比如$set,$unset,$push,$addToSet<br>db.collectionName.update(<br># 查询条件<br>&#123;<span class="hljs-attr">_id</span>:<span class="hljs-number">222</span>&#125;,<br>&#123;<br>#修改对应的属性<br>$set:&#123;<br>name:<span class="hljs-string">&#x27;kang2&#x27;</span>,<br>age:<span class="hljs-number">21</span><br>&#125;<br>#删除对应的属性<br>$unset:&#123;<br>gender:<span class="hljs-number">1</span> <span class="hljs-comment">//这里的1可以随便改为其他的值，无影响</span><br>&#125;<br><br>&#125;<br>)<br><br># update默认与updateOne()等效，即对于匹配到的文档只更改其中的第一个<br># updateMany()可以用来更改匹配到的所有文档<br>db.students.updateMany(<br>&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;liu&#x27;</span>&#125;,<br>&#123;<br>$set:&#123;<br>age:<span class="hljs-number">21</span>,<br>gender:<span class="hljs-number">222</span><br>&#125;<br>&#125;<br>)<br><br><br># 向数组中添加数据<br>db.users.update(&#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;liu&#x27;</span>&#125;,&#123;<span class="hljs-attr">$push</span>:&#123;<span class="hljs-string">&quot;hobby.movies&quot;</span>:<span class="hljs-string">&#x27;movie4&#x27;</span>&#125;&#125;)<br><br>#如果数据已经存在，则不会添加<br>db.users.update(&#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;liu&#x27;</span>&#125;,&#123;<span class="hljs-attr">$addToSet</span>:&#123;<span class="hljs-string">&quot;hobby.movies&quot;</span>:<span class="hljs-string">&#x27;movie4&#x27;</span>&#125;&#125;)<br><br><br># 自增自减操作符$inc<br>&#123;$inc:&#123;num:100&#125;&#125; #让num自增100<br>&#123;$inc:&#123;num:-100&#125;&#125; #让num自减100<br>db.emp.updateMany(&#123;sal:&#123;$lt:1000&#125;&#125;,&#123;$inc:&#123;sal:400&#125;&#125;) #给工资低于1000的员工增加400的工资<br></code></pre></div></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h5 id="删除一个或者多个"><a href="#删除一个或者多个" class="headerlink" title="删除一个或者多个"></a>删除一个或者多个</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.&lt;collection&gt;.remove()<br><span class="hljs-comment">//删除一个或者多个，第二个参数传递一个true,则只会删除一个</span><br><span class="hljs-comment">//如果只传一个空对象，则会删除全部</span><br></code></pre></div></td></tr></table></figure><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.piyou.remove(&#123; <span class="hljs-attr">age</span>: <span class="hljs-number">39</span> &#125;)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">表示删除了符合 age为39 这个条件的一个或多个文档。</span><br><span class="hljs-comment">也就是删掉了刚刚那个猪八戒的那条语句</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><p>这个是真删除数据库，一般是不真删除。<br>一般在数据添加一个表示删除的字段 例如：<code>&#123; isDel : 0 &#125;</code>，<br>查询时添加这个属性 <code>db.piyou.find(&#123; isDel : 0 &#125;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.集合名.remove(condition)删除符合条件的一个或多个文档<br>db.集合名.deleteOne(condition)删除符合条件的一个文档<br>db.集合名.deleteMany(condition)删除符合条件的多个文档<br></code></pre></div></td></tr></table></figure><h5 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.&lt;collection&gt;.drop()<br></code></pre></div></td></tr></table></figure><h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.&lt;collection&gt;.dropDatabase()<br></code></pre></div></td></tr></table></figure><blockquote><p>注意数据库里的数据一般不删除</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"># 1. db.collectionName.remove()<br># remove默认会删除所有匹配的文档。相当于deleteMany()<br># remove可以加第二个参数，表示只删除匹配到的第一个文档。此时相当于deleteOne()<br>db.students.remove(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;liu&#x27;</span>,<span class="hljs-literal">true</span>&#125;)<br><br># 2. db.collectionName.deleteOne()<br># 3. db.collectionName.deleteMany()<br>db.students.deleteOne(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;liu&#x27;</span>&#125;)<br><br># 4. 删除所有数据：db.students.remove(&#123;&#125;)----性格较差，内部是在一条一条的删除文档。<br># 可直接通过db.students.drop()删除整个集合来提高效率。<br><br># 5.删除集合<br>db.collection.drop()<br><br># 6.删除数据库<br>db.dropDatabase()<br><br># 7.注意：删除某一个文档的属性，应该用update。   remove以及delete系列删除的是整个文档<br><br># 8.当删除的条件为内嵌的属性时：<br>db.users.remove(&#123;<span class="hljs-string">&quot;hobby.movies&quot;</span>:<span class="hljs-string">&#x27;movie3&#x27;</span>&#125;)<br></code></pre></div></td></tr></table></figure><h5 id="附加方法"><a href="#附加方法" class="headerlink" title="附加方法"></a>附加方法</h5><p>以下方法也可以从集合中删除文档：</p><ul><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/#mongodb-method-db.collection.findOneAndDelete">db.collection.findOneAndDelete()</a></li></ul><p><a href="https://docs.mongodb.com/manual/reference/method/db.collection.findAndModify/#std-label-findAndModify-wrapper-sorted-remove">findOneAndDelete()</a> 提供了一个排序选项。该选项允许删除按指定顺序排序的第一个文档。</p><ul><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.findAndModify/#mongodb-method-db.collection.findAndModify">db.collection.findAndModify()</a></li></ul><p><a href="https://docs.mongodb.com/manual/reference/method/db.collection.findAndModify/#mongodb-method-db.collection.findAndModify">db.collection.findAndModify()</a>提供排序选项。该选项允许删除按指定顺序排序的第一个文档。</p><ul><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.bulkWrite/#mongodb-method-db.collection.bulkWrite">db.collection.bulkWrite()</a>.</li></ul><p>有关更多信息和示例，请参阅方法的各个参考页。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="内嵌文档"><a href="#内嵌文档" class="headerlink" title="内嵌文档"></a>内嵌文档</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.persons.insert([<br>  &#123;<br>    name: <span class="hljs-string">&#x27;大大白&#x27;</span>,<br>    age: <span class="hljs-number">28</span>,<br>    hobby: &#123;<br>      music: [<span class="hljs-string">&#x27;new Boy&#x27;</span>, <span class="hljs-string">&#x27;云烟成雨&#x27;</span>, <span class="hljs-string">&#x27;秋酿&#x27;</span>],<br>      games: [<span class="hljs-string">&#x27;王者荣耀&#x27;</span>, <span class="hljs-string">&#x27;和平精英&#x27;</span>, <span class="hljs-string">&#x27;光遇&#x27;</span>],<br>    &#125;,<br>  &#125;,<br>  &#123;<br>    name: <span class="hljs-string">&#x27;小白&#x27;</span>,<br>    age: <span class="hljs-number">21</span>,<br>    hobby: &#123;<br>      movies: [<span class="hljs-string">&#x27;大话西游&#x27;</span>, <span class="hljs-string">&#x27;唐伯虎点秋香&#x27;</span>],<br>      games: [<span class="hljs-string">&#x27;王者荣耀&#x27;</span>, <span class="hljs-string">&#x27;旅行青蛙&#x27;</span>, <span class="hljs-string">&#x27;穿越火线&#x27;</span>],<br>    &#125;,<br>  &#125;,<br>])<br></code></pre></div></td></tr></table></figure><p>语句解释：</p><ul><li>向集合 persons 中插入一个数组，数组中有两个文档，文档内有一个 hobby 的文档，</li><li>这个 hobby 文档被称作内嵌文档，然后 hobby 文档内有两个数组。</li></ul><p>​</p><h5 id="需求：查询喜欢玩-王者荣耀-的人"><a href="#需求：查询喜欢玩-王者荣耀-的人" class="headerlink" title="需求：查询喜欢玩 王者荣耀 的人"></a>需求：查询喜欢玩 王者荣耀 的人</h5><p>分析:王者荣耀是存在于 hobby 中的 games</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.persons.find(&#123; <span class="hljs-string">&#x27;hobby.games&#x27;</span>: <span class="hljs-string">&#x27;王者荣耀&#x27;</span> &#125;)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是需要注意的知识点:如果查询的是内嵌文档可以使用 . 的方式查询，</span><br><span class="hljs-comment">不过需要使用引号，这是因为mongodb的文档是json的缘故吧。</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.users.find(&#123;hobby.movies:<span class="hljs-string">&#x27;movie1&#x27;</span>&#125;) <span class="hljs-comment">//错误</span><br>db.users.find(&#123;<span class="hljs-string">&quot;hobby.movies&quot;</span>:<span class="hljs-string">&#x27;movie1&#x27;</span>&#125;)<span class="hljs-comment">//此时查询的属性名必须加上引号</span><br></code></pre></div></td></tr></table></figure><h4 id="大量数据快速插入"><a href="#大量数据快速插入" class="headerlink" title="大量数据快速插入"></a>大量数据快速插入</h4><h5 id="需求-插入-20000-条数据，有哪种是比较快捷的方式？"><a href="#需求-插入-20000-条数据，有哪种是比较快捷的方式？" class="headerlink" title="需求: 插入 20000 条数据，有哪种是比较快捷的方式？"></a>需求: 插入 20000 条数据，有哪种是比较快捷的方式？</h5><p>方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20000</span>; i++) &#123;<br>  db.nums.insert(&#123; <span class="hljs-attr">num</span>: i &#125;)<br>&#125;<br>db.users.find().count() <span class="hljs-comment">//20000</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是方式一，这种方式是需要调用insert语句20000次，效率会十分低下，那么可不可以，</span><br><span class="hljs-comment">只调用一次insert语句呢？如果可以的话，应该怎么实现呢？</span><br><span class="hljs-comment">可以将数据先存储起来，然后一次性加入。</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><blockquote><p>不推荐使用方式一，因为将会 insert 调用两千次，会消耗大量时间，影响性能</p></blockquote><p>方式二：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = []<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20000</span>; i++) &#123;<br>  arr.push(&#123; <span class="hljs-attr">num</span>: i &#125;)<br>&#125;<br>db.nums.insert(arr)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是将数据全部存到了数组中，随后再将数组插入，只执行了一次insert语句。</span><br><span class="hljs-comment">如果还有更好的想法都可以去尝试。</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><blockquote><p>推荐使用方式二，提前进行逻辑处理，减少原生的方法调用，加快程序运行</p></blockquote><h4 id="文档间的关系-三种"><a href="#文档间的关系-三种" class="headerlink" title="文档间的关系(三种)"></a>文档间的关系(三种)</h4><h5 id="一对一-one-to-one"><a href="#一对一-one-to-one" class="headerlink" title="一对一(one to one)"></a>一对一(one to one)</h5><ul><li>内嵌文档</li><li>夫妻关系</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.wife.insert([<br>  &#123;<br>    name: <span class="hljs-string">&#x27;黄蓉&#x27;</span>,<br>    age: <span class="hljs-number">26</span>,<br>    handsband: &#123;<br>      name: <span class="hljs-string">&#x27;郭靖&#x27;</span>,<br>      age: <span class="hljs-number">38</span>,<br>    &#125;,<br>  &#125;,<br>  &#123;<br>    name: <span class="hljs-string">&#x27;小兰&#x27;</span>,<br>    age: <span class="hljs-number">16</span>,<br>    handsband: &#123;<br>      name: <span class="hljs-string">&#x27;新一&#x27;</span>,<br>      age: <span class="hljs-number">16</span>,<br>    &#125;,<br>  &#125;,<br>])<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">可以看到一个妻子是对应一个丈夫的，这是使用内嵌文档来实现的。</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h5 id="一对多-one-to-many"><a href="#一对多-one-to-many" class="headerlink" title="一对多(one to many)"></a>一对多(one to many)</h5><ul><li>父母 - 孩子</li><li>文章 - 评论</li></ul><p>内嵌文档也可以实现，就是一个文档内嵌多个文档，不过比较繁琐<br>用户一个文档，订单一个文档，在使用的时候再一一对应</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一句是创建了两个用户, 分别是花木兰和诸葛亮</span><br>db.users.insert([&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;花木兰&#x27;</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;诸葛亮&#x27;</span> &#125;])<br><span class="hljs-comment">// 这一句是查询用户内容， 这是需要知道用户的_id，从而在第三句加入</span><br>db.users.find()<br><span class="hljs-comment">// 这是生成了一个订单，并且user_id存储的是花木兰的id</span><br>db.orders.insert(&#123;<br>  list_name: [<span class="hljs-string">&#x27;配马&#x27;</span>, <span class="hljs-string">&#x27;鞍鞯&#x27;</span>],<br>  user_id: ObjectId(<span class="hljs-string">&#x27;61374eac77393663e2de9bd3&#x27;</span>),<br>&#125;)<br><span class="hljs-comment">// 再生成了一个订单，并且user_id存储的是花木兰的id</span><br>db.orders.insert(&#123;<br>  list_name: [<span class="hljs-string">&#x27;蜜糖&#x27;</span>, <span class="hljs-string">&#x27;男装&#x27;</span>],<br>  user_id: ObjectId(<span class="hljs-string">&#x27;61374eac77393663e2de9bd3&#x27;</span>),<br>&#125;)<br><span class="hljs-comment">// 在users里查找到 花木兰 这个用户的id，并将其存储起来</span><br><span class="hljs-keyword">let</span> userId = db.users.findOne(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;花木兰&#x27;</span> &#125;)._id<br><span class="hljs-comment">// 使用id来查找</span><br>db.orders.find(&#123; <span class="hljs-attr">user_id</span>: userId &#125;)<br></code></pre></div></td></tr></table></figure><h5 id="多对多-many-to-many"><a href="#多对多-many-to-many" class="headerlink" title="多对多(many to many)"></a>多对多(many to many)</h5><ul><li>学生 - 老师</li><li>商品 - 分类</li></ul><p>可以使用内嵌文档的形式完成</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.teas.insert([&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;诸葛亮&#x27;</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;龟仙人&#x27;</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;唐僧&#x27;</span> &#125;])<br>db.teas.find()<br>db.stus.insert([<br>  &#123;<br>    name: <span class="hljs-string">&#x27;孙悟空&#x27;</span>,<br>    <span class="hljs-comment">// 插入的是 龟仙人和唐僧的id</span><br>    teas_id: [<br>      ObjectId(<span class="hljs-string">&#x27;6137552877393663e2de9bdb&#x27;</span>),<br>      ObjectId(<span class="hljs-string">&#x27;6137552877393663e2de9bdc&#x27;</span>),<br>    ],<br>  &#125;,<br>  &#123;<br>    name: <span class="hljs-string">&#x27;刘禅&#x27;</span>,<br>    <span class="hljs-comment">// 插入的是 诸葛亮和龟仙人的id</span><br>    teas_id: [<br>      ObjectId(<span class="hljs-string">&#x27;6137552877393663e2de9bda&#x27;</span>),<br>      ObjectId(<span class="hljs-string">&#x27;6137552877393663e2de9bdb&#x27;</span>),<br>    ],<br>  &#125;,<br>])<br><br>db.stus.find()<br></code></pre></div></td></tr></table></figure><h4 id="投影-就是限制条件，显示效果"><a href="#投影-就是限制条件，显示效果" class="headerlink" title="投影(就是限制条件，显示效果)"></a>投影(就是限制条件，显示效果)</h4><p>首先先创建一个集合：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.staff.insert([<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">salary</span>: <span class="hljs-number">3000</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;大白&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>, <span class="hljs-attr">salary</span>: <span class="hljs-number">3500</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;熊大&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">23</span>, <span class="hljs-attr">salary</span>: <span class="hljs-number">3200</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;熊二&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>, <span class="hljs-attr">salary</span>: <span class="hljs-number">3100</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;光头强&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>, <span class="hljs-attr">salary</span>: <span class="hljs-number">3400</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小鲤鱼&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">17</span>, <span class="hljs-attr">salary</span>: <span class="hljs-number">1500</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;奥特曼&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">39</span>, <span class="hljs-attr">salary</span>: <span class="hljs-number">4500</span> &#125;,<br>])<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这样创建的是一个列表集合。</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h5 id="需求一-按照薪资排列，可以使用-sort-方法"><a href="#需求一-按照薪资排列，可以使用-sort-方法" class="headerlink" title="需求一:按照薪资排列，可以使用 sort()方法"></a>需求一:按照薪资排列，可以使用 sort()方法</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">sort(condition)<br>sort(&#123;<span class="hljs-attr">salary</span>:  <span class="hljs-number">1</span>&#125;)表示按照薪资升序排列<br>sort(&#123;<span class="hljs-attr">salary</span>: -<span class="hljs-number">1</span>&#125;)表示按照薪资降序排列<br></code></pre></div></td></tr></table></figure><p><strong>一个条件查询</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.staff.find().sort(&#123; <span class="hljs-attr">salary</span>: <span class="hljs-number">1</span> &#125;)<br></code></pre></div></td></tr></table></figure><p>按照薪资升序查询结果<br><img src="https://i.loli.net/2021/10/14/qmxaEGr2SjlJfVB.png#id=HdiSG&originHeight=584&originWidth=1509&originalType=binary&ratio=1&status=done&style=none"></p><p><strong>多条件查询</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.staff.find().sort(&#123; <span class="hljs-attr">salary</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">age</span>: -<span class="hljs-number">1</span> &#125;)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这句的含义是按照薪资升序排序，如果出现了相同的薪资的人，</span><br><span class="hljs-comment">则按照年龄降序排序。</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><p>limit() 限制 和 skip() 跳过， 这两个方法经常可以一起使用,从而用来翻页。<br>而且这两个方法是可以不分先后的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.staff.find().limit(<span class="hljs-number">2</span>).skip(<span class="hljs-number">5</span>)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">表示跳过前面5个数据，显示第七八个。可以理解为5个为一页，显示第二页的2个数据</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h5 id="投影配置"><a href="#投影配置" class="headerlink" title="投影配置"></a>投影配置</h5><p>在查询时可以在 find()中的第二个参数的位置传入 投影，<br><code>&#123;name: 1, _id: 0&#125;</code>： 表示 1 显示 name 属性，0 不显示_id 属性。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.staff.find(&#123;&#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">_id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">salary</span>: <span class="hljs-number">1</span> &#125;)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这句的含义是只显示 name和salary属性，不显示 _id属性</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h2 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h2><h3 id="什么是-Mongose"><a href="#什么是-Mongose" class="headerlink" title="什么是 Mongose"></a>什么是 Mongose</h3><div class="hljs code-wrapper"><pre><code>一般我们不会直接用MongoDB的函数来操作MongoDB数据库 ，而Mongose就是一套操作MongoDB数据库的接口。简而言之就是:mongoose也可以操作mongodb数据库，而且它来操作数据库会有更多好处</code></pre></div><p>​</p><h4 id="Mongoose-优点"><a href="#Mongoose-优点" class="headerlink" title="Mongoose 优点"></a>Mongoose 优点</h4><p>可以为 mongodb 的文档创建一个模式结构(Schema),说白了就是一个<strong>约束的条件</strong><br>比原生的 Node 相比更容易操作 mongodb 数据库，也就是<strong>更方便</strong><br>可以使用中间件和其他的应用业务挂钩，可以和其他的应用<strong>结合使用</strong><br>数据可以通过类型转换转换成对象模型，也就是有方法可以使用。<br>​</p><h3 id="Mongoose-的三个新对象"><a href="#Mongoose-的三个新对象" class="headerlink" title="Mongoose 的三个新对象"></a>Mongoose 的三个新对象</h3><h4 id="Schema-模式对象"><a href="#Schema-模式对象" class="headerlink" title="Schema(模式对象)"></a>Schema(模式对象)</h4><p>定义了约束 mongodb 的文档结构的条件<br>​</p><h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>相当于 mongodb 中的 collection(集合)<br>​</p><h4 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h4><p>document 表示集合中的具体文档</p><blockquote><p>值得注意的是这三个都是对象，是对象的话则有它们对应的方法和属性。</p></blockquote><h3 id="vscode-使用-mongoose-来操作数据库"><a href="#vscode-使用-mongoose-来操作数据库" class="headerlink" title="vscode 使用 mongoose 来操作数据库"></a>vscode 使用 mongoose 来操作数据库</h3><p>当需要在 webstorm 或 vscode 时编写 mongoose 时,需要先将 mongoose 模块引入。步骤如下:<br>使用 Mongoose:</p><h5 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h5><p>在终端输入命令行:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm i mongoose --save<br></code></pre></div></td></tr></table></figure><p>步骤</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">1</span>、导入mongoose模块<br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<br><span class="hljs-number">2</span>、连接数据库并且监听<br>mongoose.connect(<span class="hljs-string">&quot;mongodb://数据库ip地址:端口/数据库名称&quot;</span>)；<br>mongoose.connection.once(<span class="hljs-string">&quot;open&quot;</span>, (err)+&gt;&#123;&#125;);<br><span class="hljs-number">3</span>、创建Schema约束条件<br><span class="hljs-keyword">const</span> Schema = mongoose.Schema;将Schema重命名<br><span class="hljs-keyword">const</span> schema约束条件 = <span class="hljs-keyword">new</span> Schema(约束的内容);<br><span class="hljs-number">4</span>、创建Model<br><span class="hljs-keyword">const</span> 模型Model = mongoose.model(<span class="hljs-string">&#x27;mongodb的集合名&#x27;</span>, schema约束条件);<br><span class="hljs-number">5</span>、插入文档<br>使用 模型Model,插入文档<br>模型model.create(文档<span class="hljs-built_in">document</span>);<br><br></code></pre></div></td></tr></table></figure><h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 1、引入 mongoose 模块</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>)<br><br><span class="hljs-comment">// 2、连接数据库    27017是默认端口号，可以省略不写， ppxia是需要连接的数据库</span><br>mongoose.connect(<span class="hljs-string">&#x27;mongodb://127.0.0.1:27017/ppxia&#x27;</span>)<br><br><span class="hljs-comment">// 2.1、这是对数据库的监听，而且是使用once, 只监听一次就行了</span><br>mongoose.connection.once(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!err) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数据库已连接...&#x27;</span>)<br>  &#125;<br>&#125;)<br><br>mongoose.connection.once(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!err) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数据库已断开!!!&#x27;</span>)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 3、重命名，简化操作</span><br><span class="hljs-keyword">const</span> Schema = mongoose.Schema<br><br><span class="hljs-comment">// 3.1、创建了约束条件:type是类型，default是默认是女，如果是女的话则不用写性别这个属性值了。</span><br><span class="hljs-keyword">const</span> stuSch = <span class="hljs-keyword">new</span> Schema(&#123;<br>  name: <span class="hljs-built_in">String</span>,<br>  age: <span class="hljs-built_in">Number</span>,<br>  gender: &#123;<br>    type: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-keyword">default</span>: <span class="hljs-string">&#x27;女&#x27;</span>,<br>  &#125;,<br>  address: <span class="hljs-built_in">String</span>,<br>&#125;)<br><br><span class="hljs-comment">// 4、创建了 模型， 数据库中的集合名是 stuSch(会自动加s), 第二个参数是标准，即是约束条件: stuSch</span><br><span class="hljs-keyword">const</span> stuModel = mongoose.model(<span class="hljs-string">&#x27;stuSch&#x27;</span>, stuSch)<br><br><span class="hljs-comment">// 5、使用模型创建对象, 当想创建多个的时候，可以使用数组里面存储对象的方式</span><br>stuModel.create(<br>  &#123;<br>    name: <span class="hljs-string">&#x27;西施&#x27;</span>,<br>    age: <span class="hljs-number">18</span>,<br>    address: <span class="hljs-string">&#x27;王者峡谷&#x27;</span>,<br>  &#125;,<br>  (err) =&gt; &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;文档创建成功~&#x27;</span>)<br>  &#125;<br>)<br></code></pre></div></td></tr></table></figure><p>如果出现这种报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">E:\web\MongoDB-test\mongoose-test\node_modules\whatwg-url\dist\encoding.js:<span class="hljs-number">2</span><br><span class="hljs-keyword">const</span> utf8Encoder = <span class="hljs-keyword">new</span> TextEncoder();<br>                    ^<br><br><span class="hljs-built_in">ReferenceError</span>: TextEncoder is not defined<br>    at <span class="hljs-built_in">Object</span>.&lt;anonymous&gt; (E:\web\MongoDB-test\mongoose-test\node_modules\whatwg-url\dist\encoding.js:<span class="hljs-number">2</span>:<span class="hljs-number">21</span>)<br>    at Module._compile (internal/modules/cjs/loader.js:<span class="hljs-number">689</span>:<span class="hljs-number">30</span>)<br>    at <span class="hljs-built_in">Object</span>.Module._extensions..js (internal/modules/cjs/loader.js:<span class="hljs-number">700</span>:<span class="hljs-number">10</span>)<br>    at Module.load (internal/modules/cjs/loader.js:<span class="hljs-number">599</span>:<span class="hljs-number">32</span>)<br>    at tryModuleLoad (internal/modules/cjs/loader.js:<span class="hljs-number">538</span>:<span class="hljs-number">12</span>)<br>    at <span class="hljs-built_in">Function</span>.Module._load (internal/modules/cjs/loader.js:<span class="hljs-number">530</span>:<span class="hljs-number">3</span>)<br>    at Module.require (internal/modules/cjs/loader.js:<span class="hljs-number">637</span>:<span class="hljs-number">17</span>)<br>    at <span class="hljs-built_in">require</span> (internal/modules/cjs/helpers.js:<span class="hljs-number">22</span>:<span class="hljs-number">18</span>)<br>    at <span class="hljs-built_in">Object</span>.&lt;anonymous&gt; (E:\web\MongoDB-test\mongoose-test\node_modules\whatwg-url\dist\url-state-machine.js:<span class="hljs-number">5</span>:<span class="hljs-number">34</span>)<br>PS E:\web\MongoDB-test\mongoose-test&gt; node helloMongoose.js<br>(node:<span class="hljs-number">4888</span>) UnhandledPromiseRejectionWarning: MongoParseError: Invalid connection string <span class="hljs-string">&quot;mongoose://127.0.0.1/mongoose_test&quot;</span><br>    at <span class="hljs-keyword">new</span> ConnectionString (E:\web\MongoDB-test\mongoose-test\node_modules\mongodb-connection-string-url\lib\index.js:<span class="hljs-number">66</span>:<span class="hljs-number">19</span>)<br>    at <span class="hljs-built_in">Object</span>.parseOptions (E:\web\MongoDB-test\mongoose-test\node_modules\mongodb\lib\connection_string.js:<span class="hljs-number">210</span>:<span class="hljs-number">17</span>)<br>    at <span class="hljs-keyword">new</span> MongoClient (E:\web\MongoDB-test\mongoose-test\node_modules\mongodb\lib\mongo_client.js:<span class="hljs-number">62</span>:<span class="hljs-number">46</span>)<br>    at <span class="hljs-built_in">Promise</span> (E:\web\MongoDB-test\mongoose-test\node_modules\mongoose\lib\connection.js:<span class="hljs-number">779</span>:<span class="hljs-number">16</span>)<br>    at <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span> (&lt;anonymous&gt;)<br>    at NativeConnection.Connection.openUri (E:\web\MongoDB-test\mongoose-test\node_modules\mongoose\lib\connection.js:<span class="hljs-number">776</span>:<span class="hljs-number">19</span>)<br>    at _mongoose._promiseOrCallback.cb (E:\web\MongoDB-test\mongoose-test\node_modules\mongoose\lib\index.js:<span class="hljs-number">330</span>:<span class="hljs-number">10</span>)<br>    at <span class="hljs-built_in">Promise</span> (E:\web\MongoDB-test\mongoose-test\node_modules\mongoose\lib\helpers\promiseOrCallback.js:<span class="hljs-number">32</span>:<span class="hljs-number">5</span>)<br>    at <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span> (&lt;anonymous&gt;)<br>    at promiseOrCallback (E:\web\MongoDB-test\mongoose-test\node_modules\mongoose\lib\helpers\promiseOrCallback.js:<span class="hljs-number">31</span>:<span class="hljs-number">10</span>)<br>(node:<span class="hljs-number">4888</span>) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside <span class="hljs-keyword">of</span> an <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">without</span> <span class="hljs-title">a</span> <span class="hljs-title">catch</span> <span class="hljs-title">block</span>, <span class="hljs-title">or</span> <span class="hljs-title">by</span> <span class="hljs-title">rejecting</span> <span class="hljs-title">a</span> <span class="hljs-title">promise</span> <span class="hljs-title">which</span> <span class="hljs-title">was</span> <span class="hljs-title">not</span> <span class="hljs-title">handled</span> <span class="hljs-title">with</span> .<span class="hljs-title">catch</span>(<span class="hljs-params"></span>). (<span class="hljs-params">rejection id: <span class="hljs-number">2</span></span>)</span><br><span class="hljs-function">(<span class="hljs-params">node:<span class="hljs-number">4888</span></span>) [<span class="hljs-title">DEP0018</span>] <span class="hljs-title">DeprecationWarning</span>: <span class="hljs-title">Unhandled</span> <span class="hljs-title">promise</span> <span class="hljs-title">rejections</span> <span class="hljs-title">are</span> <span class="hljs-title">deprecated</span>. <span class="hljs-title">In</span> <span class="hljs-title">the</span> <span class="hljs-title">future</span>, <span class="hljs-title">promise</span> <span class="hljs-title">rejections</span> <span class="hljs-title">that</span> <span class="hljs-title">are</span> <span class="hljs-title">not</span> <span class="hljs-title">handled</span> <span class="hljs-title">will</span> <span class="hljs-title">terminate</span> <span class="hljs-title">the</span> <span class="hljs-title">Node</span>.<span class="hljs-title">js</span> <span class="hljs-title">process</span> <span class="hljs-title">with</span> <span class="hljs-title">a</span> <span class="hljs-title">non</span>-<span class="hljs-title">zero</span> <span class="hljs-title">exit</span> <span class="hljs-title">code</span>.</span><br></code></pre></div></td></tr></table></figure><p>打开文件 \node_modules\whatwg-url\dist\encoding.js 替换以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">将<br><span class="hljs-comment">// &quot;use strict&quot;;</span><br><span class="hljs-comment">// const utf8Encoder = new TextEncoder();</span><br><span class="hljs-comment">// const utf8Decoder = new TextDecoder(&quot;utf-8&quot;, &#123; ignoreBOM: true &#125;);</span><br><br>替换成<br>;(<span class="hljs-string">&#x27;use strict&#x27;</span>)<br><span class="hljs-keyword">var</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)<br><span class="hljs-keyword">const</span> utf8Encoder = <span class="hljs-keyword">new</span> util.TextEncoder()<br><span class="hljs-keyword">const</span> utf8Decoder = <span class="hljs-keyword">new</span> util.TextEncoder(<span class="hljs-string">&#x27;utf-8&#x27;</span>, &#123; <span class="hljs-attr">ignoreBOM</span>: <span class="hljs-literal">true</span> &#125;)<br></code></pre></div></td></tr></table></figure><h4 id="连接数据库-1"><a href="#连接数据库-1" class="headerlink" title="连接数据库"></a>连接数据库</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.引入mongoose</span><br><span class="hljs-keyword">const</span> mongooes = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>)<br><span class="hljs-comment">// 2.连接mongodb数据库</span><br>mongooes.connect(<span class="hljs-string">&#x27;mongodb://localhost/users&#x27;</span>, &#123;<br>  useNewUrlParser: <span class="hljs-literal">true</span>,<br>  useUnifiedTopology: <span class="hljs-literal">true</span>,<br>&#125;)<br><br><span class="hljs-comment">// 3.监听mongodb数据库的连接状态</span><br><span class="hljs-comment">// 绑定数据库连接成功事件</span><br>mongooes.connection.once(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;连接成功&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// 绑定数据库连接失败事件</span><br>mongooes.connection.once(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数据库连接已经断开&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 4.断开数据库连接(一般不用)</span><br><span class="hljs-comment">//mongooes.disconnect();</span><br></code></pre></div></td></tr></table></figure><h4 id="创建模式对象和模型对象："><a href="#创建模式对象和模型对象：" class="headerlink" title="创建模式对象和模型对象："></a>创建模式对象和模型对象：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 重命名，简化操作</span><br><span class="hljs-keyword">const</span> Schema = mongoose.Schema<br><br><span class="hljs-comment">//创建了约束条件:type是类型，default是默认是女，如果是女的话则不用写性别这个属性值了。</span><br><span class="hljs-keyword">const</span> stuSch = <span class="hljs-keyword">new</span> Schema(&#123;<br>  name: <span class="hljs-built_in">String</span>,<br>  age: <span class="hljs-built_in">Number</span>,<br>  gender: &#123;<br>    type: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-keyword">default</span>: <span class="hljs-string">&#x27;女&#x27;</span>,<br>  &#125;,<br>  address: <span class="hljs-built_in">String</span>,<br>&#125;)<br><br><span class="hljs-comment">//创建了 模型， 数据库中的集合名是 stuSch(会自动加s), 第二个参数是标准，即是约束条件: stuSch</span><br><span class="hljs-comment">//第一个参数表示创建的集合的名称，第二个参数表示利用的模式对象</span><br><span class="hljs-keyword">const</span> stuModel = mongoose.model(<span class="hljs-string">&#x27;stuSch&#x27;</span>, stuSch)<br></code></pre></div></td></tr></table></figure><h4 id="利用-Model（模型）对象进行增删查改操作："><a href="#利用-Model（模型）对象进行增删查改操作：" class="headerlink" title="利用 Model（模型）对象进行增删查改操作："></a>利用 Model（模型）对象进行增删查改操作：</h4><h5 id="添加操作："><a href="#添加操作：" class="headerlink" title="添加操作："></a>添加操作：</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Model.create(doc,[callback]);创建一个或多个对象<br>Model.createOne(doc, [callback]);创建一个对象<br>Model.createMany(doc, [callback]);创建多个对象<br>#doc是需要插入的文档<br>#callback(err) 是回调函数，可以用来提示是否创建成功了<br><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用模型创建对象, 当想创建多个的时候，可以使用数组里面存储对象的方式</span><br>stuModel.create(<br>  &#123;<br>    name: <span class="hljs-string">&#x27;西施&#x27;</span>,<br>    age: <span class="hljs-number">18</span>,<br>    address: <span class="hljs-string">&#x27;王者峡谷&#x27;</span>,<br>  &#125;,<br>  (err) =&gt; &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;文档创建成功~&#x27;</span>)<br>  &#125;<br>)<br></code></pre></div></td></tr></table></figure><h5 id="查询操作："><a href="#查询操作：" class="headerlink" title="查询操作："></a>查询操作：</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Model.find(condition, 投影, [options], [callback]); 查询一个或多个文档<br># 返回的是数组<br>Model.findById(id, 投影, [callback]);  根据id查询一个文档<br>Model.findMany(condition, 投影. [callback]); 查询多个文档<br>Model.findOne(condition, [projection], [options], [callback]);查询一个文档<br># condition 查询条件<br># 投影/ projection: 投影，也就是 查询条件，有两种方式<br>  # &#123;name: 1, _id:0&#125;: 1是显示，0是不显示&quot;name  -_id&quot;显示name, 不显示 _id<br>  # options:  查询的选项, skip是跳过，limit是限制 &#123;skip: 3, limit:3&#125;<br>  # callback: 回调函数,有两个参数(err, doc) err是错误类型, doc是文档。<br><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">stuModel.find(&#123;&#125;, <span class="hljs-function">(<span class="hljs-params">err, doc</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!err) &#123;<br>    <span class="hljs-built_in">console</span>.log(doc)<br>  &#125;<br>&#125;)<br>stuModel.findById(<span class="hljs-string">&#x27;6137839348ee37e25b1c1c74&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, doc</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!err) &#123;<br>    <span class="hljs-built_in">console</span>.log(doc)<br>  &#125;<br>&#125;)<br>stuModel.findOne(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;西施&#x27;</span> &#125;, <span class="hljs-string">&#x27;name -_id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, doc</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!err) &#123;<br>    <span class="hljs-built_in">console</span>.log(doc)<br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h5 id="修改操作："><a href="#修改操作：" class="headerlink" title="修改操作："></a>修改操作：</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Model.updateMany(condition, doc, [options], [callback]);<br>Model.updateOne(condition, doc, [options], callback);<br>## Model.update() 已经不适用了<br># condition 修改的条件<br># doc 修改后的内容/需要修改的内容<br><br>需要配合修改操作符来使用:<br>$set表示需要设置指定的属性<br>$unset表示需要删除指定的属性<br>$push表示给数组添加一个新元素，因为文档内也会有数组，数组便会有数组元素<br>$addToset 表示给数组添加一个新元素，和push的区别是，如果出现同名的数组元素，则不会再添加<br>$gt大于<br>$gte大于等于<br>$lt小于<br>$lte小于等于<br>$or [&#123;条件一,条件二&#125;]表示或的意思，符合条件一或者条件二<br>$inc表示自增，用在在原来数据的基础上对数据加减，可用于加薪减薪的操作<br><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">stuModel.updateOne(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;西施&#x27;</span> &#125;, &#123; <span class="hljs-attr">$set</span>: &#123; <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;北京&#x27;</span> &#125; &#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!err) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;修改成功~&#x27;</span>)<br>  &#125;<br>&#125;)<br><br>stuModel.find(&#123;&#125;, <span class="hljs-function">(<span class="hljs-params">err, doc</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!err) &#123;<br>    <span class="hljs-built_in">console</span>.log(doc)<br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h5 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Model.remove(condition, [callback]);<br>Model.deleteOne(condition, [callback]);<br>Model.deleteMany(condition, [callback]);<br># condition 条件<br><br></code></pre></div></td></tr></table></figure><h5 id="查看个数"><a href="#查看个数" class="headerlink" title="查看个数"></a>查看个数</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Model.count(condition, [callback])<br>获取当前这个集合的符合条件的文档数量<br></code></pre></div></td></tr></table></figure><h4 id="Document（文档）的方法"><a href="#Document（文档）的方法" class="headerlink" title="Document（文档）的方法"></a>Document（文档）的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.save([options], [callback])<br>    <span class="hljs-built_in">document</span>.update([options], [callback])<br>        collection.update不推荐使用。改用updateOne、updateMany或bulkWrite。<br>    doc.get(name)<br>        获取指定属性值<br>        doc.get(<span class="hljs-string">&quot;name&quot;</span>) === doc.name<br>    doc.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;猪猪&quot;</span>) === doc.name = <span class="hljs-string">&quot;猪猪&quot;</span><br>    doc.id<br>        属性, 获取id<br>    doc.toJSON()<br>        - 转换成 <span class="hljs-built_in">JSON</span><br>    doc.toObject()<br>        将doc对象 转换成 普通JS对象, 转换后, 所有doc的属性和方法都不能使用了<br>          --这样就可以将 address给删掉了, 表面上删掉了, 数据库中没有删除<br>            doc = doc.toObject;<br>            <span class="hljs-keyword">delete</span> doc.address;<br>            <span class="hljs-built_in">console</span>.log(doc);<br><br></code></pre></div></td></tr></table></figure><h4 id="模块化处理："><a href="#模块化处理：" class="headerlink" title="模块化处理："></a>模块化处理：</h4><ul><li>1.单独创建一个数据库连接文件\tools\conn_mongo.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mongooes = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>)<br>mongooes.connect(<span class="hljs-string">&#x27;mongodb://localhost/mongooes_test&#x27;</span>, &#123;<br>  useNewUrlParser: <span class="hljs-literal">true</span>,<br>  useUnifiedTopology: <span class="hljs-literal">true</span>,<br>&#125;)<br>mongooes.connection.once(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;连接成功&#x27;</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><ul><li>2.为每一个集合创建一个模型对象文件\models\userModel.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mongooes = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>)<br><span class="hljs-keyword">const</span> Schema = mongooes.Schema<br><span class="hljs-keyword">const</span> userSchema = <span class="hljs-keyword">new</span> Schema(&#123;<br>  user_id: <span class="hljs-built_in">String</span>,<br>  name: <span class="hljs-built_in">String</span>,<br>  age: <span class="hljs-built_in">Number</span>,<br>  gender: &#123;<br>    type: <span class="hljs-built_in">Number</span>,<br>    <span class="hljs-keyword">default</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>&#125;)<br><span class="hljs-keyword">const</span> UserModel = mongooes.model(<span class="hljs-string">&#x27;user&#x27;</span>, userSchema)<br><span class="hljs-built_in">module</span>.exports = UserModel<br></code></pre></div></td></tr></table></figure><ul><li>3.在最终的文件 index.js 中引入数据库连接文件和创建模型的文件：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mongooes = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./dbconncet&#x27;</span>)<br><span class="hljs-keyword">const</span> PostModel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./models/postModel&#x27;</span>)<br><br><span class="hljs-comment">//第一次创建之后才有数据</span><br><span class="hljs-comment">// PostModel.create(</span><br><span class="hljs-comment">//   &#123;</span><br><span class="hljs-comment">//     user_id: 123,</span><br><span class="hljs-comment">//     name: &#x27;小明&#x27;,</span><br><span class="hljs-comment">//     age: 18,</span><br><span class="hljs-comment">//   &#125;,</span><br><span class="hljs-comment">//   (err, data) =&gt; &#123;</span><br><span class="hljs-comment">//     if (err) &#123;</span><br><span class="hljs-comment">//       console.log(&#x27;文档创建成功~~~&#x27;)</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// )</span><br><br>PostModel.findOne(&#123;&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!err) &#123;<br>    <span class="hljs-built_in">console</span>.log(data)<br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改antdPro时间组件默认样式，时分秒定位到固定时间</title>
    <link href="/2021/08/06/%E4%BF%AE%E6%94%B9antdPro%E6%97%B6%E9%97%B4%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F%EF%BC%8C%E6%97%B6%E5%88%86%E7%A7%92%E5%AE%9A%E4%BD%8D%E5%88%B0%E5%9B%BA%E5%AE%9A%E6%97%B6%E9%97%B4/"/>
    <url>/2021/08/06/%E4%BF%AE%E6%94%B9antdPro%E6%97%B6%E9%97%B4%E7%BB%84%E4%BB%B6%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F%EF%BC%8C%E6%97%B6%E5%88%86%E7%A7%92%E5%AE%9A%E4%BD%8D%E5%88%B0%E5%9B%BA%E5%AE%9A%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="修改-antdPro-时间组件默认样式，时分秒定位到固定时间"><a href="#修改-antdPro-时间组件默认样式，时分秒定位到固定时间" class="headerlink" title="修改 antdPro 时间组件默认样式，时分秒定位到固定时间"></a>修改 antdPro 时间组件默认样式，时分秒定位到固定时间</h1><p>这是一个很曲折的故事，当时着急没有仔细看文档，没有找到官方的那个例子比较简单，结果自己做了类似的。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>有个需求 点击时间时，将时分秒固定到当天零点或者当天最后一秒<br><img src="https://i.loli.net/2021/08/06/rzv3n7oVDqBXw1c.png#id=bpizN&originHeight=433&originWidth=563&originalType=binary&ratio=1&status=done&style=none"><br><img src="https://i.loli.net/2021/08/06/c2kvhxCZErdMRop.png#id=jadz3&originHeight=441&originWidth=609&originalType=binary&ratio=1&status=done&style=none"></p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><h3 id="安装-momentjs"><a href="#安装-momentjs" class="headerlink" title="安装 momentjs"></a>安装 momentjs</h3><p><a href="https://momentjs.com/">https://momentjs.com/</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>项目中引入</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> moment <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;moment&#x27;</span><br></code></pre></div></td></tr></table></figure><p>我用的是<code>ProFormDateTimePicker</code>组件</p><h4 id="将默认时间设定到当天零点"><a href="#将默认时间设定到当天零点" class="headerlink" title="将默认时间设定到当天零点"></a>将默认时间设定到当天零点</h4><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">&lt;ProFormDateTimePicker<br>  transform=&#123;<span class="hljs-function">(<span class="hljs-params">value: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      startTime: <span class="hljs-built_in">Number</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(value.replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>))),<br>    &#125;<br>  &#125;&#125;<br>  width=<span class="hljs-string">&quot;md&quot;</span><br>  name=<span class="hljs-string">&quot;starTime&quot;</span><br>  label=<span class="hljs-string">&quot;开始时间&quot;</span><br>  fieldProps=&#123;&#123;<br>    defaultValue: moment(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleDateString()).getTime())),<br>  &#125;&#125;<br>/&gt;<br></code></pre></div></td></tr></table></figure><p>使用 transform 处理时间<code>startTime: Number(new Date(value.replace(&#39;-&#39;, &#39;/&#39;)))</code>，将时间转成时间戳<br>​</p><p><code>fieldProps</code>和<code>defaultValue</code>在 antdPro 官方文档和源码中找得到<br>​</p><p>然后使用<code>moment</code>方法，将默认时间设定到当天零点</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">fieldProps=&#123;&#123;<br>    defaultValue: moment(<br>        <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleDateString()).getTime()),<br>    ),<br>&#125;&#125;<br></code></pre></div></td></tr></table></figure><h4 id="将默认时间设定到当天最后一秒"><a href="#将默认时间设定到当天最后一秒" class="headerlink" title="将默认时间设定到当天最后一秒"></a>将默认时间设定到当天最后一秒</h4><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">&lt;ProFormDateTimePicker<br>  transform=&#123;<span class="hljs-function">(<span class="hljs-params">value: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      endTime: <span class="hljs-built_in">Number</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(value.replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>))),<br>    &#125;<br>  &#125;&#125;<br>  width=<span class="hljs-string">&quot;md&quot;</span><br>  name=<span class="hljs-string">&quot;endTime&quot;</span><br>  label=<span class="hljs-string">&quot;结束时间&quot;</span><br>  fieldProps=&#123;&#123;<br>    defaultValue: moment(<br>      <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleDateString()).getTime() + <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> - <span class="hljs-number">1</span>)<br>    ),<br>  &#125;&#125;<br>/&gt;<br></code></pre></div></td></tr></table></figure><p>同理将使用<code>moment</code>方法，将默认时间设定到当天最后一秒</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">fieldProps=&#123;&#123;<br>    defaultValue: moment(<br>        <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleDateString()).getTime() +<br>                <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> -<br>                <span class="hljs-number">1</span>,<br>        ),<br>    ),<br>&#125;&#125;<br></code></pre></div></td></tr></table></figure><p>最后就达到了需求</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>当然是官方的做法，确实比较简单，语法可能不一样 API 中<a href="https://ant.design/components/date-picker-cn/#RangePicker">https://ant.design/components/date-picker-cn/#RangePicker</a><br><strong>showTime.defaultValue</strong>参数</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">&lt;RangePicker<br>  disabledDate=&#123;disabledDate&#125;<br>  disabledTime=&#123;disabledRangeTime&#125;<br>  showTime=&#123;&#123;<br>    hideDisabledOptions: <span class="hljs-literal">true</span>,<br>    defaultValue: [moment(<span class="hljs-string">&#x27;00:00:00&#x27;</span>, <span class="hljs-string">&#x27;HH:mm:ss&#x27;</span>), moment(<span class="hljs-string">&#x27;11:59:59&#x27;</span>, <span class="hljs-string">&#x27;HH:mm:ss&#x27;</span>)],<br>  &#125;&#125;<br>  format=<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span><br>/&gt;<br></code></pre></div></td></tr></table></figure><p>具体用法还是看官方文档。</p>]]></content>
    
    
    <categories>
      
      <category>UI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
      <tag>AntdPro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Date对象常用方法</title>
    <link href="/2021/08/01/Date%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2021/08/01/Date%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Date对象常用方法"><a href="#Date对象常用方法" class="headerlink" title="Date对象常用方法"></a>Date对象常用方法</h1><h2 id="获取-Date-对象的时间戳"><a href="#获取-Date-对象的时间戳" class="headerlink" title="获取 Date 对象的时间戳"></a>获取 Date 对象的时间戳</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">&lt;script&gt;<br>  <span class="hljs-comment">// 方式一：获取 Date 对象的时间戳（最常用的写法）</span><br>  <span class="hljs-keyword">const</span> timestamp1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>  <span class="hljs-built_in">console</span>.log(timestamp1); <span class="hljs-comment">// 打印结果举例：1589448165370</span><br><br>  <span class="hljs-comment">// 方式二：获取 Date 对象的时间戳（较常用的写法）</span><br>  <span class="hljs-keyword">const</span> timestamp2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>  <span class="hljs-built_in">console</span>.log(timestamp2); <span class="hljs-comment">// 打印结果举例：1589448165370</span><br><br>  <span class="hljs-comment">// 方式三：获取 Date 对象的时间戳</span><br>  <span class="hljs-keyword">const</span> timestamp3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().valueOf();<br>  <span class="hljs-built_in">console</span>.log(timestamp3); <span class="hljs-comment">// 打印结果举例：1589448165370</span><br><br>  <span class="hljs-comment">// 方式4：获取 Date 对象的时间戳</span><br>  <span class="hljs-keyword">const</span> timestamp4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() * <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">console</span>.log(timestamp4); <span class="hljs-comment">// 打印结果举例：1589448165370</span><br><br>  <span class="hljs-comment">// 方式5：获取 Date 对象的时间戳</span><br>  <span class="hljs-keyword">const</span> timestamp5 = <span class="hljs-built_in">Number</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());<br>  <span class="hljs-built_in">console</span>.log(timestamp5); <span class="hljs-comment">// 打印结果举例：1589448165370</span><br>  <br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">&lt;script&gt;<br>   <span class="hljs-built_in">console</span>.log(formatDate());<br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">       方法：日期格式化。</span><br><span class="hljs-comment">       格式要求：今年是：2020年02月02日 08:57:09 星期日</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatDate</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>     <span class="hljs-comment">//将时间戳放入new Date()中，则会返回时间戳的时间</span><br>     <span class="hljs-comment">// var date = new Date(1402233166999);</span><br><br>       <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><br>       <span class="hljs-keyword">var</span> year = date.getFullYear(); <span class="hljs-comment">// 年</span><br>       <span class="hljs-keyword">var</span> month = date.getMonth() + <span class="hljs-number">1</span>; <span class="hljs-comment">// 月</span><br>       <span class="hljs-keyword">var</span> day = date.getDate(); <span class="hljs-comment">// 日</span><br><br>       <span class="hljs-keyword">var</span> week = date.getDay(); <span class="hljs-comment">// 星期几</span><br>       <span class="hljs-keyword">var</span> weekArr = [<span class="hljs-string">&#x27;星期日&#x27;</span>, <span class="hljs-string">&#x27;星期一&#x27;</span>, <span class="hljs-string">&#x27;星期二&#x27;</span>, <span class="hljs-string">&#x27;星期三&#x27;</span>, <span class="hljs-string">&#x27;星期四&#x27;</span>, <span class="hljs-string">&#x27;星期五&#x27;</span>, <span class="hljs-string">&#x27;星期六&#x27;</span>];<br><br>       <span class="hljs-keyword">var</span> hour = date.getHours(); <span class="hljs-comment">// 时</span><br>       hour = hour &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + hour : hour; <span class="hljs-comment">// 如果只有一位，则前面补零</span><br><br>       <span class="hljs-keyword">var</span> minute = date.getMinutes(); <span class="hljs-comment">// 分</span><br>       minute = minute &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + minute : minute; <span class="hljs-comment">// 如果只有一位，则前面补零</span><br><br>       <span class="hljs-keyword">var</span> second = date.getSeconds(); <span class="hljs-comment">// 秒</span><br>       second = second &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + second : second; <span class="hljs-comment">// 如果只有一位，则前面补零</span><br><br>       <span class="hljs-keyword">var</span> result = <span class="hljs-string">&#x27;今天是：&#x27;</span> + year + <span class="hljs-string">&#x27;年&#x27;</span> + month + <span class="hljs-string">&#x27;月&#x27;</span> + day + <span class="hljs-string">&#x27;日 &#x27;</span> + hour + <span class="hljs-string">&#x27;:&#x27;</span> + minute + <span class="hljs-string">&#x27;:&#x27;</span> + second + <span class="hljs-string">&#x27; &#x27;</span> + weekArr[week];<br><br>       <span class="hljs-keyword">return</span> result;<br>   &#125;<br> &lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h2 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h2><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">&lt;style&gt;<br>        div &#123;<br>            width: 1210px;<br>            margin: 200px auto;<br>            color: red;<br>            text-align: center;<br>            font: <span class="hljs-number">600</span> 30px/30px <span class="hljs-string">&#x27;simsun&#x27;</span>;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div&gt;&lt;/div&gt;<br><br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            countDown(<span class="hljs-string">&#x27;2032/02/03 11:20:00&#x27;</span>);<br>        &#125;, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countDown</span>(<span class="hljs-params">myTime</span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> nowTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>            <span class="hljs-keyword">var</span> future = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(myTime);<br>            <span class="hljs-keyword">var</span> timeSum = future.getTime() - nowTime.getTime(); <span class="hljs-comment">//获取时间差：发布会时间减去此刻的毫秒值</span><br><br>            <span class="hljs-keyword">var</span> day = <span class="hljs-built_in">parseInt</span>(timeSum / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>); <span class="hljs-comment">// 天</span><br>            <span class="hljs-keyword">var</span> hour = <span class="hljs-built_in">parseInt</span>((timeSum / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span>) % <span class="hljs-number">24</span>); <span class="hljs-comment">// 时</span><br>            <span class="hljs-keyword">var</span> minu = <span class="hljs-built_in">parseInt</span>((timeSum / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span>); <span class="hljs-comment">// 分</span><br>            <span class="hljs-keyword">var</span> sec = <span class="hljs-built_in">parseInt</span>((timeSum / <span class="hljs-number">1000</span>) % <span class="hljs-number">60</span>); <span class="hljs-comment">// 秒</span><br>            <span class="hljs-keyword">var</span> millsec = <span class="hljs-built_in">parseInt</span>(timeSum % <span class="hljs-number">1000</span>); <span class="hljs-comment">// 毫秒</span><br><br>            <span class="hljs-comment">//细节处理：所有的时间小于10的时候，在前面自动补0，毫秒值要补双0（比如如，把 8 秒改成 08 秒）</span><br>            day = day &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + day : day; <span class="hljs-comment">//day小于10吗？如果小于，就补0；如果不小于，就是day本身</span><br>            hour = hour &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + hour : hour;<br>            minu = minu &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + minu : minu;<br>            sec = sec &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + sec : sec;<br>            <span class="hljs-keyword">if</span> (millsec &lt; <span class="hljs-number">10</span>) &#123;<br>                millsec = <span class="hljs-string">&#x27;00&#x27;</span> + millsec;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (millsec &lt; <span class="hljs-number">100</span>) &#123;<br>                millsec = <span class="hljs-string">&#x27;0&#x27;</span> + millsec;<br>            &#125;<br><br>            <span class="hljs-comment">// 兜底处理</span><br>            <span class="hljs-keyword">if</span> (timeSum &lt; <span class="hljs-number">0</span>) &#123;<br>                div.innerHTML = <span class="hljs-string">&#x27;距离2032/02/03 11:20:00还有00天00小时00分00秒000毫秒&#x27;</span>;<br>                <span class="hljs-built_in">clearInterval</span>(timer);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 前端要显示的文案</span><br>            div.innerHTML = <span class="hljs-string">&#x27;距离2032/02/03 11:20:00还有&#x27;</span> + day + <span class="hljs-string">&#x27;天&#x27;</span> + hour + <span class="hljs-string">&#x27;小时&#x27;</span> + minu + <span class="hljs-string">&#x27;分&#x27;</span> + sec + <span class="hljs-string">&#x27;秒&#x27;</span> + millsec + <span class="hljs-string">&#x27;毫秒&#x27;</span>;<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Date</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>random生成[x,y]之间的随机整数</title>
    <link href="/2021/08/01/random%E7%94%9F%E6%88%90%5Bx,y%5D%E4%B9%8B%E9%97%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B4%E6%95%B0/"/>
    <url>/2021/08/01/random%E7%94%9F%E6%88%90%5Bx,y%5D%E4%B9%8B%E9%97%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="random生成-x-y-之间的随机整数"><a href="#random生成-x-y-之间的随机整数" class="headerlink" title="random生成 [x, y]之间的随机整数"></a>random生成 [x, y]之间的随机整数</h1><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">&lt;script&gt;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  * 生成两个整数之间的随机整数，并且要包含这两个整数</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandom</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min + <span class="hljs-number">1</span>)) + min;<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(getRandom(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>));<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h1 id="随机点名"><a href="#随机点名" class="headerlink" title="随机点名"></a>随机点名</h1><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">&lt;script&gt;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  * 生成两个整数之间的随机整数，并且要包含这两个整数</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandom</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min + <span class="hljs-number">1</span>)) + min;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;许嵩&#x27;</span>, <span class="hljs-string">&#x27;邓紫棋&#x27;</span>, <span class="hljs-string">&#x27;毛不易&#x27;</span>, <span class="hljs-string">&#x27;解忧邵帅&#x27;</span>];<br>  <span class="hljs-keyword">const</span> index = getRandom(<span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>); <span class="hljs-comment">// 生成随机的index</span><br>  <span class="hljs-built_in">console</span>.log(arr[index]); <span class="hljs-comment">// 随机点名</span><br><br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>random</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决AntdPro中ModalForm表单重置问题</title>
    <link href="/2021/07/29/%E8%A7%A3%E5%86%B3AntdPro%E4%B8%ADModalForm%E8%A1%A8%E5%8D%95%E9%87%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <url>/2021/07/29/%E8%A7%A3%E5%86%B3AntdPro%E4%B8%ADModalForm%E8%A1%A8%E5%8D%95%E9%87%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="解决-AntdPro-中-ModalForm-表单重置问题"><a href="#解决-AntdPro-中-ModalForm-表单重置问题" class="headerlink" title="解决 AntdPro 中 ModalForm 表单重置问题"></a>解决 AntdPro 中 ModalForm 表单重置问题</h1><p>需求是我们点击弹窗确定之后，第二次再次点击弹窗表单数据清除。</p><h2 id="Modal"><a href="#Modal" class="headerlink" title="Modal"></a>Modal</h2><p>先看看 antd 中的 Modal 是如何配置的</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th><th><strong>类型</strong></th><th><strong>默认值</strong></th><th><strong>版本</strong></th></tr></thead><tbody><tr><td><strong>destroyOnClose</strong></td><td>关闭时销毁 Modal 里的子元素</td><td>boolean</td><td>false</td><td></td></tr></tbody></table><h3 id="destroyOnClose-使用方法"><a href="#destroyOnClose-使用方法" class="headerlink" title="destroyOnClose 使用方法"></a>destroyOnClose 使用方法</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">&lt;Modal<br>  title=<span class="hljs-string">&quot;添加用户&quot;</span><br>  visible=&#123;isModalVisible&#125;<br>  onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>  footer=&#123;<span class="hljs-literal">null</span>&#125;<br>  destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;&lt;/Modal&gt;<br></code></pre></div></td></tr></table></figure><p>可以看到在 Modal 中直接给<code>destroyOnClose=&#123;true&#125;</code>就可以清除元素里边的东西。</p><h2 id="ModalForm"><a href="#ModalForm" class="headerlink" title="ModalForm"></a>ModalForm</h2><p>ModalForm 组合了 Modal 和 ProForm 可以减少繁琐的状态管理。<br>先来看官方文档<a href="https://procomponents.ant.design/components/modal-form/#api">https://procomponents.ant.design/components/modal-form/#api</a><br><img src="https://i.loli.net/2021/07/29/a3JqodGrRPuVBKF.png#id=bbFOg&originHeight=568&originWidth=1203&originalType=binary&ratio=1&status=done&style=none"><br>官方文档的方法是通过<strong>formRef</strong>手动重置，但是我们想要的是点击确定之后，第二次再次点击弹窗表单数据清除。</p><h3 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th><th><strong>类型</strong></th><th><strong>默认值</strong></th></tr></thead><tbody><tr><td><strong>trigger</strong></td><td>用于触发 Modal 打开的 dom，一般是 button</td><td>ReactNode</td><td>-</td></tr><tr><td><strong>visible</strong></td><td>是否打开</td><td>boolean</td><td>-</td></tr><tr><td><strong>onVisibleChange</strong></td><td>visible 改变时触发</td><td>(visible:boolean)=&gt;void</td><td>-</td></tr><tr><td><strong>modalProps</strong></td><td>Modal 的 props，使用方式与 <a href="https://ant.design/components/modal-cn/">antd</a></td><td></td><td></td></tr><tr><td>相同。注意：不支持 ‘visible’，请使用全局的 visible</td><td><a href="https://ant.design/components/modal-cn/#API">props</a></td><td>-</td><td></td></tr><tr><td><strong>title</strong></td><td>弹框的标题</td><td>ReactNode</td><td>-</td></tr><tr><td><strong>width</strong></td><td>弹框的宽度</td><td>Number</td><td>-</td></tr><tr><td><strong>onFinish</strong></td><td>提交数据时触发，如果返回一个 true。会关掉抽屉,如果配置了 destroyOnClose 还会重置表单。</td><td>async (values)=&gt;boolean</td><td>-</td></tr><tr><td><strong>submitter</strong></td><td>提交按钮相关配置，使用方式与<a href="https://procomponents.ant.design/components/form">ProForm</a></td><td></td><td></td></tr><tr><td>相同。</td><td><a href="https://procomponents.ant.design/components/form">ProForm</a></td><td>-</td><td></td></tr></tbody></table><p>Antdpro 中的 ModalForm 是集合 Modal 和 ProForm 了其中 <strong>onFinish</strong> 有一个 destroyOnClose 属性需要配置才会重置表单，但是在 MadalForm 中没有明确说明<br>在程序中找到 <strong>ModalForm</strong> 一层一层的找进去<br>第一层：有基本常用的属性。但是有一个 <strong>modalProps</strong> 在点进去看</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; ModalProps, FormProps &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; CommonFormProps &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../BaseForm&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> ModalFormProps&lt;T = Record&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>&gt;&gt; = Omit&lt;<br>  FormProps&lt;T&gt;,<br>  <span class="hljs-string">&#x27;onFinish&#x27;</span> | <span class="hljs-string">&#x27;title&#x27;</span><br>&gt; &amp;<br>  CommonFormProps&lt;T&gt; &amp; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接受返回一个boolean，返回 true 会关掉这个弹窗</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@name </span>表单结束后调用</span><br><span class="hljs-comment">     */</span><br>    onFinish?: <span class="hljs-function">(<span class="hljs-params">formData: T</span>) =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">boolean</span> | <span class="hljs-built_in">void</span>&gt;<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@name </span>用于触发抽屉打开的 dom */</span><br>    trigger?: JSX.Element<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@name </span>受控的打开关闭 */</span><br>    visible?: ModalProps[<span class="hljs-string">&#x27;visible&#x27;</span>]<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@name </span>打开关闭的事件 */</span><br>    onVisibleChange?: <span class="hljs-function">(<span class="hljs-params">visible: <span class="hljs-built_in">boolean</span></span>) =&gt;</span> <span class="hljs-built_in">void</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 不支持 &#x27;visible&#x27;，请使用全局的 visible</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@name </span>弹框的属性</span><br><span class="hljs-comment">     */</span><br>    modalProps?: Omit&lt;ModalProps, <span class="hljs-string">&#x27;visible&#x27;</span>&gt;<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@name </span>弹框的标题 */</span><br>    title?: ModalProps[<span class="hljs-string">&#x27;title&#x27;</span>]<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@name </span>弹框的宽度 */</span><br>    width?: ModalProps[<span class="hljs-string">&#x27;width&#x27;</span>]<br>  &#125;<br><span class="hljs-keyword">declare</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ModalForm</span>&lt;<span class="hljs-title">T</span> = <span class="hljs-title">Record</span>&lt;<span class="hljs-title">string</span>, <span class="hljs-title">any</span>&gt;&gt;(<span class="hljs-params">&#123;</span></span><br><span class="hljs-function"><span class="hljs-params">  children,</span></span><br><span class="hljs-function"><span class="hljs-params">  trigger,</span></span><br><span class="hljs-function"><span class="hljs-params">  onVisibleChange,</span></span><br><span class="hljs-function"><span class="hljs-params">  modalProps,</span></span><br><span class="hljs-function"><span class="hljs-params">  onFinish,</span></span><br><span class="hljs-function"><span class="hljs-params">  title,</span></span><br><span class="hljs-function"><span class="hljs-params">  width,</span></span><br><span class="hljs-function"><span class="hljs-params">  ...rest</span></span><br><span class="hljs-function"><span class="hljs-params">&#125;: ModalFormProps&lt;T&gt;</span>): <span class="hljs-title">JSX</span>.<span class="hljs-title">Element</span></span><br><span class="hljs-function"><span class="hljs-title">export</span> <span class="hljs-title">default</span> <span class="hljs-title">ModalForm</span></span><br></code></pre></div></td></tr></table></figure><p>第二层： <strong>ModalProps <strong>内部有所有属性，其中有</strong>destroyOnClose?: boolean;</strong></p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> ModalProps &#123;<br>  destroyOnClose?: <span class="hljs-built_in">boolean</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>所以我们找到了<strong>destroyOnClose</strong>的使用方法</p><h3 id="destroyOnClose-使用方法-1"><a href="#destroyOnClose-使用方法-1" class="headerlink" title="destroyOnClose 使用方法"></a>destroyOnClose 使用方法</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">&lt;ModalForm<br>  title=<span class="hljs-string">&quot;添加佣金&quot;</span><br>  width=<span class="hljs-string">&quot;400px&quot;</span><br>  visible=&#123;createModalVisible&#125;<br>  onVisibleChange=&#123;handleModalVisible&#125;<br>  modalProps=&#123;&#123;<br>    destroyOnClose: <span class="hljs-literal">true</span>,<br>  &#125;&#125;<br>  onFinish=&#123;<span class="hljs-keyword">async</span> value =&gt; &#123;<br>    <span class="hljs-built_in">console</span>.log(value)<br>  &#125;&#125;&gt;&lt;/ModalForm&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd</tag>
      
      <tag>Antd Pro</tag>
      
      <tag>Modal</tag>
      
      <tag>ModalForm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用border画三角形</title>
    <link href="/2021/07/27/%E5%88%A9%E7%94%A8border%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
    <url>/2021/07/27/%E5%88%A9%E7%94%A8border%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="利用border画三角形"><a href="#利用border画三角形" class="headerlink" title="利用border画三角形"></a>利用border画三角形</h1><h2 id="方法一：直角三角形"><a href="#方法一：直角三角形" class="headerlink" title="方法一：直角三角形"></a>方法一：直角三角形</h2><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">100px</span> solid white;<br>    <span class="hljs-attribute">border-top-color</span>: red;<br>    <span class="hljs-attribute">border-bottom</span>: none;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>效果图<br><img src="https://i.loli.net/2021/07/27/bweoimcaqITKWg6.png#id=QWkAM&originHeight=145&originWidth=206&originalType=binary&ratio=1&status=done&style=none"></p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>先将我们的元素宽高设置为0，然后利用border设置实线白底边框，最后只设置边框顶部颜色，取消底部，就实现了直角三角形</p><h2 id="方法二：等腰三角形"><a href="#方法二：等腰三角形" class="headerlink" title="方法二：等腰三角形"></a>方法二：等腰三角形</h2><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border-top</span>: <span class="hljs-number">100px</span> solid red;<br>    <span class="hljs-comment">/* 通过border-left和border-right中的像素值来改变三角形的行踪 */</span><br>    <span class="hljs-attribute">border-left</span>: <span class="hljs-number">150px</span> solid white;<br>    <span class="hljs-attribute">border-right</span>: <span class="hljs-number">150px</span> solid white;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>效果图<br><img src="https://i.loli.net/2021/07/27/okFBgH8vx3Zp5fu.png#id=ywGLT&originHeight=127&originWidth=314&originalType=binary&ratio=1&status=done&style=none"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>原理与第一个正好相反，是单独设置上左右边框。先设置元素宽高为0，然后设置顶部边框的像素、实线和颜色，<br>最后分别设置左右边框的像素、实线和白色边框色。<br>PS：border-left和border-rigth的不同像素可以设置不同的三角形。</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>画三角形</tag>
      
      <tag>border</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML5新增API</title>
    <link href="/2021/07/19/HTML5%E6%96%B0%E5%A2%9EAPI/"/>
    <url>/2021/07/19/HTML5%E6%96%B0%E5%A2%9EAPI/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML5-新增-API"><a href="#HTML5-新增-API" class="headerlink" title="HTML5 新增 API"></a>HTML5 新增 API</h1><h2 id="1-检查网络连接状态"><a href="#1-检查网络连接状态" class="headerlink" title="1. 检查网络连接状态"></a>1. 检查网络连接状态</h2><ul><li>旧版本：检测网络是否可用</li></ul><p>通过 window.navifator.onLine 来检测网络是否可用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">alert(<span class="hljs-built_in">window</span>.navigator.onLine);<br></code></pre></div></td></tr></table></figure><ul><li>H5 提供 2 个事件：online 和 offline</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//当网络连接的时候，自动检测，弹出P 显示网络已接通 然后消失</span><br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;online&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&#x27;.tips&#x27;</span>).text(<span class="hljs-string">&#x27;网络已接通&#x27;</span>).fadeIn(<span class="hljs-number">1000</span>).delay(<span class="hljs-number">1000</span>).fadeOut();<br>&#125;);<br><br><span class="hljs-comment">//当网络断开的时候，自动检测，弹出P</span><br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;offline&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  $(<span class="hljs-string">&#x27;.tips&#x27;</span>).text(<span class="hljs-string">&#x27;网络已断开&#x27;</span>).fadeIn(<span class="hljs-number">1000</span>).delay(<span class="hljs-number">1000</span>).fadeOut();<br>&#125;);<br><br><span class="hljs-comment">//delay( fast | slow | 毫秒）表示延迟的时长</span><br></code></pre></div></td></tr></table></figure><h2 id="2-全屏"><a href="#2-全屏" class="headerlink" title="2. 全屏"></a>2. 全屏</h2><p>HTML5 规范允许用户自定义网页上任一元素全屏显示。<br>注：全屏存在浏览器的兼容性问题，不同的浏览器需要添加不同的前缀 webkit（谷歌） moz（火狐） ms（IE） o（欧朋）</p><h3 id="2-1-全屏显示"><a href="#2-1-全屏显示" class="headerlink" title="2.1 全屏显示"></a>2.1 全屏显示</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//1.全屏显示</span><br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#full&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  div.webkitRequestFullScreen(); <span class="hljs-comment">//开启全屏</span><br>  <span class="hljs-comment">//能力检测 一个兼容性解决方法</span><br>  <span class="hljs-keyword">if</span> (div.requestFullScreen) &#123;<br>    <span class="hljs-comment">//正常检测</span><br>    div.requestFullScreen();<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (div.webkitRequestFullScreen) &#123;<br>    <span class="hljs-comment">//谷歌</span><br>    div.webkitRequestFullScreen();<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (div.mozRequestFullScreen) &#123;<br>    <span class="hljs-comment">//火狐</span><br>    div.mozRequestFullScreen();<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (div.msRequestFullscreen) &#123;<br>    <span class="hljs-comment">//IE内核，注意IE中有坑，需要将Screen中的s小写</span><br>    div.msRequestFullscreen(); <span class="hljs-comment">//ms 里面这样写的msRequestFullscreen S小写</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    div.oRequestFullScreen(); <span class="hljs-comment">//欧朋</span><br>  &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>特别注意： 当兼容 IE 浏览器时，ms 里面这样写的 msRequestFullscreen S 小写</p><h3 id="2-2-取消全屏显示"><a href="#2-2-取消全屏显示" class="headerlink" title="2.2 取消全屏显示"></a>2.2 取消全屏显示</h3><p><strong>存在浏览器兼容问题，此处只列举一种</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//2.取消全屏 跟元素是没有关系的 与document相关</span><br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#cancelFull&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">document</span>.webkitCancelFullScreen();<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="2-3-是否全屏显示"><a href="#2-3-是否全屏显示" class="headerlink" title="2.3 是否全屏显示"></a>2.3 是否全屏显示</h3><p><strong>存在浏览器兼容问题，此处只列举一种</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//3.是否是全屏</span><br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#isFull&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  alert(<span class="hljs-built_in">document</span>.webkitIsFullScreen);<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="2-4-全屏伪类选择器"><a href="#2-4-全屏伪类选择器" class="headerlink" title="2.4 全屏伪类选择器"></a>2.4 全屏伪类选择器</h3><p><strong>有兼容性问题 需要添加前缀 此处只列举一种</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">div:-webkit-full-screen&#123;<br>     background-color: #4fff88;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="3-文件读取"><a href="#3-文件读取" class="headerlink" title="3. 文件读取"></a>3. 文件读取</h2><p>通过 FileReader 对象我们可以读取本地存储的文件，使用 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/DOM/File">File</a>对象来指定所要读取的文件或数据。其中 File 对象可以是来自用户在一个 元素上选择文件后返回的<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/DOM/FileList">FileList</a>对象，也可以来自由拖放操作生成的 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer">DataTransfer</a></p><h3 id="3-1-Files-对象"><a href="#3-1-Files-对象" class="headerlink" title="3.1 Files 对象"></a>3.1 Files 对象</h3><p>由于 HTML5 中我们可以通过为表单元素添加 multiple 属性，因此我们通过<input type="file" multiple>上传文件后得到的是一个 Files 对象（伪数组形式）。<br>multiple: 表示可以同时选择多个上传文件</p><h3 id="3-2FileReader-对象"><a href="#3-2FileReader-对象" class="headerlink" title="3.2FileReader 对象"></a>3.2FileReader 对象</h3><p>HTML5 新增内建对象，可以读取本地文件内容。<br>var reader = new FileReader; 可以实例化一个对象</p><ul><li><a href="https://juejin.cn/post/6844903889234313229#readAsDataURL()">readAsDataURL</a>() 以 DataURL 形式读取文件(用于图片的显示)</li><li>事件监听：onload 当文读取完成时调用</li><li>属性：result 文件读取结果</li></ul><p><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">FileReader 对象使用的参考资料</a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//  上传文件，借助于文件域 input file</span><br><span class="hljs-keyword">var</span> file = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#fl&#x27;</span>);<br><span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br>file.onchange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//当发生改变的时候  （下拉菜单，select也是这个事件）</span><br>  <span class="hljs-comment">//初始化一个reader对象</span><br>  <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> FileReader();<br>  <span class="hljs-comment">//读取文本里面的内容</span><br>  reader.readAsText(<span class="hljs-built_in">this</span>.files[<span class="hljs-number">0</span>]);<br>  <span class="hljs-comment">// 把读取的内容显示到 页面中</span><br>  reader.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    div.innerHTML = <span class="hljs-built_in">this</span>.result;<br>  &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="4-地理定位"><a href="#4-地理定位" class="headerlink" title="4 地理定位"></a>4 地理定位</h2><p>在 HTML 规范中，增加了获取用户地理信息的 API，这样使得我们可以基于用户位置开发互联网应用，即基于位置服务 (Location Base Service)</p><h3 id="4-1-API-详解"><a href="#4-1-API-详解" class="headerlink" title="4.1 API 详解"></a>4.1 API 详解</h3><ol><li>获取当前地理信息</li></ol><p><code>navigator.geolocation.getCurrentPosition(successCallback, errorCallback)</code></p><ol><li>重复获取当前地理信息</li></ol><p><code>navigator. geolocation.watchPosition(successCallback, errorCallback)</code><br>当成功获取地理信息后，会调用 succssCallback，并返回一个包含位置信息的对象 position。</p><ul><li>position.coords.latitude 纬度</li><li>position.coords.longitude 经度</li><li>position.coords.accuracy 精度</li><li>position.coords.altitude 海拔高度</li></ul><p>当获取地理信息失败后，会调用 errorCallback，并返回错误信息 error<br><a href="https://link.juejin.cn/?target=toc">参考资料</a></p><ul><li><a href="https://link.juejin.cn/?target=http://www.w3school.com.cn/html5/html_5_geolocation.asp">w3school_HTML5 地理定位</a></li></ul><h3 id="4-2-应用"><a href="#4-2-应用" class="headerlink" title="4.2 应用"></a>4.2 应用</h3><p>在现实开发中，通过调用第三方 API（如百度地图）来实现地理定位信息，这些 API 都是基于用户当前位置的，并将用位置位置（经/纬度）当做参数传递，就可以实现相应的功能。<br><a href="https://link.juejin.cn/?target=toc">参考资料</a></p><ul><li><a href="https://link.juejin.cn/?target=http://lbsyun.baidu.com/">百度地图 api</a></li></ul><h2 id="5-拖拽"><a href="#5-拖拽" class="headerlink" title="5 拖拽"></a>5 拖拽</h2><p>在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。</p><h3 id="5-1-拖拽和释放"><a href="#5-1-拖拽和释放" class="headerlink" title="5.1 拖拽和释放"></a>5.1 拖拽和释放</h3><ul><li>拖拽：Drag</li><li>释放：Drop 拖拽指的是鼠标点击源对象后一直移动对象不松手，一但松手即释放了</li></ul><h3 id="5-2-设置元素为可拖放"><a href="#5-2-设置元素为可拖放" class="headerlink" title="5.2 设置元素为可拖放"></a>5.2 设置元素为可拖放</h3><p>draggable 属性：就是标签元素要设置 draggable=true，否则不会有效果<br>注意： 链接和图片默认是可拖动的，不需要 draggable 属性。</p><h3 id="5-2-拖拽-API-的相关事件"><a href="#5-2-拖拽-API-的相关事件" class="headerlink" title="5.2 拖拽 API 的相关事件"></a>5.2 拖拽 API 的相关事件</h3><p><strong>被拖动的源对象可以触发的事件：</strong></p><ul><li>(1)ondragstart：源对象开始被拖动</li><li>(2)ondrag：源对象被拖动过程中(鼠标可能在移动也可能未移动)</li><li>(3)ondragend：源对象被拖动结束</li></ul><p><strong>拖动源对象可以进入到上方的目标对象可以触发的事件：</strong></p><ul><li>(1)ondragenter：目标对象被源对象拖动着进入</li><li>(2)ondragover：目标对象被源对象拖动着悬停在上方</li><li>(3)ondragleave：源对象拖动着离开了目标对象</li><li>(4)ondrop：源对象拖动着在目标对象上方释放/松手</li></ul><h3 id="5-3-DataTransfer"><a href="#5-3-DataTransfer" class="headerlink" title="5.3 DataTransfer"></a>5.3 DataTransfer</h3><p>在进行拖放操作时，DataTransfer 对象用来保存被拖动的数据。它可以保存一项或多项数据、一种或者多种数据类型 <a href="https://link.juejin.cn/?target=toc">参考文档</a></p><ul><li><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer">DataTransfer 的使用</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// (1)ondragstart：源对象开始被拖动,存放被拖动元素的数据</span><br><span class="hljs-built_in">document</span>.ondragstart = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>  event.dataTransfer.setData(<span class="hljs-string">&#x27;text/html&#x27;</span>, event.target.id);<br>&#125;;<br><br><span class="hljs-comment">// (4)ondrop：源对象拖动着在目标对象上方释放/松手</span><br><span class="hljs-comment">// 获取存储的数据，进行追加到目标对象中</span><br><span class="hljs-built_in">document</span>.ondrop = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> id = event.dataTransfer.getData(<span class="hljs-string">&#x27;text/html&#x27;</span>);<br>  event.target.appendChild(<span class="hljs-built_in">document</span>.getElementById(id));<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="6-Web-存储"><a href="#6-Web-存储" class="headerlink" title="6 Web 存储"></a>6 Web 存储</h2><p>HTML5 规范提出了 web 本地存储大量数据，分别是 sessionStorage 与 localStorage</p><h3 id="6-1-特性"><a href="#6-1-特性" class="headerlink" title="6.1 特性"></a>6.1 特性</h3><ol><li>设置、读取方便、页面刷新不丢失数据</li><li>容量较大，sessionStorage 约 5M、localStorage 约 20M</li><li>只能存储字符串，可以将对象 JSON.stringify() 编码后存储</li></ol><h3 id="6-2-window-sessionStorage"><a href="#6-2-window-sessionStorage" class="headerlink" title="6.2 window.sessionStorage"></a>6.2 window.sessionStorage</h3><ol><li>生命周期为关闭浏览器窗口</li><li>在同一个窗口(页面)下数据可以共享</li></ol><h3 id="6-3-window-localStorage"><a href="#6-3-window-localStorage" class="headerlink" title="6.3 window.localStorage"></a>6.3 window.localStorage</h3><ol><li>永久生效，除非手动删除 关闭页面也会存在</li><li>可以多窗口（页面）共享（同一浏览器可以共享）</li></ol><h3 id="6-4-方法详解"><a href="#6-4-方法详解" class="headerlink" title="6.4 方法详解"></a>6.4 方法详解</h3><ul><li>setItem(key, value) 设置存储内容</li><li>getItem(key) 读取存储内容</li><li>removeItem(key) 删除键值为 key 的存储内容</li><li>clear() 清空所有存储内容 (<strong>慎用</strong>)</li></ul><h2 id="7-应用缓存"><a href="#7-应用缓存" class="headerlink" title="7 应用缓存"></a>7 应用缓存</h2><p>HTML5 中我们可以轻松的构建一个离线（无网络状态）应用，只需要创建一个 cache manifest 文件。<br>一个普通文本文件，其中列出了浏览器应缓存以供离线访问的资源，推荐使用.appcache 为后缀名<br>例如我们创建了一个名为 demo.appcache 的文件，然后在需要应用缓存在页面的根元素(html)添加属性 manifest=”demo.appcache”，路径要保证正确。</p><h3 id="7-1-manifest-文件格式"><a href="#7-1-manifest-文件格式" class="headerlink" title="7.1 manifest 文件格式*"></a>7.1 manifest 文件格式*</h3><ol><li>顶行写 CACHE MANIFEST（cache manifest）</li><li>CACHE: 换行 指定我们需要缓存的静态资源，如.css、image、js 等</li><li>NETWORK: 换行 指定需要在线访问的资源，可使用通配符</li><li>FALLBACK: 换行 当被缓存的文件找不到时的备用资源</li></ol><p><img src="https://i.loli.net/2021/07/15/RTzDliavXx3YACI.png#id=BuWdz&originHeight=351&originWidth=748&originalType=binary&ratio=1&status=done&style=none"></p><h3 id="7-2-其它注意"><a href="#7-2-其它注意" class="headerlink" title="7.2 其它注意"></a>7.2 其它注意</h3><p>1、CACHE: 可以省略，这种情况下将需要缓存的资源写在 CACHE MANIFEST<br>2、可以指定多个 CACHE: NETWORK: FALLBACK:，无顺序限制<br>3、#表示注释，只有当 demo.appcache 文件内容发生改变时或者手动清除缓存后，才会重新缓存。<br>4、chrome 可以通过 chrome://appcache-internals/工具和离线（offline）模式来调试管理应用缓存</p><h2 id="8-多媒体"><a href="#8-多媒体" class="headerlink" title="8 多媒体"></a>8 多媒体</h2><p>方法：load()、play()、pause()<br>属性：currentSrc、currentTime、duration<br>事件：oncanplay， ontimeupdate，onended 等<br><a href="https://link.juejin.cn/?target=http://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp">参考文档</a><br><a href="https://link.juejin.cn/?target=http://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp">www.w3school.com.cn/tags/html_r…</a></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>px rem em vh vw之间的区别到底是啥</title>
    <link href="/2021/07/18/px%20_%20rem%20_%20em%20_%20vh%20_%20vw/"/>
    <url>/2021/07/18/px%20_%20rem%20_%20em%20_%20vh%20_%20vw/</url>
    
    <content type="html"><![CDATA[<h1 id="px-rem-em-vh-vw-之间的区别到底是啥？"><a href="#px-rem-em-vh-vw-之间的区别到底是啥？" class="headerlink" title="px rem em vh vw 之间的区别到底是啥？"></a>px rem em vh vw 之间的区别到底是啥？</h1><p>传统的项目开发中，我么只会用到 px、%、em 这几个单位，它们可以适用于大部分的项目开发，并且具有良好的兼容性。<br>从<strong>CSS3</strong>开始，浏览器对计量单位的支持又提升到了另外一个境界，新增了 rem、vh、vw、vm 等一些新的计量单位。<br>利用这些新的单位开发出比较良好的响应式页面，适应多种不同分辨率的终端，包括移动设备等。</p><h2 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h2><p>在 css 单位中，可以分为长度单位、绝对单位，如下表所指示</p><table><thead><tr><th>CSS 单位</th><th></th></tr></thead><tbody><tr><td>相对长度单位</td><td>em、ex、ch、rem、vw、vh、vmin、vmax、%</td></tr><tr><td>绝对长度单位</td><td>cm、mm、in、px、pt、pc</td></tr></tbody></table><p>今天我们主要讲讲 px、em、rem、vh、vw、vm 之间的区别</p><h2 id="绝对长度"><a href="#绝对长度" class="headerlink" title="绝对长度"></a>绝对长度</h2><h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><p>px 是像素值，是一个固定的长度，比如我们的米，厘米一样。</p><h2 id="相对长度"><a href="#相对长度" class="headerlink" title="相对长度"></a>相对长度</h2><p><strong>为什么我们需要相对长度 rem em 等？</strong><br>固定长度已经不能满足我们现在的需求了。<br>举例：比如我们在缩小我们屏幕的时候，我们不仅仅是需要缩小我们的盒子的宽高，我们还想要让我们字体大小也随之缩小，这样用户体验会更好一点。</p><h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><h4 id="rem-与-px-的计算关系"><a href="#rem-与-px-的计算关系" class="headerlink" title="rem 与 px 的计算关系"></a>rem 与 px 的计算关系</h4><p>rem 的值是 px 的倍数<br>默认情况下 font-size = 16px,那么 1rem = 16px</p><h4 id="rem-如何修改与-px-的相对计算关系"><a href="#rem-如何修改与-px-的相对计算关系" class="headerlink" title="rem 如何修改与 px 的相对计算关系"></a>rem 如何修改与 px 的相对计算关系</h4><p>我们可以在并且只能在<strong>html 标签</strong>（因为 html 节点是根节点，就是 rem 里面的 r：root）里面修改 font-size : 32px， 从而 1rem = 32px</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol><li> rem 单位可谓集相对大小和绝对大小的优点于一身</li><li> 和 em 不同的是 rem 总是相对于根元素，而不像 em 一样使用级联的方式来计算尺寸</li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;div-rem&quot;</span>&gt;rem&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/* rem的用法 */</span><br>html&#123;<br>    font-size:16px;  <span class="hljs-comment">// 1rem = 16px</span><br>&#125;<br><br>.div-rem&#123;<br>    width: 10rem;    <span class="hljs-comment">// 10rem = 10 x 16 = 160px</span><br>    height: 10rem;   <span class="hljs-comment">// 10rem = 10 x 16 = 160px</span><br>    font-size: 1rem; <span class="hljs-comment">// 1rem = 16px</span><br>    background-color: #a58778;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><h4 id="em-与-px-的计算关系"><a href="#em-与-px-的计算关系" class="headerlink" title="em 与 px 的计算关系"></a>em 与 px 的计算关系</h4><p>em 的值是 px 的倍数<br>默认情况下 font-size = 16px,那么 1em = 16px</p><h4 id="em-如何修改与-px-的相对计算关系"><a href="#em-如何修改与-px-的相对计算关系" class="headerlink" title="em 如何修改与 px 的相对计算关系"></a>em 如何修改与 px 的相对计算关系</h4><p>我们可以在自己元素上面修改 font-size : 32px， 从而 1em = 32px<br>如果自己元素上面没有设置 font-size, 我们也可以在父元素上面设置 font-size，从而来影响自己元素（子元素）使用的 em 的值。</p><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><ul><li>em 的值并不是固定的</li><li>em 会继承父级元素的字体大小</li><li>em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</li><li>任意浏览器的默认字体高都是 16px</li></ul><h4 id="rem-与-em-的区别"><a href="#rem-与-em-的区别" class="headerlink" title="rem 与 em 的区别"></a>rem 与 em 的区别</h4><p>上面也正是 rem 与 em 的区别：<br>rem 只能在 html 标签里面设置 rem 的依赖的值到底是多少<br>而 em 是可以在自己元素以及父级元素设置 em 依赖的值到底是多少</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!--em1--&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;div-em&quot;</span>&gt;em&lt;/div&gt;<br><br>&lt;!--em2--&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;div-em-father&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;div-em-child&quot;</span>&gt;em child&lt;/div&gt;<br>&lt;/div&gt;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-comment">/* em的用法1：自己元素设置font-size的值来当作em的参照值 */</span><br>.div-em&#123;<br>    font-size: 32px;  <span class="hljs-comment">// 1em = 32px</span><br><br>    width: 10em;      <span class="hljs-comment">// 10em = 10 x 32 = 320px</span><br>    height: 10em;     <span class="hljs-comment">// 10em = 10 x 32 = 320px</span><br>    background-color: aquamarine;<br>&#125;<br><br><br> <span class="hljs-comment">/* em的用法2：自己元素不设置，而父级元素设置font-size的值来当作em的参照值 */</span><br>.div-em-father&#123;<br>    font-size: 64px;  <span class="hljs-comment">// 1em = 64px</span><br>&#125;<br><br>.div-em-child&#123;<br>    width: 10em;     <span class="hljs-comment">// 10em = 10 x 64 = 640px</span><br>    height: 10em;    <span class="hljs-comment">// 10em = 10 x 64 = 640px</span><br>    background-color: cadetblue;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="vh-vw"><a href="#vh-vw" class="headerlink" title="vh vw"></a>vh vw</h3><p>vh 和 vw 就是根据窗口的宽高，分成 100 等份，100vh 就表示满高，50vh 就表示一半高。<br><strong>那么 vh 和 vw 与百分比的区别是什么？</strong><br>百分比是基于父元素的设置而言的，如果父元素为 100px，那么子元素 100%也就是 100px。<br>而 vh 和 vw 始终是针对窗口的宽高。<br><strong>这里的窗口分成几种情况：</strong></p><ul><li>在桌面端，指的是浏览器的可视区域</li><li>移动端指的就是布局视口</li></ul><p>像 vw、vh，比较容易混淆的一个单位是%，不过百分比宽泛的讲是相对于父元素：</p><ul><li>对于普通定位元素就是我们理解的父元素</li><li>对于 position: absolute;的元素是相对于已定位的父元素</li><li>对于 position: fixed;的元素是相对于 ViewPort（可视窗口）</li></ul><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!--vh vw--&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;div-vh-vw&quot;</span>&gt;<br><br>    &lt;!--百分比%--&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;div-vh-vw-child&quot;</span>&gt;&lt;/div&gt;<br><br>&lt;/div&gt;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-comment">/* vh vw 的用法：视窗最为参照值 */</span><br>.div-vh-vw&#123;<br>    width: 10vw;  <span class="hljs-comment">// 视窗宽度的 1/10</span><br>    height: 10vh;  <span class="hljs-comment">// 视窗高度的 1/10</span><br>    background-color: pink;<br>&#125;<br><br><span class="hljs-comment">/* %百分比的用法：父元素的宽高作为参照值 */</span><br>.div-vh-vw-child&#123;<br>    width: <span class="hljs-number">50</span>%;<br>    height: <span class="hljs-number">50</span>%;<br>    background-color: aliceblue;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>最后看看显示结果（rem 与 em 的代码）</strong><br><img src="https://i.loli.net/2021/07/16/foqmrYi6CJAtXT5.png#id=ZujrQ&originHeight=1191&originWidth=960&originalType=binary&ratio=1&status=done&style=none"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>「px」：绝对单位，页面按精确像素展示</li><li>「em」：相对单位，基准点为父节点字体的大小，如果自身定义了 font-size 按自身来计算，整个页面内 1em 不是一个固定的值</li><li>「rem」：相对单位，可理解为 root em, 相对根节点 html 的字体大小来计算</li><li>「vh、vw」：主要用于页面视口大小布局，在页面布局上更加方便简单</li><li>「vm」：对于视口的宽度或高度中较小的那个,使用方法和 vh\vm 类似</li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js</title>
    <link href="/2021/07/14/Node.js/"/>
    <url>/2021/07/14/Node.js/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="Node-介绍"><a href="#Node-介绍" class="headerlink" title="Node 介绍"></a>Node 介绍</h2><p>1.命令行窗口(小黑屏)、CMD 窗口、终端、shell</p><p>开始菜单 –&gt; 运行 –&gt; CMD –&gt; 回车</p><h3 id="常用的指令："><a href="#常用的指令：" class="headerlink" title="常用的指令："></a>常用的指令：</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">dir列出当前目录下的所有文件<br>cd 目录名 进入到指定的目录<br>md 目录名 创建一个文件夹<br>rd 目录名 删除一个文件夹<br></code></pre></div></td></tr></table></figure><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>. 表示当前目录<br>.. 表示上一级目录</p><h3 id="环境变量（windows-系统中变量）"><a href="#环境变量（windows-系统中变量）" class="headerlink" title="环境变量（windows 系统中变量）"></a>环境变量（windows 系统中变量）</h3><p>path</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">C:\work\jdk\jdk1<span class="hljs-number">.7</span><span class="hljs-number">.0_75</span>/bin;<br>%CATALINA_HOME%/bin;<br>C:\work\soft\tools\AppServ\Apache24\bin;<br>C:\work\soft\tools\AppServ\php5;<br>C:\Users\lilichao\AppData\Local\Programs\Fiddler;<br>C:\work\environment\Egret\Egret Wing <span class="hljs-number">3</span>\bin;<br>C:\Users\lilichao\AppData\Roaming\npm;<br>C:\Program Files\MongoDB\Server\<span class="hljs-number">3.2</span>\bin;<br>C:\Users\lilichao\Desktop\hello<br></code></pre></div></td></tr></table></figure><p>当我们在命令行窗口打开一个文件，或调用一个程序时，系统会首先在当前目录下寻找文件程序，如果找到了则直接打开<br>如果没有找到则会依次到环境变量 path 的路径中寻找，直到找到为止如果没找到则报错<br>所以我们可以将一些经常需要访问的程序和文件的路径添加到 path 中，这样我们就可以在任意位置来访问这些文件和程序了</p><h3 id="I-O-Input-Output"><a href="#I-O-Input-Output" class="headerlink" title="I/O (Input/Output)"></a>I/O (Input/Output)</h3><p>I/O 操作指的是对磁盘的读写操作</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>Node 是对 ES 标准一个实现，Node 也是一个 JS 引擎，通过 Node 可以使 js 代码在服务器端执行<br>Node 仅仅对 ES 标准进行了实现，所以在 Node 中不包含 DOM 和 BOM<br>Node 中可以使用所有的内建对象<br>String Number Boolean Math Date RegExp Function Object Array<br>而 BOM 和 DOM 都不能使用，但是可以使用 console 也可以使用定时器（setTimeout() setInterval()）<br>Node 可以在后台来编写服务器<br>Node 编写服务器都是单线程的服务器<br>进程<br>进程就是一个一个的工作计划（工厂中的车间）<br>线程<br>线程是计算机最小的运算单位（工厂中的工人）线程是干活的<br>传统的服务器都是多线程的<br>每进来一个请求，就创建一个线程去处理请求<br>Node 的服务器单线程的<br>Node 处理请求时是单线程，但是在后台拥有一个 I/O 线程池</p><h3 id="Node-的用途"><a href="#Node-的用途" class="headerlink" title="Node 的用途"></a>Node 的用途</h3><ul><li>Web 服务 API，比如 REST</li><li>实时多人游戏</li><li>后端的 Web 服务，例如跨域、服务噐端的请求</li><li>基于 Web 的应用</li><li>多客户端的通信，如即时通信</li></ul><h3 id="为什么要学习-Node-js"><a href="#为什么要学习-Node-js" class="headerlink" title="为什么要学习 Node.js"></a>为什么要学习 Node.js</h3><ul><li><p>企业需求</p><ul><li><p>具有服务端开发经验更改</p></li><li><p>front-end</p></li><li><p>back-end</p></li><li><p>全栈开发工程师</p></li><li><p>基本的网站开发能力</p><ul><li>服务端</li><li>前端</li><li>运维部署</li></ul></li><li><p>多人社区</p></li></ul></li></ul><h3 id="Node-js-是什么"><a href="#Node-js-是什么" class="headerlink" title="Node.js 是什么"></a>Node.js 是什么</h3><ul><li><p>Node.js® is a JavaScript runtime built on <a href="https://v8.dev/">Chrome’s V8 JavaScript engine</a>.</p><ul><li>Node.js 不是一门语言</li><li>Node.js 是 JavaScript 运行时的环境</li><li>Node.js 既不是语言，也不是框架</li><li>简单点来讲就是 Node.js 可以解析和执行</li><li>Javascript 代码以前只有浏览器可以可以解析执行 Javascript 代码</li><li>也就是说现在的 Javascript 可以完全脱离浏览器来运行，一切都归功于： Node.js</li></ul></li><li><p>浏览器中的 JavaScript</p><ul><li>ECMAScript<ul><li>基本语法</li><li>if</li><li>var</li><li>function</li><li>Object</li><li>Array</li></ul></li><li>BOM</li><li>DOM</li></ul></li><li><p>Node.js 中的 JavaScript</p><ul><li><strong>没有 BOM，DOM</strong></li><li>ECMAScript</li><li>在 Node 中这个 JavaScript 执行环境为 JavaScript 提供了一些服务器级别的 API<ul><li>例如文件的读写</li><li>网络服务的构建</li><li>网络通信</li><li>http 服务器</li></ul></li></ul></li><li><p>构建与 Chrome 的 V8 引擎之上</p><ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome 的 V8 引擎是目前公认的解析执行 JavaScript 代码最快的</li><li>Node.js 的作者把 Google Chrome 中的 V8 引擎移植出来，开发了一个独立的 JavaScript 运行时环境</li></ul></li><li><p>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.</p><ul><li>envent-driven 事件驱动</li><li>non-blocking I/O mode   非阻塞 I/O 模型（异步）</li><li>ightweight and efficent.   轻量和高效</li></ul></li><li><p>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world</p><ul><li>npm 是世界上最大的开源生态系统</li><li>绝大多数 JavaScript 相关的包都存放在 npm 上，这样做的目的是为了让开发人员更方便的去下载使用</li><li>例如：npm install jquery</li></ul></li></ul><h3 id="Node-能做什么"><a href="#Node-能做什么" class="headerlink" title="Node 能做什么"></a>Node 能做什么</h3><ul><li><p>web 服务器后台</p></li><li><p>命令行工具</p><ul><li>npm(node)</li><li>git(c 语言)</li><li>hexo（node）</li><li>游戏服务器</li><li>接口服务器</li><li>…</li></ul></li><li><p>对于前端工程师来讲，接触 node 最多的是它的命令行工具</p><ul><li>自己写的很少，主要是用别人第三方的</li><li>webpack</li><li>gulp</li><li>npm</li></ul></li></ul><h3 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h3><p>Node 入门书籍：<a href="http://www.nodebeginner.org/index-zh-cn,html">http://www.nodebeginner.org/index-zh-cn.html</a><br>官方 API 文档（中文）：<a href="http://nodejs.cn/api/">http://nodejs.cn/api/</a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装-Node-环境"><a href="#安装-Node-环境" class="headerlink" title="安装 Node 环境"></a>安装 Node 环境</h3><ul><li><p>查看 Node 环境的版本号</p></li><li><p>下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p></li><li><p>安装：</p><ul><li>傻瓜式安装，一路<code>next</code></li><li>安装过再次安装会升级</li></ul></li><li><p>确认 Node 环境是否安装成功</p><ul><li>查看 node 的版本号：<code>node --version</code></li><li>或者<code>node -v</code></li></ul></li><li><p>配置环境变量</p></li></ul><h3 id="解析执行-JavaScript"><a href="#解析执行-JavaScript" class="headerlink" title="解析执行 JavaScript"></a>解析执行 JavaScript</h3><ol><li>创建编写 JavaScript 脚本文件</li><li>打开终端，定位脚本文件的所属目录</li><li>输入<code>node 文件名</code>执行对应的文件</li></ol><p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p><h3 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h3><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取:"></a>文件读取:</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//  1.使用fs核心模块</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-comment">// 2.读取文件</span><br>fs.readFile(<span class="hljs-string">&#x27;./data/a.txt&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;文件读取失败&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// console.log(data);</span><br>    <span class="hljs-comment">// &lt;Buffer 31 32 33 0d 0a 68 65 6c 6c 6f 20 6e 6f 64 65 ef bc 81&gt;</span><br>    <span class="hljs-comment">// 文件中存储的其实都是二进制数据0 1</span><br>    <span class="hljs-comment">// 这里为什么看到的不是0和1呢？原因是二进制转为16进制了</span><br>    <span class="hljs-comment">// 但是无论是二进制还是16进制，人类都不认识</span><br>    <span class="hljs-comment">// 所以我们可以通过 tostring方法把其转为我们能认识的字符</span><br>    <span class="hljs-built_in">console</span>.log(data.toString());<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><h5 id="1-使用-fs-核心模块"><a href="#1-使用-fs-核心模块" class="headerlink" title="1.使用 fs 核心模块"></a>1.使用 fs 核心模块</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>浏览器中的 JavaScript 是没有文件操作能力的//但是 Node 中的 JavaScript 具有文件操作能力<br>fs 是 file-system 的简写，就是文件系统的意思<br>在 Node 中如果想要进行文件的操作就必须引用 fs 这个核心模块<br>在 fs 这个和兴模块中，就提供了人所有文件操作相关的 API<br>例如 fs.readFile 就是用来读取文件的<br>​</p><ul><li>成功<ul><li>data 数据</li><li>error null</li></ul></li><li>失败<ul><li>data undefined 没有数据</li><li>error 错误对象</li></ul></li></ul><h5 id="2-读取文件readFile"><a href="#2-读取文件readFile" class="headerlink" title="2.读取文件readFile"></a>2.读取文件<code>readFile</code></h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">fs.readFile(<span class="hljs-string">&#x27;./data/a.txt&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><h4 id="文件写入："><a href="#文件写入：" class="headerlink" title="文件写入："></a>文件写入：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//  1.使用fs核心模块</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-comment">// 2.将数据写入文件</span><br>fs.writeFile(<span class="hljs-string">&#x27;./data/a.txt&#x27;</span>, <span class="hljs-string">&#x27;我是文件写入的信息&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;文件写入失败&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data.toString());<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><h5 id="1-使用-fs-核心模块-1"><a href="#1-使用-fs-核心模块-1" class="headerlink" title="1.使用 fs 核心模块"></a>1.使用 fs 核心模块</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h5 id="2-将数据写入文件"><a href="#2-将数据写入文件" class="headerlink" title="2.将数据写入文件"></a>2.将数据写入文件</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">fs.writeFile(<span class="hljs-string">&#x27;./data/a.txt&#x27;</span>,<span class="hljs-string">&#x27;我是文件写入的信息&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>&#123;&#125;<br><span class="hljs-comment">// 第一个参数：文件路径</span><br><span class="hljs-comment">// 第二个参数：文件内容</span><br><span class="hljs-comment">// 第三个参数：回调函数</span><br></code></pre></div></td></tr></table></figure><p>error</p><ul><li>成功：<ul><li>文件写入成功</li><li>error 是 nu11</li></ul></li><li>失败：<ul><li>文件写失败</li><li>error 就是错误对象</li></ul></li></ul><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><h4 id="http-1"><a href="#http-1" class="headerlink" title="http"></a>http</h4><p>1.创建 Server 2.监听 request 请求事件，设置请求处理函数 3.绑定端口号，启动服务器<br>服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.加载http核心模块</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-comment">// 2.使用http.createServer()创建一个web服务器</span><br><span class="hljs-keyword">var</span> server = http.createServer();<br><br><span class="hljs-comment">// 3.服务器要做的事儿</span><br><span class="hljs-comment">// 提供服务：对数据服务</span><br><span class="hljs-comment">// 发请求</span><br><span class="hljs-comment">//接收请求</span><br><span class="hljs-comment">//处理请求</span><br><span class="hljs-comment">//反馈（发送响应）</span><br><span class="hljs-comment">//当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span><br>server.on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;收到客户的请求了&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 4.绑定端口号，启动服务</span><br>server.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;runing... 服务器启动成功，可以通过 http://127.0.0.1:3000/ 来进行访问&#x27;</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>你可以使用 Node 非常轻松的构建一个 web 服务器<br>在 Node 中专门提供了一个核心模块 http<br>http 这个模块的职贡就是帮你创建编写服务器的</p><h5 id="1-加载-http-核心模块"><a href="#1-加载-http-核心模块" class="headerlink" title="1.加载 http 核心模块"></a>1.加载 http 核心模块</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h5 id="2-使用-http-createServer-创建一个-web-服务器"><a href="#2-使用-http-createServer-创建一个-web-服务器" class="headerlink" title="2.使用 http.createServer()创建一个 web 服务器"></a>2.使用 http.createServer()创建一个 web 服务器</h5><p>返回一个 Server 实例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> server = http.createServer();<br></code></pre></div></td></tr></table></figure><h5 id="3-服务器要做的事儿"><a href="#3-服务器要做的事儿" class="headerlink" title="3.服务器要做的事儿"></a>3.服务器要做的事儿</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">server.on(<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><p><strong>提供服务：对数据服务</strong></p><ul><li>发请求<ul><li>接收请求</li><li>处理请求</li><li>反馈（发送响应）</li></ul></li><li>注册 request 请求事件<ul><li>当客户端请求过来，就会自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理函数</li></ul></li></ul><h5 id="4-绑定端口号，启动服务"><a href="#4-绑定端口号，启动服务" class="headerlink" title="4.绑定端口号，启动服务"></a>4.绑定端口号，启动服务</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">server.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><p>在浏览器中输入地址回车，控制台就会有反应，说明启动成功了一个最简单的 http 服务<br><img src="https://i.loli.net/2021/07/18/8si2TUnlPfuqJBk.png#id=T2vza&originHeight=67&originWidth=869&originalType=binary&ratio=1&status=done&style=none"><br>ctrl+c 关闭服务</p><h4 id="http-res"><a href="#http-res" class="headerlink" title="http-res"></a>http-res</h4><h5 id="request-请求事件处理函数，需要接收两个参数"><a href="#request-请求事件处理函数，需要接收两个参数" class="headerlink" title="request 请求事件处理函数，需要接收两个参数"></a>request 请求事件处理函数，需要接收两个参数</h5><ul><li>Request 请求对象<ul><li>请求对象可以用来获取客户端的一些请求信息，例如请求路径</li></ul></li><li>Response 响应对象<ul><li>响应对象可以用来给客户端发送响应消息</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">server.on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) </span>&#123;<br>  <span class="hljs-comment">// http://127.0.0.1:3000/</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;收到客户的请求了,请求路径是：&#x27;</span> + request.url);<br>  <span class="hljs-comment">// response对象有一个方法： write可以用来给客户端发送响应数据</span><br>  <span class="hljs-comment">// write可以使用多次，但是最后一定要使用end来结束响应，否则客户端会一直等待</span><br>  response.write(<span class="hljs-string">&#x27;hello &#x27;</span>);<br>  response.write(<span class="hljs-string">&#x27;nodejs&#x27;</span>);<br><br>  response.end();<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="http-url-res"><a href="#http-url-res" class="headerlink" title="http-url-res"></a>http-url-res</h4><p>根据不同的请求路径发送不同的响应结果 1.获取请求路径<br>res.url 获取到的是端口号之后的那一部分路径<br>也就是说所有的 url 都是以 / 开头的 2.判断路径处理响应<br>响应内容只能是二进制数据或者字符串</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-comment">// 1.使用http.createServer()创建一个web服务器</span><br><span class="hljs-keyword">var</span> server = http.createServer();<br><span class="hljs-comment">// 2.监听 request 请求事件，设置请求处理函数</span><br>server.on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;收到客户的请求了,请求路径是：&#x27;</span> + req.url);<br><br>  <span class="hljs-comment">// response.write(&#x27;hello &#x27;);</span><br>  <span class="hljs-comment">// response.write(&#x27;nodejs&#x27;);</span><br>  <span class="hljs-comment">// response.end();</span><br>  <span class="hljs-comment">//上面的方式比较麻烦，推荐使用更简单的方法，直接end的同时发送响应</span><br>  <span class="hljs-comment">// res.end(&#x27;hello nodejs&#x27;);</span><br>  <span class="hljs-keyword">var</span> url = req.url;<br>  <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>    res.end(<span class="hljs-string">&#x27;index page&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>    res.end(<span class="hljs-string">&#x27;login page&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/products&#x27;</span>) &#123;<br>    <span class="hljs-keyword">var</span> products = [<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;苹果&#x27;</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">4</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;香蕉&#x27;</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">2</span> &#125;,<br>    ];<br>    <span class="hljs-comment">// 响应内容只能是二进制数据或者字符串</span><br>    <span class="hljs-comment">// 数字</span><br>    <span class="hljs-comment">// 对象</span><br>    <span class="hljs-comment">// 数组</span><br>    <span class="hljs-comment">// 布尔值</span><br>    res.end(<span class="hljs-built_in">JSON</span>.stringify(products));<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.end(<span class="hljs-string">&#x27;404 Not Found&#x27;</span>);<br>  &#125;<br>&#125;);<br><br><span class="hljs-comment">// 3.绑定端口号，启动服务</span><br>server.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;服务器启动成功，来进行访问&#x27;</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h2 id="Node-中的模块系统"><a href="#Node-中的模块系统" class="headerlink" title="Node 中的模块系统"></a>Node 中的模块系统</h2><p>使用 Node 编写应用程序主要就是在使用：</p><ul><li><p>ECMAScript 语言</p><ul><li>和浏览器一样，在 Node 中没有 Bom 和 Dom</li></ul></li><li><p>核心模块</p><ul><li>文件操作的 fs</li><li>http 服务操作的 http</li><li>url 路径操作模块</li><li>path 路径处理模块</li><li>os 操作系统信息</li></ul></li><li><p>第三方模块</p><ul><li>art-template</li><li>必须通过 npm 来下载才可以使用</li></ul></li><li><p>自己写的模块</p><ul><li>自己创建的文件</li></ul></li></ul><p>相对路径中的 ./ 不能省略，后缀名可以省略</p><h3 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h3><p><strong>概念</strong>：将一个复杂的程序依据一定的规则（规范）封装成几个块（文件），并组合在一起。<br>模块的内部数据、实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信。<br>最早的时候，我们会把所有的代码都写在一个 js 文件里，那么，耦合性会很高（关联性强），不利于维护；而且会造成全局污染，很容易命名冲突。</p><h3 id="模块化的好处"><a href="#模块化的好处" class="headerlink" title="模块化的好处"></a>模块化的好处</h3><ul><li>避免命名冲突，减少命名空间污染</li><li>降低耦合性；更好地分离、按需加载</li><li><strong>高复用性</strong>：代码方便重用，别人开发的模块直接拿过来就可以使用，不需要重复开发类似的功能。</li><li><strong>高可维护性</strong>：软件的声明周期中最长的阶段其实并不是开发阶段，而是维护阶段，需求变更比较频繁。使用模块化的开发，方式更容易维护。</li><li>部署方便</li></ul><p>文件作用域<br>(模块是独立的，在不同的文件使用必须要重新引用)<br>【在 node 中没有全局作用域，它是文件模块作用域，外部访问不到内部，内部也访问不到外部】<br>通信规则</p><ul><li>加载 require<ul><li>加载文件模块并执行里面的代码</li><li>拿到被加载文件模块导出的接口对象</li></ul></li><li>导出 exports<ul><li>每个文件模块中都提供了一个对象 exports</li><li>exports 默认是空对象 [ ]</li><li>我们需要做的就是把所有需要被外部访问的成员挂载到这个 exports 这个对象中</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack5.0基础</title>
    <link href="/2021/07/01/webpack5-0%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/07/01/webpack5-0%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="第-1-章：webpack-简介"><a href="#第-1-章：webpack-简介" class="headerlink" title="第 1 章：webpack 简介"></a>第 1 章：webpack 简介</h1><h2 id="webpack-简介"><a href="#webpack-简介" class="headerlink" title="webpack 简介"></a>webpack 简介</h2><h3 id="1-1-webpack"><a href="#1-1-webpack" class="headerlink" title="1.1 webpack"></a>1.1 webpack</h3><p>是什么 webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)。 在 webpack 看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。 它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)</p><p><img src="https://i.loli.net/2021/07/02/93aYOUlZJ7z2w1F.jpg#id=Dvcks&originHeight=462&originWidth=1055&originalType=binary&ratio=1&status=done&style=none"></p><h2 id="1-2-webpack-五个核心概念"><a href="#1-2-webpack-五个核心概念" class="headerlink" title="1.2 webpack 五个核心概念"></a>1.2 webpack 五个核心概念</h2><h3 id="1-2-1-Entry"><a href="#1-2-1-Entry" class="headerlink" title="1.2.1 Entry"></a>1.2.1 Entry</h3><p>入口(Entry)指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p><h3 id="1-2-2-Output"><a href="#1-2-2-Output" class="headerlink" title="1.2.2 Output"></a>1.2.2 Output</h3><p>输出(Output)指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p><h3 id="1-2-3-Loader"><a href="#1-2-3-Loader" class="headerlink" title="1.2.3 Loader"></a>1.2.3 Loader</h3><p>Loader 让 webpack 能够去处理那些非 JavaScript 文件(webpack 自身只理解<br>JavaScript)</p><h3 id="1-2-4-Plugins"><a href="#1-2-4-Plugins" class="headerlink" title="1.2.4 Plugins"></a>1.2.4 Plugins</h3><p>插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。</p><h3 id="1-2-5-Mode"><a href="#1-2-5-Mode" class="headerlink" title="1.2.5 Mode"></a>1.2.5 Mode</h3><p>模式(Mode)指示 webpack 使用相应模式的配置。</p><table><thead><tr><th>选项</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>development</td><td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</td><td>能让代码本地调试运行的环境</td></tr><tr><td>production</td><td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。</td><td>能让代码优化上线运行的环境</td></tr></tbody></table><h1 id="第-2-章：webpack-的初体验"><a href="#第-2-章：webpack-的初体验" class="headerlink" title="第 2 章：webpack 的初体验"></a>第 2 章：webpack 的初体验</h1><h2 id="2-1-初始化配置"><a href="#2-1-初始化配置" class="headerlink" title="2.1 初始化配置"></a>2.1 初始化配置</h2><ol><li>初始化 package.json</li></ol><p>输入指令:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm init<br></code></pre></div></td></tr></table></figure><ol start="2"><li>下载并安装 webpack</li></ol><p>输入指令:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install webpack webpack-cli -g<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install webpack webpack-cli -D<br></code></pre></div></td></tr></table></figure><h2 id="2-2-编译打包应用"><a href="#2-2-编译打包应用" class="headerlink" title="2.2 编译打包应用"></a>2.2 编译打包应用</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><h3 id="运行指令"><a href="#运行指令" class="headerlink" title="运行指令"></a>运行指令</h3><p>开发环境指令：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">webpack src/js/index.js -o build/js/built.js --mode=development<br></code></pre></div></td></tr></table></figure><p>功能：webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成浏览器能识别的语法。<br>生产环境指令：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">webpack src/js/index.js -o build/js/built.js --mode=production<br></code></pre></div></td></tr></table></figure><p>功能：在开发配置功能上多一个功能，压缩代码。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>webpack 能够编译打包 js 和 json 文件。<br>能将 es6 的模块化语法转换成浏览器能识别的语法。能压缩代码。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>不能编译打包 css、img 等文件。<br>不能将 js 的 es6 基本语法转化为 es5 以下语法。<br>​</p><h1 id="第-3-章：webpack-开发环境的基本配置"><a href="#第-3-章：webpack-开发环境的基本配置" class="headerlink" title="第 3 章：webpack 开发环境的基本配置"></a>第 3 章：webpack 开发环境的基本配置</h1><h2 id="3-1-创建配置文件"><a href="#3-1-创建配置文件" class="headerlink" title="3.1 创建配置文件"></a>3.1 创建配置文件</h2><ol><li><p> 创建文件 webpack.config.js</p></li><li><p> 配置内容如下</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>); <span class="hljs-comment">// node内置核心模块，用来处理路径问题。</span><br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>, <span class="hljs-comment">// 入口文件</span><br>  output: &#123;<br>    <span class="hljs-comment">// 输出配置</span><br>    filename: <span class="hljs-string">&#x27;./built.js&#x27;</span>, <span class="hljs-comment">// 输出文件名</span><br>    path: resolve(dirname, <span class="hljs-string">&#x27;build&#x27;</span>), <span class="hljs-comment">// 输出文件路径配置</span><br>  &#125;,<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>, <span class="hljs-comment">//开发环境</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li> 运行指令: webpack</li><li> 结论: 此时功能与上节一致</li></ol><h2 id="3-2-打包样式资源"><a href="#3-2-打包样式资源" class="headerlink" title="3.2 打包样式资源"></a>3.2 打包样式资源</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/sZ7RMUQGkxpHKbl.png#height=291&id=CuvWu&originHeight=134&originWidth=160&originalType=binary&ratio=1&status=done&style=none&width=347"></p><ol start="2"><li>下载安装 loader 包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm i css-loader style-loader less-loader less -D<br></code></pre></div></td></tr></table></figure><ol start="3"><li> 修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  webpack.config.js  webpack的配置文件</span><br><span class="hljs-comment">    作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    所有构建工具都是基于nodejs平台运行的~模块化默认采用commonjs。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// resolve用来拼接绝对路径的方法</span><br><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// webpack配置</span><br>  <span class="hljs-comment">// 入口起点</span><br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-comment">// 输出</span><br>  output: &#123;<br>    <span class="hljs-comment">// 输出文件名</span><br>    filename: <span class="hljs-string">&#x27;built.js&#x27;</span>,<br>    <span class="hljs-comment">// 输出路径</span><br>    <span class="hljs-comment">// __dirname nodejs的变量，代表当前文件的目录绝对路径</span><br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-comment">// loader的配置</span><br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      <span class="hljs-comment">// 详细loader配置</span><br>      <span class="hljs-comment">// 不同文件必须配置不同loader处理</span><br>      &#123;<br>        <span class="hljs-comment">// 匹配哪些文件</span><br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-comment">// 使用哪些loader进行处理</span><br>        use: [<br>          <span class="hljs-comment">// use数组中loader执行顺序：从右到左，从下到上 依次执行</span><br>          <span class="hljs-comment">// 创建style标签，将js中的样式资源插入进行，添加到head中生效</span><br>          <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>          <span class="hljs-comment">// 将css文件变成commonjs模块加载js中，里面内容是样式字符串</span><br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>        ],<br>      &#125;,<br>      &#123;<br>        test: <span class="hljs-regexp">/\.less$/</span>,<br>        use: [<br>          <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>          <span class="hljs-comment">// 将less文件编译成css文件</span><br>          <span class="hljs-comment">// 需要下载 less-loader和less</span><br>          <span class="hljs-string">&#x27;less-loader&#x27;</span>,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-comment">// plugins的配置</span><br>  plugins: [<br>    <span class="hljs-comment">// 详细plugins的配置</span><br>  ],<br>  <span class="hljs-comment">// 模式</span><br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>, <span class="hljs-comment">// 开发模式</span><br>  <span class="hljs-comment">// mode: &#x27;production&#x27;</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li> 运行指令: webpack</li></ol><h2 id="3-3-打包-HTML-资源"><a href="#3-3-打包-HTML-资源" class="headerlink" title="3.3 打包 HTML 资源"></a>3.3 打包 HTML 资源</h2><ol><li>创建文件</li><li>下载安装 plugin 包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev html-webpack-plugin<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  loader: 1. 下载   2. 使用（配置loader）</span><br><span class="hljs-comment">  plugins: 1. 下载  2. 引入  3. 使用</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      <span class="hljs-comment">// loader的配置</span><br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-comment">// plugins的配置</span><br>    <span class="hljs-comment">// html-webpack-plugin</span><br>    <span class="hljs-comment">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span><br>    <span class="hljs-comment">// 需求：需要有结构的HTML文件</span><br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      <span class="hljs-comment">// 复制 &#x27;./src/index.html&#x27; 文件，并自动引入打包输出的所有资源（JS/CSS）</span><br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>运行指令: webpack</li></ol><h2 id="3-4-打包图片资源"><a href="#3-4-打包图片资源" class="headerlink" title="3.4 打包图片资源"></a>3.4 打包图片资源</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/Xu6qSEtve5VHT2K.png#height=459&id=wv1DP&originHeight=199&originWidth=143&originalType=binary&ratio=1&status=done&style=none&width=329.9971466064453"></p><ol start="2"><li>下载安装 loader 包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev html-loader url-loader file-loader<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.less$/</span>,<br>        <span class="hljs-comment">// 要使用多个loader处理用use</span><br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;less-loader&#x27;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 问题：默认处理不了html中img图片</span><br>        <span class="hljs-comment">// 处理图片资源</span><br>        test: <span class="hljs-regexp">/\.(jpg|png|gif)$/</span>,<br>        <span class="hljs-comment">// 使用一个loader</span><br>        <span class="hljs-comment">// 下载 url-loader file-loader</span><br>        loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        options: &#123;<br>          <span class="hljs-comment">// 图片大小小于8kb，就会被base64处理</span><br>          <span class="hljs-comment">// 优点: 减少请求数量（减轻服务器压力）</span><br>          <span class="hljs-comment">// 缺点：图片体积会更大（文件请求速度更慢）</span><br>          limit: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>          <span class="hljs-comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs</span><br>          <span class="hljs-comment">// 解析时会出问题：[object Module]</span><br>          <span class="hljs-comment">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span><br>          esModule: <span class="hljs-literal">false</span>,<br>          <span class="hljs-comment">// 给图片进行重命名</span><br>          <span class="hljs-comment">// [hash:10]取图片的hash的前10位</span><br>          <span class="hljs-comment">// [ext]取文件原来扩展名</span><br>          name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        test: <span class="hljs-regexp">/\.html$/</span>,<br>        <span class="hljs-comment">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span><br>        loader: <span class="hljs-string">&#x27;html-loader&#x27;</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>运行指令: webpack</li></ol><h2 id="3-5-打包其他资源"><a href="#3-5-打包其他资源" class="headerlink" title="3.5 打包其他资源"></a>3.5 打包其他资源</h2><ol><li> 创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/RVPse9AhLBgjboZ.png#height=407&id=YzoFw&originHeight=221&originWidth=158&originalType=binary&ratio=1&status=done&style=none&width=290.9971466064453"></p><ol start="2"><li> 修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>],<br>      &#125;,<br>      <span class="hljs-comment">// 打包其他资源(除了html/js/css资源以外的资源)</span><br>      &#123;<br>        <span class="hljs-comment">// 排除css/js/html资源</span><br>        exclude: <span class="hljs-regexp">/\.(css|js|html|less)$/</span>,<br>        loader: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        options: &#123;<br>          name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>运行指令: webpack</li></ol><h2 id="3-6-devserver"><a href="#3-6-devserver" class="headerlink" title="3.6 devserver"></a>3.6 devserver</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/lCb9GPcnq4amRyM.png#height=352&id=t1AzV&originHeight=220&originWidth=155&originalType=binary&ratio=1&status=done&style=none&width=247.991455078125"></p><ol start="2"><li>下载 webpack-dev-server 文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm i webpack-dev-server -D<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>],<br>      &#125;,<br>      <span class="hljs-comment">// 打包其他资源(除了html/js/css资源以外的资源)</span><br>      &#123;<br>        <span class="hljs-comment">// 排除css/js/html资源</span><br>        exclude: <span class="hljs-regexp">/\.(css|js|html|less)$/</span>,<br>        loader: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        options: &#123;<br>          name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br><br>  <span class="hljs-comment">// 开发服务器 devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器~~）</span><br>  <span class="hljs-comment">// 特点：只会在内存中编译打包，不会有任何输出</span><br>  <span class="hljs-comment">// 启动devServer指令为：npx webpack server</span><br>  devServer: &#123;<br>    <span class="hljs-comment">// 项目构建后路径</span><br>    contentBase: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>    <span class="hljs-comment">// 启动gzip压缩</span><br>    compress: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 端口号</span><br>    port: <span class="hljs-number">3000</span>,<br>    <span class="hljs-comment">// 自动打开浏览器</span><br>    open: <span class="hljs-literal">true</span>,<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>运行指令: npx webpack server</li></ol><h2 id="3-7-开发环境配置"><a href="#3-7-开发环境配置" class="headerlink" title="3.7 开发环境配置"></a>3.7 开发环境配置</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/ldPriMN1TOyFjvE.png#height=365&id=yJF4H&originHeight=180&originWidth=160&originalType=binary&ratio=1&status=done&style=none&width=324"></p><ol start="2"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  开发环境配置：能让代码运行</span><br><span class="hljs-comment">    运行项目指令：</span><br><span class="hljs-comment">      webpack 会将打包结果输出出去</span><br><span class="hljs-comment">      npx webpack server 只会在内存中编译打包，没有输出</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      <span class="hljs-comment">// loader的配置</span><br>      &#123;<br>        <span class="hljs-comment">// 处理less资源</span><br>        test: <span class="hljs-regexp">/\.less$/</span>,<br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;less-loader&#x27;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 处理css资源</span><br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 处理图片资源</span><br>        test: <span class="hljs-regexp">/\.(jpg|png|gif)$/</span>,<br>        loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        options: &#123;<br>          limit: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>          name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>          <span class="hljs-comment">// 关闭es6模块化</span><br>          esModule: <span class="hljs-literal">false</span>,<br>          outputPath: <span class="hljs-string">&#x27;imgs&#x27;</span>,<br>        &#125;,<br>      &#125;,<br><br>      &#123;<br>        <span class="hljs-comment">// 处理html中img资源</span><br>        test: <span class="hljs-regexp">/\.html$/</span>,<br>        loader: <span class="hljs-string">&#x27;html-loader&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 处理其他资源</span><br>        exclude: <span class="hljs-regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,<br>        loader: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        options: &#123;<br>          name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>          outputPath: <span class="hljs-string">&#x27;media&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-comment">// plugins的配置</span><br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>  devServer: &#123;<br>    contentBase: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>    compress: <span class="hljs-literal">true</span>,<br>    port: <span class="hljs-number">3000</span>,<br>    open: <span class="hljs-literal">true</span>,<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h1 id="第-4-章：webpack-生产环境的基本配置"><a href="#第-4-章：webpack-生产环境的基本配置" class="headerlink" title="第 4 章：webpack 生产环境的基本配置"></a>第 4 章：webpack 生产环境的基本配置</h1><h2 id="4-1-提取-css-成单独文件"><a href="#4-1-提取-css-成单独文件" class="headerlink" title="4.1 提取 css 成单独文件"></a>4.1 提取 css 成单独文件</h2><ol><li> 新建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/OzDMtmf6R9n8Zi4.png#height=261&id=EPWVT&originHeight=133&originWidth=146&originalType=binary&ratio=1&status=done&style=none&width=285.9943084716797"></p><ol start="2"><li> 下载插件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev mini-css-extract-plugin<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<br>          <span class="hljs-comment">// 创建style标签，将样式放入</span><br>          <span class="hljs-comment">// &#x27;style-loader&#x27;,</span><br>          <span class="hljs-comment">// 这个loader取代style-loader。作用：提取js中的css成单独文件</span><br>          MiniCssExtractPlugin.loader,<br>          <span class="hljs-comment">// 将css文件整合到js文件中</span><br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin(&#123;<br>      <span class="hljs-comment">// 对输出的css文件进行重命名</span><br>      filename: <span class="hljs-string">&#x27;css/built.css&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>4 .运行指令: webpack<br>​</p><h2 id="4-2-css-兼容性处理"><a href="#4-2-css-兼容性处理" class="headerlink" title="4.2 css 兼容性处理"></a>4.2 css 兼容性处理</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/op3TaN2XdWw5YkC.png#height=236&id=QaSnc&originHeight=134&originWidth=160&originalType=binary&ratio=1&status=done&style=none&width=282"></p><ol start="2"><li>下载 loader 如果 postcss-loader 使用最新版本会报错，降到 3.0.0 就行了</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev postcss-loader@<span class="hljs-number">3.0</span><span class="hljs-number">.0</span> postcss-preset-env<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 设置nodejs环境变量</span><br><span class="hljs-comment">// process.env.NODE_ENV = &#x27;development&#x27;;</span><br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<br>          MiniCssExtractPlugin.loader,<br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>          <span class="hljs-comment">/*</span><br><span class="hljs-comment">            css兼容性处理：postcss --&gt; postcss-loader postcss-preset-env</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            帮postcss找到package.json中browserslist里面的配置，通过配置加载指定的css兼容性样式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            &quot;browserslist&quot;: &#123;</span><br><span class="hljs-comment">              // 开发环境 --&gt; 设置node环境变量：process.env.NODE_ENV = development</span><br><span class="hljs-comment">              &quot;development&quot;: [</span><br><span class="hljs-comment">                &quot;last 1 chrome version&quot;,</span><br><span class="hljs-comment">                &quot;last 1 firefox version&quot;,</span><br><span class="hljs-comment">                &quot;last 1 safari version&quot;</span><br><span class="hljs-comment">              ],</span><br><span class="hljs-comment">              // 生产环境：默认是看生产环境</span><br><span class="hljs-comment">              &quot;production&quot;: [</span><br><span class="hljs-comment">                &quot;&gt;0.2%&quot;,</span><br><span class="hljs-comment">                &quot;not dead&quot;,</span><br><span class="hljs-comment">                &quot;not op_mini all&quot;</span><br><span class="hljs-comment">              ]</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">          */</span><br>          <span class="hljs-comment">// 使用loader的默认配置</span><br>          <span class="hljs-comment">// &#x27;postcss-loader&#x27;,</span><br>          <span class="hljs-comment">// 修改loader的配置</span><br>          &#123;<br>            loader: <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>            options: &#123;<br>              ident: <span class="hljs-string">&#x27;postcss&#x27;</span>,<br>              plugins: <span class="hljs-function">() =&gt;</span> [<br>                <span class="hljs-comment">// postcss的插件</span><br>                <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-preset-env&#x27;</span>)(),<br>              ],<br>            &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin(&#123;<br>      filename: <span class="hljs-string">&#x27;css/built.css&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>修改 package.json</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;browserslist&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;development&quot;</span>: [<br>    <span class="hljs-string">&quot;last 1 chrome version&quot;</span>,<br>    <span class="hljs-string">&quot;last 1 firefox version&quot;</span>,<br>    <span class="hljs-string">&quot;last 1 safari version&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;production&quot;</span>: [<br>    <span class="hljs-string">&quot;&gt;0.2%&quot;</span>,<br>    <span class="hljs-string">&quot;not dead&quot;</span>,<br>    <span class="hljs-string">&quot;not op_mini all&quot;</span><br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="5"><li><p>运行指令: webpack</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>4.3 压缩 css</p></li><li><p>创建文件</p></li></ol><p><img src="https://i.loli.net/2021/07/02/lPULjhvIVq1MywF.png#height=241&id=GqGq9&originHeight=126&originWidth=160&originalType=binary&ratio=1&status=done&style=none&width=306"></p><ol start="2"><li> 下载安装包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev optimize-css-assets-webpack-plugin<br></code></pre></div></td></tr></table></figure><p>官方改用另一种，具体配置看官网<a href="https://www.npmjs.com/package/css-minimizer-webpack-plugin">https://www.npmjs.com/package/css-minimizer-webpack-plugin</a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install css-minimizer-webpack-plugin --save-dev<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 设置nodejs环境变量</span><br><span class="hljs-comment">// process.env.NODE_ENV = &#x27;development&#x27;;</span><br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<br>          MiniCssExtractPlugin.loader,<br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>          &#123;<br>            loader: <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>            options: &#123;<br>              ident: <span class="hljs-string">&#x27;postcss&#x27;</span>,<br>              plugins: <span class="hljs-function">() =&gt;</span> [<br>                <span class="hljs-comment">// postcss的插件</span><br>                <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-preset-env&#x27;</span>)(),<br>              ],<br>            &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin(&#123;<br>      filename: <span class="hljs-string">&#x27;css/built.css&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-comment">// 压缩css</span><br>    <span class="hljs-keyword">new</span> OptimizeCssAssetsWebpackPlugin(),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>运行指令: webpack</li></ol><h2 id="4-4-js-语法检查"><a href="#4-4-js-语法检查" class="headerlink" title="4.4 js 语法检查"></a>4.4 js 语法检查</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/ZzPrOquT3QCWbKg.png#height=197&id=zr3dw&originHeight=110&originWidth=160&originalType=binary&ratio=1&status=done&style=none&width=286"></p><ol start="2"><li>下载安装包 airbnb-base 官网<a href="https://www.npmjs.com/package/eslint-config-airbnb-base">https://www.npmjs.com/package/eslint-config-airbnb-base</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev eslint-loader eslint eslint-config-airbnb-base eslint-plugin-<span class="hljs-keyword">import</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        语法检查： eslint-loader  eslint</span><br><span class="hljs-comment">          注意：只检查自己写的源代码，第三方的库是不用检查的</span><br><span class="hljs-comment">          设置检查规则：</span><br><span class="hljs-comment">            package.json中eslintConfig中设置~</span><br><span class="hljs-comment">              &quot;eslintConfig&quot;: &#123;</span><br><span class="hljs-comment">                &quot;extends&quot;: &quot;airbnb-base&quot;</span><br><span class="hljs-comment">              &#125;</span><br><span class="hljs-comment">            airbnb --&gt; eslint-config-airbnb-base  eslint-plugin-import eslint</span><br><span class="hljs-comment">      */</span><br>      &#123;<br>        test: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        loader: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>        options: &#123;<br>          <span class="hljs-comment">// 自动修复eslint的错误</span><br>          fix: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>如果配置每行结尾都报红色警告，将编译器尾行序列 CRLF 换成 LF(我用的 vscode 在编译器右下角可以切换)</p><ol start="4"><li>配置 package.json</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;eslintConfig&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;extends&quot;</span>: <span class="hljs-string">&quot;airbnb-base&quot;</span>,<br>  <span class="hljs-string">&quot;env&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;browser&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="5"><li>运行指令: webpack</li></ol><h2 id="4-5-js-兼容性处理"><a href="#4-5-js-兼容性处理" class="headerlink" title="4.5 js 兼容性处理"></a>4.5 js 兼容性处理</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/lmIBURaWuSjXyTE.png#height=321&id=eVoCW&originHeight=172&originWidth=145&originalType=binary&ratio=1&status=done&style=none&width=271"></p><ol start="2"><li>下载安装包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev babel-loader @babel/core @babel/preset-env @babel/polyfill core-js<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        js兼容性处理：babel-loader @babel/core</span><br><span class="hljs-comment">          1. 基本js兼容性处理 --&gt; @babel/preset-env</span><br><span class="hljs-comment">            问题：只能转换基本语法，如promise高级语法不能转换</span><br><span class="hljs-comment">          2. 全部js兼容性处理 --&gt; @babel/polyfill</span><br><span class="hljs-comment">            问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~</span><br><span class="hljs-comment">          3. 需要做兼容性处理的就做：按需加载  --&gt; core-js</span><br><span class="hljs-comment">      */</span><br>      &#123;<br>        test: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        loader: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>        options: &#123;<br>          <span class="hljs-comment">// 预设：指示babel做怎么样的兼容性处理</span><br>          presets: [<br>            [<br>              <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,<br>              &#123;<br>                <span class="hljs-comment">// 按需加载</span><br>                useBuiltIns: <span class="hljs-string">&#x27;usage&#x27;</span>,<br>                <span class="hljs-comment">// 指定core-js版本</span><br>                corejs: &#123;<br>                  version: <span class="hljs-number">3</span>,<br>                &#125;,<br>                <span class="hljs-comment">// 指定兼容性做到哪个版本浏览器</span><br>                targets: &#123;<br>                  chrome: <span class="hljs-string">&#x27;60&#x27;</span>,<br>                  firefox: <span class="hljs-string">&#x27;60&#x27;</span>,<br>                  ie: <span class="hljs-string">&#x27;9&#x27;</span>,<br>                  safari: <span class="hljs-string">&#x27;10&#x27;</span>,<br>                  edge: <span class="hljs-string">&#x27;17&#x27;</span>,<br>                &#125;,<br>              &#125;,<br>            ],<br>          ],<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>运行指令: webpack</li></ol><h2 id="4-6-js-压缩"><a href="#4-6-js-压缩" class="headerlink" title="4.6 js 压缩"></a>4.6 js 压缩</h2><ol><li> 创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/BhOAbwStlcXnuR2.png#height=208&id=Pe4rh&originHeight=110&originWidth=152&originalType=binary&ratio=1&status=done&style=none&width=287.98863220214844"></p><ol start="2"><li> 修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  <span class="hljs-comment">// 生产环境下会自动压缩js代码</span><br>  mode: <span class="hljs-string">&#x27;production&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li> 运行指令: webpack</li></ol><h2 id="4-7-HTML-压缩"><a href="#4-7-HTML-压缩" class="headerlink" title="4.7 HTML 压缩"></a>4.7 HTML 压缩</h2><ol><li> 创建文件</li></ol><p><img src="https://www.yuque.com/api/filetransfer/images?url=https://i.loli.net/2021/07/02/BhOAbwStlcXnuR2.png&sign=3f93d1f31ace3fc97d0f7563476e55baa257b7848cbe26b668e90bd88709ecc6#from=url&height=182&id=blnxV&margin=%5Bobject%20Object%5D&originHeight=110&originWidth=152&originalType=binary&ratio=2&status=done&style=none&width=250.98863220214844"></p><ol start="2"><li> 修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>      <span class="hljs-comment">// 压缩html代码</span><br>      minify: &#123;<br>        <span class="hljs-comment">// 移除空格</span><br>        collapseWhitespace: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// 移除注释</span><br>        removeComments: <span class="hljs-literal">true</span>,<br>      &#125;,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;production&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li> 运行指令:webpack</li></ol><h2 id="4-8-生产环境配置"><a href="#4-8-生产环境配置" class="headerlink" title="4.8 生产环境配置"></a>4.8 生产环境配置</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/ozGdqYuhPfBIrLN.png#height=105&id=bJnWX&originHeight=55&originWidth=144&originalType=binary&ratio=1&status=done&style=none&width=274.99147033691406"></p><ol start="2"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span><br>process.env.NODE_ENV = <span class="hljs-string">&#x27;production&#x27;</span>;<br><br><span class="hljs-comment">// 复用loader</span><br><span class="hljs-keyword">const</span> commonCssLoader = [<br>  MiniCssExtractPlugin.loader,<br>  <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>  &#123;<br>    <span class="hljs-comment">// 还需要在package.json中定义browserslist</span><br>    loader: <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>    options: &#123;<br>      ident: <span class="hljs-string">&#x27;postcss&#x27;</span>,<br>      <span class="hljs-comment">// eslint-disable-next-line global-require</span><br>      plugins: <span class="hljs-function">() =&gt;</span> [<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-preset-env&#x27;</span>)()],<br>    &#125;,<br>  &#125;,<br>];<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [...commonCssLoader],<br>      &#125;,<br>      &#123;<br>        test: <span class="hljs-regexp">/\.less$/</span>,<br>        use: [...commonCssLoader, <span class="hljs-string">&#x27;less-loader&#x27;</span>],<br>      &#125;,<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        正常来讲，一个文件只能被一个loader处理。</span><br><span class="hljs-comment">        当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span><br><span class="hljs-comment">          先执行eslint 在执行babel</span><br><span class="hljs-comment">      */</span><br>      &#123;<br>        <span class="hljs-comment">// 在package.json中eslintConfig --&gt; airbnb</span><br>        test: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-comment">// 优先执行</span><br>        enforce: <span class="hljs-string">&#x27;pre&#x27;</span>,<br>        loader: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>        options: &#123;<br>          fix: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        test: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        loader: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>        options: &#123;<br>          presets: [<br>            [<br>              <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,<br>              &#123;<br>                useBuiltIns: <span class="hljs-string">&#x27;usage&#x27;</span>,<br>                corejs: &#123; <span class="hljs-attr">version</span>: <span class="hljs-number">3</span> &#125;,<br>                targets: &#123;<br>                  chrome: <span class="hljs-string">&#x27;60&#x27;</span>,<br>                  firefox: <span class="hljs-string">&#x27;50&#x27;</span>,<br>                &#125;,<br>              &#125;,<br>            ],<br>          ],<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        test: <span class="hljs-regexp">/\.(jpg|png|gif)/</span>,<br>        loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        options: &#123;<br>          limit: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>          name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>          outputPath: <span class="hljs-string">&#x27;imgs&#x27;</span>,<br>          esModule: <span class="hljs-literal">false</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        test: <span class="hljs-regexp">/\.html$/</span>,<br>        loader: <span class="hljs-string">&#x27;html-loader&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        exclude: <span class="hljs-regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,<br>        loader: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        options: &#123;<br>          outputPath: <span class="hljs-string">&#x27;media&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin(&#123;<br>      filename: <span class="hljs-string">&#x27;css/built.css&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-keyword">new</span> OptimizeCssAssetsWebpackPlugin(),<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>      minify: &#123;<br>        collapseWhitespace: <span class="hljs-literal">true</span>,<br>        removeComments: <span class="hljs-literal">true</span>,<br>      &#125;,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;production&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>运行指令: webpack</li></ol>]]></content>
    
    
    <categories>
      
      <category>Webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Webpack5.0</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vuex</title>
    <link href="/2021/06/30/Vuex/"/>
    <url>/2021/06/30/Vuex/</url>
    
    <content type="html"><![CDATA[<p>vuex 是一个专门为 vue.js 设计的集中式状态管理架构。状态？我把它理解为在 data 中的属性需要共享给其他 vue 组件使用的部分，就叫做状态。简单的说就是 data 中需要共用的属性。比如：我们有几个页面要显示用户名称和用户等级，或者显示用户的地理位置。如果我们不把这些属性设置为状态，那每个页面遇到后，都会到服务器进行查找计算，返回后再显示。在中大型项目中会有很多共用的数据，所以尤大神给我们提供了 vuex。</p><h1 id="初出茅庐-来个小-Demo"><a href="#初出茅庐-来个小-Demo" class="headerlink" title="初出茅庐 来个小 Demo"></a>初出茅庐 来个小 Demo</h1><h2 id="引入-vuex"><a href="#引入-vuex" class="headerlink" title="引入 vuex"></a>引入 vuex</h2><p>1.利用 npm 包管理工具，进行安装 vuex。<br>项目初始化用的<a href="https://github.com/13982720426/vue-cli">vue-cli</a>克隆下来，然后在控制命令行中输入下边的命令就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm  install vuex --save<br></code></pre></div></td></tr></table></figure><p>需要注意的是这里一定要加上 –save，因为你这个包我们在生产环境中是要使用的。还有项目名字不要和 vuex 一样会冲突 2.新建一个 vuex 文件夹（这个不是必须的），并在文件夹下新建 store.js 文件，文件中引入我们的 vue 和 vuex</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></div></td></tr></table></figure><p>3.使用我们 vuex，引入之后用 Vue.use 进行引用。<br>Vue.use(Vuex);<br>通过这三步的操作，vuex 就算引用成功了，接下来我们就可以尽情的玩耍了。</p><h2 id="入门小-Demo："><a href="#入门小-Demo：" class="headerlink" title="入门小 Demo："></a>入门小 Demo：</h2><p>我们这个小案例先声明一个 state 的 count 状态，在页面中使用显示这个 count，然后可以利用按钮进行加减， 1.现在我们 store.js 文件里增加一个常量对象。store.js 文件就是我们在引入 vuex 时的那个文件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> state = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2.用 export default 封装代码，让外部可以引用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>  state,<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>3.新建一个 vue 的模板，位置在 components 文件夹下，名字叫 count.vue。在模板中我们引入我们刚建的 store.js 文件，并在模板中用$store.state.count 输出 count 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123;$store.state.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/vuex/store&#x27;</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;Hello Vuex&#x27;</span>,</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">            &#125;</span></span><br><span class="javascript"><span class="xml">        &#125;,</span></span><br><span class="javascript"><span class="xml">        store</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>4.在 store.js 文件中加入两个改变 state 的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mutations = &#123;<br>  <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">state</span>)</span> &#123;<br>    state.count++<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">reduce</span>(<span class="hljs-params">state</span>)</span> &#123;<br>    state.count--<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里的 mutations 是固定的写法，意思是改变的，只知道我们要改变 state 的数值的方法，必须写在 mutations 里就可以了。 5.在 count.vue 模板中加入两个按钮，并调用 mutations 中的方法。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.commit(&#x27;add&#x27;)&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.commit(&#x27;reduce&#x27;)&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p>这样进行预览就可以实现对 vuex 中的 count 进行加减了。<br>​</p><h1 id="state-访问状态对象"><a href="#state-访问状态对象" class="headerlink" title="state 访问状态对象"></a>state 访问状态对象</h1><p>在第 1 节我们已经写了一个 const state ，这个就是我们说的访问状态对象，它就是我们 SPA（单页应用程序）中的共享值。今天我们主要学习状态对象赋值给内部对象，也就是把 stroe.js 中的值，赋值给我们模板里 data 中的值。我们有三种赋值方式，我们一个一个来学习一下。</p><h2 id="一、通过-computed-的计算属性直接赋值"><a href="#一、通过-computed-的计算属性直接赋值" class="headerlink" title="一、通过 computed 的计算属性直接赋值"></a>一、通过 computed 的计算属性直接赋值</h2><p>computed 属性可以在输出前，对 data 中的值进行改变，我们就利用这种特性把 store.js 中的 state 值赋值给我们模板中的 data 值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    <span class="hljs-function"><span class="hljs-title">count</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.count;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里需要注意的是 return this.$store.state.count这一句，一定要写this，要不你会找不到$store 的。这种写法很好理解，但是写起来是比较麻烦的，那我们来看看第二种写法。</p><h2 id="二、通过-mapState-的对象来赋值"><a href="#二、通过-mapState-的对象来赋值" class="headerlink" title="二、通过 mapState 的对象来赋值"></a>二、通过 mapState 的对象来赋值</h2><p>我们首先要用 import 引入 mapState。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></div></td></tr></table></figure><p>然后还在 computed 计算属性里写如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed: mapState(&#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.count,<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>这里我们使用 ES6 的箭头函数来给 count 赋值。</p><h2 id="三、通过-mapState-的数组来赋值"><a href="#三、通过-mapState-的数组来赋值" class="headerlink" title="三、通过 mapState 的数组来赋值"></a>三、通过 mapState 的数组来赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed: mapState([<span class="hljs-string">&#x27;count&#x27;</span>])<br></code></pre></div></td></tr></table></figure><p>这个算是最简单的写法了，在实际项目开发当中也经常这样使用。<br>这就是三种赋值方式，是不是很简单，虽然简单，但是在实际项目中经常使用，一定要自己动手练习两遍啊。<br>​</p><h1 id="Mutations-修改状态"><a href="#Mutations-修改状态" class="headerlink" title="Mutations 修改状态"></a>Mutations 修改状态</h1><h2 id="store-commit"><a href="#store-commit" class="headerlink" title="$store.commit( )"></a>$store.commit( )</h2><p>Vuex 提供了 commit 方法来修改状态，我们粘贴出第一节课的代码内容，简单回顾一下，我们在 button 上的修改方法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;$store.commit(&#x27;add&#x27;)&quot;</span>&gt;+&lt;/button&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.commit(&#x27;reduce&#x27;)&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>store.js 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mutations = &#123;<br>  <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">state</span>)</span> &#123;<br>    state.count++<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">reduce</span>(<span class="hljs-params">state</span>)</span> &#123;<br>    state.count--<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="传值："><a href="#传值：" class="headerlink" title="传值："></a>传值：</h2><p>这只是一个最简单的修改状态的操作，在实际项目中我们常常需要在修改状态时传值。比如上边的例子，是我们每次只加 1，而现在我们要通过所传的值进行相加。其实我们只需要在 Mutations 里再加上一个参数，并在 commit 的时候传递就就可以了。我们来看具体代码：<br>现在 store.js 文件里给 add 方法加上一个参数 n。添加的地方我已经标黄了。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mutations = &#123;<br>  <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">state, n</span>)</span> &#123;<br>    state.count += n<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">reduce</span>(<span class="hljs-params">state</span>)</span> &#123;<br>    state.count--<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在 Count.vue 里修改按钮的 commit( )方法传递的参数，我们传递 10，意思就是每次加 10.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.commit(&#x27;add&#x27;,10)&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.commit(&#x27;reduce&#x27;)&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p>这样两个简单的修改我们就完成了传值，我们可以在浏览器中实验一下了。</p><h2 id="模板获取-Mutations-方法"><a href="#模板获取-Mutations-方法" class="headerlink" title="模板获取 Mutations 方法"></a>模板获取 Mutations 方法</h2><p>实际开发中我们也不喜欢看到$store.commit( )这样的方法出现，我们希望跟调用模板里的方法一样调用。<br>例如：@click=”reduce” 就和没引用 vuex 插件一样。<br>要达到这种写法，只需要简单的两部就可以了： 1.在模板 count.vue 里用 import 引入我们的 mapMutations：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState, mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></div></td></tr></table></figure><p>2.在模板的<script>标签里添加 methods 属性，并加入 mapMutations</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">methods: mapMutations([<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-string">&#x27;reduce&#x27;</span>])<br></code></pre></div></td></tr></table></figure><p>过上边两部，我们已经可以在模板中直接使用我们的 reduce 或者 add 方法了，就像下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;reduce&quot;</span>&gt;-&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><h1 id="getters-计算过滤操作"><a href="#getters-计算过滤操作" class="headerlink" title="getters 计算过滤操作"></a>getters 计算过滤操作</h1><p>getters 从表面是获得的意思，可以把他看作在获取数据之前进行的一种再编辑,相当于对数据的一个过滤和加工。你可以把它看作 store.js 的计算属性。</p><h2 id="getters-基本用法："><a href="#getters-基本用法：" class="headerlink" title="getters 基本用法："></a>getters 基本用法：</h2><p>比如我们现在要对 store.js 文件中的 count 进行一个计算属性的操作，就是在它输出前，给它加上 100.<br>我们首先要在 store.js 里用 const 声明我们的 getters 属性。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> getters = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">state</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> (state.count += <span class="hljs-number">100</span>)<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>写好了 gettters 之后，我们还需要在 Vuex.Store()里引入，由于之前我们已经引入了 state 盒 mutations，所以引入里有三个引入属性。代码如下，</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>  state,<br>  mutations,<br>  getters,<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>在 store.js 里的配置算是完成了，我们需要到模板页对 computed 进行配置。在 vue 的构造器里边只能有一个 computed 属性，如果你写多个，只有最后一个 computed 属性可用，所以要对 computed 属性进行一个改造。改造时我们使用 ES6 中的展开运算符”…”。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    ...mapState([<span class="hljs-string">&quot;count&quot;</span>]),<br>    <span class="hljs-function"><span class="hljs-title">count</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.getters.count;<br>    &#125;<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>需要注意的是，你写了这个配置后，在每次 count 的值发生变化的时候，都会进行加 100 的操作。</p><h2 id="用-mapGetters-简化模板写法："><a href="#用-mapGetters-简化模板写法：" class="headerlink" title="用 mapGetters 简化模板写法："></a>用 mapGetters 简化模板写法：</h2><p>我们都知道 state 和 mutations 都有 map 的引用方法把我们模板中的编码进行简化，我们的 getters 也是有的，我们来看一下代码。<br>首先用 import 引入我们的`mapGetters</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState, mapMutations, mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></div></td></tr></table></figure><p>在 computed 属性中加入 mapGetters</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">...mapGetters([<span class="hljs-string">&quot;count&quot;</span>])<br></code></pre></div></td></tr></table></figure><p>相信大家已经会了 getters 的用法</p><h1 id="actions-异步修改状态"><a href="#actions-异步修改状态" class="headerlink" title="actions 异步修改状态"></a>actions 异步修改状态</h1><p>actions 和之前讲的 Mutations 功能基本一样，不同点是，actions 是异步的改变 state 状态，而 Mutations 是同步改变状态。​<br><strong>在 store.js 中声明 actions</strong> actions 是可以调用 Mutations 里的方法的，我们还是继续在上节课的代码基础上进行学习，在 actions 里调用 add 和 reduce 两个方法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> actions = &#123;<br>  <span class="hljs-function"><span class="hljs-title">addAction</span>(<span class="hljs-params">context</span>)</span> &#123;<br>    context.commit(<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-number">10</span>)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">reduceAction</span>(<span class="hljs-params">&#123; commit &#125;</span>)</span> &#123;<br>    commit(<span class="hljs-string">&#x27;reduce&#x27;</span>)<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在 actions 里写了两个方法 addAction 和 reduceAction，在方法体里，我们都用 commit 调用了 Mutations 里边的方法。细心的小伙伴会发现这两个方法传递的参数也不一样。</p><ul><li>context：上下文对象，这里你可以理解称 store 本身。</li><li>{commit}：直接把 commit 对象传递过来，可以让方法体逻辑和代码更清晰明了。</li></ul><h2 id="模板中的使用"><a href="#模板中的使用" class="headerlink" title="模板中的使用"></a>模板中的使用</h2><p>我们需要在 count.vue 模板中编写代码，让 actions 生效。我们先复制两个以前有的按钮，并改成我们的 actions 里的方法名，分别是：addAction 和 reduceAction。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addAction&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;reduceAction&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p>改造一下我们的 methods 方法，首先还是用扩展运算符把 mapMutations 和 mapActions 加入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">methods:&#123;<br>    ...mapMutations([<br>        <span class="hljs-string">&#x27;add&#x27;</span>,<span class="hljs-string">&#x27;reduce&#x27;</span><br>    ]),<br>    ...mapActions([<span class="hljs-string">&#x27;addAction&#x27;</span>,<span class="hljs-string">&#x27;reduceAction&#x27;</span>])<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>你还要记得用 import 把我们的 mapActions 引入才可以使用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState, mapMutations, mapGetters, mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></div></td></tr></table></figure><h2 id="增加异步检验"><a href="#增加异步检验" class="headerlink" title="增加异步检验"></a>增加异步检验</h2><p>我们现在看的效果和我们用 Mutations 作的一模一样，肯定有的小伙伴会好奇，那 actions 有什么用，我们为了演示 actions 的异步功能，我们增加一个计时器（setTimeOut）延迟执行。在 addAction 里使用 setTimeOut 进行延迟执行。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">addAction</span>(<span class="hljs-params">context</span>)</span> &#123;<br>  context.commit(<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-number">10</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    context.commit(<span class="hljs-string">&quot;reduce&quot;</span>);<br>  &#125;, <span class="hljs-number">3000</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我比reduce先执行了&quot;</span>);<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>我们可以看到在控制台先打印出了‘我比 reduce 提前执行’这句话。</p><h1 id="module-模块组"><a href="#module-模块组" class="headerlink" title="module 模块组"></a>module 模块组</h1><p>随着项目的复杂性增加，我们共享的状态越来越多，这时候我们就需要把我们状态的各种操作进行一个分组，分组后再进行按组编写。那今天我们就学习一下 module：状态管理器的模块组操作。</p><h2 id="声明模块组："><a href="#声明模块组：" class="headerlink" title="声明模块组："></a>声明模块组：</h2><p>在 vuex/store.js 中声明模块组，我们还是用我们的 const 常量的方法声明模块组。代码如下：​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  state,<br>  mutations,<br>  getters,<br>  actions,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>声明好后，我们需要修改原来 Vuex.Stroe 里的值：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>  <span class="hljs-attr">modules</span>: &#123; <span class="hljs-attr">a</span>: moduleA &#125;,<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="在模板中使用"><a href="#在模板中使用" class="headerlink" title="在模板中使用"></a>在模板中使用</h2><p>现在我们要在模板中使用 count 状态，要用插值的形式写入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h3&gt;&#123;&#123;$store.state.a.count&#125;&#125;&lt;/h3&gt;<br></code></pre></div></td></tr></table></figure><p>如果想用简单的方法引入，还是要在我们的计算属性中 rutrun 我们的状态,，并且在用到插值的写法<code>&lt;h3&gt;&#123;&#123;count&#125;&#125;&lt;/h3&gt;</code>写法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    <span class="hljs-function"><span class="hljs-title">count</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.a.count;<br>    &#125;<br>&#125;,<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vuex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-router</title>
    <link href="/2021/06/27/vue-router/"/>
    <url>/2021/06/27/vue-router/</url>
    
    <content type="html"><![CDATA[<p>简介： 由于 Vue 在开发时对路由支持的不足，后来官方补充了 vue-router 插件，它在 Vue 的生态环境中非常重要，在实际开发中只要编写一个页面就会操作 vue-router。要学习 vue-router 就要先知道这里的路由是什么？这里的路由并不是指我们平时所说的硬件路由器，这里的路由就是 SPA（单页应用）的路径管理器。再通俗的说，vue-router 就是我们 WebApp 的链接路径管理系统。<br>为什么我们不能像原来一样直接用<a></a>标签编写链接哪？因为我们用 Vue 作的都是单页应用，就相当于只有一个主的 index.html 页面，所以你写的<a></a>标签是不起作用的，你必须使用 vue-router 来进行管理。</p><h1 id="Vue-router-入门"><a href="#Vue-router-入门" class="headerlink" title="Vue-router 入门"></a>Vue-router 入门</h1><p>在安装路由之前需要 vue-cli 初始化，这里是我的 vue-cli 初始化地址<a href="https://github.com/13982720426/vue-cli">https://github.com/13982720426/vue-cli</a></p><h2 id="安装-vue-router"><a href="#安装-vue-router" class="headerlink" title="安装 vue-router"></a>安装 vue-router</h2><p>vue-router 是一个插件包，所以我们还是需要用 npm 来进行安装的。打开命令行工具，进入你的项目目录，输入下面命令。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install vue-router --save-dev<br></code></pre></div></td></tr></table></figure><p>如果你安装很慢，也可以用 cnpm 进行安装，如果你在使用 vue-cli 中已经选择安装了 vue-router，那这里不需要重复安装了。<br><strong>解读 router/index.js 文件</strong><br>我们用 vue-cli 生产了我们的项目结构，你可以在 src/router/index.js 文件，这个文件就是路由的核心文件，我们先解读一下它。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>; <span class="hljs-comment">//引入Vue</span><br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>; <span class="hljs-comment">//引入vue-router</span><br><span class="hljs-keyword">import</span> Hello <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hello&#x27;</span>; <span class="hljs-comment">//引入根目录下的Hello.vue组件</span><br><br>Vue.use(Router); <span class="hljs-comment">//Vue全局使用Router</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  routes: [<br>    <span class="hljs-comment">//配置路由，这里是个数组</span><br>    &#123;<br>      <span class="hljs-comment">//每一个链接都是一个对象</span><br>      path: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-comment">//链接路径</span><br>      name: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-comment">//路由名称，</span><br>      component: Hello, <span class="hljs-comment">//对应的组件模板</span><br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>上边的代码中已经对每行都进行了注释，其实在这个路由文件里只配置了一个功能，就是在进入项目时，显示 Hello.vue 里边的内容代码。<br>** 增加一个 Hi 的路由和页面 **<br>对路由的核心文件熟悉后，我们试着增加一个路由配置，我们希望在地址栏输入 <a href="http://localhost:8080/#/hi">http://localhost:8080/#/hi</a> 的时候出现一个新的页面<br>​</p><p>看到了效果，我们看一下具体的操作步骤：</p><ul><li>在 src/components 目录下，新建 Hi.vue 文件。</li><li>编写文件内容，和我们之前讲过的一样，文件要包括三个部分<template><script>和<style>。文件很简单，只是打印一句话。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;hi&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;Hi&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><ul><li>引入 Hi 组件：我们在 router/index.js 文件的上边引入 Hi 组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Hi <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hi&#x27;</span>;<br></code></pre></div></td></tr></table></figure><ul><li>增加路由配置：在 router/index.js 文件的 routes[]数组中，新增加一个对象，代码如下。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>path:<span class="hljs-string">&#x27;/hi&#x27;</span>,<br>name:<span class="hljs-string">&#x27;Hi&#x27;</span>,<br>component:Hi<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>通过上面的配置已经可以增加一个新的页面了。是不是觉的自己的 Vue 功力一下子就提升了一个档次。为了方便小伙伴查看，贴出现在的路由配置文件:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>; <span class="hljs-comment">//引入Vue</span><br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>; <span class="hljs-comment">//引入vue-router</span><br><span class="hljs-keyword">import</span> Hello <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hello&#x27;</span>; <span class="hljs-comment">//引入根目录下的Hello.vue组件</span><br><span class="hljs-keyword">import</span> Hi <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hi&#x27;</span>;<br><br>Vue.use(Router); <span class="hljs-comment">//Vue全局使用Router</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  routes: [<br>    <span class="hljs-comment">//配置路由，这里是个数组</span><br>    &#123;<br>      <span class="hljs-comment">//每一个链接都是一个对象</span><br>      path: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-comment">//链接路径</span><br>      name: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-comment">//路由名称，</span><br>      component: Hello, <span class="hljs-comment">//对应的组件模板</span><br>    &#125;,<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/hi&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;Hi&#x27;</span>,<br>      component: Hi,<br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><h2 id="router-link-制作导航"><a href="#router-link-制作导航" class="headerlink" title="router-link 制作导航"></a>router-link 制作导航</h2><p>现在通过在地址栏改变字符串地址，已经可以实现页面内容的变化了。这并不满足需求，我们需要的是在页面上有个像样的导航链接，我们只要点击就可以实现页面内容的变化。制作链接需要<router-link>标签，我们先来看一下它的语法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-link to=<span class="hljs-string">&quot;/&quot;</span>&gt;[显示字段]&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><ul><li>to：是我们的导航路径，要填写的是你在 router/index.js 文件里配置的 path 值，如果要导航到默认首页，只需要写成 to=”/” ，</li><li>[显示字段] ：就是我们要显示给用户的导航名称，比如首页 新闻页。</li></ul><p>明白了 router-link 的基本语法，我们在 src/App.vue 文件中的 template 里加入下面代码，实现导航。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>  导航 ：&lt;router-link to=<span class="hljs-string">&quot;/&quot;</span>&gt;首页&lt;/router-link&gt;<br>  &lt;router-link to=<span class="hljs-string">&quot;/hi&quot;</span>&gt;Hi页面&lt;/router-link&gt;<br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p>现在我们访问页面，发现已经多出了导航。<br>总结：这节课我们在 vue-cli 的构建下对 vue-router 有了一个基本的了解，学会了 vue-router 的核心文件的基本结构，学会了如何添加一个新的模板页面，还学会了用<router-link>标签设置导航。在这里我必须要再强调一遍，路由是 Vue 中最重点的内容，你必须完全掌握学会。<br>​</p><h1 id="vue-router-配置子路由"><a href="#vue-router-配置子路由" class="headerlink" title="vue-router 配置子路由"></a>vue-router 配置子路由</h1><p>初步了解 Vue-router 的初步知识，也学会了基本的跳转，那我们学习一下子菜单的路由方式，也叫子路由。子路由的情况一般用在一个页面有他的基础模版，然后它下面的页面都隶属于这个模版，只是部分改变样式。我们接着第一节课的实例，在 Hi 页面的下面新建两个子页面，分别是 “Hi 页面 1” 和 “Hi 页面 2”，来实现子路由。</p><h2 id="一、改造-App-vue-的导航代码"><a href="#一、改造-App-vue-的导航代码" class="headerlink" title="一、改造 App.vue 的导航代码"></a>一、改造 App.vue 的导航代码</h2><p>我们需要先改造 app.vue 的导航代码，来实现基本的导航功能。我们用<router-link>标签增加了两个新的导航链接。<br><strong>App.vue 代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>  导航 ：&lt;router-link to=<span class="hljs-string">&quot;/&quot;</span>&gt;首页&lt;<span class="hljs-regexp">/router-link&gt; |&lt;router-link to=&quot;/</span>hi<span class="hljs-string">&quot;&gt;Hi页面&lt;/router-link&gt; |</span><br><span class="hljs-string">  &lt;router-link to=&quot;</span>/hi/hi1<span class="hljs-string">&quot;&gt;-Hi页面1&lt;/router-link&gt; |&lt;router-link to=&quot;</span>/hi/hi2<span class="hljs-string">&quot;&gt;-Hi页面2&lt;/router-link&gt;</span><br><span class="hljs-string">&lt;/p&gt;</span><br></code></pre></div></td></tr></table></figure><p>这时候我们再访问主页的时候导航栏就发生了变化。多出了两个自导航：Hi 页面 1 和 Hi 页面 2</p><h2 id="二、改写-components-Hi-vue-页面"><a href="#二、改写-components-Hi-vue-页面" class="headerlink" title="二、改写 components/Hi.vue 页面"></a>二、改写 components/Hi.vue 页面</h2><p>把 Hi.vue 改成一个通用的模板，加入<router-view>标签，给子模板提供插入位置。“Hi 页面 1” 和 “Hi 页面 2” 都相当于“Hi 页面”的子页面，有点想继承关系。我们在“Hi 页面”里加入<router-view>标签。<br><strong>components/Hi.vue,就是第 5 行的代码，其他代码不变</strong>​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br><br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;hi&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;Hi&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h2 id="三、在-components-目录下新建两个组件模板-Hi1-vue-和-Hi2-vue"><a href="#三、在-components-目录下新建两个组件模板-Hi1-vue-和-Hi2-vue" class="headerlink" title="三、在 components 目录下新建两个组件模板 Hi1.vue 和 Hi2.vue"></a>三、在 components 目录下新建两个组件模板 Hi1.vue 和 Hi2.vue</h2><p>新建的模板和 Hi.vue 没有太多的差别，知识改变了 data 中 message 的值，也就是输出的结果不太一样了。<br><strong>Hi1.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;hi&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;Hi, I am Hi1!&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><p><strong>Hi2.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;hi&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;Hi, I am Hi2&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h2 id="四、修改-router-index-js-代码"><a href="#四、修改-router-index-js-代码" class="headerlink" title="四、修改 router/index.js 代码"></a>四、修改 router/index.js 代码</h2><p>我们现在导航有了，母模板和子模板也有了，只要改变我们的路由配置文件就可以了。子路由的写法是在原有的路由配置下加入 children 字段。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">children: [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: xxx &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-attr">component</span>: xxx &#125;,<br>];<br></code></pre></div></td></tr></table></figure><p>children 字段后边跟的是个数组，数组里和其他配置路由基本相同，需要配置 path 和 component。具体看一下这个子路由的配置写法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><span class="hljs-keyword">import</span> Hello <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hello&#x27;</span>;<br><span class="hljs-keyword">import</span> Hi <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hi&#x27;</span>;<br><span class="hljs-keyword">import</span> Hi1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hi1&#x27;</span>;<br><span class="hljs-keyword">import</span> Hi2 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hi2&#x27;</span>;<br><br>Vue.use(Router);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>      component: Hello,<br>    &#125;,<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/hi&#x27;</span>,<br>      component: Hi,<br>      children: [<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: Hi &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;hi1&#x27;</span>, <span class="hljs-attr">component</span>: Hi1 &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;hi2&#x27;</span>, <span class="hljs-attr">component</span>: Hi2 &#125;,<br>      ],<br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>需要注意的是，在配置路由文件前，需要先用 import 引入 Hi1 和 Hi2。<br>总结： 这节课学的内容在路由配置里经常用到，比如我们作一个购物模块，购物模块里有很多相同的元素，我们就会利用这种子路由的形式，先定一个父页面，然后再修改子页面。希望这节课对你有帮助，其实子路由的步骤还是有些繁琐的，所以希望你们多练习几遍，能够完全掌握。</p><h1 id="vue-router-如何参数传递"><a href="#vue-router-如何参数传递" class="headerlink" title="vue-router 如何参数传递"></a>vue-router 如何参数传递</h1><p>开发中，参数的传递是个最基本的业务需求。通过 URL 地址来传递参数是一个形式，我们就看看 vue-router 为我们提供了那些传递参数的功能。我们先想象一个基本需求，就是在我们点击导航菜单时，跳转页面上能显示出当前页面的路径，来告诉用户你想在所看的页面位置（类似于面包屑导航）。</p><h2 id="一、用-name-传递参数"><a href="#一、用-name-传递参数" class="headerlink" title="一、用 name 传递参数"></a>一、用 name 传递参数</h2><p>两步完成用 name 传值并显示在模板里：</p><ol><li>在路由文件 src/router/index.js 里配置 name 属性。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">routes: [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>    component: Hello,<br>  &#125;,<br>];<br></code></pre></div></td></tr></table></figure><ol start="2"><li>模板里(src/App.vue)用$route.name 的形势接收，比如直接在模板中显示：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;&#123;&#123; $route.name&#125;&#125;&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h2 id="二、通过-标签中的-to-传参"><a href="#二、通过-标签中的-to-传参" class="headerlink" title="二、通过 标签中的 to 传参"></a>二、通过<router-link> 标签中的 to 传参</h2><p>也许你也会觉的上边的传参很不正规，也不方便，其实我们多数传参是不用 name 进行传参的，我们用<router-link>标签中的 to 属性进行传参，需要您注意的是这里的 to 要进行一个绑定，写成<code>:to</code>。<br>先来看一下这种传参方法的基本语法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-link :to=<span class="hljs-string">&quot;&#123;name:xxx,params:&#123;key:value&#125;&#125;&quot;</span>&gt;valueString&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><p>这里的 to 前边是带冒号的，然后后边跟的是一个对象形势的字符串.</p><ul><li>name：就是我们在路由 reouter 配置文件中起的 name 值。**(name 一定要一致！)**</li><li>params：就是我们要传的参数，它也是对象形势，在对象里可以传递多个值。</li></ul><p>了解基本的语法后，我们改造一下我们的 src/App.vue 里的<router-link>标签,我们把 hi1 页面的<router-link>进行修改。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-link :to=<span class="hljs-string">&quot;&#123;name:&#x27;hi1&#x27;,params:&#123;username:&#x27;jsp&#x27;,id:&#x27;888&#x27;&#125;&#125;&quot;</span>&gt;Hi1&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><p>把 src/reouter/index.js 文件里给 hi1 配置的路由起个 name,就叫 hi1. <strong>(name 的值一定要和<router-link>的 name 一样！)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;hi1&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hi1&quot;</span>, <span class="hljs-attr">component</span>: Hi1 &#125;,<br></code></pre></div></td></tr></table></figure><p>最后在模板里(src/components/Hi1.vue)用$route.params.username 进行接收.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h2&gt;&#123;&#123;msg&#125;&#125;--&#123;&#123;$route.params.username&#125;&#125;--&#123;&#123;$route.params.id&#125;&#125;&lt;/h2&gt;<br></code></pre></div></td></tr></table></figure><p><em>总结：</em>今天我们学习了两种传参的方法，一般会使用第二种方法。我们通过学习也知道了 name 的用途，一种作用是传参，一种作用是在传参时起到名称作用。传参的操作在实际开发中是基本的需求，我们一定要掌握好啊。<br>​</p><h1 id="单页面多路由区域操作"><a href="#单页面多路由区域操作" class="headerlink" title="单页面多路由区域操作"></a>单页面多路由区域操作</h1><p>实际需求是这样的，在一个页面里我们有 2 个以上<router-view>区域，我们通过配置路由的 js 文件，来操作这些区域的内容。例如我们在 src/App.vue 里加上两个<router-view>标签。打开了 src 目录下的 App.vue 文件，在<router-view>下面新写了两行<router-view>标签,并加入了些 CSS 样式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-view &gt;&lt;/router-view&gt;<br> &lt;router-view name=<span class="hljs-string">&quot;left&quot;</span> style=<span class="hljs-string">&quot;float:left;width:50%;background-color:#ccc;height:200px;&quot;</span>&gt;&lt;/router-view&gt;<br> &lt;router-view name=<span class="hljs-string">&quot;right&quot;</span> style=<span class="hljs-string">&quot;float:right;width:50%;background-color:#c0c;height:200px;&quot;</span>&gt;&lt;/router-view&gt;<br><br></code></pre></div></td></tr></table></figure><p>现在的页面中有了三个<router-view>标签，也就是说我们需要在路由里配置这三个区域，配置主要是在<code>**components**</code>字段里进行。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,<br>      components: &#123; HelloWorld, <span class="hljs-attr">left</span>: Hi1, <span class="hljs-attr">right</span>: Hi2 &#125;,<br>    &#125;,<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/hi&#x27;</span>,<br>      components: &#123; HelloWorld, <span class="hljs-attr">left</span>: Hi2, <span class="hljs-attr">right</span>: Hi1 &#125;,<br>    &#125;,<br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//   path: &quot;/hi&quot;,</span><br>    <span class="hljs-comment">//   component: Hi,</span><br>    <span class="hljs-comment">//   children: [</span><br>    <span class="hljs-comment">//     &#123; path: &quot;/&quot;, name: &quot;HelloWorld/Hi&quot;, component: Hi &#125;,</span><br>    <span class="hljs-comment">//     &#123; path: &quot;hi1&quot;, name: &quot;hi1&quot;, component: Hi1 &#125;,</span><br>    <span class="hljs-comment">//     &#123; path: &quot;hi2&quot;, name: &quot;Hi2&quot;, component: Hi2 &#125;</span><br>    <span class="hljs-comment">//   ]</span><br>    <span class="hljs-comment">// &#125;</span><br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>上边的代码我们编写了两个路径，一个是默认的‘/’，另一个是’/hi’.在两个路径下的 components 里面，我们对三个区域都定义了显示内容。​</p><h1 id="vue-router-利用-url-传递参数"><a href="#vue-router-利用-url-传递参数" class="headerlink" title="vue-router 利用 url 传递参数"></a>vue-router 利用 url 传递参数</h1><p>因为我们以前在前后端没有分开开发的时候，经常这样做。在实际开发也是有很多用 URL 传值的需求，比如我们在新闻列表中有很多新闻标题整齐的排列，我们需要点击每个新闻标题打开不同的新闻内容，这时在跳转路由时跟上新闻编号就十分实用。</p><h2 id="冒号的形式传递参数"><a href="#冒号的形式传递参数" class="headerlink" title=":冒号的形式传递参数"></a>:冒号的形式传递参数</h2><p>我们可以在理由配置文件里以:冒号的形式传递参数，这就是对参数的绑定。</p><ul><li>在配置文件里以冒号的形式设置参数。我们在/src/router/index.js 文件里配置路由。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    path:<span class="hljs-string">&#x27;/params/:newsId/:newsTitle&#x27;</span>,<br>     component:Params<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们需要传递参数是新闻 ID（newsId）和新闻标题（newsTitle）.所以我们在路由配置文件里制定了这两个值。</p><ul><li>在 src/components 目录下建立我们 params.vue 组件，也可以说是页面。我们在页面里输出了 url 传递的的新闻 ID 和新闻标题。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt;<br>        &lt;p&gt;新闻ID：&#123;&#123; $route.params.newsId&#125;&#125;&lt;/p&gt;<br>        &lt;p&gt;新闻标题：&#123;&#123; $route.params.newsTitle&#125;&#125;&lt;/p&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;params&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;params page&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><ul><li>在 App.vue 文件里加入我们的<router-view>标签。这时候我们可以直接利用 url 传值了。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-link to=<span class="hljs-string">&quot;/params/198/jsp&quot;</span>&gt;params&lt;/router-link&gt; |<br></code></pre></div></td></tr></table></figure><p>我们已经实现了以 url 方式进行传值，这在实际开发中经常使用，必须完全了解</p><h2 id="正则表达式在-URL-传值中的应用"><a href="#正则表达式在-URL-传值中的应用" class="headerlink" title="正则表达式在 URL 传值中的应用"></a>正则表达式在 URL 传值中的应用</h2><p>上边的例子，我们传递了新闻编号，现在需求升级了，我们希望我们传递的新闻 ID 只能是数字的形式，这时候我们就需要在传递时有个基本的类型判断，vue 是支持正则的。<br>加入正则需要在路由配置文件里（/src/router/index.js）以圆括号的形式加入。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">path:<span class="hljs-string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span>,<br></code></pre></div></td></tr></table></figure><p>加入了正则，我们再传递数字之外的其他参数，params.vue 组件就没有办法接收到。<br>​</p><h1 id="vue-router-的重定向-redirect"><a href="#vue-router-的重定向-redirect" class="headerlink" title="vue-router 的重定向-redirect"></a>vue-router 的重定向-redirect</h1><p>开发中有时候我们虽然设置的路径不一致，但是我们希望跳转到同一个页面，或者说是打开同一个组件。这时候我们就用到了路由的重新定向 redirect 参数。</p><h2 id="redirect-基本重定向"><a href="#redirect-基本重定向" class="headerlink" title="redirect 基本重定向"></a>redirect 基本重定向</h2><p>我们只要在路由配置文件中（/src/router/index.js）把原来的 component 换成 redirect 参数就可以了。我们来看一个简单的配置。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      component: Hello,<br>    &#125;,<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span>,<br>      component: Params,<br>    &#125;,<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/goback&#x27;</span>,<br>      redirect: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这里我们设置了 goback 路由，但是它并没有配置任何 component（组件），而是直接 redirect 到 path:’/’下了，这就是一个简单的重新定向。</p><h2 id="重定向时传递参数"><a href="#重定向时传递参数" class="headerlink" title="重定向时传递参数"></a>重定向时传递参数</h2><p>我们已经学会了通过 url 来传递参数，那我们重定向时如果也需要传递参数怎么办？其实 vue 也已经为我们设置好了，我们只需要在 ridirect 后边的参数里复制重定向路径的 path 参数就可以了。可能你看的有点晕，我们来看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  path:<span class="hljs-string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span>,<br>  component:Params<br>&#125;,&#123;<br>  path:<span class="hljs-string">&#x27;/goParams/:newsId(\\d+)/:newsTitle&#x27;</span>,<br>  redirect:<span class="hljs-string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>已经有了一个 params 路由配置，我们在设置一个 goParams 的路由重定向，并传递了参数。这时候我们的路由参数就可以传递给 params.vue 组件了。参数接收方法和正常的路由接收方法一样。</p><h1 id="alias-别名的使用"><a href="#alias-别名的使用" class="headerlink" title="alias 别名的使用"></a>alias 别名的使用</h1><p>上节学习了路由的重定向，我相信大家已经可以熟练使用 redirect 进行重定向了。使用 alias 别名的形式，我们也可以实现类似重定向的效果。 1.首先我们在路由配置文件里（/src/router/index.js），起一个别名，jsp</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    path: <span class="hljs-string">&#x27;/hi1&#x27;</span>,<br>    component: Hi1,<br>    alias:<span class="hljs-string">&#x27;/jsp&#x27;</span><br> &#125;<br></code></pre></div></td></tr></table></figure><p>2.配置我们的<router-link>，起过别名之后，可以直接使用<router-link>标签里的 to 属性，进行重新定向。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-link &lt; to=<span class="hljs-string">&quot;/jspang&quot;</span>&gt;jspang&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><h2 id="redirect-和-alias-的区别"><a href="#redirect-和-alias-的区别" class="headerlink" title="redirect 和 alias 的区别"></a>redirect 和 alias 的区别</h2><ul><li>redirect：仔细观察 URL，redirect 是直接改变了 url 的值，把 url 变成了真实的 path 路径。</li><li>alias：URL 路径没有别改变，这种情况更友好，让用户知道自己访问的路径，只是改变了<router-view>中的内容。</li></ul><p><strong>填个小坑：</strong><br>别名请不要用在 path 为’/’中，如下代码的别名是不起作用的。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>  component: Hello,<br>  alias:<span class="hljs-string">&#x27;/home&#x27;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>在实际项目中我们遇到了这样的坑，开始以为是自己的代码写的有问题，找了两个小时作用。后来发现不是代码问题，只是 vue 不支持这样使用。我们犯过错误，踩过了坑，希望大家就不要踩了。</p><h1 id="路由的过渡动画"><a href="#路由的过渡动画" class="headerlink" title="路由的过渡动画"></a>路由的过渡动画</h1><p>在开发中有一种需求叫高端、大气、上档次。所以作为一个大前端有责任让你的程序开起来更酷炫。可以在页面切换时我们加入一些动画效果，提升我们程序的动效设计。这节课我们就学习一下路由的过渡动画效果制作。</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a><transition>标签</h2><p>想让路由有过渡动画，需要在<router-view>标签的外部添加<transition>标签，标签还需要一个 name 属性。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;transition name=<span class="hljs-string">&quot;fade&quot;</span>&gt;<br>  &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/transition&gt;<br></code></pre></div></td></tr></table></figure><p>我们在/src/App.vue 文件里添加了<transition>标签，并给标签起了一个名字叫 fade。</p><h2 id="css-过渡类名："><a href="#css-过渡类名：" class="headerlink" title="css 过渡类名："></a>css 过渡类名：</h2><p>组件过渡过程中，会有四个 CSS 类名进行切换，这四个类名与 transition 的 name 属性有关，比如 name=”fade”,会有如下四个 CSS 类名：</p><ol><li>fade-enter:进入过渡的开始状态，元素被插入时生效，只应用一帧后立刻删除。</li><li>fade-enter-active:进入过渡的结束状态，元素被插入时就生效，在过渡过程完成后移除。</li><li>fade-leave:离开过渡的开始状态，元素被删除时触发，只应用一帧后立刻删除。</li><li>fade-leave-active:离开过渡的结束状态，元素被删除时生效，离开过渡完成后被删除。</li></ol><p>从上面四个类名可以看出，fade-enter-active 和 fade-leave-active 在整个进入或离开过程中都有效，所以 CSS 的 transition 属性在这两个类下进行设置。<br>那我们就在 App.vue 页面里加入四种 CSS 样式效果，并利用 CSS3 的 transition 属性控制动画的具体效果。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.fade-enter &#123;<br>  opacity:<span class="hljs-number">0</span>;<br>&#125;<br>.fade-leave&#123;<br>  opacity:<span class="hljs-number">1</span>;<br>&#125;<br>.fade-enter-active&#123;<br>  transition:opacity .5s;<br>&#125;<br>.fade-leave-active&#123;<br>  opacity:<span class="hljs-number">0</span>;<br>  transition:opacity .5s;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上边的代码设置了改变透明度的动画过渡效果，但是默认的 mode 模式 in-out 模式，这并不是我们想要的。下面我们学一下 mode 模式。</p><h2 id="过渡模式-mode："><a href="#过渡模式-mode：" class="headerlink" title="过渡模式 mode："></a>过渡模式 mode：</h2><ul><li>in-out:新元素先进入过渡，完成之后当前元素过渡离开。</li><li>out-in:当前元素先进行过渡离开，离开完成后新元素过渡进入。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;transition name=<span class="hljs-string">&quot;fade&quot;</span> mode=<span class="hljs-string">&quot;out-in&quot;</span>&gt;<br>  &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/transition&gt;<br></code></pre></div></td></tr></table></figure><h1 id="mode-的设置和-404-页面的处理"><a href="#mode-的设置和-404-页面的处理" class="headerlink" title="mode 的设置和 404 页面的处理"></a>mode 的设置和 404 页面的处理</h1><p>在学习过渡效果的时候，我们学了 mode 的设置，但是在路由的属性中还有一个 mode。另一个 mode 模式和 404 页面的设置。</p><h2 id="mode-的两个值"><a href="#mode-的两个值" class="headerlink" title="mode 的两个值"></a>mode 的两个值</h2><ol><li>historty:当你使用 history 模式时，URL 就像正常的 url，例如 <a href="http://jsapng.com/lms/%EF%BC%8C%E4%B9%9F%E5%A5%BD%E7%9C%8B%EF%BC%81">http://jsapng.com/lms/，也好看！</a></li><li>hash:默认’hash’值，但是 hash 看起来就像无意义的字符排列，不太好看也不符合我们一般的网址浏览习惯。</li></ol><p>具体的效果我在视频中会有所掩饰，不理解的小伙伴可以到视频中进行查看。</p><h2 id="404-页面的设置："><a href="#404-页面的设置：" class="headerlink" title="404 页面的设置："></a>404 页面的设置：</h2><p>用户会经常输错页面，当用户输错页面时，我们希望给他一个友好的提示，为此美工都会设计一个漂亮的页面，这个页面就是我们常说的 404 页面。vue-router 也为我们提供了这样的机制. 1.设置我们的路由配置文件（/src/router/index.js）：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>   path:<span class="hljs-string">&#x27;*&#x27;</span>,<br>   component:<span class="hljs-built_in">Error</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里的 path:’ * ‘就是找不到页面时的配置，component 是我们新建的一个 Error.vue 的文件。 2.新建 404 页面：<br>在/src/components/文件夹下新建一个 Error.vue 的文件。简单输入一些有关错误页面的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;Error:404&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>3.我们在用<router-link>瞎写一个标签的路径。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-link to=<span class="hljs-string">&quot;/error&quot;</span>&gt;error&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><p>预览一下我们现在的结果，就已经实现 404 页面的效果。</p><h1 id="路由中的钩子"><a href="#路由中的钩子" class="headerlink" title="路由中的钩子"></a>路由中的钩子</h1><p>我们知道一个组件从进入到销毁有很多的钩子函数，同样在路由中也设置了钩子函数。路由的钩子选项可以写在路由配置文件中，也可以写在我们的组件模板中。</p><h2 id="路由配置文件中的钩子函数"><a href="#路由配置文件中的钩子函数" class="headerlink" title="路由配置文件中的钩子函数"></a>路由配置文件中的钩子函数</h2><p>我们可以直接在路由配置文件（/src/router/index.js）中写钩子函数。但是在路由文件中我们只能写一个 beforeEnter,就是在进入此路由配置时。先来看一段具体的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>      path:<span class="hljs-string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span>,<br>      component:Params,<br>      beforeEnter:<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我进入了params模板&#x27;</span>);<br>        <span class="hljs-built_in">console</span>.log(to);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">from</span>);<br>        next();<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>我们在 params 路由里配置了 bdforeEnter 得钩子函数，函数我们采用了 ES6 的箭头函数，需要传递三个参数。我们并在箭头函数中打印了 to 和 from 函数。具体打印内容可以在控制台查看 object。</p><h3 id="三个参数："><a href="#三个参数：" class="headerlink" title="三个参数："></a>三个参数：</h3><ol><li>to:路由将要跳转的路径信息，信息是包含在对像里边的。</li><li>from:路径跳转前的路径信息，也是一个对象的形式。</li><li>next:路由的控制参数，常用的有 next(true)和 next(false)。</li></ol><h2 id="写在模板中的钩子函数"><a href="#写在模板中的钩子函数" class="headerlink" title="写在模板中的钩子函数"></a>写在模板中的钩子函数</h2><p>在配置文件中的钩子函数，只有一个钩子-beforeEnter，如果我们写在模板中就可以有两个钩子函数可以使用：</p><ul><li>beforeRouteEnter：在路由进入前的钩子函数。</li><li>beforeRouteLeave：在路由离开前的钩子函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;params&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;params page&#x27;</span><br>    &#125;<br>  &#125;,<br>  beforeRouteEnter:<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;准备进入路由模板&quot;</span>);<br>    next();<br>  &#125;,<br>  beforeRouteLeave: <span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;准备离开路由模板&quot;</span>);<br>    next();<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>这是我们写在 params.vue 模板里的路由钩子函数。它可以监控到路由的进入和路由的离开，也可以轻易的读出 to 和 from 的值。</p><h1 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h1><p>如果在业务逻辑代码中需要跳转页面我们如何操作？这就是我们要说的编程式导航，顾名思义，就是在业务逻辑代码中实现导航。</p><h2 id="this-router-go-1-和-this-router-go-1"><a href="#this-router-go-1-和-this-router-go-1" class="headerlink" title="this.$router.go(-1) 和 this.$router.go(1)"></a>this.$router.go(-1) 和 this.$router.go(1)</h2><p>这两个编程式导航的意思是后退和前进，功能跟我们浏览器上的后退和前进按钮一样，这在业务逻辑中经常用到。比如条件不满足时，我们需要后退。<br>router.go(-1)代表着后退，我们可以让我们的导航进行后退，并且我们的地址栏也是有所变化的。 1.我们先在 app.vue 文件里加入一个按钮，按钮并绑定一个 goback( )方法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;goback&quot;</span>&gt;后退&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p>2.在我们的 script 模块中写入 goback()方法，并使用 this.$router.go(-1),进行后退操作。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;app&#x27;</span>,<br>  methods:&#123;<br>    <span class="hljs-function"><span class="hljs-title">goback</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">this</span>.$router.go(-<span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>打开浏览器进行预览，这时我们的后退按钮就可以向以前的网页一样后退了。<br>router.go(1):代表着前进，用法和后退一样，我在这里就不重复码字了（码字辛苦希望大家理解）。<br>this.$router.push(‘/xxx ‘)<br>这个编程式导航都作用就是跳转，比如我们判断用户名和密码正确时，需要跳转到用户中心页面或者首页，都用到这个编程的方法来操作路由。<br>我们设置一个按钮，点击按钮后回到站点首页。 1.先编写一个按钮，在按钮上绑定 goHome( )方法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;goHome&quot;</span>&gt;回到首页&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p>2.在<script>模块里加入 goHome 方法，并用 this.$router.push(‘/’)导航到首页</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;app&#x27;</span>,<br>  methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">goback</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.$router.go(-<span class="hljs-number">1</span>);<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">goHome</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue-router</tag>
      
      <tag>路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-cli2.0脚手架</title>
    <link href="/2021/06/27/vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <url>/2021/06/27/vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p>Vue-cli 是 vue 官方出品的快速构建单页应用的脚手架，如果你是初次尝试 Vue，我不建议使用，推荐你老老实实用普通引入 javascript 文件的方式进行学习，这里牵扯的东西很多，有 webpack，npm，nodejs，babel 等等，很容易产生从入门就放弃的思想。</p><h1 id="Vue-cli，开始吧骚年"><a href="#Vue-cli，开始吧骚年" class="headerlink" title="Vue-cli，开始吧骚年"></a>Vue-cli，开始吧骚年</h1><h2 id="一、安装-vue-cli"><a href="#一、安装-vue-cli" class="headerlink" title="一、安装 vue-cli"></a>一、安装 vue-cli</h2><p>安装 vue-cli 的前提是你已经安装了 npm，安装 npm 你可以直接下载 node 的安装包进行安装。你可以在命令行工具里输入 npm -v 检测你是否安装了 npm 和版本情况。出现版本号说明你已经安装了 npm 和 node，我这里的 npm 版本为 3.10.10。如果该命令不可以使用，需要安装 node 软件包，根据你的系统版本选择下载安装就可以了。<br>下载地址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a><br>npm 没有问题，接下来我们可以用 npm 命令安装 vue-cli 了，在命令行输入下面的命令：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install vue-cli -g<br></code></pre></div></td></tr></table></figure><ul><li>-g :代表全局安装。如果你安装时报错，一般是网络问题，你可以尝试用 cnpm 来进行安装。安装完成后，可以用 vue</li><li>-V 来进行查看 vue-cli 的版本号。注意这里的 V 是大写的。我这里版本号是 2.8.1.</li></ul><p>如果 vue -V 的命令管用了，说明已经顺利的把 vue-cli 安装到我们的计算机里了。</p><h2 id="二、初始化项目"><a href="#二、初始化项目" class="headerlink" title="二、初始化项目"></a>二、初始化项目</h2><p>可以参考官方新版安装教程<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a><br>​</p><h3 id="旧版本"><a href="#旧版本" class="headerlink" title="旧版本"></a>旧版本</h3><p>以下是拉取 2.x 模板 (旧版本)<br>我们用 vue init 命令来初始化项目，具体看一下这条命令的使用方法。<br><code>vue init &lt;template-name&gt; &lt;project-name&gt;</code><br>init：表示我要用 vue-cli 来初始化项目<br><template-name>：表示模板名称，vue-cli 官方为我们提供了 5 种模板，</p><ul><li>webpack-一个全面的 webpack+vue-loader 的模板，功能包括热加载，linting,检测和 CSS 扩展。</li><li>webpack-simple-一个简单 webpack+vue-loader 的模板，不包含其他功能，让你快速的搭建 vue 的开发环境。</li><li>browserify-一个全面的 Browserify+vueify 的模板，功能包括热加载，linting,单元检测。</li><li>browserify-simple-一个简单 Browserify+vueify 的模板，不包含其他功能，让你快速的搭建 vue 的开发环境。</li></ul><p>-simple-一个最简单的单页应用模板。<br><project-name>：标识项目名称，这个你可以根据自己的项目来起名字。<br>在实际开发中，一般我们都会使用 webpack 这个模板，那我们这里也安装这个模板，在命令行输入以下命令：<br><strong>建议用新版本或者离线模式</strong>，直接使用<code>vue init webpack</code>可能会报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vue init webpack vuecliTest<br></code></pre></div></td></tr></table></figure><p>输入命令后，会询问我们几个简单的选项，我们根据自己的需要进行填写就可以了。</p><ul><li>Project name :项目名称 ，如果不需要更改直接回车就可以了。注意：这里不能使用大写，所以我把名称改成了 vueclitest</li><li>Project description:项目描述，默认为 A Vue.js project,直接回车，不用编写。</li><li>Author：作者，如果你有配置 git 的作者，他会读取。</li><li>Install vue-router? 是否安装 vue 的路由插件，我们这里需要安装，所以选择 Y</li><li>Use ESLint to lint your code? 是否用 ESLint 来限制你的代码错误和风格。我们这里不需要输入 n，如果你是大型团队开发，最好是进行配置。</li><li>setup unit tests with Karma + Mocha? 是否需要安装单元测试工具 Karma+Mocha，我们这里不需要，所以输入 n。</li><li>Setup e2e tests with Nightwatch?是否安装 e2e 来进行用户行为模拟测试，我们这里不需要，所以输入 n。</li></ul><h3 id="离线模式-解决-vue-init-webpack-报错"><a href="#离线模式-解决-vue-init-webpack-报错" class="headerlink" title="离线模式(解决 vue init webpack 报错)"></a>离线模式(解决 vue init webpack 报错)</h3><p>解决 vue init webpack 报错，直接使用<code>vue init webpack test </code>会报错，错误信息如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vue-cli · Failed to download repo vuejs-templates/webpack: connect ETIMEDOUT xxx:<span class="hljs-number">443</span><br></code></pre></div></td></tr></table></figure><p>通过 vue-cli 工具命令 vue init webpack vuedemo 创建 vue 项目的时候报错，提示连接超时，应该是下载某个 package 的时候，需要翻墙，导致出现连接超时<br>[</p><p>](<a href="https://github.com/vuejs-templates/webpack">https://github.com/vuejs-templates/webpack</a>)<br>解决办法是改为离线创建，我们需要下载 github 仓库中的 vue-templates/webpack，然后解压到本地。下载地址为：<a href="https://github.com/vuejs-templates/webpack">https://github.com/vuejs-templates/webpack</a>，下载之后，解压到本地用户目录下创建.vue-templates 文件夹<br>​</p><p>下载之后的压缩包为 webpack-develop.zip，我们解压之后，需要更改目录名为 webpack。用户目录下的目录为.vue-templates，注意文件夹名称前面的点(.)。<br>以我的为例将 webpack 文件放到 C:\Users\jackhoo.vue-templates 下<br>​</p><p>这样，我们再进行 vue init webpack vuedemo 命令的时候，需要带上参数–offline 表示离线初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vue init webpack vuedemo --offline<br></code></pre></div></td></tr></table></figure><p>输入命令后，会询问我们几个简单的选项，我们根据自己的需要进行填写就可以了。</p><ul><li>Project name :项目名称 ，如果不需要更改直接回车就可以了。注意：这里不能使用大写，所以我把名称改成了 vuedemo</li><li>Project description:项目描述，默认为 A Vue.js project,直接回车，不用编写。</li><li>Author：作者，如果你有配置 git 的作者，他会读取。</li><li>Install vue-router? 是否安装 vue 的路由插件，我们这里需要安装，所以选择 Y</li><li>Use ESLint to lint your code? 是否用 ESLint 来限制你的代码错误和风格。我们这里不需要输入 n，如果你是大型团队开发，最好是进行配置。</li><li>setup unit tests with Karma + Mocha? 是否需要安装单元测试工具 Karma+Mocha，我们这里不需要，所以输入 n。</li><li>Setup e2e tests with Nightwatch?是否安装 e2e 来进行用户行为模拟测试，我们这里不需要，所以输入 n。</li><li>Should we run <code>npm install</code> for you after the project has been created? (recommended) npm</li></ul><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">   vue-cli · Generated <span class="hljs-string">&quot;vuedemo&quot;</span>.<br><br><br># Installing project dependencies ...<br># ========================<br></code></pre></div></td></tr></table></figure><p>命令行出现上面的文字，说明我们已经初始化好了第一步。</p><ol><li>cd vuedemo 进入我们的 vue 项目目录。</li><li>npm run dev 开发模式下运行我们的程序。给我们自动构建了开发用的服务器环境和在浏览器中打开，并实时监视我们的代码更改，即时呈现给我们。</li></ol><p>最后运行就成功了。<br>​</p><h1 id="Vue-cli-项目结构讲解"><a href="#Vue-cli-项目结构讲解" class="headerlink" title="Vue-cli 项目结构讲解"></a>Vue-cli 项目结构讲解</h1><p>vue-cli 脚手架工具就是为我们搭建了开发所需要的环境，为我们省去了很多精力。有必要对这个环境进行熟悉，我们就从项目的结构讲起。<br>Ps：由于版本实时更新和你选择安装的不同（这里列出的是模板为 webpack 的目录结构），所以你看到的有可能和下边的有所差别。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.<br>|-- build                            <span class="hljs-comment">// 项目构建(webpack)相关代码</span><br>|   |-- build.js                     <span class="hljs-comment">// 生产环境构建代码</span><br>|   |-- check-version.js             <span class="hljs-comment">// 检查node、npm等版本</span><br>|   |-- dev-client.js                <span class="hljs-comment">// 热重载相关</span><br>|   |-- dev-server.js                <span class="hljs-comment">// 构建本地服务器</span><br>|   |-- utils.js                     <span class="hljs-comment">// 构建工具相关</span><br>|   |-- webpack.base.conf.js         <span class="hljs-comment">// webpack基础配置</span><br>|   |-- webpack.dev.conf.js          <span class="hljs-comment">// webpack开发环境配置</span><br>|   |-- webpack.prod.conf.js         <span class="hljs-comment">// webpack生产环境配置</span><br>|-- config                           <span class="hljs-comment">// 项目开发环境配置</span><br>|   |-- dev.env.js                   <span class="hljs-comment">// 开发环境变量</span><br>|   |-- index.js                     <span class="hljs-comment">// 项目一些配置变量</span><br>|   |-- prod.env.js                  <span class="hljs-comment">// 生产环境变量</span><br>|   |-- test.env.js                  <span class="hljs-comment">// 测试环境变量</span><br>|-- src                              <span class="hljs-comment">// 源码目录</span><br>|   |-- components                     <span class="hljs-comment">// vue公共组件</span><br>|   |-- store                          <span class="hljs-comment">// vuex的状态管理</span><br>|   |-- App.vue                        <span class="hljs-comment">// 页面入口文件</span><br>|   |-- main.js                        <span class="hljs-comment">// 程序入口文件，加载各种公共组件</span><br>|-- <span class="hljs-keyword">static</span>                           <span class="hljs-comment">// 静态文件，比如一些图片，json数据等</span><br>|   |-- data                           <span class="hljs-comment">// 群聊分析得到的数据用于数据可视化</span><br>|-- .babelrc                         <span class="hljs-comment">// ES6语法编译配置</span><br>|-- .editorconfig                    <span class="hljs-comment">// 定义代码格式</span><br>|-- .gitignore                       <span class="hljs-comment">// git上传需要忽略的文件格式</span><br>|-- README.md                        <span class="hljs-comment">// 项目说明</span><br>|-- favicon.ico<br>|-- index.html                       <span class="hljs-comment">// 入口页面</span><br>|-- package.json                     <span class="hljs-comment">// 项目基本信息</span><br>.<br></code></pre></div></td></tr></table></figure><h2 id="重要文件讲解："><a href="#重要文件讲解：" class="headerlink" title="重要文件讲解："></a>重要文件讲解：</h2><p>package.json package.json 文件是项目根目录下的一个文件，定义该项目开发所需要的各种模块以及一些项目配置信息（如项目名称、版本、描述、作者等）。<br>package.json 里的 scripts 字段，这个字段定义了你可以用 npm 运行的命令。在开发环境下，在命令行工具中运行 npm run dev 就相当于执行 node build/dev-server.js .也就是开启了一个 node 写的开发行建议服务器。由此可以看出 script 字段是用来指定 npm 相关命令的缩写。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;node build/dev-server.js&quot;</span>,<br>   <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;node build/build.js&quot;</span><br> &#125;,<br></code></pre></div></td></tr></table></figure><p>dependencies 字段和 devDependencies 字段</p><ul><li>dependencies 字段指项目运行时所依赖的模块；</li><li>devDependencies 字段指定了项目开发时所依赖的模块；</li></ul><p>在命令行中运行 npm install 命令，会自动安装 dependencies 和 devDempendencies 字段中的模块。package.json 还有很多相关配置，如果你想全面了解，可以专门去百度学习一下。</p><h2 id="webpack-配置相关"><a href="#webpack-配置相关" class="headerlink" title="webpack 配置相关"></a>webpack 配置相关</h2><p>我们在上面说了运行 npm run dev 就相当于执行了 node build/dev-server.js,说明这个文件相当重要，先来熟悉一下它。 我贴出代码并给出重要的解释。<br><code>dev-server.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 检查 Node 和 npm 版本</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./check-versions&#x27;</span>)();<br><br><span class="hljs-comment">// 获取 config/index.js 的默认配置</span><br><span class="hljs-keyword">var</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../config&#x27;</span>);<br><br><span class="hljs-comment">// 如果 Node 的环境无法判断当前是 dev / product 环境</span><br><span class="hljs-comment">// 使用 config.dev.env.NODE_ENV 作为当前的环境</span><br><br><span class="hljs-keyword">if</span> (!process.env.NODE_ENV) process.env.NODE_ENV = <span class="hljs-built_in">JSON</span>.parse(config.dev.env.NODE_ENV);<br><br><span class="hljs-comment">// 使用 NodeJS 自带的文件路径工具</span><br><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-comment">// 使用 express</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">// 使用 webpack</span><br><span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><br><span class="hljs-comment">// 一个可以强制打开浏览器并跳转到指定 url 的插件</span><br><span class="hljs-keyword">var</span> opn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;opn&#x27;</span>);<br><br><span class="hljs-comment">// 使用 proxyTable</span><br><span class="hljs-keyword">var</span> proxyMiddleware = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>);<br><br><span class="hljs-comment">// 使用 dev 环境的 webpack 配置</span><br><span class="hljs-keyword">var</span> webpackConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.dev.conf&#x27;</span>);<br><br><span class="hljs-comment">// default port where dev server listens for incoming traffic</span><br><br><span class="hljs-comment">// 如果没有指定运行端口，使用 config.dev.port 作为运行端口</span><br><span class="hljs-keyword">var</span> port = process.env.PORT || config.dev.port;<br><br><span class="hljs-comment">// Define HTTP proxies to your custom API backend</span><br><span class="hljs-comment">// https://github.com/chimurai/http-proxy-middleware</span><br><br><span class="hljs-comment">// 使用 config.dev.proxyTable 的配置作为 proxyTable 的代理配置</span><br><span class="hljs-keyword">var</span> proxyTable = config.dev.proxyTable;<br><br><span class="hljs-comment">// 使用 express 启动一个服务</span><br><span class="hljs-keyword">var</span> app = express();<br><br><span class="hljs-comment">// 启动 webpack 进行编译</span><br><span class="hljs-keyword">var</span> compiler = webpack(webpackConfig);<br><br><span class="hljs-comment">// 启动 webpack-dev-middleware，将 编译后的文件暂存到内存中</span><br><span class="hljs-keyword">var</span> devMiddleware = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-dev-middleware&#x27;</span>)(compiler, &#123;<br>  publicPath: webpackConfig.output.publicPath,<br>  stats: &#123;<br>    colors: <span class="hljs-literal">true</span>,<br>    chunks: <span class="hljs-literal">false</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-comment">// 启动 webpack-hot-middleware，也就是我们常说的 Hot-reload</span><br><span class="hljs-keyword">var</span> hotMiddleware = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-hot-middleware&#x27;</span>)(compiler);<br><span class="hljs-comment">// force page reload when html-webpack-plugin template changes</span><br>compiler.plugin(<span class="hljs-string">&#x27;compilation&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">compilation</span>) </span>&#123;<br>  compilation.plugin(<span class="hljs-string">&#x27;html-webpack-plugin-after-emit&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data, cb</span>) </span>&#123;<br>    hotMiddleware.publish(&#123; <span class="hljs-attr">action</span>: <span class="hljs-string">&#x27;reload&#x27;</span> &#125;);<br>    cb();<br>  &#125;);<br>&#125;);<br><br><span class="hljs-comment">// proxy api requests</span><br><span class="hljs-comment">// 将 proxyTable 中的请求配置挂在到启动的 express 服务上</span><br><span class="hljs-built_in">Object</span>.keys(proxyTable).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> options = proxyTable[context];<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    options = &#123; <span class="hljs-attr">target</span>: options &#125;;<br>  &#125;<br>  app.use(proxyMiddleware(context, options));<br>&#125;);<br><br><span class="hljs-comment">// handle fallback for HTML5 history API</span><br><span class="hljs-comment">// 使用 connect-history-api-fallback 匹配资源，如果不匹配就可以重定向到指定地址</span><br>app.use(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;connect-history-api-fallback&#x27;</span>)());<br><br><span class="hljs-comment">// serve webpack bundle output</span><br><span class="hljs-comment">// 将暂存到内存中的 webpack 编译后的文件挂在到 express 服务上</span><br>app.use(devMiddleware);<br><br><span class="hljs-comment">// enable hot-reload and state-preserving</span><br><span class="hljs-comment">// compilation error display</span><br><span class="hljs-comment">// 将 Hot-reload 挂在到 express 服务上</span><br>app.use(hotMiddleware);<br><br><span class="hljs-comment">// serve pure static assets</span><br><span class="hljs-comment">// 拼接 static 文件夹的静态资源路径</span><br><span class="hljs-keyword">var</span> staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory);<br><span class="hljs-comment">// 为静态资源提供响应服务</span><br>app.use(staticPath, express.static(<span class="hljs-string">&#x27;./static&#x27;</span>));<br><br><span class="hljs-comment">// 让我们这个 express 服务监听 port 的请求，并且将此服务作为 dev-server.js 的接口暴露</span><br><span class="hljs-built_in">module</span>.exports = app.listen(port, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">var</span> uri = <span class="hljs-string">&#x27;http://localhost:&#x27;</span> + port;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Listening at &#x27;</span> + uri + <span class="hljs-string">&#x27;\n&#x27;</span>);<br><br>  <span class="hljs-comment">// when env is testing, don&#x27;t need open it</span><br>  <span class="hljs-comment">// 如果不是测试环境，自动打开浏览器并跳到我们的开发地址</span><br>  <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;testing&#x27;</span>) &#123;<br>    opn(uri);<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p><code>webpack.base.confg.js</code> webpack 的基础配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">...<br>...<br><span class="hljs-built_in">module</span>.export = &#123;<br>    <span class="hljs-comment">// 编译入口文件</span><br>    entry: &#123;&#125;,<br>    <span class="hljs-comment">// 编译输出路径</span><br>    output: &#123;&#125;,<br>    <span class="hljs-comment">// 一些解决方案配置</span><br>    resolve: &#123;&#125;,<br>    resolveLoader: &#123;&#125;,<br>    <span class="hljs-built_in">module</span>: &#123;<br>        <span class="hljs-comment">// 各种不同类型文件加载器配置</span><br>        loaders: &#123;<br>        ...<br>        ...<br>        <span class="hljs-comment">// js文件用babel转码</span><br>        &#123;<br>            test: <span class="hljs-regexp">/\.js$/</span>,<br>            loader: <span class="hljs-string">&#x27;babel&#x27;</span>,<br>            include: projectRoot,<br>            <span class="hljs-comment">// 哪些文件不需要转码</span><br>            exclude: <span class="hljs-regexp">/node_modules/</span><br>        &#125;,<br>        ...<br>        ...<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// vue文件一些相关配置</span><br>    vue: &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>.babelrc</code><br>Babel 解释器的配置文件，存放在根目录下。Babel 是一个转码器，项目里需要用它将 ES6 代码转为 ES5 代码。如果你想了解更多，可以查看 babel 的知识。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-comment">//设定转码规则</span><br>  <span class="hljs-string">&quot;presets&quot;</span>: [<br>    [<span class="hljs-string">&quot;env&quot;</span>, &#123; <span class="hljs-string">&quot;modules&quot;</span>: <span class="hljs-literal">false</span> &#125;],<br>    <span class="hljs-string">&quot;stage-2&quot;</span><br>  ],<br>  <span class="hljs-comment">//转码用的插件</span><br>  <span class="hljs-string">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;transform-runtime&quot;</span>],<br>  <span class="hljs-string">&quot;comments&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">//对BABEL_ENV或者NODE_ENV指定的不同的环境变量，进行不同的编译操作</span><br>  <span class="hljs-string">&quot;env&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;stage-2&quot;</span>],<br>      <span class="hljs-string">&quot;plugins&quot;</span>: [ <span class="hljs-string">&quot;istanbul&quot;</span> ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>.editorconfig</code><br>该文件定义项目的编码规范，编译器的行为会与.editorconfig 文件中定义的一致，并且其优先级比编译器自身的设置要高，这在多人合作开发项目时十分有用而且必要。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">root = <span class="hljs-literal">true</span><br><br>[*]    <span class="hljs-comment">// 对所有文件应用下面的规则</span><br>charset = utf-<span class="hljs-number">8</span>                    <span class="hljs-comment">// 编码规则用utf-8</span><br>indent_style = space               <span class="hljs-comment">// 缩进用空格</span><br>indent_size = <span class="hljs-number">2</span>                    <span class="hljs-comment">// 缩进数量为2个空格</span><br>end_of_line = lf                   <span class="hljs-comment">// 换行符格式</span><br>insert_final_newline = <span class="hljs-literal">true</span>        <span class="hljs-comment">// 是否在文件的最后插入一个空行</span><br>trim_trailing_whitespace = <span class="hljs-literal">true</span>    <span class="hljs-comment">// 是否删除行尾的空格</span><br></code></pre></div></td></tr></table></figure><h1 id="解读-Vue-cli-的模板"><a href="#解读-Vue-cli-的模板" class="headerlink" title="解读 Vue-cli 的模板"></a>解读 Vue-cli 的模板</h1><p>我们主要了解一下 Vue-cli 的模板操作，包括增加模板，修改模板，以及一个常规模板的基本结构。</p><h2 id="一、npm-run-build-命令"><a href="#一、npm-run-build-命令" class="headerlink" title="一、npm run build 命令"></a>一、npm run build 命令</h2><p>如何把写好的 Vue 网页放到服务器上，主要的命令就是要用到 npm run build 命令。我们在命令行中输入 npm run build 命令后，vue-cli 会自动进行项目发布打包。你在 package.json 文件的 scripts 字段中可以看出，你执行的 npm run build 命令就相对执行的 node build/build.js 。<br>package.json 的 scripts 字段：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;node build/dev-server.js&quot;</span>,<br>   <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;node build/build.js&quot;</span><br> &#125;,<br></code></pre></div></td></tr></table></figure><p>在执行完 npm run build 命令后，在你的项目根目录生成了 dist 文件夹，这个文件夹里边就是我们要传到服务器上的文件。<br>dist 文件夹下目录包括：</p><ul><li>index.html 主页文件:因为我们开发的是单页 web 应用，所以说一般只有一个 html 文件。</li><li>static 静态资源文件夹：里边 js、CSS 和一些图片。</li></ul><h2 id="二、main-js-文件解读"><a href="#二、main-js-文件解读" class="headerlink" title="二、main.js 文件解读"></a>二、main.js 文件解读</h2><p>main.js 是整个项目的入口文件,在 src 文件夹下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>;<br><br>Vue.config.productionTip = <span class="hljs-literal">false</span>; <span class="hljs-comment">//生产环境提示，这里设置成了false</span><br><br><span class="hljs-comment">/* eslint-disable no-new */</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  router,<br>  template: <span class="hljs-string">&#x27;&lt;App/&gt;&#x27;</span>,<br>  components: &#123; App &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>通过代码可以看出这里引进了 App 的组件和的模板，它是通过 import App from ‘./App’这句代码引入的。 我们找到 App.vue 文件，打开查看。</p><h2 id="三、App-vue-文件"><a href="#三、App-vue-文件" class="headerlink" title="三、App.vue 文件:"></a>三、App.vue 文件:</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;img src=<span class="hljs-string">&quot;./assets/logo.png&quot;</span>&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;app&#x27;</span><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: <span class="hljs-string">&#x27;Avenir&#x27;</span>, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  text-align: center;<br>  color: #2c3e50;<br>  margin-top: 60px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><p>app.vue 文件我们可以分成三部分解读，</p><ul><li><p><template></template>标签包裹的内容：这是模板的 HTMLDom 结构，里边引入了一张图片和<router-view></router-view>标签，<router-view>标签说明使用了路由机制。我们会在以后专门拿出一篇文章讲 Vue-router。</p></li><li><script></script>标签包括的js内容：你可以在这里些一些页面的动态效果和Vue的逻辑代码。</li><li><style></style>标签包裹的css内容：这里就是你平时写的CSS样式，对页面样子进行装饰用的，需要特别说明的是你可以用<style scoped></style>来声明这些css样式只在本模板中起作用。</li></ul><h2 id="四、router-index-js-路由文件"><a href="#四、router-index-js-路由文件" class="headerlink" title="四、router/index.js 路由文件"></a>四、router/index.js 路由文件</h2><p>引文在 app.vue 中我们看到了路由文件，虽然 router 的内容比较多，但是我们先简单的看一下</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><span class="hljs-keyword">import</span> Hello <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hello&#x27;</span>;<br><br>Vue.use(Router);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>      component: Hello,<br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>我们可以看到 import Hello from ‘@/components/Hello’这句话， 文件引入了/components/Hello.vue 文件。这个文件里就配置了一个路由，就是当我们访问网站时给我们显示 Hello.vue 的内容。</p><h2 id="五、HelloWorld-vue-文件解读："><a href="#五、HelloWorld-vue-文件解读：" class="headerlink" title="五、HelloWorld.vue 文件解读："></a>五、HelloWorld.vue 文件解读：</h2><p>。也是分为<template><script><style>三个部分，以后我们大部分的工作都是写这些.vue 结尾的文件。现在我们可以试着改一些内容，然后预览一下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br>    &lt;h2&gt;Essential Links&lt;/h2&gt;<br>    &lt;ul&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://vuejs.org&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>Core Docs<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://forum.vuejs.org&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>Forum<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://gitter.im/vuejs/vue&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>Gitter Chat<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://twitter.com/vuejs&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>Twitter<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;br&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://vuejs-templates.github.io/webpack/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>Docs for This Template<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;h2&gt;Ecosystem&lt;/h2&gt;<br>    &lt;ul&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://router.vuejs.org/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>vue-router<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://vuex.vuejs.org/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>vuex<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://vue-loader.vuejs.org/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>vue-loader<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/vuejs/awesome-vue&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>awesome-vue<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;Welcome to Your Vue.js App&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;!-- Add <span class="hljs-string">&quot;scoped&quot;</span> attribute to limit CSS to <span class="hljs-built_in">this</span> component only --&gt;<br>&lt;style scoped&gt;<br>h1, h2 &#123;<br>  font-weight: normal;<br>&#125;<br><br>ul &#123;<br>  list-style-type: none;<br>  padding: <span class="hljs-number">0</span>;<br>&#125;<br><br>li &#123;<br>  display: inline-block;<br>  margin: <span class="hljs-number">0</span> 10px;<br>&#125;<br><br>a &#123;<br>  color: #42b983;<br>&#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><p>总结： 这个教程只是带着你大概浏览和重点讲解了 vue-cli 的知识，如果你想完全弄明白 vue-cli，我建议最好是有调理的阅读所有代码，这对你以后成为 vue 实际项目 的开发很有帮助。如果你是一个初学者，了解这些已经足够向下学习了。这篇教程结束后，我们会学习 vue-router 的知识，vue-router 是一个重点学习任务</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue-cli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决vue init webpack报错</title>
    <link href="/2021/06/27/%E8%A7%A3%E5%86%B3vue%20init%20webpack%E6%8A%A5%E9%94%99/"/>
    <url>/2021/06/27/%E8%A7%A3%E5%86%B3vue%20init%20webpack%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>解决 vue init webpack 报错，直接使用<code>vue init webpack test </code>会报错，错误信息如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vue-cli · Failed to download repo vuejs-templates/webpack: connect ETIMEDOUT xxx:<span class="hljs-number">443</span><br></code></pre></div></td></tr></table></figure><p>通过 vue-cli 工具命令 vue init webpack vuedemo 创建 vue 项目的时候报错，提示连接超时，应该是下载某个 package 的时候，需要翻墙，导致出现连接超时<br>[</p><p>](<a href="https://github.com/vuejs-templates/webpack">https://github.com/vuejs-templates/webpack</a>)<br>解决办法是改为离线创建，我们需要下载 github 仓库中的 vue-templates/webpack，然后解压到本地。下载地址为：<a href="https://github.com/vuejs-templates/webpack">https://github.com/vuejs-templates/webpack</a>，下载之后，解压到本地用户目录下创建.vue-templates 文件夹<br>​</p><p>下载之后的压缩包为 webpack-develop.zip，我们解压之后，需要更改目录名为 webpack。用户目录下的目录为.vue-templates，注意文件夹名称前面的点(.)。<br>以我的为例将 webpack 文件放到 C:\Users\jackhoo.vue-templates 下<br>​</p><p>这样，我们再进行 vue init webpack vuedemo 命令的时候，需要带上参数–offline 表示离线初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vue init webpack vuedemo --offline<br></code></pre></div></td></tr></table></figure><p>输入命令后，会询问我们几个简单的选项，我们根据自己的需要进行填写就可以了。</p><ul><li>Project name :项目名称 ，如果不需要更改直接回车就可以了。注意：这里不能使用大写，所以我把名称改成了 vuedemo</li><li>Project description:项目描述，默认为 A Vue.js project,直接回车，不用编写。</li><li>Author：作者，如果你有配置 git 的作者，他会读取。</li><li>Install vue-router? 是否安装 vue 的路由插件，我们这里需要安装，所以选择 Y</li><li>Use ESLint to lint your code? 是否用 ESLint 来限制你的代码错误和风格。我们这里不需要输入 n，如果你是大型团队开发，最好是进行配置。</li><li>setup unit tests with Karma + Mocha? 是否需要安装单元测试工具 Karma+Mocha，我们这里不需要，所以输入 n。</li><li>Setup e2e tests with Nightwatch?是否安装 e2e 来进行用户行为模拟测试，我们这里不需要，所以输入 n。</li><li>Should we run <code>npm install</code> for you after the project has been created? (recommended) npm</li></ul><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">   vue-cli · Generated <span class="hljs-string">&quot;vuedemo&quot;</span>.<br><br><br># Installing project dependencies ...<br># ========================<br></code></pre></div></td></tr></table></figure><p>命令行出现上面的文字，说明我们已经初始化好了第一步。</p><ol><li>cd vuedemo 进入我们的 vue 项目目录。</li><li>npm run dev 开发模式下运行我们的程序。给我们自动构建了开发用的服务器环境和在浏览器中打开，并实时监视我们的代码更改，即时呈现给我们。</li></ol><p>最后运行就成功了。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue中watch的详解</title>
    <link href="/2021/06/25/Vue%E4%B8%ADwatch%E7%9A%84%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/06/25/Vue%E4%B8%ADwatch%E7%9A%84%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Watch-概述"><a href="#Watch-概述" class="headerlink" title="Watch 概述"></a>Watch 概述</h1><p>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。</p><h2 id="简单的监听"><a href="#简单的监听" class="headerlink" title="简单的监听"></a>简单的监听</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;num&quot;</span>&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>            num: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;,<br>        watch: &#123;<br>            <span class="hljs-function"><span class="hljs-title">num</span>(<span class="hljs-params">newVal, oldVal</span>)</span> &#123;<br>            <span class="hljs-comment">// 监听 num 属性的数据变化</span><br>    <span class="hljs-comment">// 作用 : 只要 num 的值发生变化,这个方法就会被调用</span><br>    <span class="hljs-comment">// 第一个参数 : 新值</span><br>    <span class="hljs-comment">// 第二个参数 : 旧值,之前的值</span><br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;oldVal:&#x27;</span>,oldVal)<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;newVal:&#x27;</span>,newVal)<br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h2 id="immediate（立即处理-进入页面就触发）"><a href="#immediate（立即处理-进入页面就触发）" class="headerlink" title="immediate（立即处理 进入页面就触发）"></a>immediate（立即处理 进入页面就触发）</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;num&quot;</span>&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>            num: <span class="hljs-number">1</span><br>        &#125;,<br>        watch: &#123;<br>            num: &#123;<br>            <span class="hljs-comment">// 数据发生变化就会调用这个函数</span><br>                <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newVal, oldVal</span>)</span> &#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;oldVal:&#x27;</span>, oldVal)<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;newVal:&#x27;</span>, newVal)<br>                &#125;,<br>                <span class="hljs-comment">// 立即处理 进入页面就触发</span><br>                immediate: <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h2 id="deep（深度监听）"><a href="#deep（深度监听）" class="headerlink" title="deep（深度监听）"></a>deep（深度监听）</h2><p>对象和数组都是引用类型，引用类型变量存的是地址，地址没有变，所以不会触发 watch。这时我们需要进行深度监听，就需要加上一个属性 deep，值为 true</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;更改名字&quot;</span> @click=<span class="hljs-string">&quot;change&quot;</span>&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>            food: &#123;<br>                id: <span class="hljs-number">1</span>,<br>                name: <span class="hljs-string">&#x27;冰激凌&#x27;</span><br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>            <span class="hljs-function"><span class="hljs-title">change</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-built_in">this</span>.food.name = <span class="hljs-string">&#x27;棒棒糖&#x27;</span><br>            &#125;<br>        &#125;,<br>        watch: &#123;<br>        <span class="hljs-comment">// 第一种方式：监听整个对象，每个属性值的变化都会执行handler</span><br>        <span class="hljs-comment">// 注意：属性值发生变化后，handler执行后获取的 newVal 值和 oldVal 值是一样的</span><br>            food: &#123;<br>                <span class="hljs-comment">// 每个属性值发生变化就会调用这个函数</span><br>                <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newVal, oldVal</span>)</span> &#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;oldVal:&#x27;</span>, oldVal)<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;newVal:&#x27;</span>, newVal)<br>                &#125;,<br>                <span class="hljs-comment">// 立即处理 进入页面就触发</span><br>                immediate: <span class="hljs-literal">true</span>,<br>                <span class="hljs-comment">// 深度监听 属性的变化</span><br>                deep: <span class="hljs-literal">true</span><br>            &#125;,<br>            <span class="hljs-comment">// 第二种方式：监听对象的某个属性，被监听的属性值发生变化就会执行函数</span><br>            <span class="hljs-comment">// 函数执行后，获取的 newVal 值和 oldVal 值不一样</span><br>            <span class="hljs-string">&#x27;food.name&#x27;</span>(newVal, oldVal) &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;oldVal:&#x27;</span>, oldVal)   <span class="hljs-comment">// 冰激凌</span><br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;newVal:&#x27;</span>, newVal)   <span class="hljs-comment">// 棒棒糖</span><br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h1 id="Watch-和-computed-的区别"><a href="#Watch-和-computed-的区别" class="headerlink" title="Watch 和 computed 的区别"></a>Watch 和 computed 的区别</h1><h2 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h2><p>watch 用于观察和监听页面上的 vue 实例，当你需要在数据变化响应时，执行异步操作，或高性能消耗的操作，那么 watch 为最佳选择<br>​</p><p>1、watch 是监听器，可以监听某一个数据，然后执行相应的操作；<br>2、不支持缓存，数据变直接会触发相应的操作；<br>3、监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；<br>4、支持异步操作；</p><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>可以关联多个实时计算的对象，当这些对象中的其中一个改变时都会触发这个属性<br>     具有缓存能力，所以只有当数据再次改变时才会重新渲染，否则就会直接拿取缓存中的数据。<br>​</p><p>1、computed 是计算属性，也就是依赖某个值或者 props 通过计算得来得数据；<br>2、 computed 的值是在 getter 执行之后进行缓存的，只有在它依赖的数据发生变化，会重新调用 getter 来计算；<br>3、 不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化；<br>​</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>什么时候用 computed 什么时候用 watch 比较合适？<br>当多个属性影响一个属性的时候，建议用 computed，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">fullName</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-built_in">this</span>.secondName<br>&#125;<br></code></pre></div></td></tr></table></figure><p>fullName 是由 firstName 和 secondName 影响的，这种情况就适合 computed；<br>当一个值发生变化之后，会引起一系列的操作，这种情况就适合用 watch；</p><p>[</p><p>](<a href="https://blog.csdn.net/fu983531588/article/details/89454446">https://blog.csdn.net/fu983531588/article/details/89454446</a>)</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>watch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue2.0学习笔记</title>
    <link href="/2021/06/16/Vue2-0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/06/16/Vue2-0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="下载-Vue2-0-的两个版本："><a href="#下载-Vue2-0-的两个版本：" class="headerlink" title="下载 Vue2.0 的两个版本："></a>下载 Vue2.0 的两个版本：</h2><p><a href="https://cn.vuejs.org/v2/guide/installation.html">Vue</a>官方网站：<br>​</p><ul><li>开发版本：包含完整的警告和调试模式</li><li>生产版本：删除了警告，进行了压缩</li></ul><h2 id="项目结构搭建"><a href="#项目结构搭建" class="headerlink" title="项目结构搭建"></a>项目结构搭建</h2><p>1.在根目录创建文件夹 assets 文件夹，并将 css 和 js 文件夹放入其中，然后将下载的两个 vue..js 和 vue.min.js 放到下 js 文件夹下 2.在根目录下创建实例文件夹 example，其中放入第一个实例文件 helloworld.html 3.根目录下创建入口文件 index.html<br><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue.js实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Vue2.0实例<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./example/helloworld.html&quot;</span>&gt;</span>Hello World 实例<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>4.生成 package.json 配置文件<br>用 npm 进行初始化<br><code>npm init</code><br>根据提示写入 package name:项目名，version 版本号 ，description 描述，entry point 入口文件，author 作者等等</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">This utility will walk you through creating a package.json file.<br>It only covers the most common items, and tries to guess sensible defaults.<br><br>See <span class="hljs-string">`npm help init`</span> <span class="hljs-keyword">for</span> definitive documentation on these fields<br>and exactly what they <span class="hljs-keyword">do</span>.<br><br>Use <span class="hljs-string">`npm install &lt;pkg&gt;`</span> afterwards to install a package and<br>save it <span class="hljs-keyword">as</span> a dependency <span class="hljs-keyword">in</span> the package.json file.<br><br>Press ^C at any time to quit.<br>package name: (vue2<span class="hljs-number">.0</span>) vue2<span class="hljs-number">.0</span><br>version: (<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>)<br>description: Vue demo<br>entry point: (index.js)<br>test command:<br>git repository:<br>keywords:<br>author: jackhoo<br>license: (ISC)<br>About to write to E:\web\vue\VUE2<span class="hljs-number">.0</span>\package.json:<br><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;vue2.0&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;Vue demo&quot;</span>,<br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-string">&quot;directories&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;example&quot;</span>: <span class="hljs-string">&quot;example&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;jackhoo&quot;</span>,<br>  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span><br><br><br>Is <span class="hljs-built_in">this</span> OK? (yes)<br></code></pre></div></td></tr></table></figure><p>5.live-server 使用<br>用 npm 进行全局安装<br><code>npm install live-server -g</code><br>在项目目录中打开<br><code>live-server</code><br>在 example\helloworld.html 编写第一个 HelloWorld 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;HelloWord&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;HelloWorld&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          message: <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="v-if-amp-v-else-amp-v-show"><a href="#v-if-amp-v-else-amp-v-show" class="headerlink" title="v-if &amp; v-else &amp; v-show"></a>v-if &amp; v-else &amp; v-show</h2><h3 id="1-v-if-的使用："><a href="#1-v-if-的使用：" class="headerlink" title="1.v-if 的使用："></a>1.v-if 的使用：</h3><p>v-if:是 vue 的一个内部指令，指令用在我们的 html 中。<br>v-if 用来判断是否加载 html 的 DOM，比如我们模拟一个用户登录状态，在用户登录后现实用户名称。</p><p>在 index.html 文件中新增一行代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/v-if.html&quot;</span>&gt;v-<span class="hljs-keyword">if</span>&amp;v-<span class="hljs-keyword">else</span>&amp;v-show&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>新建文件 example\v-if.html 关键代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;isLogin&quot;</span>&gt;你好&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p><code>v-if.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;v-<span class="hljs-keyword">if</span> &amp; v-show &amp; v-<span class="hljs-keyword">else</span>&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;v-<span class="hljs-keyword">if</span> 判断是否加载&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;div v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;isLogin&quot;</span>&gt;你好：JSPang&lt;/div&gt;<br>        &lt;div v-<span class="hljs-keyword">else</span>&gt;请登录后操作&lt;/div&gt;<br><br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>               isLogin:<span class="hljs-literal">false</span><br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>这里我们在 vue 的 data 里定义了 isLogin 的值，当它为 true 时，网页就会显示：你好，如果为 false 时，就显示请登录后操作。</p><h3 id="2-v-show-的使用："><a href="#2-v-show-的使用：" class="headerlink" title="2.v-show 的使用："></a>2.v-show 的使用：</h3><p>调整 css 中 display 属性，DOM 已经加载，只是 CSS 控制没有显示出来。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div v-show=<span class="hljs-string">&quot;isLogin&quot;</span>&gt;你好&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><h4 id="v-if-和-v-show-的区别："><a href="#v-if-和-v-show-的区别：" class="headerlink" title="v-if 和 v-show 的区别："></a>v-if 和 v-show 的区别：</h4><p>v-if： 判断是否加载，可以减轻服务器的压力，在需要时加载。<br>v-show：调整 css dispaly 属性，可以使客户端操作更加流畅。<br>​</p><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><h3 id="v-for-指令-：解决模板循环问题"><a href="#v-for-指令-：解决模板循环问题" class="headerlink" title="v-for 指令 ：解决模板循环问题"></a>v-for 指令 ：解决模板循环问题</h3><p>v-for 指令是循环渲染一组 data 中的数组，v-for 指令需要以 item in items 形式的特殊语法，items 是源数据数组并且 item 是数组元素迭代的别名。</p><h3 id="一、基本用法：模板写法"><a href="#一、基本用法：模板写法" class="headerlink" title="一、基本用法：模板写法"></a>一、基本用法：模板写法</h3><p>在<code>index.html</code>中添加</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/v-for.html&quot;</span>&gt;v-<span class="hljs-keyword">for</span> 实例&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中新建<code>v-for.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in items&quot;</span>&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>js 写法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    items: [<span class="hljs-number">20</span>, <span class="hljs-number">23</span>, <span class="hljs-number">18</span>, <span class="hljs-number">65</span>, <span class="hljs-number">32</span>, <span class="hljs-number">19</span>, <span class="hljs-number">54</span>, <span class="hljs-number">56</span>, <span class="hljs-number">41</span>],<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;V-<span class="hljs-keyword">for</span> 案例&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;v-<span class="hljs-keyword">for</span>指令用法&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>       &lt;ul&gt;<br>           &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in items&quot;</span>&gt;<br>                &#123;&#123;item&#125;&#125;<br>           &lt;/li&gt;<br>       &lt;/ul&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                items:[<span class="hljs-number">20</span>,<span class="hljs-number">23</span>,<span class="hljs-number">18</span>,<span class="hljs-number">65</span>,<span class="hljs-number">32</span>,<span class="hljs-number">19</span>,<span class="hljs-number">54</span>,<span class="hljs-number">56</span>,<span class="hljs-number">41</span>]<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>这是一个最基础的循环，先在 js 里定义了 items 数组，然后在模板中用 v-for 循环出来，需要注意的是，你需要那个 html 标签循环，v-for 就写在那个上边。</p><h3 id="二、排序"><a href="#二、排序" class="headerlink" title="二、排序"></a>二、排序</h3><p>我们已经顺利的输出了我们定义的数组，但是我需要在输出之前给数组排个序，那我们就用到了 Vue 的 computed:属性。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    sortItems:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.sort();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们在 computed 里新声明了一个对象 sortItems，如果不重新声明会污染原来的数据源，这是 Vue 不允许的，所以你要重新声明一个对象。</p><p>如果一切顺利的话，你已经看到了结果，但是这个小程序还是有个小 Bug 的，现在我把数组修改成这样。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">items: [<span class="hljs-number">20</span>, <span class="hljs-number">23</span>, <span class="hljs-number">18</span>, <span class="hljs-number">65</span>, <span class="hljs-number">32</span>, <span class="hljs-number">19</span>, <span class="hljs-number">5</span>, <span class="hljs-number">56</span>, <span class="hljs-number">41</span>];<br></code></pre></div></td></tr></table></figure><p>我们把其中的 54 修改成了 5，我们再看一下结果，发现排序结果并不是我们想要的。</p><p>我们可以自己编写一个方法 sortNumber，然后传给我们的 sort 函数解决这个 Bug。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortNumber</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a - b;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>用法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    sortItems:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.sort(sortNumber);<br>    &#125;<br> &#125;<br></code></pre></div></td></tr></table></figure><p>经过一番折腾，我们终于实现了真正的数字排序，这是在工作中非常常用的，一定要学好，记住。</p><h3 id="三、对象循环输出"><a href="#三、对象循环输出" class="headerlink" title="三、对象循环输出"></a>三、对象循环输出</h3><p>我们上边循环的都是数组，那我们来看一个对象类型的循环是如何输出的。</p><p>我们先定义个数组，数组里边是对象数据</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">students: [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jspang&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">32</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Panda&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;PanPaN&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;King&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">45</span> &#125;,<br>];<br></code></pre></div></td></tr></table></figure><p>在模板中输出</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ul&gt;<br>   &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;student in students&quot;</span>&gt;<br>       &#123;&#123;student.name&#125;&#125; - &#123;&#123;student.age&#125;&#125;<br>   &lt;/li&gt;<br>&lt;/ul&gt;<br></code></pre></div></td></tr></table></figure><p>加入索引序号：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//数组对象方法排序:</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortByKey</span>(<span class="hljs-params">array, key</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> array.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> x = a[key];<br>    <span class="hljs-keyword">var</span> y = b[key];<br>    <span class="hljs-keyword">return</span> x &lt; y ? -<span class="hljs-number">1</span> : x &gt; y ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>  &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>有了数组的排序方法，在 computed 中进行调用排序</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">sortStudent:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-keyword">return</span> sortByKey(<span class="hljs-built_in">this</span>.students,<span class="hljs-string">&#x27;age&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意：vue 低版本中 data 里面的 items 和 computed 里面可以一样，但是高版本，是不允许相同名称。有很多小伙伴踩到了这个坑，这里提醒学习的小伙伴，根据自己版本的不同，请修改代码。<br><code>v-for.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;v-<span class="hljs-keyword">for</span>&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;v-<span class="hljs-keyword">for</span>&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;ul&gt;<br>        &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in sortItems&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;<br>      &lt;/ul&gt;<br>      &lt;ul&gt;<br>        &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(student,index) in students&quot;</span>&gt;<br>          &#123;&#123;index+<span class="hljs-number">1</span>&#125;&#125;: &#123;&#123;student.name&#125;&#125; -- &#123;&#123;student.age&#125;&#125;<br>        &lt;/li&gt;<br>      &lt;/ul&gt;<br>    &lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          items: [<span class="hljs-number">20</span>, <span class="hljs-number">23</span>, <span class="hljs-number">7</span>, <span class="hljs-number">18</span>, <span class="hljs-number">65</span>, <span class="hljs-number">32</span>, <span class="hljs-number">19</span>, <span class="hljs-number">54</span>, <span class="hljs-number">56</span>, <span class="hljs-number">41</span>],<br>          students: [<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jspang&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">32</span> &#125;,<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Panda&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span> &#125;,<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;PanPaN&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;,<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;King&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">45</span> &#125;,<br>          ],<br>        &#125;,<br>        computed: &#123;<br>          sortItems: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.sort(sortNumber);<br>          &#125;,<br><br>          sortStudent: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> sortByKey(<span class="hljs-built_in">this</span>.students, <span class="hljs-string">&#x27;age&#x27;</span>);<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortNumber</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> a - b;<br>      &#125;<br>      <span class="hljs-comment">//数组对象方法排序:</span><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortByKey</span>(<span class="hljs-params">array, key</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> array.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>          <span class="hljs-keyword">var</span> x = a[key];<br>          <span class="hljs-keyword">var</span> y = b[key];<br>          <span class="hljs-keyword">return</span> x &lt; y ? -<span class="hljs-number">1</span> : x &gt; y ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        &#125;);<br>      &#125;<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="v-text-amp-v-html"><a href="#v-text-amp-v-html" class="headerlink" title="v-text &amp; v-html"></a>v-text &amp; v-html</h2><p>我们已经会在 html 中输出 data 中的值了，我们已经用的是,这种情况是有弊端的，就是当我们网速很慢或者 javascript 出错时，会暴露我们的。Vue 给我们提供的 v-text,就是解决这个问题的。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/v-text.html&quot;</span>&gt;v-text &amp; v-html 实例&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中新建 v-text.html<br>关键代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;<span class="hljs-regexp">/span&gt;=&lt;span v-text=&quot;message&quot;&gt;&lt;/</span>span&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>如果在 javascript 中写有 html 标签，用 v-text 是输出不出来的，这时候我们就需要用 v-html 标签了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;span v-html=<span class="hljs-string">&quot;msgHtml&quot;</span>&gt;&lt;/span&gt;<br></code></pre></div></td></tr></table></figure><p>双大括号会将数据解释为纯文本，而非 HTML。为了输出真正的 HTML，你就需要使用 v-html 指令。 需要注意的是：在生产环境中动态渲染 HTML 是非常危险的，因为容易导致 XSS 攻击。所以只能在可信的内容上使用 v-html，永远不要在用户提交和可操作的网页上使用。 完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;v-text &amp; v-html 案例&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;v-text &amp; v-html 案例&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;span&gt;&#123;&#123; message &#125;&#125;&lt;<span class="hljs-regexp">/span&gt;=&lt;span v-text=&quot;message&quot;&gt;&lt;/</span>span&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>        &lt;span v-html=<span class="hljs-string">&quot;msgHtml&quot;</span>&gt;&lt;/span&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&#x27;hello Vue!&#x27;</span>,<br>                msgHtml:<span class="hljs-string">&#x27;&lt;h2&gt;hello Vue!&lt;/h2&gt;&#x27;</span><br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h2 id="v-on：绑定事件监听器"><a href="#v-on：绑定事件监听器" class="headerlink" title="v-on：绑定事件监听器"></a>v-on：绑定事件监听器</h2><p>v-on 就是监听事件，可以用 v-on 指令监听 DOM 事件来触发一些 javascript 代码。</p><h4 id="一、使用绑定事件监听器，编写一个加分减分的程序。"><a href="#一、使用绑定事件监听器，编写一个加分减分的程序。" class="headerlink" title="一、使用绑定事件监听器，编写一个加分减分的程序。"></a>一、使用绑定事件监听器，编写一个加分减分的程序。</h4><p>在 index.html 中添加</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/v-on.html&quot;</span>&gt;v-on 实例&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中新建 v-on.html<br>我们的 v-on 还有一种简单的写法，就是用@代替。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;jianfen&quot;</span>&gt;减分&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p>我们除了绑定 click 之外，我们还可以绑定其它事件，比如键盘回车事件 v-on:keyup.enter,现在我们增加一个输入框，然后绑定回车事件，回车后把文本框里的值加到我们的 count 上。 绑定事件写法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model=<span class="hljs-string">&quot;secondCount&quot;</span>&gt;<br></code></pre></div></td></tr></table></figure><p>javascript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">onEnter:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-built_in">this</span>.count=<span class="hljs-built_in">this</span>.count+<span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">this</span>.secondCount);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>因为文本框的数字会默认转变成字符串，所以我们需要用 parseInt()函数进行整数转换。</p><p>你也可以根据键值表来定义键盘事件：<br><code>v-on.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;v-on事件监听器&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;v-on 事件监听器&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      本场比赛得分： &#123;&#123;count&#125;&#125;<br><br><br>      &lt;button v-on:click=<span class="hljs-string">&quot;jiafen&quot;</span>&gt;加分&lt;/button&gt;<br>      &lt;button @click=<span class="hljs-string">&quot;jianfen&quot;</span>&gt;减分&lt;/button&gt;<br>      &lt;hr /&gt;<br>      &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model=<span class="hljs-string">&quot;secondCount&quot;</span> /&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          count: <span class="hljs-number">1</span>,<br>          secondCount: <span class="hljs-number">1</span>,<br>        &#125;,<br>        methods: &#123;<br>          jiafen: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.count++;<br>          &#125;,<br>          jianfen: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.count--;<br>          &#125;,<br>          onEnter: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.count = <span class="hljs-built_in">this</span>.count + <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">this</span>.secondCount);<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="v-model-指令"><a href="#v-model-指令" class="headerlink" title="v-model 指令"></a>v-model 指令</h2><p>v-model 指令，我理解为绑定数据源。就是把数据绑定在特定的表单元素上，可以很容易的实现双向数据绑定。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/v-model.html&quot;</span>&gt;v-model 实例&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中新建 v-model.html</p><h3 id="一、我们来看一个最简单的双向数据绑定代码："><a href="#一、我们来看一个最简单的双向数据绑定代码：" class="headerlink" title="一、我们来看一个最简单的双向数据绑定代码："></a>一、我们来看一个最简单的双向数据绑定代码：</h3><p>html 文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;p&gt;原始文本信息：&#123;&#123;message&#125;&#125;&lt;/p&gt;<br>    &lt;h3&gt;文本框&lt;/h3&gt;<br>    &lt;p&gt;v-model:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p>javascript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    message: <span class="hljs-string">&#x27;hello Vue!&#x27;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="二、修饰符"><a href="#二、修饰符" class="headerlink" title="二、修饰符"></a>二、修饰符</h3><ul><li>.lazy：取代 imput 监听 change 事件。</li><li>.number：输入字符串转为数字。</li><li>.trim：输入去掉首尾空格。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h3&gt;文本框&lt;/h3&gt;<br>&lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">&quot;onEnter&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> /&gt;</span></span>&lt;/p&gt;<br><br>&lt;p&gt;<br>  v-model：<br>  &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>&lt;/p&gt;<br>&lt;p&gt;<br>  v-model.lazy：<br>  &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model.lazy=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>&lt;/p&gt;<br>&lt;p&gt;<br>  v-model.number：<br>  &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model.number=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>&lt;/p&gt;<br>&lt;p&gt;<br>  v-model.trim：<br>  &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model.trim=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h3 id="三、文本区域加入数据绑定"><a href="#三、文本区域加入数据绑定" class="headerlink" title="三、文本区域加入数据绑定"></a>三、文本区域加入数据绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;textarea  &lt; cols=<span class="hljs-string">&quot;30&quot;</span> rows=<span class="hljs-string">&quot;10&quot;</span> v-model=<span class="hljs-string">&quot;message&quot;</span>&gt;&lt;/textarea&gt;<br></code></pre></div></td></tr></table></figure><h3 id="四、多选按钮绑定一个值"><a href="#四、多选按钮绑定一个值" class="headerlink" title="四、多选按钮绑定一个值"></a>四、多选按钮绑定一个值</h3><p><strong>注意</strong><code>**v-model**</code><strong>绑定的值要在</strong><code>**data：&#123;&#125;**</code><strong>中声明</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h3&gt;多选按钮绑定一个值&lt;/h3&gt;<br>&lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;isTrue&quot;</span> v-model=<span class="hljs-string">&quot;isTrue&quot;</span>&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&#x27;isTrue&#x27;</span>&gt;&#123;&#123;isTrue&#125;&#125;&lt;/label&gt;<br></code></pre></div></td></tr></table></figure><h3 id="五、多选绑定一个数组"><a href="#五、多选绑定一个数组" class="headerlink" title="五、多选绑定一个数组"></a>五、多选绑定一个数组</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h3&gt;多选绑定一个数组&lt;/h3&gt;<br>       &lt;p&gt;<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;JSPang&quot;</span> value=<span class="hljs-string">&quot;JSPang&quot;</span> v-model=<span class="hljs-string">&quot;web_Names&quot;</span>&gt;<br>            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;JSPang&quot;</span>&gt;JSPang&lt;<span class="hljs-regexp">/label&gt;&lt;br/</span>&gt;<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;Panda&quot;</span> value=<span class="hljs-string">&quot;Panda&quot;</span> v-model=<span class="hljs-string">&quot;web_Names&quot;</span>&gt;<br>            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;JSPang&quot;</span>&gt;Panda&lt;<span class="hljs-regexp">/label&gt;&lt;br/</span>&gt;<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;PanPan&quot;</span> value=<span class="hljs-string">&quot;PanPan&quot;</span> v-model=<span class="hljs-string">&quot;web_Names&quot;</span>&gt;<br>            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;JSPang&quot;</span>&gt;PanPan&lt;/label&gt;<br>            &lt;p&gt;&#123;&#123;web_Names&#125;&#125;&lt;/p&gt;<br>       &lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h3 id="六、单选按钮绑定数据"><a href="#六、单选按钮绑定数据" class="headerlink" title="六、单选按钮绑定数据"></a>六、单选按钮绑定数据</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h3&gt;单选按钮绑定&lt;/h3&gt;<br>&lt;input type=<span class="hljs-string">&quot;radio&quot;</span> id=<span class="hljs-string">&quot;one&quot;</span> value=<span class="hljs-string">&quot;男&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span>&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;男&lt;/label&gt;<br>&lt;input type=<span class="hljs-string">&quot;radio&quot;</span> id=<span class="hljs-string">&quot;two&quot;</span> value=<span class="hljs-string">&quot;女&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span>&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;女&lt;/label&gt;<br>&lt;p&gt;&#123;&#123;sex&#125;&#125;&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p><code>v-model.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;v-model 数据源绑定&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;v-model 数据原绑定&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;p&gt;原始文本数据：&#123;&#123;message&#125;&#125;&lt;/p&gt;<br>      &lt;hr /&gt;<br>      &lt;h3&gt;文本框&lt;/h3&gt;<br>      &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">&quot;onEnter&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> /&gt;</span></span>&lt;/p&gt;<br><br>      &lt;p&gt;<br>        v-model：<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>      &lt;/p&gt;<br>      &lt;p&gt;<br>        v-model.lazy：<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model.lazy=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>      &lt;/p&gt;<br>      &lt;p&gt;<br>        v-model.number：<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model.number=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>      &lt;/p&gt;<br>      &lt;p&gt;<br>        v-model.trim：<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model.trim=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>      &lt;/p&gt;<br>      &lt;hr /&gt;<br>      &lt;h3&gt;文本域&lt;/h3&gt;<br>      &lt;textarea cols=<span class="hljs-string">&quot;30&quot;</span> rows=<span class="hljs-string">&quot;10&quot;</span>&gt;&lt;/textarea&gt;<br>      &lt;hr /&gt;<br>      &lt;h3&gt;多选框绑定一个值&lt;/h3&gt;<br>      &lt;p&gt;<br>        &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;isTrue&quot;</span> v-model=<span class="hljs-string">&quot;isTrue&quot;</span> /&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;isTrue&quot;</span>&gt;&#123;&#123;isTrue&#125;&#125;&lt;/label&gt;<br>      &lt;/p&gt;<br>      &lt;h3&gt;多选框绑定数组&lt;/h3&gt;<br>      &lt;p&gt;<br>        &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;jack1&quot;</span> value=<span class="hljs-string">&quot;jack1&quot;</span> v-model=<span class="hljs-string">&quot;web_names&quot;</span> /&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;isTrue&quot;</span>&gt;jack1&lt;/label&gt;<br>        &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;jack2&quot;</span> value=<span class="hljs-string">&quot;jack2&quot;</span> v-model=<span class="hljs-string">&quot;web_names&quot;</span> /&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;isTrue&quot;</span>&gt;jack2&lt;/label&gt;<br>        &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;jack3&quot;</span> value=<span class="hljs-string">&quot;jack3&quot;</span> v-model=<span class="hljs-string">&quot;web_names&quot;</span> /&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;isTrue&quot;</span>&gt;jack3&lt;/label&gt;<br>      &lt;/p&gt;<br>      &lt;p&gt;&#123;&#123;web_names&#125;&#125;&lt;/p&gt;<br>      &lt;hr /&gt;<br>      &lt;h3&gt;单选框绑定数组&lt;/h3&gt;<br>      &lt;p&gt;<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> id=<span class="hljs-string">&quot;one&quot;</span> value=<span class="hljs-string">&quot;男&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span> /&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;&lt;/label&gt;<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> id=<span class="hljs-string">&quot;two&quot;</span> value=<span class="hljs-string">&quot;女&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span> /&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;&lt;/label&gt;<br>        &lt;p&gt;你选择的性别是：&#123;&#123;sex&#125;&#125;&lt;/p&gt;<br>      &lt;/p&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          message: <span class="hljs-string">&#x27;hello world&#x27;</span>,<br>          isTrue: <span class="hljs-literal">true</span>,<br>          web_names: [],<br>          sex: <span class="hljs-string">&#x27;男&#x27;</span>,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="v-bind：指令"><a href="#v-bind：指令" class="headerlink" title="v-bind：指令"></a>v-bind：指令</h2><p>v-bind 是处理 HTML 中的标签属性的，就是一个标签，我们绑定上的 src 进行动态赋值。<br>在 index.html 中添加</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/v-bind.html&quot;</span>&gt;v-bind 案例&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中新建 v-bind.html<br>html 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;img v-bind:src=<span class="hljs-string">&quot;imgSrc&quot;</span> width=<span class="hljs-string">&quot;200px&quot;</span> /&gt;<br></code></pre></div></td></tr></table></figure><p>在 html 中我们用 v-bind:src=”imgSrc”的动态绑定了 src 的值，这个值是在 vue 构造器里的 data 属性中找到的。<br>js 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    imgSrc: <span class="hljs-string">&#x27;./1.jpeg&#x27;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>我们在 data 对象在中增加了 imgSrc 属性来供 html 调用。</p><h3 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind 缩写"></a>v-bind 缩写</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!-- 完整语法 --&gt;<br>&lt;a v-bind:href=<span class="hljs-string">&quot;url&quot;</span>&gt;&lt;/a&gt;<br>&lt;!-- 缩写 --&gt;<br>&lt;a :href=<span class="hljs-string">&quot;url&quot;</span>&gt;&lt;/a&gt;<br></code></pre></div></td></tr></table></figure><h3 id="绑定-CSS-样式"><a href="#绑定-CSS-样式" class="headerlink" title="绑定 CSS 样式"></a>绑定 CSS 样式</h3><p>在工作中我们经常使用 v-bind 来绑定 css 样式：<br>在绑定 CSS 样式是，绑定的值必须在 vue 中的 data 属性中进行声明。</p><h4 id="1、直接绑定-class-样式"><a href="#1、直接绑定-class-样式" class="headerlink" title="1、直接绑定 class 样式"></a>1、直接绑定 class 样式</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;className&quot;</span>&gt;<span class="hljs-number">1</span>、绑定classA&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><h4 id="2、绑定-classA-并进行判断，在-isOK-为-true-时显示样式，在-isOk-为-false-时不显示样式。"><a href="#2、绑定-classA-并进行判断，在-isOK-为-true-时显示样式，在-isOk-为-false-时不显示样式。" class="headerlink" title="2、绑定 classA 并进行判断，在 isOK 为 true 时显示样式，在 isOk 为 false 时不显示样式。"></a>2、绑定 classA 并进行判断，在 isOK 为 true 时显示样式，在 isOk 为 false 时不显示样式。</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;&#123;classA:isOk&#125;&quot;</span>&gt;<span class="hljs-number">2</span>、绑定<span class="hljs-class"><span class="hljs-keyword">class</span>中的判断&lt;/<span class="hljs-title">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="3、绑定-class-中的数组"><a href="#3、绑定-class-中的数组" class="headerlink" title="3、绑定 class 中的数组"></a>3、绑定 class 中的数组</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;[classA,classB]&quot;</span>&gt;<span class="hljs-number">3</span>、绑定<span class="hljs-class"><span class="hljs-keyword">class</span>中的数组&lt;/<span class="hljs-title">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="4、绑定-class-中使用三元表达式判断"><a href="#4、绑定-class-中使用三元表达式判断" class="headerlink" title="4、绑定 class 中使用三元表达式判断"></a>4、绑定 class 中使用三元表达式判断</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;isOk?classA:classB&quot;</span>&gt;<span class="hljs-number">4</span>、绑定<span class="hljs-class"><span class="hljs-keyword">class</span>中的三元表达式判断&lt;/<span class="hljs-title">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="5、绑定-style"><a href="#5、绑定-style" class="headerlink" title="5、绑定 style"></a>5、绑定 style</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div :style=<span class="hljs-string">&quot;&#123;color:red,fontSize:font&#125;&quot;</span>&gt;<span class="hljs-number">5</span>、绑定style&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><h4 id="6、用对象绑定-style-样式"><a href="#6、用对象绑定-style-样式" class="headerlink" title="6、用对象绑定 style 样式"></a>6、用对象绑定 style 样式</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div :style=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;<span class="hljs-number">6</span>、用对象绑定style样式&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p><code>v-bind.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;v-bind案例&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;v-bind案例&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;img v-bind:src=<span class="hljs-string">&quot;imgSrc&quot;</span> width=<span class="hljs-string">&quot;200px&quot;</span> /&gt;<br><br><br>      &lt;a :href=<span class="hljs-string">&quot;jspang&quot;</span> target=<span class="hljs-string">&quot;_blank&quot;</span>&gt;技术胖&lt;/a&gt;<br>      &lt;hr /&gt;<br>      &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;className&quot;</span>&gt;<span class="hljs-number">1</span>、绑定classA&lt;/div&gt;<br>      &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;&#123;classA:isOk&#125;&quot;</span>&gt;<span class="hljs-number">2</span>、绑定<span class="hljs-class"><span class="hljs-keyword">class</span>中的判断&lt;/<span class="hljs-title">div</span>&gt;</span><br>      &lt;div :class=&quot;[classA,classB]&quot;&gt;3、绑定class中的数组&lt;/div&gt;<br>      &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;isOk?classA:classB&quot;</span>&gt;<span class="hljs-number">4</span>、绑定<span class="hljs-class"><span class="hljs-keyword">class</span>中的三元表达式判断&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">      &lt;<span class="hljs-title">hr</span> /&gt;</span><br><span class="hljs-class">      &lt;<span class="hljs-title">input</span> <span class="hljs-title">type</span></span>=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;isTrue&quot;</span> v-model=<span class="hljs-string">&quot;isOk&quot;</span> /&gt;<br>      &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;isTrue&quot;</span>&gt;isOk=&#123;&#123;isOk&#125;&#125;&lt;/label&gt;<br>      &lt;hr /&gt;<br>      &lt;div :style=<span class="hljs-string">&quot;&#123;color:red,fontSize:font&#125;&quot;</span>&gt;<span class="hljs-number">5</span>、绑定style&lt;/div&gt;<br>      &lt;div :style=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;<span class="hljs-number">6</span>、用对象绑定style样式&lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;style&gt;<br>      .classA &#123;<br>        color: red;<br>      &#125;<br>      .classB &#123;<br>        font-size: <span class="hljs-number">150</span>%;<br>      &#125;<br>    &lt;/style&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          imgSrc: <span class="hljs-string">&#x27;./1.jpeg&#x27;</span>,<br>          jspang: <span class="hljs-string">&#x27;http://jspang.com&#x27;</span>,<br>          className: <span class="hljs-string">&#x27;classA&#x27;</span>,<br>          isOk: <span class="hljs-literal">false</span>,<br>          classA: <span class="hljs-string">&#x27;classA&#x27;</span>,<br>          classB: <span class="hljs-string">&#x27;classB&#x27;</span>,<br>          red: <span class="hljs-string">&#x27;red&#x27;</span>,<br>          font: <span class="hljs-string">&#x27;30px&#x27;</span>,<br>          styleObject: &#123;<br>            fontSize: <span class="hljs-string">&#x27;24px&#x27;</span>,<br>            color: <span class="hljs-string">&#x27;green&#x27;</span>,<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="其他内部指令-v-pre-amp-v-cloak-amp-v-once"><a href="#其他内部指令-v-pre-amp-v-cloak-amp-v-once" class="headerlink" title="其他内部指令(v-pre &amp; v-cloak &amp; v-once)"></a>其他内部指令(v-pre &amp; v-cloak &amp; v-once)</h2><p>在 index.html 中添加</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/other.html&quot;</span>&gt;v-bind 案例&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中新建 other.html</p><h3 id="v-pre-指令"><a href="#v-pre-指令" class="headerlink" title="v-pre 指令"></a>v-pre 指令</h3><p>在模板中跳过 vue 的编译，直接输出原始值。就是在标签中加入 v-pre 就不会输出 vue 中的 data 值了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div v-pre&gt;&#123;&#123; message &#125;&#125;--原样输出不渲染&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p>这时并不会输出我们的 message 值，而是直接在网页中显示</p><h3 id="v-cloak-指令"><a href="#v-cloak-指令" class="headerlink" title="v-cloak 指令"></a>v-cloak 指令</h3><p>在 vue 渲染完指定的整个 DOM 后才进行显示。它必须和 CSS 样式一起使用，</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">[v-cloak] &#123;   <span class="hljs-attr">display</span>: none; &#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">div v-cloak&gt;   &#123;&#123; message &#125;&#125; &lt;/div&gt;<br></code></pre></div></td></tr></table></figure><h2 id="v-once-指令"><a href="#v-once-指令" class="headerlink" title="v-once 指令"></a>v-once 指令</h2><p>在第一次 DOM 时进行渲染，渲染完成后视为静态内容，跳出以后的渲染过程。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div v-once&gt;第一次绑定的值：&#123;&#123;message&#125;&#125;&lt;/div&gt;<br>&lt;div&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p><code>other.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;v-pre &amp; v-cloak &amp;v-once 案例&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;v-pre &amp; v-cloak &amp;v-once 案例&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;div v-pre&gt;&#123;&#123;message&#125;&#125;--原样输出不渲染&lt;/div&gt;<br>      &lt;div v-cloak&gt;渲染完成才显示&lt;/div&gt;<br>      &lt;div v-once&gt;&#123;&#123;message&#125;&#125;--只渲染一次&lt;/div&gt;<br>      &lt;div&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> /&gt;</span></span>&lt;/div&gt;<br>      &lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;style&gt;<br>      [v-cloak] &#123;<br>        display: none;<br>      &#125;<br>    &lt;/style&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          message: <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h1 id="全局-API"><a href="#全局-API" class="headerlink" title="全局 API"></a>全局 API</h1><h2 id="Vue-directive-自定义指令"><a href="#Vue-directive-自定义指令" class="headerlink" title="Vue.directive 自定义指令"></a>Vue.directive 自定义指令</h2><h3 id="一、什么是全局-API？"><a href="#一、什么是全局-API？" class="headerlink" title="一、什么是全局 API？"></a>一、什么是全局 API？</h3><p>全局 API 并不在构造器里，而是先声明全局变量或者直接在 Vue 上定义一些新功能，Vue 内置了一些全局 API，比如我们今天要学习的指令 Vue.directive。说的简单些就是，在构造器外部用 Vue 提供给我们的 API 函数来定义新的功能。</p><h3 id="二、Vue-directive-自定义指令"><a href="#二、Vue-directive-自定义指令" class="headerlink" title="二、Vue.directive 自定义指令"></a>二、Vue.directive 自定义指令</h3><p>我们也可以定义一些属于自己的指令，比如我们要定义一个 v-jspang 的指令，作用就是让文字变成绿色。在自定义指令前我们写一个小功能，在页面上有一个数字为 10，数字的下面有一个按钮，我们每点击一次按钮后，数字加 1.<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/vue.directive.html&quot;</span>&gt;directive 自定义指令&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 vue.directive.html 文件<br>我们这里使用 Vue.directive( );</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Vue.directive(<span class="hljs-string">&#x27;jspang&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding, vnode</span>) </span>&#123;<br>  el.style = <span class="hljs-string">&#x27;color:&#x27;</span> + binding.value;<br>&#125;);<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    num: <span class="hljs-number">10</span>,<br>    color: <span class="hljs-string">&#x27;red&#x27;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>可以看到数字已经变成了红色，说明自定义指令起到了作用。可能您看这个代码还是有些不明白的，比如传入的三个参数到底是什么。</p><h3 id="三、自定义指令中传递的三个参数"><a href="#三、自定义指令中传递的三个参数" class="headerlink" title="三、自定义指令中传递的三个参数"></a>三、自定义指令中传递的三个参数</h3><ul><li>el: 指令所绑定的元素，可以用来直接操作 DOM。</li><li>binding: 一个对象，包含指令的很多信息。</li><li>vnode: Vue 编译生成的虚拟节点。</li></ul><h3 id="四、自定义指令的生命周期"><a href="#四、自定义指令的生命周期" class="headerlink" title="四、自定义指令的生命周期"></a>四、自定义指令的生命周期</h3><p>自定义指令有五个生命周期（也叫钩子函数），分别是 <code>bind</code>,<code>inserted</code>,<code>update</code>,<code>componentUpdated</code>,<code>unbind</code></p><ol><li>bind:只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个绑定时执行一次的初始化动作。</li><li>inserted:被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li>update:被绑定于元素所在的模板更新时调用，而无论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新。</li><li>componentUpdated:被绑定元素所在模板完成一次更新周期时调用。</li><li>unbind:只调用一次，指令与元素解绑时调用。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">bind:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//被绑定</span><br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1 - bind&#x27;</span>);<br>&#125;,<br>inserted:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//绑定到节点</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2 - inserted&#x27;</span>);<br>&#125;,<br>update:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//组件更新</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3 - update&#x27;</span>);<br>&#125;,<br>componentUpdated:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//组件更新完成</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;4 - componentUpdated&#x27;</span>);<br>&#125;,<br>unbind:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//解绑</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;5- unbind&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>vue.directive.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;vue.directive 自定义指令&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;vue.directive 自定义指令&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;div v-jspang=<span class="hljs-string">&quot;color&quot;</span>&gt;&#123;&#123;num&#125;&#125;&lt;/div&gt;<br>      &lt;p&gt;<br>        &lt;button @click=<span class="hljs-string">&quot;add&quot;</span>&gt;ADD&lt;/button&gt;<br>      &lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;p&gt;<br>      &lt;button onclick=<span class="hljs-string">&quot;unbind()&quot;</span>&gt;解绑&lt;/button&gt;<br>    &lt;/p&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-comment">// Vue.directive(&#x27;jspang&#x27;, function (el, binding) &#123;</span><br>      <span class="hljs-comment">//   console.log(el);</span><br>      <span class="hljs-comment">//   console.log(binding);</span><br>      <span class="hljs-comment">//   el.style = &#x27;color:&#x27; + binding.value;</span><br>      <span class="hljs-comment">// &#125;);</span><br><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unbind</span>(<span class="hljs-params"></span>) </span>&#123;<br>        app.$destroy();<br>      &#125;<br>      Vue.directive(<span class="hljs-string">&#x27;jspang&#x27;</span>, &#123;<br>        bind: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) </span>&#123;<br>          <span class="hljs-comment">//被绑定</span><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1 - bind&#x27;</span>);<br>          el.style = <span class="hljs-string">&#x27;color:&#x27;</span> + binding.value;<br>        &#125;,<br>        inserted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">//绑定到节点</span><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2 - inserted&#x27;</span>);<br>        &#125;,<br>        update: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">//组件更新</span><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3 - update&#x27;</span>);<br>        &#125;,<br>        componentUpdated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">//组件更新完成</span><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;4 - componentUpdated&#x27;</span>);<br>        &#125;,<br>        unbind: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">//解绑</span><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;5 - unbind&#x27;</span>);<br>        &#125;,<br>      &#125;);<br><br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          num: <span class="hljs-number">10</span>,<br>          color: <span class="hljs-string">&#x27;red&#x27;</span>,<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.num++;<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Vue-extend-构造器的延伸"><a href="#Vue-extend-构造器的延伸" class="headerlink" title="Vue.extend 构造器的延伸"></a>Vue.extend 构造器的延伸</h2><h3 id="一、什么是-Vue-extend"><a href="#一、什么是-Vue-extend" class="headerlink" title="一、什么是 Vue.extend"></a>一、什么是 Vue.extend</h3><p>Vue.extend 返回的是一个“扩展实例构造器”,也就是预设了部分选项的 Vue 实例构造器。经常服务于 Vue.component 用来生成组件，可以简单理解为当在模板中遇到该组件名称作为标签的自定义元素时，会自动调用“扩展实例构造器”来生产组件实例，并挂载到自定义元素上。<br>由于我们还没有学习 Vue 的自定义组件，所以我们先看跟组件无关的用途。</p><h3 id="二、自定义无参数标签"><a href="#二、自定义无参数标签" class="headerlink" title="二、自定义无参数标签"></a>二、自定义无参数标签</h3><p>我们想象一个需求，需求是这样的，要在博客页面多处显示作者的网名，并在网名上直接有链接地址。我们希望在 html 中只需要写<author></author>，这和自定义组件很像，但是他没有传递任何参数，只是个静态标签。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/vue.extend.html&quot;</span>&gt;directive 自定义指令&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 vue.extend.html 文件<br>我们的 Vue.extend 该登场了，我们先用它来编写一个扩展实例构造器。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> authorExtend = Vue.extend(&#123;<br>  template: <span class="hljs-string">&quot;&lt;p&gt;&lt;a :href=&#x27;authorUrl&#x27;&gt;&#123;&#123;authorName&#125;&#125;&lt;/a&gt;&lt;/p&gt;&quot;</span>,<br>  data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      authorName: <span class="hljs-string">&#x27;JSPang&#x27;</span>,<br>      authorUrl: <span class="hljs-string">&#x27;http://www.jspang.com&#x27;</span>,<br>    &#125;;<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这时 html 中的标签还是不起作用的，因为扩展实例构造器是需要挂载的，我们再进行一次挂载。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> authorExtend().$mount(<span class="hljs-string">&#x27;author&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>这时我们在 html 写<author><author>就是管用的。</p><h3 id="三、挂载到普通标签上"><a href="#三、挂载到普通标签上" class="headerlink" title="三、挂载到普通标签上"></a>三、挂载到普通标签上</h3><p>还可以通过 HTML 标签上的 id 或者 class 来生成扩展实例构造器，Vue.extend 里的代码是一样的，只是在挂载的时候，我们用类似 jquery 的选择器的方法，来进行挂载就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> authorExtend().$mount(<span class="hljs-string">&#x27;#author&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p><code>vue.extend.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;vue.extend 扩展实例构造器&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;vue.extend 扩展实例构造器&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;author&quot;</span>&gt;&lt;/div&gt;<br>    &lt;author&gt;&lt;/author&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> authorExtend = Vue.extend(&#123;<br>        template: <span class="hljs-string">&quot;&lt;p&gt;&lt;a :href=&#x27;authorURL&#x27;&gt;&#123;&#123;authorName&#125;&#125;&lt;/a&gt;&lt;/p&gt;&quot;</span>,<br>        data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-keyword">return</span> &#123;<br>            authorName: <span class="hljs-string">&#x27;JSP&#x27;</span>,<br>            authorURL: <span class="hljs-string">&#x27;http://jspang.com&#x27;</span>,<br>          &#125;;<br>        &#125;,<br>      &#125;);<br>      <span class="hljs-keyword">new</span> authorExtend().$mount(<span class="hljs-string">&#x27;#author&#x27;</span>);<br>      <span class="hljs-keyword">new</span> authorExtend().$mount(<span class="hljs-string">&#x27;author&#x27;</span>);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Vue-set-全局操作"><a href="#Vue-set-全局操作" class="headerlink" title="Vue.set 全局操作"></a>Vue.set 全局操作</h2><p>Vue.set 的作用就是在构造器外部操作构造器内部的数据、属性或者方法。比如在 vue 构造器内部定义了一个 count 为 1 的数据，我们在构造器外部定义了一个方法，要每次点击按钮给值加 1.就需要用到 Vue.set。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/vue.set.html&quot;</span>&gt;vue.set 全局操作&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 vue.set.html 文件</p><h3 id="一、引用构造器外部数据："><a href="#一、引用构造器外部数据：" class="headerlink" title="一、引用构造器外部数据："></a>一、引用构造器外部数据：</h3><p>什么是外部数据，就是不在 Vue 构造器里里的 data 处声明，而是在构造器外部声明，然后在 data 处引用就可以了。外部数据的加入让程序更加灵活，我们可以在外部获取任何想要的数据形式，然后让 data 引用。 看一个简单的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//在构造器外部声明数据</span><br><span class="hljs-keyword">var</span> outData = &#123;<br>  count: <span class="hljs-number">1</span>,<br>  goodName: <span class="hljs-string">&#x27;car&#x27;</span>,<br>&#125;;<br><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-comment">//引用外部数据</span><br>  data: outData,<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="二、在外部改变数据的三种方法："><a href="#二、在外部改变数据的三种方法：" class="headerlink" title="二、在外部改变数据的三种方法："></a>二、在外部改变数据的三种方法：</h3><h4 id="1、用-Vue-set-改变"><a href="#1、用-Vue-set-改变" class="headerlink" title="1、用 Vue.set 改变"></a>1、用 Vue.set 改变</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br>  Vue.set(outData, <span class="hljs-string">&#x27;count&#x27;</span>, <span class="hljs-number">4</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2、用-Vue-对象的方法添加"><a href="#2、用-Vue-对象的方法添加" class="headerlink" title="2、用 Vue 对象的方法添加"></a>2、用 Vue 对象的方法添加</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.count++;<br></code></pre></div></td></tr></table></figure><h4 id="3、直接操作外部数据"><a href="#3、直接操作外部数据" class="headerlink" title="3、直接操作外部数据"></a>3、直接操作外部数据</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">outData.count++;<br></code></pre></div></td></tr></table></figure><p>其实这三种方式都可以操作外部的数据，Vue 也给我们增加了一种操作外部数据的方法。</p><h3 id="三、为什么要有-Vue-set-的存在"><a href="#三、为什么要有-Vue-set-的存在" class="headerlink" title="三、为什么要有 Vue.set 的存在?"></a>三、为什么要有 Vue.set 的存在?</h3><p>由于 Javascript 的限制，Vue 不能自动检测以下变动的数组。</p><ul><li>当你利用索引直接设置一个项时，vue 不会为我们自动更新。</li><li>当你修改数组的长度时，vue 不会为我们自动更新。</li></ul><p>看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;Vue.set 全局操作&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Vue.set 全局操作&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;ul&gt;<br>            &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot; aa in arr&quot;</span>&gt;&#123;&#123;aa&#125;&#125;&lt;/li&gt;<br>        &lt;/ul&gt;<br><br>    &lt;/div&gt;<br>    &lt;button onclick=<span class="hljs-string">&quot;add()&quot;</span>&gt;外部添加&lt;/button&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我已经执行了&quot;</span>);<br>           app.arr[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;ddd&#x27;</span>;<br>           <span class="hljs-comment">//Vue.set(app.arr,1,&#x27;ddd&#x27;);</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> outData=&#123;<br>            arr:[<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>]<br>        &#125;;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:outData<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>这时我们的界面是不会自动跟新数组的，我们需要用 Vue.set(app.arr,1,’ddd’)来设置改变，vue 才会给我们自动更新，这就是 Vue.set 存在的意义。<br><code>vue.set.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;vue.set 全局操作&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;vue.set 全局操作&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &#123;&#123;count&#125;&#125;<br>      &lt;ul&gt;<br>        &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in arr&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;<br>      &lt;/ul&gt;<br>    &lt;/div&gt;<br>    &lt;p&gt;<br>      &lt;button onclick=<span class="hljs-string">&quot;add()&quot;</span>&gt;add&lt;/button&gt;<br>    &lt;/p&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// Vue.set(outData, &#x27;count&#x27;, 2);</span><br>        <span class="hljs-comment">// app.count++;</span><br>        <span class="hljs-comment">// outData.count++;</span><br>        <span class="hljs-comment">// app.arr[1] = &#x27;ddd&#x27;;</span><br>        Vue.set(app.arr, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;dd&#x27;</span>);<br>      &#125;<br>    &lt;/script&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> outData = &#123;<br>        count: <span class="hljs-number">1</span>,<br>        <span class="hljs-comment">// goods: &#x27;car&#x27;,</span><br>        arr: [<span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-string">&#x27;bbb&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>],<br>      &#125;;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: outData,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Vue-的生命周期（钩子函数）"><a href="#Vue-的生命周期（钩子函数）" class="headerlink" title="Vue 的生命周期（钩子函数）"></a>Vue 的生命周期（钩子函数）</h2><p>Vue 一共有 10 个生命周期函数，我们可以利用这些函数在 vue 的每个阶段都进行操作数据或者改变内容。<br><img src="https://cdn.nlark.com/yuque/0/2021/webp/2625525/1624535255563-0b9afb13-7b80-46c9-ac1b-a788b43b64b8.webp#clientId=u62934013-fb22-4&from=paste&id=uf81c8418&margin=%5Bobject%20Object%5D&originHeight=3039&originWidth=1200&originalType=url&ratio=2&status=done&style=none&taskId=ud189f2be-2116-48bb-a847-dc1d986d5c3"><br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/vue.lifeCycle.html&quot;</span>&gt;vue的生命周期&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 vue.lifeCycle.html 文件<br><code>vue.lifeCycle.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;vue.lifeCycle 生命周期&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;vue.lifeCycle 生命周期&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &#123;&#123;count&#125;&#125;<br>      &lt;p&gt;<br>        &lt;button @click=<span class="hljs-string">&quot;add&quot;</span>&gt;add&lt;/button&gt;<br>      &lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;button onclick=<span class="hljs-string">&quot;app.$destroy()&quot;</span>&gt;销毁&lt;/button&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          count: <span class="hljs-number">1</span>,<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.count++;<br>          &#125;,<br>        &#125;,<br>        beforeCreate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1-beforeCreate 初始化之前&#x27;</span>);<br>        &#125;,<br>        created: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2-created 创建完成&#x27;</span>);<br>        &#125;,<br>        beforeMount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3-beforeMount 挂载之前&#x27;</span>);<br>        &#125;,<br>        mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;4-mounted 被挂载之后&#x27;</span>);<br>        &#125;,<br>        beforeUpdate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;5-beforeUpdate 数据更新前&#x27;</span>);<br>        &#125;,<br>        updated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;6-updated 被更新后&#x27;</span>);<br>        &#125;,<br>        activated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;7-activated&#x27;</span>);<br>        &#125;,<br>        deactivated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;8-deactivated&#x27;</span>);<br>        &#125;,<br>        beforeDestroy: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;9-beforeDestroy 销毁之前&#x27;</span>);<br>        &#125;,<br>        destroyed: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;10-destroyed 销毁之后&#x27;</span>);<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Tempate-制作模板"><a href="#Tempate-制作模板" class="headerlink" title="Tempate 制作模板"></a>Tempate 制作模板</h2><p>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/template.html&quot;</span>&gt;template制作模板&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 template.html 文件<br>​</p><h3 id="一、直接写在选项里的模板"><a href="#一、直接写在选项里的模板" class="headerlink" title="一、直接写在选项里的模板"></a>一、直接写在选项里的模板</h3><p>直接在构造器里的 template 选项后边编写。这种写法比较直观，但是如果模板 html 代码太多，不建议这么写。<br>javascript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    message: <span class="hljs-string">&#x27;hello Vue!&#x27;</span>,<br>  &#125;,<br>  template: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;h1 style=&quot;color:red&quot;&gt;我是选项模板&lt;/h1&gt;</span><br><span class="hljs-string">     `</span>,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这里需要注意的是模板的标识不是单引号和双引号，而是，就是 Tab 上面的键。</p><h3 id="二、写在-template-标签里的模板"><a href="#二、写在-template-标签里的模板" class="headerlink" title="二、写在 template 标签里的模板"></a>二、写在 template 标签里的模板</h3><p>这种写法更像是在写 HTML 代码，就算不会写 Vue 的人，也可以制作页面。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template id=<span class="hljs-string">&quot;demo2&quot;</span>&gt;<br>          &lt;h2 style=<span class="hljs-string">&quot;color:red&quot;</span>&gt;我是template标签模板&lt;/h2&gt;<br> &lt;/template&gt;<br><br> &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>     <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>         el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>         data:&#123;<br>             message:<span class="hljs-string">&#x27;hello Vue!&#x27;</span><br>         &#125;,<br>         template:<span class="hljs-string">&#x27;#demo2&#x27;</span><br>     &#125;)<br> &lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h3 id="三、写在-script-标签里的模板"><a href="#三、写在-script-标签里的模板" class="headerlink" title="三、写在 script 标签里的模板"></a>三、写在 script 标签里的模板</h3><p>这种写模板的方法，可以让模板文件从外部引入。<br>&lt;</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;x-template&quot;</span> id=<span class="hljs-string">&quot;demo3&quot;</span>&gt;<br>        &lt;h2 style=<span class="hljs-string">&quot;color:red&quot;</span>&gt;我是script标签模板&lt;/h2&gt;<br>    &lt;/script&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&#x27;hello Vue!&#x27;</span><br>            &#125;,<br>            template:<span class="hljs-string">&#x27;#demo3&#x27;</span><br>        &#125;)<br>    &lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>我们学习了 Template 的三种写法，以后学习到 vue-cli 的时候还会学到一种 xxx.vue 的写法。<br><code>template.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;Template三种写法&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;Template三种写法&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;<br><br>    &lt;template id=<span class="hljs-string">&quot;dd2&quot;</span>&gt;<br>      &lt;h2 style=<span class="hljs-string">&quot;color: red&quot;</span>&gt;我是Template标签模板&lt;/h2&gt;<br>    &lt;/template&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;x-template&quot;</span> id=<span class="hljs-string">&quot;dd3&quot;</span>&gt;<br>      &lt;h2 style=<span class="hljs-string">&quot;color: red&quot;</span>&gt;script标签模板&lt;/h2&gt;<br>    &lt;/script&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          message: <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>        &#125;,<br>        template: <span class="hljs-string">&#x27;#dd3&#x27;</span>,<br>        <span class="hljs-comment">// template: `&lt;h2 style=&#x27;color:red&#x27;&gt;我是选项模板&lt;/h2&gt;`,</span><br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Component-初识组件"><a href="#Component-初识组件" class="headerlink" title="Component 初识组件"></a>Component 初识组件</h2><p>component 组件是 Vue 学习的重点、重点、重点，重要的事情说三遍。所以你必须学好 Vue component。其实组件就是制作自定义的标签，这些标签在 HTML 中是没有的。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/component-1.html&quot;</span>&gt;component-<span class="hljs-number">1</span>组件&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 component-1.html 文件<br>​</p><h3 id="一、全局化注册组件"><a href="#一、全局化注册组件" class="headerlink" title="一、全局化注册组件"></a>一、全局化注册组件</h3><p>全局化就是在构造器的外部用 Vue.component 来注册，我们注册现在就注册一个的组件来体验一下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;component-<span class="hljs-number">1</span>&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;component-<span class="hljs-number">1</span>&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;jspang&gt;&lt;/jspang&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-comment">//注册全局组件</span><br>        Vue.component(<span class="hljs-string">&#x27;jspang&#x27;</span>,&#123;<br>            template:<span class="hljs-string">`&lt;div style=&quot;color:red;&quot;&gt;全局化注册的jspang标签&lt;/div&gt;`</span><br>        &#125;)<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>我们在 javascript 里注册了一个组件，在 HTML 中调用了他。这就是最简单的一个组件的编写方法，并且它可以放到多个构造器的作用域里。</p><h3 id="二、局部注册组件局部"><a href="#二、局部注册组件局部" class="headerlink" title="二、局部注册组件局部"></a>二、局部注册组件局部</h3><p>局部注册组件局部注册组件和全局注册组件是向对应的，局部注册的组件只能在组件注册的作用域里进行使用，其他作用域使用无效。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;component-<span class="hljs-number">1</span>&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;component-<span class="hljs-number">1</span>&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;panda&gt;&lt;/panda&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            components:&#123;<br>                <span class="hljs-string">&quot;panda&quot;</span>:&#123;<br>                    template:<span class="hljs-string">`&lt;div style=&quot;color:red;&quot;&gt;局部注册的panda标签&lt;/div&gt;`</span><br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>从代码中你可以看出局部注册其实就是写在构造器里，但是你需要注意的是，构造器里的 components 是加 s 的，而全局注册是不加 s 的。</p><h3 id="三、组件和指令的区别"><a href="#三、组件和指令的区别" class="headerlink" title="三、组件和指令的区别"></a>三、组件和指令的区别</h3><p>组件注册的是一个标签，而指令注册的是已有标签里的一个属性。在实际开发中我们还是用组件比较多，指令用的比较少。因为指令看起来封装的没那么好，这只是个人观点。<br><code>component.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;component-<span class="hljs-number">1</span>&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;component-<span class="hljs-number">1</span>&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;jspang&gt;&lt;/jspang&gt;<br>      &lt;panda&gt;&lt;/panda&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      Vue.component(<span class="hljs-string">&#x27;jspang&#x27;</span>, &#123;<br>        template: <span class="hljs-string">`&lt;div style=&#x27;color:red&#x27;&gt;我是全局的jspang组件&lt;/div&gt;`</span>,<br>      &#125;);<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        components: &#123;<br>          panda: &#123;<br>            template: <span class="hljs-string">`&lt;div style=&#x27;color:green&#x27;&gt;我是局部的panda组件&lt;/div&gt;`</span>,<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Component-组件-props-属性设置"><a href="#Component-组件-props-属性设置" class="headerlink" title="Component 组件 props 属性设置"></a>Component 组件 props 属性设置</h2><p>props 选项就是设置和获取标签上的属性值的，例如我们有一个自定义的组件,这时我们想给他加个标签属性写成 意思就是熊猫来自中国，当然这里的 China 可以换成任何值。定义属性的选项是 props。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/component-2.html&quot;</span>&gt;component-<span class="hljs-number">2</span>组件props属性设置&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 component-2.html 文件</p><h3 id="一、定义属性并获取属性值"><a href="#一、定义属性并获取属性值" class="headerlink" title="一、定义属性并获取属性值"></a>一、定义属性并获取属性值</h3><p>定义属性我们需要用 props 选项，加上数组形式的属性名称，例如：props:[‘here’]。在组件的模板里读出属性值只需要用插值的形式，例如.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;component-<span class="hljs-number">2</span>&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;component-<span class="hljs-number">2</span>&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;panda here=<span class="hljs-string">&quot;China&quot;</span>&gt;&lt;/panda&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            components:&#123;<br>                <span class="hljs-string">&quot;panda&quot;</span>:&#123;<br>                    template:<span class="hljs-string">`&lt;div style=&quot;color:red;&quot;&gt;Panda from &#123;&#123; here &#125;&#125;.&lt;/div&gt;`</span>,<br>                    props:[<span class="hljs-string">&#x27;here&#x27;</span>]<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>上面的代码定义了 panda 的组件，并用 props 设置了 here 的属性值，在 here 属性值里传递了 China 给组件。 最后输出的结果是红色字体的 Panda from China.</p><h3 id="二、属性中带’-‘的处理方式"><a href="#二、属性中带’-‘的处理方式" class="headerlink" title="二、属性中带’-‘的处理方式"></a>二、属性中带’-‘的处理方式</h3><p>我们在写属性时经常会加入’-‘来进行分词，比如：，那这时我们在 props 里如果写成 props:[‘form-here’]是错误的，我们必须用小驼峰式写法 props:[‘formHere’]。<br>html 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;panda <span class="hljs-keyword">from</span>-here=<span class="hljs-string">&quot;China&quot;</span>&gt;&lt;/panda&gt;<br></code></pre></div></td></tr></table></figure><p>javascript 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  components: &#123;<br>    panda: &#123;<br>      template: <span class="hljs-string">`&lt;div style=&quot;color:red;&quot;&gt;Panda from &#123;&#123; here &#125;&#125;.&lt;/div&gt;`</span>,<br>      props: [<span class="hljs-string">&#x27;fromHere&#x27;</span>],<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>PS：因为这里有坑，所以还是少用-为好</p><h3 id="三、在构造器里向组件中传值"><a href="#三、在构造器里向组件中传值" class="headerlink" title="三、在构造器里向组件中传值"></a>三、在构造器里向组件中传值</h3><p>把构造器中 data 的值传递给组件，我们只要进行绑定就可以了。就是我们第一季学的 v-bind:xxx.<br>我们直接看代码:<br>html 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;panda v-bind:here=<span class="hljs-string">&quot;message&quot;</span>&gt;&lt;/panda&gt;<br></code></pre></div></td></tr></table></figure><p>javascript 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    message: <span class="hljs-string">&#x27;SiChuan&#x27;</span>,<br>  &#125;,<br>  components: &#123;<br>    panda: &#123;<br>      template: <span class="hljs-string">`&lt;div style=&quot;color:red;&quot;&gt;Panda from &#123;&#123; here &#125;&#125;.&lt;/div&gt;`</span>,<br>      props: [<span class="hljs-string">&#x27;here&#x27;</span>],<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p><code>component-2.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;component-<span class="hljs-number">2</span>组件props属性设置&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;component-2props属性设置&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;panda :here=<span class="hljs-string">&quot;message&quot;</span>&gt;&lt;/panda&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          message: <span class="hljs-string">&#x27;China&#x27;</span>,<br>        &#125;,<br>        components: &#123;<br>          panda: &#123;<br>            template: <span class="hljs-string">`&lt;div style=&#x27;color:green&#x27;&gt;Panda from &#123;&#123;here&#125;&#125;&lt;/div&gt;`</span>,<br>            props: [<span class="hljs-string">&#x27;here&#x27;</span>],<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Component-父子组件关系"><a href="#Component-父子组件关系" class="headerlink" title="Component 父子组件关系"></a>Component 父子组件关系</h2><p>在实际开发中我们经常会遇到在一个自定义组件中要使用其他自定义组件，这就需要一个父子组件关系。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/component-3.html&quot;</span>&gt;component-<span class="hljs-number">3</span>父子组件关系&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 component-3.html 文件</p><h3 id="一、构造器外部写局部注册组件"><a href="#一、构造器外部写局部注册组件" class="headerlink" title="一、构造器外部写局部注册组件"></a>一、构造器外部写局部注册组件</h3><p>上面我们都把局部组件的编写放到了构造器内部，如果组件代码量很大，会影响构造器的可读性，造成拖拉和错误。<br>我们把组件编写的代码放到构造器外部或者说单独文件。<br>我们需要先声明一个对象,对象里就是组件的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> jspang = &#123;<br>  template: <span class="hljs-string">`&lt;div&gt;Panda from China!&lt;/div&gt;`</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>声明好对象后在构造器里引用就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">components:&#123;<br>    <span class="hljs-string">&quot;jspang&quot;</span>:jspang<br>&#125;<br></code></pre></div></td></tr></table></figure><p>html 中引用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;jspang&gt;&lt;/jspang&gt;<br></code></pre></div></td></tr></table></figure><h3 id="二、父子组件的嵌套"><a href="#二、父子组件的嵌套" class="headerlink" title="二、父子组件的嵌套"></a>二、父子组件的嵌套</h3><p>我们先声明一个父组件，比如叫 jspang，然后里边我们加入一个 city 组件，我们来看这样的代码如何写。<br><code>component-3.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;component-<span class="hljs-number">3</span>父子组件关系&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;component-<span class="hljs-number">3</span>父子组件关系&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;panda&gt;&lt;/panda&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> city = &#123;<br>        template: <span class="hljs-string">`&lt;div style=&quot;color:green&quot;&gt;siChuan of China&lt;/div&gt;`</span>,<br>      &#125;;<br>      <span class="hljs-keyword">var</span> pandaComponent = &#123;<br>        template: <span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">          &lt;p&gt;Panda from China&lt;/p&gt;</span><br><span class="hljs-string">          &lt;city&gt;&lt;/city&gt;</span><br><span class="hljs-string">          &lt;/div&gt;`</span>,<br>        components: &#123;<br>          city: city,<br>        &#125;,<br>      &#125;;<br><br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        components: &#123;<br>          panda: pandaComponent,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Component-标签"><a href="#Component-标签" class="headerlink" title="Component 标签"></a>Component 标签</h2><p>标签是 Vue 框架自定义的标签，它的用途就是可以动态绑定我们的组件，根据数据的不同更换不同的组件。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/component-4.html&quot;</span>&gt;component-<span class="hljs-number">4</span>标签&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 component-4.html 文件</p><p>1.我们先在构造器外部定义三个不同的组件，分别是 componentA,componentB 和 componentC.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> componentA = &#123;<br>  template: <span class="hljs-string">`&lt;div&gt;I&#x27;m componentA&lt;/div&gt;`</span>,<br>&#125;;<br><span class="hljs-keyword">var</span> componentB = &#123;<br>  template: <span class="hljs-string">`&lt;div&gt;I&#x27;m componentB&lt;/div&gt;`</span>,<br>&#125;;<br><span class="hljs-keyword">var</span> componentC = &#123;<br>  template: <span class="hljs-string">`&lt;div&gt;I&#x27;m componentC&lt;/div&gt;`</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>2.我们在构造器的 components 选项里加入这三个组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">components:&#123;<br>    <span class="hljs-string">&quot;componentA&quot;</span>:componentA,<br>    <span class="hljs-string">&quot;componentB&quot;</span>:componentB,<br>    <span class="hljs-string">&quot;componentC&quot;</span>:componentC,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3.我们在 html 里插入 component 标签，并绑定 who 数据，根据 who 的值不同，调用不同的组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;component v-bind:is=<span class="hljs-string">&quot;who&quot;</span>&gt;&lt;/component&gt;<br></code></pre></div></td></tr></table></figure><p>这就是我们的组件标签的基本用法。<br>我们提高一下，给页面加个按钮，每点以下更换一个组件。<br><code>component-4.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;component-<span class="hljs-number">4</span>标签&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;component-<span class="hljs-number">4</span>标签&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;component v-bind:is=<span class="hljs-string">&quot;who&quot;</span>&gt;&lt;/component&gt;<br>      &lt;button @click=<span class="hljs-string">&quot;changeComponent&quot;</span>&gt;changeComponent&lt;/button&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> componentA = &#123;<br>        template: <span class="hljs-string">&#x27;&lt;div style=&quot;color:red&quot;&gt;I’m componentA&lt;/div&gt;&#x27;</span>,<br>      &#125;;<br>      <span class="hljs-keyword">var</span> componentB = &#123;<br>        template: <span class="hljs-string">&#x27;&lt;div style=&quot;color:green&quot;&gt;I’m componentB&lt;/div&gt;&#x27;</span>,<br>      &#125;;<br>      <span class="hljs-keyword">var</span> componentC = &#123;<br>        template: <span class="hljs-string">&#x27;&lt;div style=&quot;color:pink&quot;&gt;I’m componentC&lt;/div&gt;&#x27;</span>,<br>      &#125;;<br>    &lt;/script&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          who: componentB,<br>        &#125;,<br>        components: &#123;<br>          componentA: componentA,<br>          componentB: componentB,<br>          componentC: componentC,<br>        &#125;,<br>        methods: &#123;<br>          changeComponent: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.who === <span class="hljs-string">&#x27;componentA&#x27;</span>) &#123;<br>              <span class="hljs-built_in">this</span>.who = <span class="hljs-string">&#x27;componentB&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.who == <span class="hljs-string">&#x27;componentB&#x27;</span>) &#123;<br>              <span class="hljs-built_in">this</span>.who = <span class="hljs-string">&#x27;componentC&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-built_in">this</span>.who = <span class="hljs-string">&#x27;componentA&#x27;</span>;<br>            &#125;<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h1 id="构造器里的选项"><a href="#构造器里的选项" class="headerlink" title="构造器里的选项"></a>构造器里的选项</h1><h2 id="propsData-Option-全局扩展的数据传递"><a href="#propsData-Option-全局扩展的数据传递" class="headerlink" title="propsData Option 全局扩展的数据传递"></a>propsData Option 全局扩展的数据传递</h2><p>propsData 不是和属性有关，他用在全局扩展时进行传递数据。先回顾一下全局扩展的知识，作一个的扩展标签出来。实际我们并比推荐用全局扩展的方式作自定义标签，我们学了组件，完全可以使用组件来做，这里只是为了演示 propsData 的用法。<br>​</p><p>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/propsData.html&quot;</span>&gt;propsData Option&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 propsData.html 文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;PropsData Option Demo&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;PropsData Option Demo&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;header&gt;&lt;/header&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>       <span class="hljs-keyword">var</span>  header_a = Vue.extend(&#123;<br>           template:<span class="hljs-string">`&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;`</span>,<br>           data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>               <span class="hljs-keyword">return</span> &#123;<br>                   message:<span class="hljs-string">&#x27;Hello,I am Header&#x27;</span><br>               &#125;<br>           &#125;<br>       &#125;);<br>       <span class="hljs-keyword">new</span> header_a().$mount(<span class="hljs-string">&#x27;header&#x27;</span>);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>扩展标签已经做好了，这时我们要在挂载时传递一个数字过去，我们就用到了 propsData。 我们用 propsData 三步解决传值： 1.在全局扩展里加入 props 进行接收。propsData:{a:1} 2.传递时用 propsData 进行传递。props:[‘a’] 3.用插值的形式写入模板。 完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> header_a = Vue.extend(&#123;<br>  template: <span class="hljs-string">`&lt;p&gt;&#123;&#123;message&#125;&#125;-&#123;&#123;a&#125;&#125;&lt;/p&gt;`</span>,<br>  data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      message: <span class="hljs-string">&#x27;Hello,I am Header&#x27;</span>,<br>    &#125;;<br>  &#125;,<br>  props: [<span class="hljs-string">&#x27;a&#x27;</span>],<br>&#125;);<br><span class="hljs-keyword">new</span> header_a(&#123; <span class="hljs-attr">propsData</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125; &#125;).$mount(<span class="hljs-string">&#x27;header&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>总结：propsData 在实际开发中我们使用的并不多，我们在后边会学到 Vuex 的应用，他的作用就是在单页应用中保持状态和数据的。</p><h2 id="computed-Option-计算选项"><a href="#computed-Option-计算选项" class="headerlink" title="computed Option 计算选项"></a>computed Option 计算选项</h2><p>computed 的作用主要是对原数据进行改造输出。改造输出：包括格式的编辑，大小写转换，顺序重排，添加符号……。<br>​</p><p>1、computed 是计算属性，也就是依赖某个值或者 props 通过计算得来得数据；<br>2、 computed 的值是在 getter 执行之后进行缓存的，只有在它依赖的数据发生变化，会重新调用 getter 来计算；<br>3、 不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化<br>​</p><p>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/computed.html&quot;</span>&gt;computed Option&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 computed 加.html 文件</p><h3 id="一、格式化输出结果："><a href="#一、格式化输出结果：" class="headerlink" title="一、格式化输出结果："></a>一、格式化输出结果：</h3><p>我们先来做个读出价格的例子：我们读书的原始数据是 price:100 但是我们输出给用户的样子是（￥ 100 元）。 主要的 javascript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    newPrice:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.price=<span class="hljs-string">&#x27;￥&#x27;</span> + <span class="hljs-built_in">this</span>.price + <span class="hljs-string">&#x27;元&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>全部代码:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;Computed Option 计算选项&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Computed Option 计算选项&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123;newPrice&#125;&#125;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                price:<span class="hljs-number">100</span><br>            &#125;,<br>            computed:&#123;<br>                newPrice:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.price=<span class="hljs-string">&#x27;￥&#x27;</span> + <span class="hljs-built_in">this</span>.price + <span class="hljs-string">&#x27;元&#x27;</span>;<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>现在输出的结果就是：￥ 100 元。</p><h3 id="二、用计算属性反转数组"><a href="#二、用计算属性反转数组" class="headerlink" title="二、用计算属性反转数组"></a>二、用计算属性反转数组</h3><p>例如：我们得到了一个新闻列表的数组，它的顺序是安装新闻时间的顺序正序排列的，也就是早反生的新闻排在前面。这是反人类的，我们需要给他反转。这时我们就可以用到我们的计算属性了。<br>没有排序的新闻列表，是安装日期正序排列的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> newsList = [<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;香港或就“装甲车被扣”事件追责 起诉涉事运输公司&#x27;</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2017/3/10&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;日本第二大准航母服役 外媒：针对中国潜艇&#x27;</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2017/3/12&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;中国北方将有明显雨雪降温天气 南方阴雨持续&#x27;</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2017/3/13&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;起底“最短命副市长”：不到40天落马，全家被查&#x27;</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2017/3/23&#x27;</span> &#125;,<br>];<br></code></pre></div></td></tr></table></figure><p>我们希望输出的结果：</p><ul><li>起底“最短命副市长”：不到 40 天落马，全家被查-2017/3/23</li><li>中国北方将有明显雨雪降温天气 南方阴雨持续-2017/3/13</li><li>日本第二大准航母服役 外媒：针对中国潜艇-2017/3/12</li><li>香港或就“装甲车被扣”事件追责 起诉涉事运输公司-2017/3/10</li></ul><p>我们的在 computed 里的 javascript 代码：我们用 js 原生方法给数组作了反转。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    reverseNews:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.newsList.reverse();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>总结：computed 属性是非常有用，在输出数据前可以轻松的改变数据。所以说这节课的代码必须要多敲几遍，加深印象</p><h2 id="Methods-Option-方法选项"><a href="#Methods-Option-方法选项" class="headerlink" title="Methods Option 方法选项"></a>Methods Option 方法选项</h2><p>在以前的学习中，已经大量的使用了构造器里的 methods 选项，但是并没有仔细和系统的讲解过<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/methods.html&quot;</span>&gt;methods Option&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 methods.html 文件<br>我们还是复习一下最简单的使用方法，一个数字，每点击一下按钮加 1.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;methods Option&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;methods Option&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123; a &#125;&#125;<br>        &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                a:<span class="hljs-number">1</span><br>            &#125;,<br>            methods:&#123;<br>                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-built_in">this</span>.a++<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h3 id="一、methods-中参数的传递"><a href="#一、methods-中参数的传递" class="headerlink" title="一、methods 中参数的传递"></a>一、methods 中参数的传递</h3><p>使用方法和正常的 javascript 传递参数的方法一样，分为两部：</p><ul><li>在 methods 的方法中进行声明，比如我们给 add 方法加上一个 num 参数，就要写出<code>add:function(num)&#123;&#125;.</code></li><li>调用方法时直接传递，比如我们要传递 2 这个参数，我们在 button 上就直接可以写。<code>&lt;button @click=”add(2)”&gt;&lt;/button&gt;</code>​</li></ul><p>现在知道了加参数的方法，看一段完整的代码，代码中给 add 添加了 num 参数，并在按钮上调用传递了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;methods Option&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;methods Option&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123; a &#125;&#125;<br>        &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add(2)&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                a:<span class="hljs-number">1</span><br>            &#125;,<br>            methods:&#123;<br>                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(num!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<span class="hljs-built_in">this</span>.a+=num&#125;<br>                    <span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">this</span>.a++&#125;<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>这时，再点击按钮是每次加 2 个数字。</p><h3 id="二、methods-中的-event-参数"><a href="#二、methods-中的-event-参数" class="headerlink" title="二、methods 中的$event 参数"></a>二、methods 中的$event 参数</h3><p>传递的$event 参数都是关于你点击鼠标的一些事件和属性。我们先看看传递的方法。<br>传递：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=”add(<span class="hljs-number">2</span>,$event)”&gt;add&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p>我们这时候可以打印一下，看看 event 到底是个怎样的对象。你会发现，它包含了大部分鼠标事件的属性。</p><h3 id="三、native-给组件绑定构造器里的原生事件。"><a href="#三、native-给组件绑定构造器里的原生事件。" class="headerlink" title="三、native 给组件绑定构造器里的原生事件。"></a>三、native 给组件绑定构造器里的原生事件。</h3><p>在实际开发中经常需要把某个按钮封装成组件，然后反复使用，如何让组件调用构造器里的方法，而不是组件里的方法。就需要用到我们的<code>.native</code>修饰器了。<br>现在我们把我们的 add 按钮封装成组件：<br>声明 btn 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = &#123;<br>  template: <span class="hljs-string">`&lt;button&gt;组件Add&lt;/button&gt;`</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>在构造器里声明：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">components:&#123;<br>    <span class="hljs-string">&quot;btn&quot;</span>:btn<br> &#125;<br></code></pre></div></td></tr></table></figure><p>用.native 修饰器来调用构造器里的 add 方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">btn</span> @<span class="hljs-attr">click.native</span>=<span class="hljs-string">&quot;add(3)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">btn</span>&gt;</span></span>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h3 id="四、作用域外部调用构造器里的方法"><a href="#四、作用域外部调用构造器里的方法" class="headerlink" title="四、作用域外部调用构造器里的方法"></a>四、作用域外部调用构造器里的方法</h3><p>这种不经常使用，如果你出现了这种情况，说明你的代码组织不够好。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button onclick=<span class="hljs-string">&quot;app.add(4)&quot;</span>&gt;外部调用构造器里的方法&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p><code>methods.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;methods Option&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;methods Option&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &#123;&#123;a&#125;&#125;<br>      &lt;p&gt;<br>        &lt;button @click=<span class="hljs-string">&quot;add(2)&quot;</span>&gt;add&lt;/button&gt;<br>      &lt;/p&gt;<br>      &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">btn</span> @<span class="hljs-attr">click.native</span>=<span class="hljs-string">&quot;add(2)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">btn</span>&gt;</span></span>&lt;/p&gt;<br>      &lt;p&gt;<br>        &lt;button onclick=<span class="hljs-string">&quot;app.add(2)&quot;</span>&gt;外部ADD&lt;/button&gt;<br>      &lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> btn = &#123;<br>        template: <span class="hljs-string">`&lt;button&gt;组件ADD&lt;/button&gt;`</span>,<br>      &#125;;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          a: <span class="hljs-number">1</span>,<br>        &#125;,<br>        components: &#123;<br>          btn: btn,<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (num != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>              <span class="hljs-built_in">this</span>.a += num;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-built_in">this</span>.a++;<br>            &#125;<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Watch-选项-监控数据"><a href="#Watch-选项-监控数据" class="headerlink" title="Watch 选项 监控数据"></a>Watch 选项 监控数据</h2><p>数据变化的监控经常使用，我们可以先来看一个简单的数据变化监控的例子。例如天气预报的穿衣指数，它主要是根据温度来进行提示的，当然还有其它的，咱们就不考虑了。<br>1、watch 是监听器，可以监听某一个数据，然后执行相应的操作；<br>2、不支持缓存，数据变直接会触发相应的操作；<br>3、监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；<br>4、支持异步操作；<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/watch.html&quot;</span>&gt;watch Option&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 watch.html 文件</p><h3 id="一、看一个监控变化的案例"><a href="#一、看一个监控变化的案例" class="headerlink" title="一、看一个监控变化的案例"></a>一、看一个监控变化的案例</h3><p>温度大于 26 度时，我们建议穿 T 恤短袖，温度小于 26 度大于 0 度时，我们建议穿夹克长裙，温度小于 0 度时我们建议穿棉衣羽绒服。<br>先来模拟一个温度变化的情况：我们使用按钮来加减温度。<br><code>wacth.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;watch option&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;watch option&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;p&gt;今日温度：&#123;&#123;temperature&#125;&#125;°C&lt;/p&gt;<br>      &lt;p&gt;穿衣建议：&#123;&#123;suggestion&#125;&#125;&lt;/p&gt;<br>      &lt;p&gt;<br>        &lt;button @click=<span class="hljs-string">&quot;add&quot;</span>&gt;添加温度&lt;/button&gt;<br>        &lt;button @click=<span class="hljs-string">&quot;reduce&quot;</span>&gt;减少温度&lt;/button&gt;<br>      &lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> suggestion = [<span class="hljs-string">&#x27;T恤短袖&#x27;</span>, <span class="hljs-string">&#x27;夹克长裙&#x27;</span>, <span class="hljs-string">&#x27;棉衣羽绒服&#x27;</span>];<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          temperature: <span class="hljs-number">14</span>,<br>          suggestion: <span class="hljs-string">&#x27;夹克长裙&#x27;</span>,<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.temperature += <span class="hljs-number">5</span>;<br>          &#125;,<br>          reduce: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.temperature -= <span class="hljs-number">5</span>;<br>          &#125;,<br>        &#125;,<br>        watch: &#123;<br>          temperature: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal, oldVal</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (newVla &gt;= <span class="hljs-number">26</span>) &#123;<br>              <span class="hljs-built_in">this</span>.suggestion = suggestion[<span class="hljs-number">0</span>];<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newVal &lt; <span class="hljs-number">26</span> &amp;&amp; newVal &gt; <span class="hljs-number">0</span>) &#123;<br>              <span class="hljs-built_in">this</span>.suggestion = suggestion[<span class="hljs-number">1</span>];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-built_in">this</span>.suggestion = suggestion[<span class="hljs-number">2</span>];<br>            &#125;<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>      <span class="hljs-comment">// app.$watch(&#x27;temprtature&#x27;, function (newVal, oldVal) &#123;</span><br>      <span class="hljs-comment">//   if (newVla &gt;= 26) &#123;</span><br>      <span class="hljs-comment">//     this.suggestion = suggestion[0];</span><br>      <span class="hljs-comment">//   &#125; else if (newVal &lt; 26 &amp;&amp; newVal &gt; 0) &#123;</span><br>      <span class="hljs-comment">//     this.suggestion = suggestion[1];</span><br>      <span class="hljs-comment">//   &#125; else &#123;</span><br>      <span class="hljs-comment">//     this.suggestion = suggestion[2];</span><br>      <span class="hljs-comment">//   &#125;</span><br>      <span class="hljs-comment">// &#125;);</span><br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h3 id="二、用实例属性写-watch-监控"><a href="#二、用实例属性写-watch-监控" class="headerlink" title="二、用实例属性写 watch 监控"></a>二、用实例属性写 watch 监控</h3><p>有些时候我们会用实例属性的形式来写 watch 监控。也就是把我们 watch 卸载构造器的外部，这样的好处就是降低我们程序的耦合度，使程序变的灵活。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.$watch(<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;);<br></code></pre></div></td></tr></table></figure><p>还是上边的案例我们改成实例方法的模式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.$watch(<span class="hljs-string">&#x27;temperature&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal, oldVal</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (newVal &gt;= <span class="hljs-number">26</span>) &#123;<br>    <span class="hljs-built_in">this</span>.suggestion = suggestion[<span class="hljs-number">0</span>];<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newVal &lt; <span class="hljs-number">26</span> &amp;&amp; newVal &gt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">this</span>.suggestion = suggestion[<span class="hljs-number">1</span>];<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">this</span>.suggestion = suggestion[<span class="hljs-number">2</span>];<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>效果和上面是一样的。</p><h2 id="Mixins-混入选项操作"><a href="#Mixins-混入选项操作" class="headerlink" title="Mixins 混入选项操作"></a>Mixins 混入选项操作</h2><p>Mixins 一般有两种用途：</p><ol><li>在你已经写好了构造器后，需要增加方法或者临时的活动时使用的方法，这时用混入会减少源代码的污染。</li><li>很多地方都会用到的公用方法，用混入的方法可以减少代码量，实现代码重用。</li></ol><p>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/mixins.html&quot;</span>&gt;mixins Option&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 mixins.html 文件</p><h3 id="一、Mixins-的基本用法"><a href="#一、Mixins-的基本用法" class="headerlink" title="一、Mixins 的基本用法"></a>一、Mixins 的基本用法</h3><p>我们现在有个数字点击递增的程序，假设已经完成了，这时我们希望每次数据变化时都能够在控制台打印出提示：“数据发生变化”.<br>代码实现过程:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;Mixins Option Demo&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Mixins Option Demo&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;p&gt;num:&#123;&#123; num &#125;&#125;&lt;/p&gt;<br>        &lt;P&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>增加数量<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/P&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-comment">//额外临时加入时，用于显示日志</span><br>        <span class="hljs-keyword">var</span> addLog=&#123;<br>            updated:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;数据放生变化,变化成&quot;</span>+<span class="hljs-built_in">this</span>.num+<span class="hljs-string">&quot;.&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                num:<span class="hljs-number">1</span><br>            &#125;,<br>            methods:&#123;<br>                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-built_in">this</span>.num++;<br>                &#125;<br>            &#125;,<br>            mixins:[addLog]<span class="hljs-comment">//混入</span><br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h3 id="二、mixins-的调用顺序"><a href="#二、mixins-的调用顺序" class="headerlink" title="二、mixins 的调用顺序"></a>二、mixins 的调用顺序</h3><p>从执行的先后顺序来说，都是<strong>混入的先执行</strong>，然后<strong>构造器里的再执行</strong>，需要注意的是，这并不是方法的覆盖，而是被执行了两边。<br>在上边的代码的构造器里我们也加入了 updated 的钩子函数：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">updated:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;构造器里的updated方法。&quot;</span>)<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>这时控制台输出的顺序是：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">mixins数据放生变化,变化成<span class="hljs-number">2.</span><br>构造器里的updated方法。<br></code></pre></div></td></tr></table></figure><p>PS：当混入方法和构造器的方法重名时，混入的方法无法展现，也就是不起作用。</p><h3 id="三、全局-API-混入方式"><a href="#三、全局-API-混入方式" class="headerlink" title="三、全局 API 混入方式"></a>三、全局 API 混入方式</h3><p>我们也可以定义全局的混入，这样在需要这段代码的地方直接引入 js，就可以拥有这个功能了。我们来看一下全局混入的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Vue.mixin(&#123;<br>  updated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是全局被混入的&#x27;</span>);<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>PS：全局混入的执行顺序要前于混入和构造器里的方法。<br><code>mixins.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;mixins Option&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;mixins Option&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &#123;&#123;num&#125;&#125;<br>      &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> addConsole = &#123;<br>        updated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数据发生了变化，变成了&#x27;</span> + <span class="hljs-built_in">this</span>.num);<br>        &#125;,<br>      &#125;;<br>      Vue.mixin(&#123;<br>        <span class="hljs-function"><span class="hljs-title">updated</span>(<span class="hljs-params"></span>)</span> &#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是全局的混入&#x27;</span>);<br>        &#125;,<br>      &#125;);<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          num: <span class="hljs-number">1</span>,<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.num++;<br>          &#125;,<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">updated</span>(<span class="hljs-params"></span>)</span> &#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是原生的updata&#x27;</span>);<br>        &#125;,<br>        mixins: [addConsole],<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h2 id="Extends-Option-扩展选项"><a href="#Extends-Option-扩展选项" class="headerlink" title="Extends Option 扩展选项"></a>Extends Option 扩展选项</h2><p>通过外部增加对象的形式，对构造器进行扩展，和混入非常的类似。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/extends.html&quot;</span>&gt;<span class="hljs-keyword">extends</span> Option&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 extends.html 文件</p><h3 id="一、extends-我们来看一个扩展的实例。"><a href="#一、extends-我们来看一个扩展的实例。" class="headerlink" title="一、extends 我们来看一个扩展的实例。"></a>一、extends 我们来看一个扩展的实例。</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;Extends Optin Demo&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Extends Optin Demo&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>        &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> bbb=&#123;<br>            created:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我是被扩展出来的&quot;</span>);<br>            &#125;,<br>            methods:&#123;<br>                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是被扩展出来的方法！&#x27;</span>);<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&#x27;hello Vue!&#x27;</span><br>            &#125;,<br>            methods:&#123;<br>                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是原生方法&#x27;</span>);<br>                &#125;<br>            &#125;,<br>            <span class="hljs-keyword">extends</span>:bbb<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h3 id="二、delimiters-选项"><a href="#二、delimiters-选项" class="headerlink" title="二、delimiters 选项"></a>二、delimiters 选项</h3><p>delimiters 的作用是改变我们插值的符号。Vue 默认的插值是双大括号<code>&#123;&#123; &#125;&#125;</code>。但有时我们会有需求更改这个插值的形式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">delimiters: [<span class="hljs-string">&#x27;$&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>];<br></code></pre></div></td></tr></table></figure><p>现在我们的插值形式就变成了<code>$&#123;&#125;</code>。</p><h1 id="实例和内置组件"><a href="#实例和内置组件" class="headerlink" title="实例和内置组件"></a>实例和内置组件</h1><p>实例就是在构造器外部操作构造器内部的属性选项或者方法，就叫做实例？实例的作用就是给原生的或者其他 javascript 框架一个融合的接口或者说是机会，让 Vue 和其他框架一起使用。</p><h2 id="实例入门-实例属性"><a href="#实例入门-实例属性" class="headerlink" title="实例入门-实例属性"></a>实例入门-实例属性</h2><h3 id="一、Vue-和-Jquery-js-一起使用"><a href="#一、Vue-和-Jquery-js-一起使用" class="headerlink" title="一、Vue 和 Jquery.js 一起使用"></a>一、Vue 和 Jquery.js 一起使用</h3><p>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/example01.html&quot;</span>&gt;example methods&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 example01.html 文件</p><h4 id="1、下载并引入-jquery-框架"><a href="#1、下载并引入-jquery-框架" class="headerlink" title="1、下载并引入 jquery 框架"></a>1、下载并引入 jquery 框架</h4><p>下载可以去官网进行下载，我这里使用的版本是 3.1.1，下载好后在需要的页面引入就可以了。当然你还有很多其它的方法引入 jquery，只要可以顺利引入就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script &lt; type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>试着作一个案例，在 DOM 被挂载后修改里边的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;Early Examples Demo&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Early Examples Demo&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&#x27;hello Vue!&#x27;</span><br>            &#125;,<br>            <span class="hljs-comment">//在Vue中使用jQuery</span><br>            mounted:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                $(<span class="hljs-string">&#x27;#app&#x27;</span>).html(<span class="hljs-string">&#x27;我是jQuery!&#x27;</span>);<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>现在页面显示是：我是 jQuery，而不是 hello Vue 了。</p><h3 id="二、实例调用自定义方法"><a href="#二、实例调用自定义方法" class="headerlink" title="二、实例调用自定义方法"></a>二、实例调用自定义方法</h3><p>在 Vue 的构造器里我们写一个 add 方法，然后我们用实例的方法调用它。<br>构造器里的 add 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">methods:&#123;<br>    add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;调用了Add方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>实例调用：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.add();<br></code></pre></div></td></tr></table></figure><p>PS：我们有可能把 app.add()的括号忘记或省略，这时候我们得到的就是方法的字符串，但是并没有执行，所以必须要加上括号。<br>作业：利用 console.log 把 app 打印出来，看看里边到底包含了哪些属性和方法。因为里边的属性很多，这里只是简单的介绍。<br><code>example01.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;example methods Demo&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;example methods Demo&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          message: <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>          $(<span class="hljs-string">&#x27;#app&#x27;</span>).html(<span class="hljs-string">&#x27;我是jQuery&#x27;</span>);<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;调用了构造器内部的ADD方法&#x27;</span>);<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>      app.add();<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/example02.html&quot;</span>&gt;example02 methods&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 example02.html 文件</p><h3 id="一、-mount-方法"><a href="#一、-mount-方法" class="headerlink" title="一、$mount 方法"></a>一、$mount 方法</h3><p>$mount方法是用来挂载我们的扩展的，我们先来复习一下扩展的写法。<br>这里我们作了jspang的扩展，然后用$mount 的方法把 jspang 挂载到 DOM 上，我们也生成了一个 Vue 的实例，直接看代码。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;Examples Method Demo&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Examples Method Demo&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> jspang = Vue.extend(&#123;<br>          template:<span class="hljs-string">`&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;`</span>,<br>          data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>              <span class="hljs-keyword">return</span> &#123;<br>                  message:<span class="hljs-string">&#x27;Hello ,I am JSPang&#x27;</span><br>              &#125;<br>          &#125;<br>      &#125;)<br>      <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> jspang().$mount(<span class="hljs-string">&quot;#app&quot;</span>)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h3 id="二、-destroy-卸载方法"><a href="#二、-destroy-卸载方法" class="headerlink" title="二、$destroy() 卸载方法"></a>二、$destroy() 卸载方法</h3><p>用$destroy()进行卸载。<br>我写了一个 button 按钮，点击后卸载整个挂载。<br>html：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>  &lt;button onclick=<span class="hljs-string">&quot;destroy()&quot;</span>&gt;卸载&lt;/button&gt;<br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span>(<span class="hljs-params"></span>) </span>&#123;<br>  vm.$destroy();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>PS:$destroy()后边必须要有括号，没有括号是无用的。<br>​</p><h3 id="三、-forceUpdate-更新方法"><a href="#三、-forceUpdate-更新方法" class="headerlink" title="三、$forceUpdate() 更新方法"></a>三、$forceUpdate() 更新方法</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vm.$forceUpdate();<br></code></pre></div></td></tr></table></figure><h3 id="四、-nextTick-数据修改方法"><a href="#四、-nextTick-数据修改方法" class="headerlink" title="四、$nextTick() 数据修改方法"></a>四、$nextTick() 数据修改方法</h3><p>当 Vue 构造器里的 data 值被修改完成后会调用这个方法，也相当于一个钩子函数吧，和构造器里的 updated 生命周期很像。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tick</span>(<span class="hljs-params"></span>) </span>&#123;<br>  vm.message = <span class="hljs-string">&#x27;update message info &#x27;</span>;<br>  vm.$nextTick(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;message更新完后我被调用了&#x27;</span>);<br>  &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="安装-Vue-的控制台调试工具。"><a href="#安装-Vue-的控制台调试工具。" class="headerlink" title="安装 Vue 的控制台调试工具。"></a>安装 Vue 的控制台调试工具。</h3><p>每个人的安装方法不同。</p><h2 id="实例事件"><a href="#实例事件" class="headerlink" title="实例事件"></a>实例事件</h2><p>实例事件就是在构造器外部写一个调用构造器内部的方法。这样写的好处是可以通过这种写法在构造器外部调用构造器内部的数据。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/example03.html&quot;</span>&gt;example03 methods&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 example03.html 文件<br>我们还是写一个点击按钮，持续加 1 的例子。</p><h3 id="一、-on-在构造器外部添加事件。"><a href="#一、-on-在构造器外部添加事件。" class="headerlink" title="一、$on 在构造器外部添加事件。"></a>一、$on 在构造器外部添加事件。</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.$on(<span class="hljs-string">&#x27;reduce&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;执行了reduce()&#x27;</span>);<br>  <span class="hljs-built_in">this</span>.num--;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>$on接收两个参数，第一个参数是调用时的事件名称，第二个参数是一个匿名方法。<br>如果按钮在作用域外部，可以利用$emit 来执行。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//外部调用内部事件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduce</span>(<span class="hljs-params"></span>) </span>&#123;<br>  app.$emit(<span class="hljs-string">&#x27;reduce&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="二、-once-执行一次的事件"><a href="#二、-once-执行一次的事件" class="headerlink" title="二、$once 执行一次的事件"></a>二、$once 执行一次的事件</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.$once(<span class="hljs-string">&#x27;reduceOnce&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;只执行一次的方法&#x27;</span>);<br>  <span class="hljs-built_in">this</span>.num--;<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="三、-off-关闭事件"><a href="#三、-off-关闭事件" class="headerlink" title="三、$off 关闭事件"></a>三、$off 关闭事件</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//关闭事件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">off</span>(<span class="hljs-params"></span>) </span>&#123;<br>  app.$off(<span class="hljs-string">&#x27;reduce&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>example03.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;example03 methods Demo&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;example03 methods Demo&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &#123;&#123;num&#125;&#125;<br>      &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;reduce()&quot;</span>&gt;</span>reduce<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;reduceOnce()&quot;</span>&gt;</span>reduceOnce<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;off()&quot;</span>&gt;</span>off<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          num: <span class="hljs-number">1</span>,<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.num++;<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>      app.$on(<span class="hljs-string">&#x27;reduce&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;执行了reduce方法&#x27;</span>);<br>        <span class="hljs-built_in">this</span>.num--;<br>      &#125;);<br>      app.$once(<span class="hljs-string">&#x27;reduceOnce&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;只执行一次的方法&#x27;</span>);<br>        <span class="hljs-built_in">this</span>.num--;<br>      &#125;);<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduce</span>(<span class="hljs-params"></span>) </span>&#123;<br>        app.$emit(<span class="hljs-string">&#x27;reduce&#x27;</span>);<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduceOnce</span>(<span class="hljs-params"></span>) </span>&#123;<br>        app.$emit(<span class="hljs-string">&#x27;reduceOnce&#x27;</span>);<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">off</span>(<span class="hljs-params"></span>) </span>&#123;<br>        app.$emit(<span class="hljs-string">&#x27;reduce&#x27;</span>);<br>      &#125;<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="内置组件-slot-讲解"><a href="#内置组件-slot-讲解" class="headerlink" title="内置组件 -slot 讲解"></a>内置组件 -slot 讲解</h2><p>slot 是标签的内容扩展，也就是说你用 slot 就可以在自定义组件时传递给组件内容，组件接收内容并输出。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/slot.html&quot;</span>&gt;slot&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 slot.html 文件<br>先来定义一个的组件，这个组件用来显示博主的一些信息。<br>我们在 Vue 构造器里的 data 中给出了信息，信息如下：（博客地址，网名，使用技能）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">data:&#123;<br>    jspangData:&#123;<br>        bolgUrl:<span class="hljs-string">&#x27;http://jspang.com&#x27;</span>,<br>        netName:<span class="hljs-string">&#x27;技术胖&#x27;</span>,<br>        skill:<span class="hljs-string">&#x27;Web前端&#x27;</span><br>    &#125;<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>我们用<template></template>标签的方式定义了组件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template id=<span class="hljs-string">&quot;tmp&quot;</span>&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;博客地址：&lt;/p&gt;<br>    &lt;p&gt;网名：&lt;/p&gt;<br>    &lt;p&gt;技术类型：&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></div></td></tr></table></figure><p>我们现在就可以用 slot 功能让组件接收传递过来的值，并在模板中接收显示。</p><h3 id="slot-的使用需要两步："><a href="#slot-的使用需要两步：" class="headerlink" title="slot 的使用需要两步："></a>slot 的使用需要两步：</h3><h4 id="1、在-HTML-的组件中用-slot-属性传递值。"><a href="#1、在-HTML-的组件中用-slot-属性传递值。" class="headerlink" title="1、在 HTML 的组件中用 slot 属性传递值。"></a>1、在 HTML 的组件中用 slot 属性传递值。</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;jspang&gt;<br>    &lt;span slot=<span class="hljs-string">&quot;bolgUrl&quot;</span>&gt;&#123;&#123;jspangData.bolgUrl&#125;&#125;&lt;/span&gt;<br>    &lt;span slot=<span class="hljs-string">&quot;netName&quot;</span>&gt;&#123;&#123;jspangData.netName&#125;&#125;&lt;/span&gt;<br>    &lt;span slot=<span class="hljs-string">&quot;skill&quot;</span>&gt;&#123;&#123;jspangData.skill&#125;&#125;&lt;/span&gt;<br>&lt;/jspang&gt;<br></code></pre></div></td></tr></table></figure><h4 id="2、在组件模板中用标签接收值。"><a href="#2、在组件模板中用标签接收值。" class="headerlink" title="2、在组件模板中用标签接收值。"></a>2、在组件模板中用标签接收值。</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template id=<span class="hljs-string">&quot;tmp&quot;</span>&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;<br>      博客地址：&lt;slot name=<span class="hljs-string">&quot;bolgUrl&quot;</span>&gt;&lt;/slot&gt;<br>    &lt;/p&gt;<br>    &lt;p&gt;<br>      网名：&lt;slot name=<span class="hljs-string">&quot;netName&quot;</span>&gt;&lt;/slot&gt;<br>    &lt;/p&gt;<br>    &lt;p&gt;<br>      技术类型：&lt;slot name=<span class="hljs-string">&quot;skill&quot;</span>&gt;&lt;/slot&gt;<br>    &lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></div></td></tr></table></figure><p><code>slot.html</code></p><figure class="highlight handlebars"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Slot content extend Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Slot content extend Demo<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">jsp</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;blogUrl&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">jspData.blogUrl</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;netName&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">jspData.netName</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;skill&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">jspData.skill</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">jsp</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tep&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">          博客地址：</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;blogUrl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">          网名：</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;netName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">          技术类型：</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;skill&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="xml">      var jsp = &#123;</span><br><span class="xml">        template: &#x27;#tep&#x27;,</span><br><span class="xml">      &#125;;</span><br><span class="xml">      var app = new Vue(&#123;</span><br><span class="xml">        el: &#x27;#app&#x27;,</span><br><span class="xml">        data: &#123;</span><br><span class="xml">          jspData: &#123; blogUrl: &#x27;http://jspang.com&#x27;, netName: &#x27;jsp&#x27;, skill: &#x27;web前端&#x27; &#125;,</span><br><span class="xml">        &#125;,</span><br><span class="xml">        components: &#123;</span><br><span class="xml">          jsp: jsp,</span><br><span class="xml">        &#125;,</span><br><span class="xml">      &#125;);</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue2.0</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪吃蛇项目笔记</title>
    <link href="/2021/06/07/%E8%B4%AA%E5%90%83%E8%9B%87%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/06/07/%E8%B4%AA%E5%90%83%E8%9B%87%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="初始配置文件"><a href="#初始配置文件" class="headerlink" title="初始配置文件"></a>初始配置文件</h2><p>在根目录下，添加初始配置文件<strong>package.json，tsconfig.json，webpack.config.js</strong><br><strong>package.json</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;part3&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br>    <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;webpack serve --open chrome.exe&quot;</span>,<br>    <span class="hljs-attr">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack --mode development&quot;</span>,<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --mode production&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;keywords&quot;</span>: [],<br>  <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>,<br>  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;clean-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^4.0.0-alpha.0&quot;</span>,<br>    <span class="hljs-attr">&quot;html-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^5.3.1&quot;</span>,<br>    <span class="hljs-attr">&quot;ts-loader&quot;</span>: <span class="hljs-string">&quot;^9.2.2&quot;</span>,<br>    <span class="hljs-attr">&quot;typescript&quot;</span>: <span class="hljs-string">&quot;^4.3.2&quot;</span>,<br>    <span class="hljs-attr">&quot;webpack&quot;</span>: <span class="hljs-string">&quot;^5.38.1&quot;</span>,<br>    <span class="hljs-attr">&quot;webpack-cli&quot;</span>: <span class="hljs-string">&quot;^4.7.0&quot;</span>,<br>    <span class="hljs-attr">&quot;webpack-dev-server&quot;</span>: <span class="hljs-string">&quot;^3.11.2&quot;</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>tsconfig.json</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>    <span class="hljs-attr">&quot;module&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>    <span class="hljs-attr">&quot;strict&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;noEmitOnError&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>webpack.config.js</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">const path = require(&#x27;path&#x27;)<br><span class="hljs-comment">// 引入html插件</span><br>const HTMLWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)<br><span class="hljs-comment">// 引入clean插件</span><br>const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;)<br><br><span class="hljs-comment">// webpack中的所有的配置信息都应该写在module.exports中</span><br>module.exports = &#123;<br>  <span class="hljs-comment">// 指定入口文件</span><br>  entry: &#x27;./src/index.ts&#x27;,<br>  <span class="hljs-comment">// 指定打包文件所在目录</span><br>  output: &#123;<br>    <span class="hljs-comment">// 指定打包文件的目录</span><br>    path: path.resolve(__dirname, &#x27;dist&#x27;),<br>    <span class="hljs-comment">// 打包后文件的文件</span><br>    filename: &#x27;bundle.js&#x27;,<br><br>    <span class="hljs-comment">// 告诉webpack不使用箭头</span><br>    <span class="hljs-comment">// 默认打包后是一个立即执行的箭头函数，在IE 11中也是无法执行的！</span><br>    <span class="hljs-comment">// 加上下面的配置，可以在webpack打包时，最外层不再是箭头函数</span><br>    <span class="hljs-comment">// webpack新版本已经不想兼容IE了！233</span><br>    environment: &#123;<br>      arrowFunction: <span class="hljs-literal">false</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-comment">// 指定webpack打包时要使用模块</span><br>  module: &#123;<br>    <span class="hljs-comment">// 指定要加载的规则</span><br>    rules: [<br>      &#123;<br>        <span class="hljs-comment">// test指定的是规则生效的文件</span><br>        test: /\.ts$/,<br>        <span class="hljs-comment">// 要使用的loader</span><br>        <span class="hljs-comment">// Webpack在加载时是&quot;从后向前&quot;加载！</span><br>        use: [<br>          <span class="hljs-comment">// 配置babel</span><br>          &#123;<br>            <span class="hljs-comment">// 指定加载器</span><br>            loader: &#x27;babel-loader&#x27;,<br>            <span class="hljs-comment">// 设置babel</span><br>            options: &#123;<br>              <span class="hljs-comment">// 设置预定义的环境</span><br>              presets: [<br>                [<br>                  <span class="hljs-comment">// 指定环境的插件</span><br>                  &#x27;@babel/preset-env&#x27;,<br>                  <span class="hljs-comment">// 配置信息</span><br>                  &#123;<br>                    <span class="hljs-comment">// 要兼容的目标浏览器</span><br>                    targets: &#123;<br>                      chrome: &#x27;<span class="hljs-number">58</span>&#x27;,<br>                      ie: &#x27;<span class="hljs-number">11</span>&#x27;,<br>                    &#125;,<br>                    <span class="hljs-comment">// 指定corejs的版本</span><br>                    <span class="hljs-comment">// package.json中的版本为3.8.1</span><br>                    corejs: &#x27;<span class="hljs-number">3</span>&#x27;,<br>                    <span class="hljs-comment">// 使用corejs的方式，&quot;usage&quot; 表示按需加载</span><br>                    useBuiltIns: &#x27;usage&#x27;,<br>                  &#125;,<br>                ],<br>              ],<br>            &#125;,<br>          &#125;,<br>          &#x27;ts-loader&#x27;,<br>        ],<br>        <span class="hljs-comment">// 要排除的文件</span><br>        exclude: /node-modules/,<br>      &#125;,<br>    ],<br>  &#125;,<br><br>  <span class="hljs-comment">// 配置Webpack插件</span><br>  plugins: [<br>    new CleanWebpackPlugin(),<br>    new HTMLWebpackPlugin(&#123;<br>      <span class="hljs-comment">// title: &quot;这是一个自定义的title&quot;</span><br>      template: &#x27;./src/index.html&#x27;,<br>    &#125;),<br>  ],<br>  <span class="hljs-comment">// 用来设置引用模块</span><br>  resolve: &#123;<br>    extensions: [&#x27;.ts&#x27;, &#x27;.js&#x27;],<br>  &#125;,<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="安装-node-modules-依赖"><a href="#安装-node-modules-依赖" class="headerlink" title="安装 node_modules 依赖"></a>安装 node_modules 依赖</h3><p><code>npm i</code><br>​</p><h3 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a>更新依赖</h3><p><code>npm install -D babel-loader @babel/core @babel/preset-env webpack </code></p><p>在根目录新建 src 文件夹，src 下新建 index.html 文件和 index.ts 文件<br><strong>index.html</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;贪吃蛇&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h3 id="打包运行项目"><a href="#打包运行项目" class="headerlink" title="打包运行项目"></a>打包运行项目</h3><p><code>npm run build</code></p><h3 id="安装-less-依赖"><a href="#安装-less-依赖" class="headerlink" title="安装 less 依赖"></a>安装 less 依赖</h3><p><code>npm i -D less less-loader css-loader style-loader</code></p><h4 id="配置-less-文件"><a href="#配置-less-文件" class="headerlink" title="配置 less 文件"></a>配置 less 文件</h4><p>在 webpack.config.js 中设置 less 文件的处理</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">...<br><br><span class="hljs-comment">// 指定webpack打包时要使用模块</span><br>  module: &#123;<br>    <span class="hljs-comment">// 指定要加载的规则</span><br>    rules: [<br>      &#123;<br>        <span class="hljs-comment">// test指定的是规则生效的文件</span><br>        test: /\.ts$/,<br>        <span class="hljs-comment">// 要使用的loader</span><br>        <span class="hljs-comment">// Webpack在加载时是&quot;从后向前&quot;加载！</span><br>        use: [<br>          <span class="hljs-comment">// 配置babel</span><br>          &#123;<br>            <span class="hljs-comment">// 指定加载器</span><br>            loader: &#x27;babel-loader&#x27;,<br>            <span class="hljs-comment">// 设置babel</span><br>            options: &#123;<br>              <span class="hljs-comment">// 设置预定义的环境</span><br>              presets: [<br>                [<br>                  <span class="hljs-comment">// 指定环境的插件</span><br>                  &#x27;@babel/preset-env&#x27;,<br>                  <span class="hljs-comment">// 配置信息</span><br>                  &#123;<br>                    <span class="hljs-comment">// 要兼容的目标浏览器</span><br>                    targets: &#123;<br>                      chrome: &#x27;<span class="hljs-number">58</span>&#x27;,<br>                      ie: &#x27;<span class="hljs-number">11</span>&#x27;,<br>                    &#125;,<br>                    <span class="hljs-comment">// 指定corejs的版本</span><br>                    <span class="hljs-comment">// package.json中的版本为3.8.1</span><br>                    corejs: &#x27;<span class="hljs-number">3</span>&#x27;,<br>                    <span class="hljs-comment">// 使用corejs的方式，&quot;usage&quot; 表示按需加载</span><br>                    useBuiltIns: &#x27;usage&#x27;,<br>                  &#125;,<br>                ],<br>              ],<br>            &#125;,<br>          &#125;,<br>          &#x27;ts-loader&#x27;,<br>        ],<br>        <span class="hljs-comment">// 要排除的文件</span><br>        exclude: /node-modules/,<br>      &#125;,<br>      <span class="hljs-comment">//设置less文件的处理</span><br>      &#123;<br>        test: /\.less$/,<br>        use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;, &#x27;less-loader&#x27;],<br>      &#125;,<br>    ],<br>  &#125;,<br>...<br></code></pre></div></td></tr></table></figure><p>其中关键代码，use 中的文件执行先后顺序是从后往前执行</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">//设置less文件的处理</span><br>&#123;<br>  test: /\.less$/,<br>  use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;, &#x27;less-loader&#x27;],<br>&#125;,<br></code></pre></div></td></tr></table></figure><h4 id="测试-less-文件"><a href="#测试-less-文件" class="headerlink" title="测试 less 文件"></a>测试 less 文件</h4><p>在 src 文件夹下新建 style 文件，并在其中新建 index.less 文件<br>简单设置样式</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">body &#123;<br>  background-color: aquamarine;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在 src\index.ts 中引入样式文件</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import &#x27;./style/index.less&#x27;<br>console.log(<span class="hljs-number">123</span>)<br><br></code></pre></div></td></tr></table></figure><p>先<code>npm run duild</code>在打包生成的 dist 文件夹中，点击 ndex.html 文件进行运行，网页有样式生效，则说明 less 文件运行成功<br>​</p><h3 id="安装-css-兼容插件"><a href="#安装-css-兼容插件" class="headerlink" title="安装 css 兼容插件"></a>安装 css 兼容插件</h3><p><code>npm i -D postcss postcss-loader postcss-preset-env</code><br>​</p><h4 id="配置-postcss"><a href="#配置-postcss" class="headerlink" title="配置 postcss"></a>配置 postcss</h4><p>在 webpack.config.js 添加 postcss 配置</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">...<br>use: [<br>              <span class="hljs-string">&quot;style-loader&quot;</span>,<br>              <span class="hljs-string">&quot;css-loader&quot;</span>,<br><br>              <span class="hljs-comment">// 引入postcss</span><br>              <span class="hljs-comment">// 类似于babel，把css语法转换兼容旧版浏览器的语法</span><br>              &#123;<br>                  loader: <span class="hljs-string">&quot;postcss-loader&quot;</span>,<br>                  options: &#123;<br>                      postcssOptions: &#123;<br>                          plugins: [<br>                              [<br>                                  <span class="hljs-comment">// 浏览器兼容插件</span><br>                                  <span class="hljs-string">&quot;postcss-preset-env&quot;</span>,<br>                                  &#123;<br>                                      <span class="hljs-comment">// 每个浏览器最新两个版本</span><br>                                      browsers: &#x27;last <span class="hljs-number">2</span> versions&#x27;<br>                                  &#125;<br>                              ]<br>                          ]<br>                      &#125;<br>                  &#125;<br>              &#125;,<br>              <span class="hljs-string">&quot;less-loader&quot;</span><br>          ]<br>...<br></code></pre></div></td></tr></table></figure><h4 id="测试-css-兼容"><a href="#测试-css-兼容" class="headerlink" title="测试 css 兼容"></a>测试 css 兼容</h4><p>在 src\style\index.less 中添加<code>display: flex;</code>布局</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">body &#123;<br>  background-color: aquamarine;<br>  display: flex;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>先<code>npm run duild</code>，在在打包的文件夹 dist 中找到 bundle.js，查看<code>display</code>属性值是否添加了前缀，有则 css 兼容成功<br>​</p><h1 id="项目界面"><a href="#项目界面" class="headerlink" title="项目界面"></a>项目界面</h1><p><strong>每次调试都要进入进入开发环境</strong><br><code>npm start</code><br>​<br>​## 基本页面</p><p>在 src\index.html 中</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;贪吃蛇&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;!-- 创建游戏主容器 --&gt;<br>    &lt;div id=<span class="hljs-string">&quot;main&quot;</span>&gt;<br>      &lt;!-- 设置游戏舞台 --&gt;<br>      &lt;div id=<span class="hljs-string">&quot;stage&quot;</span>&gt;<br>        &lt;!-- 设置蛇 --&gt;<br>        &lt;div id=<span class="hljs-string">&quot;snake&quot;</span>&gt;<br>          &lt;!-- snake内部的div 表示蛇的各部分 --&gt;<br>          &lt;div&gt;&lt;/div&gt;<br>        &lt;/div&gt;<br>        &lt;!-- 设置食物 --&gt;<br>        &lt;div id=<span class="hljs-string">&quot;food&quot;</span>&gt;<br>          &lt;!-- 添加是个小div，设置食物样式 --&gt;<br>          &lt;div&gt;&lt;/div&gt;<br>          &lt;div&gt;&lt;/div&gt;<br>          &lt;div&gt;&lt;/div&gt;<br>          &lt;div&gt;&lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br><br>      &lt;!-- 游戏积分牌 --&gt;<br>      &lt;div id=<span class="hljs-string">&quot;score-panel&quot;</span>&gt;<br>        &lt;div&gt;<br>          SCORE:<br>          &lt;span id=<span class="hljs-string">&quot;score&quot;</span>&gt;<span class="hljs-number">0</span>&lt;/span&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>          level:<br>          &lt;span id=<span class="hljs-string">&quot;level&quot;</span>&gt;<span class="hljs-number">1</span>&lt;/span&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="基本样式"><a href="#基本样式" class="headerlink" title="基本样式"></a>基本样式</h2><p>在 src\style\index.less 中</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// 设置变量</span><br>@bg-color: #b7d4a8;<br><br><span class="hljs-comment">// 清除默认样式</span><br>* &#123;<br>  margin: <span class="hljs-number">0</span>;<br>  padding: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 改变盒子模型的计算方式</span><br>  box-sizing: border-box;<br>&#125;<br><br>body &#123;<br>  font: bold <span class="hljs-number">20</span>px &#x27;Courier&#x27;;<br>&#125;<br><br><span class="hljs-comment">//设置主窗口的样式</span><br>#main &#123;<br>  width: <span class="hljs-number">360</span>px;<br>  height: <span class="hljs-number">420</span>px;<br>  <span class="hljs-comment">//设置背景</span><br>  background-color: @bg-color;<br>  <span class="hljs-comment">//设置居中</span><br>  margin: <span class="hljs-number">100</span>px auto;<br>  border: <span class="hljs-number">10</span>px solid black;<br>  <span class="hljs-comment">//设置圆角</span><br>  border-radius: <span class="hljs-number">40</span>px;<br>  <span class="hljs-comment">// 开启弹性盒模型</span><br>  display: flex;<br>  <span class="hljs-comment">//设置主轴方向</span><br>  flex-flow: column;<br>  <span class="hljs-comment">//设置侧轴对齐方式</span><br>  align-items: center;<br>  <span class="hljs-comment">// 设置主轴对齐方式</span><br>  justify-content: space-around;<br>  <span class="hljs-comment">//游戏舞台</span><br>  #stage &#123;<br>    width: <span class="hljs-number">304</span>px;<br>    height: <span class="hljs-number">304</span>px;<br>    border: <span class="hljs-number">2</span>px solid black;<br>    position: relative;<br>    <span class="hljs-comment">// 开启相对定位</span><br>    position: relative;<br><br>    <span class="hljs-comment">//设置蛇的样式</span><br>    #snake &#123;<br>      &amp; &gt; div &#123;<br>        width: <span class="hljs-number">10</span>px;<br>        height: <span class="hljs-number">10</span>px;<br>        background-color: #<span class="hljs-number">000</span>;<br>        border: <span class="hljs-number">1</span>px solid @bg-color;<br>        <span class="hljs-comment">// 开启绝对定位</span><br>        position: absolute;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 设置食物</span><br>    #food &#123;<br>      width: <span class="hljs-number">10</span>px;<br>      height: <span class="hljs-number">10</span>px;<br>      <span class="hljs-comment">// 开启绝对定位</span><br>      position: absolute;<br>      <span class="hljs-comment">// 开启弹性盒模型</span><br>      display: flex;<br>      <span class="hljs-comment">// 设置横轴位主轴，wrap表示会自动换行</span><br>      flex-flow: row wrap;<br>      <span class="hljs-comment">// 设置主轴和侧轴的空白空间分配到元素之间</span><br>      justify-content: space-between;<br>      align-content: space-between;<br><br>      left: <span class="hljs-number">40</span>px;<br>      top: <span class="hljs-number">100</span>px;<br>      <span class="hljs-comment">// transform: rotate(45deg);</span><br><br>      &amp; &gt; div &#123;<br>        width: <span class="hljs-number">4</span>px;<br>        height: <span class="hljs-number">4</span>px;<br>        background-color: black;<br>        <span class="hljs-comment">//使div旋转45度</span><br>        transform: rotate(<span class="hljs-number">45</span>deg);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 记分牌</span><br>  #score-panel &#123;<br>    width: <span class="hljs-number">300</span>px;<br>    display: flex;<br>    <span class="hljs-comment">//设置主轴对齐方式</span><br>    justify-content: space-between;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="IE-兼容"><a href="#IE-兼容" class="headerlink" title="IE 兼容"></a>IE 兼容</h2><p>IE 自己都已经放弃了！！！<br>​</p><p>在 webpack.config.js 中，IE10 不兼容箭头函数写法，给<code>environment</code>添加<code>const: false,</code><br>IE9 不兼容<code>flex</code>布局，IE10 一下可以用其他方式布局，</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">environment: &#123;<br>  arrowFunction: <span class="hljs-literal">false</span>,<br>  const: <span class="hljs-literal">false</span>,<br>&#125;,<br></code></pre></div></td></tr></table></figure><h1 id="逻辑功能"><a href="#逻辑功能" class="headerlink" title="逻辑功能"></a>逻辑功能</h1><h2 id="Food-类"><a href="#Food-类" class="headerlink" title="Food 类"></a>Food 类</h2><p>在 src\index.ts 中，添加食物类。先获取 food 元素，定义食物的 X、Y 坐标，并生成符合规定的随机坐标</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import &#x27;./style/index.less&#x27;<br><br><span class="hljs-comment">//定义食物类</span><br>class Food &#123;<br>  <span class="hljs-comment">// 定义一个属性表示食物所对应的元素</span><br>  private element: HTMLElement<br><br>  constructor() &#123;<br>    <span class="hljs-comment">// 获取页面中的food元素并将其赋值给element</span><br>    <span class="hljs-comment">// 末尾加上叹号，表示id为food的元素必定存在（非空）</span><br>    this.element = document.getElementById(&#x27;food&#x27;)!<br>  &#125;<br><br>  <span class="hljs-comment">// 定义一个获取食物X轴坐标的方法</span><br>  get X() &#123;<br>    return this.element.offsetLeft<br>  &#125;<br><br>  <span class="hljs-comment">// 定义一个获取食物Y轴坐标的方法</span><br>  get Y() &#123;<br>    return this.element.offsetTop<br>  &#125;<br><br>  <span class="hljs-comment">// 修改食物的位置</span><br>  change() &#123;<br>    <span class="hljs-comment">// 生成一个随机的位置</span><br>    <span class="hljs-comment">// 食物的位置最小，最大290，并且是整数10</span><br>    <span class="hljs-comment">// 蛇移动一次就是一格，一格的大小就是10，所以就要求食物的坐标必须是整10</span><br>    let left = Math.round(Math.random() * 29) * 10<br>    let top = Math.round(Math.random() * 29) * 10<br><br>    this.element.style.left = left + &#x27;px&#x27;<br>    this.element.style.top = top + &#x27;px&#x27;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试代码</span><br><span class="hljs-comment">// const food =  new Food();</span><br><span class="hljs-comment">// console.log(food.X, food.Y);</span><br><span class="hljs-comment">// food.change();</span><br><span class="hljs-comment">// console.log(food.X, food.Y);</span><br><br></code></pre></div></td></tr></table></figure><h2 id="ScorePanel-类"><a href="#ScorePanel-类" class="headerlink" title="ScorePanel 类"></a>ScorePanel 类</h2><p>在 src\moduls 中新建 ScorePanel.ts 文件，添加记分牌类</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// 定义记分牌的类</span><br>class ScorePanel &#123;<br>  <span class="hljs-comment">//score 和level用来记录分数和等级</span><br>  score = 0<br>  level = 1<br>  <span class="hljs-comment">// 分数和等级所在的元素，在构造函数中进行初始化</span><br>  scoreEle: HTMLElement<br>  levelEle: HTMLElement<br><br>  <span class="hljs-comment">//设置一个变量限制等级</span><br>  maxLevel: number<br>  <span class="hljs-comment">//设置一个变量表示多少分时升级</span><br>  upScore: number<br><br>  constructor(maxLevel: number = <span class="hljs-number">10</span>, upScore: number = <span class="hljs-number">10</span>) &#123;<br>    this.scoreEle = document.getElementById(&#x27;score&#x27;)!<br>    this.levelEle = document.getElementById(&#x27;level&#x27;)!<br>    this.maxLevel = maxLevel<br>    this.upScore = upScore<br>  &#125;<br><br>  <span class="hljs-comment">//设置一个加分的方法</span><br>  addScore() &#123;<br>    this.scoreEle.innerHTML = ++this.score + &#x27;&#x27;<br>    <span class="hljs-comment">//判断分数达到时升级</span><br>    if (this.score % this.upScore === 0) &#123;<br>      this.levelUp()<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//提升等级的方法</span><br>  levelUp() &#123;<br>    if (this.level &lt; this.maxLevel) &#123;<br>      this.levelEle.innerHTML = ++this.level + &#x27;&#x27;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 测试代码</span><br><span class="hljs-comment">// const scorePanel = new ScorePanel(200, 2)</span><br><span class="hljs-comment">// for (let i = 0; i &lt; 200; i++) &#123;</span><br><span class="hljs-comment">//   scorePanel.addScore()</span><br><span class="hljs-comment">// &#125;</span><br><br>export default ScorePanel<br><br></code></pre></div></td></tr></table></figure><p>在 src\index.ts 中调用 ScorePanel 类</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import &#x27;./style/index.less&#x27;<br><br>import Food from &#x27;./moduls/Food&#x27;<br>import ScorePanel from &#x27;./moduls/ScorePanel&#x27;<br><br>const food = new Food()<br>console.log(food.X, food.Y)<br>food.change()<br>console.log(food.X, food.Y)<br><br>const scorePanel = new ScorePanel(<span class="hljs-number">200</span>, <span class="hljs-number">2</span>)<br>for (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>  scorePanel.addScore()<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="Snake-类"><a href="#Snake-类" class="headerlink" title="Snake 类"></a>Snake 类</h2><h3 id="初步添加-Snake-类"><a href="#初步添加-Snake-类" class="headerlink" title="初步添加 Snake 类"></a>初步添加 Snake 类</h3><p>在 src\moduls 中新建一个 Snake.ts 文件，初步添加 Snake 类，之后再添加其他功能</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">class Snake &#123;<br>  <span class="hljs-comment">//表示蛇头的元素</span><br>  head: HTMLElement<br><br>  <span class="hljs-comment">// 蛇的身体(包括蛇头)</span><br>  bodies: HTMLCollection<br>  <span class="hljs-comment">//获取蛇的容器</span><br>  element: HTMLElement<br><br>  constructor() &#123;<br>    this.head = document.querySelector(&#x27;#snake &gt; div&#x27;) as HTMLElement<br>    this.element = document.getElementById(&#x27;snake&#x27;)!<br>    this.bodies = this.element.getElementsByTagName(&#x27;div&#x27;)<br>  &#125;<br>  <span class="hljs-comment">//获取蛇的坐标(蛇头坐标)</span><br>  get X() &#123;<br>    return this.head.offsetLeft<br>  &#125;<br><br>  <span class="hljs-comment">// 获取蛇的Y轴坐标</span><br>  get Y() &#123;<br>    return this.head.offsetHeight<br>  &#125;<br><br>  <span class="hljs-comment">// 设置蛇头的坐标</span><br>  set X(value: number) &#123;<br>    this.head.style.left = value + &#x27;px&#x27;<br>  &#125;<br>  set Y(value: number) &#123;<br>    this.head.style.top = value + &#x27;px&#x27;<br>  &#125;<br><br>  <span class="hljs-comment">// 蛇增加身体的方法</span><br>  addBody() &#123;<br>    <span class="hljs-comment">//向element中添加一个div</span><br>    this.element.insertAdjacentHTML(&#x27;beforeend&#x27;, &#x27;&lt;div&gt;&lt;/div&gt;&#x27;)<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="GameControl-类"><a href="#GameControl-类" class="headerlink" title="GameControl 类"></a>GameControl 类</h2><h3 id="GameControl-类添加键盘事件"><a href="#GameControl-类添加键盘事件" class="headerlink" title="GameControl 类添加键盘事件"></a>GameControl 类添加键盘事件</h3><p>在 src\moduls 中添加 GameControl.ts 文件,先引入其他几个类，绑定键盘按键事件，修改方向</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import Snake from &#x27;./Snake&#x27;<br>import Food from &#x27;./Food&#x27;<br>import ScorePanel from &#x27;./ScorePanel&#x27;<br><br><span class="hljs-comment">//游戏控制器，控制其他所有类</span><br>class GameControl &#123;<br>  <span class="hljs-comment">//定义三个属性</span><br>  snake: Snake<br>  food: Food<br>  scorePanel: ScorePanel<br><br>  <span class="hljs-comment">//创建一个属性来存储蛇的移动方向（也就是按键的方向）</span><br>  direction: string = &#x27;&#x27;<br><br>  constructor() &#123;<br>    this.snake = new Snake()<br>    this.food = new Food()<br>    this.scorePanel = new ScorePanel()<br><br>    this.init()<br>  &#125;<br><br>  <span class="hljs-comment">//游戏得初始化方法，调用后游戏即开始</span><br>  init() &#123;<br>    <span class="hljs-comment">// 绑定键盘按键按下的事件</span><br>    document.addEventListener(&#x27;keydown&#x27;, this.keydownHandler.bind(this))<br>  &#125;<br>  <span class="hljs-comment">//创建一个键盘按下的响应函数</span><br>  keydownHandler(event: KeyboardEvent) &#123;<br>    <span class="hljs-comment">//需要检查event.key的值是否合法（用户是否按了正确的按键）</span><br><br>    <span class="hljs-comment">// 修改direction 属性</span><br>    this.direction = event.key<br>  &#125;<br>&#125;<br><br>export default GameControl<br><br></code></pre></div></td></tr></table></figure><p>在 src\index.ts 中添加游戏控制</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import &#x27;./style/index.less&#x27;<br><br><span class="hljs-comment">// import Food from &#x27;./moduls/Food&#x27;</span><br><span class="hljs-comment">// import ScorePanel from &#x27;./moduls/ScorePanel&#x27;</span><br><br><span class="hljs-comment">// const food = new Food()</span><br><span class="hljs-comment">// console.log(food.X, food.Y)</span><br><span class="hljs-comment">// food.change()</span><br><span class="hljs-comment">// console.log(food.X, food.Y)</span><br><br><span class="hljs-comment">// const scorePanel = new ScorePanel(200, 2)</span><br><span class="hljs-comment">// for (let i = 0; i &lt; 200; i++) &#123;</span><br><span class="hljs-comment">//   scorePanel.addScore()</span><br><span class="hljs-comment">// &#125;</span><br><br>import GameControl from &#x27;./moduls/GameControl&#x27;<br><br>const gameControl = new GameControl()<br><br><span class="hljs-comment">// setInterval(() =&gt; &#123;</span><br><span class="hljs-comment">//   console.log(gameControl.direction)</span><br><span class="hljs-comment">// &#125;, 1000)</span><br><br></code></pre></div></td></tr></table></figure><h3 id="GameControl-使蛇移动"><a href="#GameControl-使蛇移动" class="headerlink" title="GameControl 使蛇移动"></a>GameControl 使蛇移动</h3><p>在 src\moduls\GameControl.ts 中，创建蛇移动的 run 方法，获取蛇的坐标，并修改蛇的坐标，通过定时器来时时监控</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import Snake from &#x27;./Snake&#x27;<br>import Food from &#x27;./Food&#x27;<br>import ScorePanel from &#x27;./ScorePanel&#x27;<br><br><span class="hljs-comment">//游戏控制器，控制其他所有类</span><br>class GameControl &#123;<br>  <span class="hljs-comment">//定义三个属性</span><br>  snake: Snake<br>  food: Food<br>  scorePanel: ScorePanel<br><br>  <span class="hljs-comment">//创建一个属性来存储蛇的移动方向（也就是按键的方向）</span><br>  direction: string = &#x27;&#x27;<br><br>  <span class="hljs-comment">//创建一个属性来记录是否结束游戏</span><br>  isLive = <span class="hljs-literal">true</span><br><br>  constructor() &#123;<br>    this.snake = new Snake()<br>    this.food = new Food()<br>    this.scorePanel = new ScorePanel()<br><br>    this.init()<br>  &#125;<br><br>  <span class="hljs-comment">//游戏得初始化方法，调用后游戏即开始</span><br>  init() &#123;<br>    <span class="hljs-comment">// 绑定键盘按键按下的事件</span><br>    document.addEventListener(&#x27;keydown&#x27;, this.keydownHandler.bind(this))<br><br>    <span class="hljs-comment">// 调用run方法，使蛇移动</span><br>    this.run()<br>  &#125;<br>  <span class="hljs-comment">//创建一个键盘按下的响应函数</span><br>  keydownHandler(event: KeyboardEvent) &#123;<br>    <span class="hljs-comment">//需要检查event.key的值是否合法（用户是否按了正确的按键）</span><br><br>    <span class="hljs-comment">// 修改direction 属性</span><br>    this.direction = event.key<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Chrome       IE</span><br><span class="hljs-comment">        ArrowUp      Up</span><br><span class="hljs-comment">        ArrowDown    Down</span><br><span class="hljs-comment">        ArrowLeft    Left</span><br><span class="hljs-comment">        ArrowRight   Right</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-comment">// 创建一个控制蛇移动的方法</span><br>  run() &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据方向（this.direction）来使蛇的位置改变</span><br><span class="hljs-comment">     *  向上  top 减少</span><br><span class="hljs-comment">     *  向下  top 增加</span><br><span class="hljs-comment">     *  向左  left  减少</span><br><span class="hljs-comment">     *  向右  left  增加</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">// 先获取蛇现在坐标</span><br>    let X = this.snake.X<br>    let Y = this.snake.Y<br><br>    <span class="hljs-comment">// 根据按键方向来修改X值和Y值</span><br>    switch (this.direction) &#123;<br>      case &#x27;ArrowUp&#x27;:<br>      case &#x27;Up&#x27;:<br>        Y -= <span class="hljs-number">10</span><br>        break<br>      case &#x27;ArrowDown&#x27;:<br>      case &#x27;Down&#x27;:<br>        Y += <span class="hljs-number">10</span><br>        break<br>      case &#x27;ArrowLeft&#x27;:<br>      case &#x27;Left&#x27;:<br>        X -= <span class="hljs-number">10</span><br>        break<br>      case &#x27;ArrowRight&#x27;:<br>      case &#x27;Right&#x27;:<br>        X += <span class="hljs-number">10</span><br>        break<br>    &#125;<br><br>    <span class="hljs-comment">//修改蛇的X和Y的值</span><br>    this.snake.X = X<br>    this.snake.Y = Y<br><br>    <span class="hljs-comment">//开启一个定时器</span><br>    this.isLive &amp;&amp; setTimeout(this.run.bind(this), 300 - (this.scorePanel.level - 1) * 30)<br>  &#125;<br>&#125;<br><br>export default GameControl<br><br></code></pre></div></td></tr></table></figure><h3 id="蛇撞墙和吃食检测"><a href="#蛇撞墙和吃食检测" class="headerlink" title="蛇撞墙和吃食检测"></a>蛇撞墙和吃食检测</h3><p>此时发现一个 bug，在 src\style\index.less 中，设置了食物初始值<code>left: 40px;</code>但是控制台打印的是 41,设置成其他数值则是正常的</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// 设置食物</span><br>  #food &#123;<br>...<br>    <span class="hljs-comment">// 初始化一个位置</span><br>    left: <span class="hljs-number">40</span>px;<br>    top: <span class="hljs-number">100</span>px;<br>...<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1623466529615-32a4170d-e4d9-434e-ab1a-269db2f463f1.png#clientId=ud86988f0-9ba7-4&from=paste&height=66&id=QNPEL&margin=%5Bobject%20Object%5D&name=image.png&originHeight=131&originWidth=776&originalType=binary&ratio=2&size=14003&status=done&style=none&taskId=u8a89de34-3d54-4d9c-8821-fede452e634&width=388" alt="image.png">，<br>导致后续检查蛇是否吃到食物无法成功判断 <code>X === this.food.X &amp;&amp; Y === this.food.Y</code><br>所以将食物初始值 left 设置成<code>left:30px</code><br>​</p><h4 id="撞墙检测"><a href="#撞墙检测" class="headerlink" title="撞墙检测"></a>撞墙检测</h4><p>在 src\moduls\Snake.ts 中，增加撞墙的判断，并抛出异常<code>throw new Error(&#39;蛇撞墙了！&#39;)</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">class Snake &#123;<br>  <span class="hljs-comment">//表示蛇头的元素</span><br>  head: HTMLElement<br><br>  <span class="hljs-comment">// 蛇的身体(包括蛇头)</span><br>  bodies: HTMLCollection<br>  <span class="hljs-comment">//获取蛇的容器</span><br>  element: HTMLElement<br><br>  constructor() &#123;<br>    this.head = document.querySelector(&#x27;#snake &gt; div&#x27;) as HTMLElement<br>    this.element = document.getElementById(&#x27;snake&#x27;)!<br>    this.bodies = this.element.getElementsByTagName(&#x27;div&#x27;)<br>  &#125;<br>  <span class="hljs-comment">//获取蛇的坐标(蛇头坐标)</span><br>  get X() &#123;<br>    return this.head.offsetLeft<br>  &#125;<br><br>  <span class="hljs-comment">// 获取蛇的Y轴坐标</span><br>  get Y() &#123;<br>    return this.head.offsetTop<br>  &#125;<br><br>  <span class="hljs-comment">// 设置蛇头的坐标</span><br>  set X(value: number) &#123;<br>    <span class="hljs-comment">//如果新值和旧值相同，则不修改</span><br>    if (this.X === value) &#123;<br>      return<br>    &#125;<br>    <span class="hljs-comment">//X的值的合法范围0-290</span><br>    if (value &lt; <span class="hljs-number">0</span> || value &gt;= <span class="hljs-number">300</span>) &#123;<br>      <span class="hljs-comment">//进入判断说明蛇撞墙了</span><br>      throw new Error(&#x27;蛇撞墙了！&#x27;)<br>    &#125;<br>    this.head.style.left = value + &#x27;px&#x27;<br>  &#125;<br>  set Y(value: number) &#123;<br>    <span class="hljs-comment">//如果新值和旧值相同，则不修改</span><br>    if (this.Y === value) &#123;<br>      return<br>    &#125;<br>    <span class="hljs-comment">//Y的值的合法范围0-290</span><br>    if (value &lt; <span class="hljs-number">0</span> || value &gt;= <span class="hljs-number">300</span>) &#123;<br>      <span class="hljs-comment">//进入判断说明蛇撞墙了</span><br>      throw new Error(&#x27;蛇撞墙了！&#x27;)<br>    &#125;<br>    this.head.style.top = value + &#x27;px&#x27;<br>  &#125;<br><br>  <span class="hljs-comment">// 蛇增加身体的方法</span><br>  addBody() &#123;<br>    <span class="hljs-comment">//向element中添加一个div</span><br>    this.element.insertAdjacentHTML(&#x27;beforeend&#x27;, &#x27;&lt;div&gt;&lt;/div&gt;&#x27;)<br>  &#125;<br>&#125;<br>export default Snake<br><br></code></pre></div></td></tr></table></figure><h4 id="吃食检测"><a href="#吃食检测" class="headerlink" title="吃食检测"></a>吃食检测</h4><p>在 src\moduls\GameControl.ts 中，使用<code>try &#123; &#125; catch (e) &#123; &#125;</code>处理异常操作，添加<code>checkEat</code>方法检查是否吃到食物，<br>在判断是否吃到食物时一个 bug，蛇的 X、Y 坐标超过 50 之后，个位数会加 1 就变成了 51 61 71…，解决办法是四舍五入 <code>Math.round(X / 10) * 10 === Math.round(this.food.X / 10) * 10 &amp;&amp; Math.round(Y / 10) * 10 === Math.round(this.food.Y / 10) * 10</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import Snake from &#x27;./Snake&#x27;<br>import Food from &#x27;./Food&#x27;<br>import ScorePanel from &#x27;./ScorePanel&#x27;<br><br><span class="hljs-comment">//游戏控制器，控制其他所有类</span><br>class GameControl &#123;<br>  <span class="hljs-comment">//定义三个属性</span><br>  snake: Snake<br>  food: Food<br>  scorePanel: ScorePanel<br><br>  <span class="hljs-comment">//创建一个属性来存储蛇的移动方向（也就是按键的方向）</span><br>  direction: string = &#x27;&#x27;<br><br>  <span class="hljs-comment">//创建一个属性来记录是否结束游戏</span><br>  isLive = <span class="hljs-literal">true</span><br><br>  constructor() &#123;<br>    this.snake = new Snake()<br>    this.food = new Food()<br>    this.scorePanel = new ScorePanel()<br><br>    this.init()<br>  &#125;<br><br>  <span class="hljs-comment">//游戏得初始化方法，调用后游戏即开始</span><br>  init() &#123;<br>    <span class="hljs-comment">// 绑定键盘按键按下的事件</span><br>    document.addEventListener(&#x27;keydown&#x27;, this.keydownHandler.bind(this))<br><br>    <span class="hljs-comment">// 调用run方法，使蛇移动</span><br>    this.run()<br>  &#125;<br>  <span class="hljs-comment">//创建一个键盘按下的响应函数</span><br>  keydownHandler(event: KeyboardEvent) &#123;<br>    <span class="hljs-comment">//需要检查event.key的值是否合法（用户是否按了正确的按键）</span><br><br>    <span class="hljs-comment">// 修改direction 属性</span><br>    this.direction = event.key<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Chrome       IE</span><br><span class="hljs-comment">        ArrowUp      Up</span><br><span class="hljs-comment">        ArrowDown    Down</span><br><span class="hljs-comment">        ArrowLeft    Left</span><br><span class="hljs-comment">        ArrowRight   Right</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-comment">// 创建一个控制蛇移动的方法</span><br>  run() &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据方向（this.direction）来使蛇的位置改变</span><br><span class="hljs-comment">     *  向上  top 减少</span><br><span class="hljs-comment">     *  向下  top 增加</span><br><span class="hljs-comment">     *  向左  left  减少</span><br><span class="hljs-comment">     *  向右  left  增加</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">// 先获取蛇现在坐标</span><br>    let X = this.snake.X<br>    let Y = this.snake.Y<br><br>    <span class="hljs-comment">// 根据按键方向来修改X值和Y值</span><br>    switch (this.direction) &#123;<br>      case &#x27;ArrowUp&#x27;:<br>      case &#x27;Up&#x27;:<br>        Y -= <span class="hljs-number">10</span><br>        break<br>      case &#x27;ArrowDown&#x27;:<br>      case &#x27;Down&#x27;:<br>        Y += <span class="hljs-number">10</span><br>        break<br>      case &#x27;ArrowLeft&#x27;:<br>      case &#x27;Left&#x27;:<br>        X -= <span class="hljs-number">10</span><br>        break<br>      case &#x27;ArrowRight&#x27;:<br>      case &#x27;Right&#x27;:<br>        X += <span class="hljs-number">10</span><br>        break<br>    &#125;<br><br>    <span class="hljs-comment">// 检查蛇是否吃到食物</span><br>    this.checkEat(X, Y)<br><br>    <span class="hljs-comment">//修改蛇的X和Y的值</span><br>    try &#123;<br>      this.snake.X = X<br>      this.snake.Y = Y<br>    &#125; catch (e) &#123;<br>      <span class="hljs-comment">//进入到catch，说明出现了异常，游戏结束</span><br>      alert(e.message + &#x27; GAME OVER！&#x27;)<br>      <span class="hljs-comment">//将isLive设置成false</span><br>      this.isLive = false<br>    &#125;<br><br>    <span class="hljs-comment">//开启一个定时器</span><br>    this.isLive &amp;&amp; setTimeout(this.run.bind(this), <span class="hljs-number">300</span> - (this.scorePanel.level - <span class="hljs-number">1</span>) * <span class="hljs-number">30</span>)<br>  &#125;<br>  <span class="hljs-comment">// 定义一个方法，检查蛇是否吃到食物</span><br>  checkEat(X: number, Y: number) &#123;<br>    if (<br>      <span class="hljs-comment">//此处有个bug，蛇的X、Y坐标超过50之后，个位数会加1 就变成了51 61 71...，解决办法是四舍五入</span><br>      Math.round(X / 10) * 10 === Math.round(this.food.X / 10) * 10 &amp;&amp;<br>      Math.round(Y / 10) * 10 === Math.round(this.food.Y / 10) * 10<br>    ) &#123;<br>      console.log(&#x27;吃到食物&#x27;)<br>      <span class="hljs-comment">// 食物的位置进行重置</span><br>      this.food.change()<br>      <span class="hljs-comment">//分数增加</span><br>      this.scorePanel.addScore()<br>      <span class="hljs-comment">//蛇要增加一节</span><br>      this.snake.addBody()<br>    &#125;<br>  &#125;<br>&#125;<br><br>export default GameControl<br><br></code></pre></div></td></tr></table></figure><h2 id="小蛇移动"><a href="#小蛇移动" class="headerlink" title="小蛇移动"></a>小蛇移动</h2><p>在 src\moduls\Snake.ts 中，添加<code>moveBody</code>蛇移动的方法，逻辑是将后边的身体设置成前一个身体位置，头不设置。 <code>checkHeadBody</code>检测是否撞到自己</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">class Snake &#123;<br>  <span class="hljs-comment">//表示蛇头的元素</span><br>  head: HTMLElement;<br><br>  <span class="hljs-comment">// 蛇的身体(包括蛇头)</span><br>  bodies: HTMLCollection;<br>  <span class="hljs-comment">//获取蛇的容器</span><br>  element: HTMLElement;<br><br>  constructor() &#123;<br>    this.head = document.querySelector(&#x27;#snake &gt; div&#x27;) as HTMLElement;<br>    this.element = document.getElementById(&#x27;snake&#x27;)!;<br>    this.bodies = this.element.getElementsByTagName(&#x27;div&#x27;);<br>  &#125;<br>  <span class="hljs-comment">//获取蛇的坐标(蛇头坐标)</span><br>  get X() &#123;<br>    return this.head.offsetLeft;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取蛇的Y轴坐标</span><br>  get Y() &#123;<br>    return this.head.offsetTop;<br>  &#125;<br><br>  <span class="hljs-comment">// 设置蛇头的坐标</span><br>  set X(value: number) &#123;<br>    <span class="hljs-comment">//如果新值和旧值相同，则不修改</span><br>    if (this.X === value) &#123;<br>      return;<br>    &#125;<br>    <span class="hljs-comment">//X的值的合法范围0-290</span><br>    if (value &lt; <span class="hljs-number">0</span> || value &gt;= <span class="hljs-number">300</span>) &#123;<br>      <span class="hljs-comment">//进入判断说明蛇撞墙了</span><br>      throw new Error(&#x27;蛇撞墙了！&#x27;);<br>    &#125;<br><br>    <span class="hljs-comment">//修改X时,是修改水平坐标，蛇在左右移动，蛇不能掉头</span><br>    if (this.bodies[<span class="hljs-number">1</span>] &amp;&amp; (this.bodies[<span class="hljs-number">1</span>] as HTMLElement).offsetLeft === value) &#123;<br>      <span class="hljs-comment">//如果发生了掉头，让蛇反向继续移动</span><br>      if (value &gt; this.X) &#123;<br>        <span class="hljs-comment">//如果新值value大于旧X，则说明蛇正在向右走，此时发生掉头，应该使蛇继续向右移动</span><br>        value = this.X - 10;<br>      &#125; else &#123;<br>        <span class="hljs-comment">//向左走</span><br>        value = this.X + 10;<br>      &#125;<br>    &#125;<br>    this.moveBody();<br><br>    this.head.style.left = value + &#x27;px&#x27;;<br>    <span class="hljs-comment">//检查有没有撞到自己</span><br>    this.checkHeadBody();<br>  &#125;<br>  set Y(value: number) &#123;<br>    <span class="hljs-comment">//如果新值和旧值相同，则不修改</span><br>    if (this.Y === value) &#123;<br>      return;<br>    &#125;<br>    <span class="hljs-comment">//Y的值的合法范围0-290</span><br>    if (value &lt; <span class="hljs-number">0</span> || value &gt;= <span class="hljs-number">300</span>) &#123;<br>      <span class="hljs-comment">//进入判断说明蛇撞墙了</span><br>      throw new Error(&#x27;蛇撞墙了！&#x27;);<br>    &#125;<br><br>    if (this.bodies[<span class="hljs-number">1</span>] &amp;&amp; (this.bodies[<span class="hljs-number">1</span>] as HTMLElement).offsetTop === value) &#123;<br>      <span class="hljs-comment">//如果发生了掉头，让蛇反向继续移动</span><br>      if (value &gt; this.Y) &#123;<br>        <span class="hljs-comment">//如果新值value大于旧X，则说明蛇正在向右走，此时发生掉头，应该使蛇继续向左移动</span><br>        value = this.Y - 10;<br>      &#125; else &#123;<br>        <span class="hljs-comment">//向左走</span><br>        value = this.Y + 10;<br>      &#125;<br>    &#125;<br><br>    this.moveBody();<br><br>    this.head.style.top = value + &#x27;px&#x27;;<br>    <span class="hljs-comment">//检查有没有撞到自己</span><br>    this.checkHeadBody();<br>  &#125;<br><br>  <span class="hljs-comment">// 蛇增加身体的方法</span><br>  addBody() &#123;<br>    <span class="hljs-comment">//向element中添加一个div</span><br>    this.element.insertAdjacentHTML(&#x27;beforeend&#x27;, &#x27;&lt;div&gt;&lt;/div&gt;&#x27;);<br>  &#125;<br>  <span class="hljs-comment">//添加一个蛇身体移动的方法</span><br>  moveBody() &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将后边的身体设置为前边身体的位置</span><br><span class="hljs-comment">     * 比如：</span><br><span class="hljs-comment">     *    第三节=&gt;第二节的位置</span><br><span class="hljs-comment">     *    第二节=&gt;蛇头的位置</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//遍历获取所有的身体</span><br>    for (let i = this.bodies.length - 1; i &gt; 0; i--) &#123;<br>      <span class="hljs-comment">//获取前边身体的值</span><br>      let X = (this.bodies[i - 1] as HTMLElement).offsetLeft;<br>      let Y = (this.bodies[i - 1] as HTMLElement).offsetTop;<br>      <span class="hljs-comment">//将值设置到当前身体上</span><br><br>      (this.bodies[i] as HTMLElement).style.left = X + &#x27;px&#x27;;<br>      (this.bodies[i] as HTMLElement).style.top = Y + &#x27;px&#x27;;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//检查有没有撞到自己</span><br>  checkHeadBody() &#123;<br>    <span class="hljs-comment">//获取所有的身体，检查是否和蛇头的坐标发生重叠</span><br>    for (let i = 1; i &lt; this.bodies.length; i++) &#123;<br>      let bd = this.bodies[i] as HTMLElement;<br>      if (this.X === bd.offsetLeft &amp;&amp; this.Y === bd.offsetTop) &#123;<br>        <span class="hljs-comment">//撞到身体，游戏结束</span><br>        throw new Error(&#x27;撞到自己了!&#x27;);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>export default Snake;<br><br></code></pre></div></td></tr></table></figure><p>最后就大功告成了！</p>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
      <tag>贪吃蛇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决git上传拉取 port 443问题</title>
    <link href="/2021/06/06/%E8%A7%A3%E5%86%B3git%E4%B8%8A%E4%BC%A0%E6%8B%89%E5%8F%96%20port%20443%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/06/%E8%A7%A3%E5%86%B3git%E4%B8%8A%E4%BC%A0%E6%8B%89%E5%8F%96%20port%20443%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>如果遇到类似情况，1.也许是网络问题，多试几次也，2.有可能是 https 协议无法访问。</p><figure class="highlight vhdl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vhdl">fatal: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> <span class="hljs-symbol">&#x27;https</span>://github.com/xxxxxxxx: OpenSSL SSL_connect: SSL_ERROR_SYSCALL <span class="hljs-keyword">in</span> connection <span class="hljs-keyword">to</span> github.com:<span class="hljs-number">443</span><br></code></pre></div></td></tr></table></figure><p>先排查排查网络问题，确定网络流畅(科学上网)</p><h1 id="方法-1：普通-https-协议的方法"><a href="#方法-1：普通-https-协议的方法" class="headerlink" title="方法 1：普通 https 协议的方法"></a>方法 1：普通 https 协议的方法</h1><p>通过:取消代理<br>​</p><p>先查询是否有代理<br>​</p><p><code>git config --global http.proxy</code><br><code>git config --global https.proxy</code><br>​</p><p>查询到当前设置了代理，所以我取消这个设置：<br>​</p><p><code>git config --global --unset http.proxy</code><br><code>git config --global --unset https.proxy</code><br>​</p><p>再查询，已经没有了代理，然后再 push,成功了！<br>​</p><h1 id="方法-2：SSH-协议方法"><a href="#方法-2：SSH-协议方法" class="headerlink" title="方法 2：SSH 协议方法"></a>方法 2：SSH 协议方法</h1><p>例如：在个人仓库中找到 ssh<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622983591329-ff872692-b4ec-48ce-9a43-bce2bfd785f2.png#clientId=ue73c0a22-0c69-4&from=paste&height=449&id=u003d56fd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=449&originWidth=555&originalType=binary&ratio=1&size=30780&status=done&style=none&taskId=ubf3e04e2-6fa1-4ac0-b31c-b53e260b5c0&width=555" alt="image.png"></p><p>先确定 ssh 秘钥本地和 github 已经配置好，具体方法自行百度</p><p>在仓库的.git\config 文件夹中，将 url 换成仓库的 ssh 地址<a href="mailto:&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>:xxx/xxx.git</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">[remote <span class="hljs-string">&quot;origin&quot;</span>]<br>url = git@github.com:xxx/xxx.git<br>fetch = +refs/heads<span class="hljs-comment">/*:refs/remotes/origin/*</span><br></code></pre></div></td></tr></table></figure><p>最后完美解决<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622984017222-475ed0fb-d927-4f15-92e4-c5a88ff707e5.png#clientId=ue73c0a22-0c69-4&from=paste&height=213&id=uc597a356&margin=%5Bobject%20Object%5D&name=image.png&originHeight=213&originWidth=736&originalType=binary&ratio=1&size=26518&status=done&style=none&taskId=u7108e0ee-5cb0-4be9-afb1-dafb42a4259&width=736" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript学习笔记</title>
    <link href="/2021/06/03/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/06/03/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一-优势"><a href="#一-优势" class="headerlink" title="一. 优势"></a>一. 优势</h1><p>1.在开发过程中，发现潜在的问题 2.更友好的编辑器自动提示 3.代码语义更清晰易懂</p><h1 id="二-环境搭建"><a href="#二-环境搭建" class="headerlink" title="二.环境搭建"></a>二.环境搭建</h1><h2 id="2-1-百度-node-安装教程"><a href="#2-1-百度-node-安装教程" class="headerlink" title="2.1 百度 node 安装教程"></a>2.1 百度 node 安装教程</h2><p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a> node 官网</p><h2 id="2-2-查看版本检查是否安装"><a href="#2-2-查看版本检查是否安装" class="headerlink" title="2.2 查看版本检查是否安装"></a>2.2 查看版本检查是否安装</h2><p>命令行 <code>node -v</code> 和 <code>npm -v</code> 查看版本检查是否安装<br>​</p><h2 id="2-3-设置-vscode"><a href="#2-3-设置-vscode" class="headerlink" title="2.3 设置 vscode"></a>2.3 设置 vscode</h2><p>打开设置搜索<code>quote</code> <strong>TypeScript › Preferences: Quote Style</strong>设置成<code>single</code>单引号<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622558447332-06017e91-6c25-464d-8284-f59f33257d21.png#clientId=ud695c2c6-eec2-4&from=paste&height=457&id=u3379f69c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=457&originWidth=697&originalType=binary&ratio=1&size=38455&status=done&style=none&taskId=uebb020cb-e6b4-4163-943f-4db58d712ae&width=697" alt="image.png"><br>搜索 <code>Tab </code>设置两个缩进<br>​</p><h2 id="2-4-安装-Prettier-Code-formatter-插件"><a href="#2-4-安装-Prettier-Code-formatter-插件" class="headerlink" title="2.4 安装 Prettier - Code formatter 插件"></a>2.4 安装 Prettier - Code formatter 插件</h2><p>打开设置搜索 <code>save</code> 将<strong>Editor: Format On Save 勾选，会自动格式化代码</strong><br><strong>​</strong></p><h2 id="2-5-安装-TypeScript-依赖"><a href="#2-5-安装-TypeScript-依赖" class="headerlink" title="2.5 安装 TypeScript 依赖"></a>2.5 安装 TypeScript 依赖</h2><h3 id="2-5-1-全局安装-TypeScript-依赖包"><a href="#2-5-1-全局安装-TypeScript-依赖包" class="headerlink" title="2.5.1 全局安装 TypeScript 依赖包"></a>2.5.1 全局安装 TypeScript 依赖包</h3><p>打开控制台 输入<code> npm install typescript -g</code><br>​</p><p>检查是否安装成功 <code>tsc -v</code></p><h3 id="2-5-2-TypeScript-解决（tsc-不是内部或外部命令，也不是可运行的程序或批处理文件）问题"><a href="#2-5-2-TypeScript-解决（tsc-不是内部或外部命令，也不是可运行的程序或批处理文件）问题" class="headerlink" title="2.5.2 TypeScript- 解决（tsc 不是内部或外部命令，也不是可运行的程序或批处理文件）问题"></a>2.5.2 TypeScript- 解决（tsc 不是内部或外部命令，也不是可运行的程序或批处理文件）问题</h3><p><strong>tsc 不是内部或外部命令，也不是可运行的程序或批处理文件</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639045528-81634ca5-8ede-48b5-be0d-2761bb4d2a1e.png#clientId=ud695c2c6-eec2-4&from=paste&height=204&id=EuDKM&margin=%5Bobject%20Object%5D&originHeight=204&originWidth=661&originalType=url&ratio=1&status=done&style=none&taskId=u14c49adb-b4f8-4615-9132-4ab2d27189f&width=661"><br>​</p><h3 id="解决方法：配置环境变量"><a href="#解决方法：配置环境变量" class="headerlink" title="解决方法：配置环境变量"></a>解决方法：配置环境变量</h3><p>**我的电脑 –&gt; 右键 –&gt; 属性 –&gt; 高级系统设置 –&gt; 高级 –&gt; 环境变量 **<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639045473-8a115b39-d759-475f-8947-e40c55cbfd3f.png#clientId=ud695c2c6-eec2-4&from=paste&height=280&id=RueMe&margin=%5Bobject%20Object%5D&originHeight=280&originWidth=1119&originalType=url&ratio=1&status=done&style=none&taskId=ubb21cd27-26cb-480c-ba0a-6cac6c5f4f3&width=1119"><br>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639045476-6fba1def-9eba-402c-ac35-f1e164975307.png#clientId=ud695c2c6-eec2-4&from=paste&height=605&id=wasif&margin=%5Bobject%20Object%5D&originHeight=605&originWidth=493&originalType=url&ratio=1&status=done&style=none&taskId=u512784a7-4553-4bc5-93d0-96a24e35021&width=493"><br>​</p><p>**然后使用 npm config get prefix 查找 npm 目录 **<br>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639045491-24973088-5c17-4622-8aa7-641f22f90603.png#clientId=ud695c2c6-eec2-4&from=paste&height=90&id=wvnsp&margin=%5Bobject%20Object%5D&originHeight=90&originWidth=296&originalType=url&ratio=1&status=done&style=none&taskId=uc1aa11e5-355c-4a66-87e1-228e83985bf&width=296"><br>​</p><p><strong>在环境变量里的系统变量新建</strong><br><strong>变量名: NODE_PATH</strong><br><strong>变量值: D:\home.npm-global</strong><br>（变量值就是找到的 npm 目录路径）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639045553-45315506-6253-43e0-9330-d60a7bd8006a.png#clientId=ud695c2c6-eec2-4&from=paste&height=560&id=trMny&margin=%5Bobject%20Object%5D&originHeight=560&originWidth=457&originalType=url&ratio=1&status=done&style=none&taskId=u151ac42e-dac0-4f82-b94d-a4ea65d3916&width=457"><br>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639046075-40b4b988-5e0f-439f-9c9f-15336163ad37.png#clientId=ud695c2c6-eec2-4&from=paste&height=181&id=cVFyo&margin=%5Bobject%20Object%5D&originHeight=181&originWidth=649&originalType=url&ratio=1&status=done&style=none&taskId=u989af7c5-81eb-4be1-aa46-583ec6c4c31&width=649"><br>​</p><p><strong>如果 node 没有配置 全局和缓存这两个文件夹</strong><br>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639046127-2bcbf347-af39-41a7-9f66-015c7a8a3459.png#clientId=ud695c2c6-eec2-4&from=paste&height=263&id=QyYqm&margin=%5Bobject%20Object%5D&originHeight=263&originWidth=254&originalType=url&ratio=1&status=done&style=none&taskId=ufc46499b-4917-4a2a-8805-a7165efe491&width=254"><br><strong>变量值: 就为 nodejs 的文件路径</strong><br>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639046165-fa08f511-9cc5-4817-9738-0ca845ac3205.png#clientId=ud695c2c6-eec2-4&from=paste&height=190&id=YOTGC&margin=%5Bobject%20Object%5D&originHeight=190&originWidth=667&originalType=url&ratio=1&status=done&style=none&taskId=ubdf569be-1038-4935-bc53-0e1f58a3879&width=667"><br><strong>这里我两个都加上了，用 ; 隔开</strong><br>​</p><p>**然后找到 用户变量 和 系统变量 里的 path , 在末尾添加上 %NODE_PATH% **<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639046213-6acd5b3d-1908-4c58-932e-6007622dab23.png#clientId=ud695c2c6-eec2-4&from=paste&height=560&id=hQz1r&margin=%5Bobject%20Object%5D&originHeight=560&originWidth=457&originalType=url&ratio=1&status=done&style=none&taskId=u71f5a0a3-f145-4175-af55-607a6a786bf&width=457"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639046370-a48cb5a0-62d1-4641-9687-5e409654329b.png#clientId=ud695c2c6-eec2-4&from=paste&height=190&id=Om34m&margin=%5Bobject%20Object%5D&originHeight=190&originWidth=667&originalType=url&ratio=1&status=done&style=none&taskId=u2c6c1e19-6f47-4fbe-a9e7-e12b41acef0&width=667"><br>​</p><p><strong>配置完成后重新打开 dos 命令窗口，再次输入命令 就 ok 了</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639046643-90a8f9b5-1bf1-4fd3-870b-20abeb37d576.png#clientId=ud695c2c6-eec2-4&from=paste&height=105&id=vhitM&margin=%5Bobject%20Object%5D&originHeight=105&originWidth=216&originalType=url&ratio=1&status=done&style=none&taskId=u87b091b1-7102-478f-807b-b709ea2cd7e&width=216"></p><h3 id="2-5-2-检查是否编译成功"><a href="#2-5-2-检查是否编译成功" class="headerlink" title="2.5.2 检查是否编译成功"></a>2.5.2 检查是否编译成功</h3><p>在文件夹下新建一个 demo.ts</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">interface Point &#123;<br>  x: number<br>  y: number<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tsDemo</span>(<span class="hljs-params">data: Point</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.sqrt(data.x ** <span class="hljs-number">2</span> + data.y ** <span class="hljs-number">2</span>)<br>&#125;<br><br>tsDemo(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">123</span> &#125;)<br><br></code></pre></div></td></tr></table></figure><p>在控制台输入 <code>tsc demo.ts</code> 编译<code>.ts</code>生成<code>.js</code>文件<br>​</p><p>如果在 ts 文件中有报错，但是符合 js，也一样可以编译成功<br>​</p><h1 id="三-TypeScript-中的基本类型"><a href="#三-TypeScript-中的基本类型" class="headerlink" title="三.TypeScript 中的基本类型"></a>三.TypeScript 中的基本类型</h1><p>TypeScript 中的基本类型：</p><h2 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h2><ul><li>类型声明是 TS 非常重要的一个特点；</li><li>通过类型声明可以指定 TS 中变量（参数、形参）的类型；</li><li>指定类型后，当为变量赋值时，TS 编译器会自动检查值是否符合类型声明，符合则赋值，否则报错；</li><li>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值；</li><li>语法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量: 类型;<br><br><span class="hljs-keyword">let</span> 变量: 类型 = 值;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">参数: 类型, 参数: 类型</span>): 类型</span>&#123;<br>    ...<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="自动类型判断"><a href="#自动类型判断" class="headerlink" title="自动类型判断"></a>自动类型判断</h2><ul><li>TS 拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS 编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li></ul><h2 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h2><table><thead><tr><th><strong>类型</strong></th><th><strong>例子</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>number</td><td>1, -33, 2.5</td><td>任意数字</td></tr><tr><td>string</td><td>‘hi’, “hi”, hi</td><td>任意字符串</td></tr><tr><td>boolean</td><td>true、false</td><td>布尔值 true 或 false</td></tr><tr><td>字面量</td><td>其本身</td><td>限制变量的值就是该字面量的值</td></tr><tr><td>any</td><td>*</td><td>任意类型</td></tr><tr><td>unknown</td><td>*</td><td>类型安全的 any</td></tr><tr><td>void</td><td>空值（undefined）</td><td>没有值（或 undefined）</td></tr><tr><td>never</td><td>没有值</td><td>不能是任何值</td></tr><tr><td>object</td><td>{name:’孙悟空’}</td><td>任意的 JS 对象</td></tr><tr><td>array</td><td>[1,2,3]</td><td>任意 JS 数组</td></tr><tr><td>tuple</td><td>[4,5]</td><td>元素，TS 新增类型，固定长度数组</td></tr><tr><td>enum</td><td>enum{A, B}</td><td>枚举，TS 中新增类型</td></tr></tbody></table><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> decimal: number = <span class="hljs-number">6</span>;<br><span class="hljs-keyword">let</span> hex: number = <span class="hljs-number">0xf00d</span>;<br><span class="hljs-keyword">let</span> binary: number = <span class="hljs-number">0b1010</span>;<br><span class="hljs-keyword">let</span> octal: number = <span class="hljs-number">0o744</span>;<br><span class="hljs-keyword">let</span> big: bigint = <span class="hljs-number">100n</span>;<br></code></pre></div></td></tr></table></figure><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> isDone: boolean = <span class="hljs-literal">false</span>;<br></code></pre></div></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> color: string = <span class="hljs-string">&#x27;blue&#x27;</span>;<br>color = <span class="hljs-string">&#x27;red&#x27;</span>;<br><br><span class="hljs-keyword">let</span> fullName: string = <span class="hljs-string">`Bob Bobbington`</span>;<br><span class="hljs-keyword">let</span> age: number = <span class="hljs-number">37</span>;<br><span class="hljs-keyword">let</span> sentence: string = <span class="hljs-string">`Hello, my name is <span class="hljs-subst">$&#123;fullName&#125;</span>.</span><br><span class="hljs-string"></span><br><span class="hljs-string">I&#x27;ll be <span class="hljs-subst">$&#123;age + <span class="hljs-number">1</span>&#125;</span> years old next month.`</span>;<br></code></pre></div></td></tr></table></figure><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><ul><li>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> color: <span class="hljs-string">&#x27;red&#x27;</span> | <span class="hljs-string">&#x27;blue&#x27;</span> | <span class="hljs-string">&#x27;black&#x27;</span>;<br><span class="hljs-keyword">let</span> num: <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span> | <span class="hljs-number">4</span> | <span class="hljs-number">5</span>;<br></code></pre></div></td></tr></table></figure><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> d: any = <span class="hljs-number">4</span>;<br>d = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>d = <span class="hljs-literal">true</span>;<br></code></pre></div></td></tr></table></figure><h3 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> notSure: unknown = <span class="hljs-number">4</span>;<br>notSure = <span class="hljs-string">&#x27;hello&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> unusable: <span class="hljs-keyword">void</span> = <span class="hljs-literal">undefined</span>;<br></code></pre></div></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">error</span>(<span class="hljs-params">message: string</span>): <span class="hljs-title">never</span> </span>&#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(message);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="object（没啥用）"><a href="#object（没啥用）" class="headerlink" title="object（没啥用）"></a>object（没啥用）</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj: object = &#123;&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> list: number[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> list: <span class="hljs-built_in">Array</span>&lt;number&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></div></td></tr></table></figure><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x: [string, number];<br>x = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">10</span>];<br></code></pre></div></td></tr></table></figure><h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">enum Color &#123;<br>  Red,<br>  Green,<br>  Blue,<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br><br>enum Color &#123;<br>  Red = <span class="hljs-number">1</span>,<br>  Green,<br>  Blue,<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br><br>enum Color &#123;<br>  Red = <span class="hljs-number">1</span>,<br>  Green = <span class="hljs-number">2</span>,<br>  Blue = <span class="hljs-number">4</span>,<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br><br></code></pre></div></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><ul><li>有些情况下，变量的类型对于我们来说是很明确，但是 TS 编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：<ul><li>第一种</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> someValue: unknown = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> strLength: number = (someValue <span class="hljs-keyword">as</span> string).length;<br><br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>  - 第二种</code></pre></div><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> someValue: unknown = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> strLength: number = (&lt;string&gt;someValue).length;<br><br></code></pre></div></td></tr></table></figure><h3 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h3><h4 id="1-类型断言方式"><a href="#1-类型断言方式" class="headerlink" title="1.类型断言方式"></a>1.类型断言方式</h4><h4 id="2-用-in-语法方式"><a href="#2-用-in-语法方式" class="headerlink" title="2.用 in 语法方式"></a>2.用 in 语法方式</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">interface Bird &#123;<br>  fly: boolean;<br>  sing: () =&gt; &#123;&#125;;<br>&#125;<br>interface Dog &#123;<br>  fly: boolean;<br>  bark: () =&gt; &#123;&#125;;<br>&#125;<br><br><span class="hljs-comment">//类型断言方式</span><br>function trainAnial(animal: Bird | Dog) &#123;<br>  if (animal.fly) &#123;<br>    (animal as Bird).sing();<br>  &#125; else &#123;<br>    (animal as Dog).bark();<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//in 语法来做保护机制</span><br>function trainAnialSecond(animal: Bird | Dog) &#123;<br>  if (&#x27;sing&#x27; in animal) &#123;<br>    animal.sing();<br>  &#125; else &#123;<br>    animal.bark();<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="3-用-typeof-语法方式"><a href="#3-用-typeof-语法方式" class="headerlink" title="3.用 typeof 语法方式"></a>3.用 typeof 语法方式</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">//typeof语法来做类型保护</span><br>function add(first: string | number, second: string | number) &#123;<br>  if (typeof first === &#x27;string&#x27; || typeof second === &#x27;string&#x27;) &#123;<br>    return `$&#123;first&#125;$&#123;second&#125;`;<br>  &#125;<br>  return first + second;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-用-instanceof-语法来做类型保护"><a href="#4-用-instanceof-语法来做类型保护" class="headerlink" title="4.用 instanceof 语法来做类型保护"></a>4.用 instanceof 语法来做类型保护</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// 使用instanceof</span><br>class NumberObj &#123;<br>  count: number;<br>&#125;<br>function addSecond(first: object | NumberObj, second: object | NumberObj) &#123;<br>  if (first instanceof NumberObj &amp;&amp; second instanceof NumberObj) &#123;<br>    return first.count + second.count;<br>  &#125;<br>  return 0;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="type-ts"><a href="#type-ts" class="headerlink" title="type.ts"></a><code>type.ts</code></h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/* 1.变量类型声明和初始化 */</span><br><br><span class="hljs-keyword">let</span> a: number;<br><br><span class="hljs-comment">// a 的类型设置为了number，在以后的使用过程中a的值只能是数字</span><br>a = <span class="hljs-number">10</span>;<br>a = <span class="hljs-number">33</span>;<br><span class="hljs-comment">// a = &#x27;hello&#x27;; // 此行代码会报错，因为变量a的类型是number，不能赋值字符串</span><br><br><span class="hljs-keyword">let</span> b: string;<br>b = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-comment">// b = 123;</span><br><br><span class="hljs-comment">// 声明变量的同时直接进行赋值</span><br><span class="hljs-comment">// let c: boolean = false;</span><br><br><span class="hljs-comment">// 如果变量的声明和赋值是同时进行的，TS可以自动对变量进行类型检测</span><br><span class="hljs-keyword">let</span> c = <span class="hljs-literal">false</span>;<br>c = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">/* 2.函数声明 */</span><br><br><span class="hljs-comment">// JS中的函数是不考虑参数的类型和个数的</span><br><span class="hljs-comment">// function sum(a, b)&#123;</span><br><span class="hljs-comment">//     return a + b;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// console.log(sum(123, 456)); // 579</span><br><span class="hljs-comment">// console.log(sum(123, &quot;456&quot;)); // &quot;123456&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a: number, b: number</span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-keyword">let</span> res = sum(<span class="hljs-number">123</span>, <span class="hljs-number">345</span>);<br><span class="hljs-comment">// let res = sum(123, &#x27;456&#x27;); // 报错</span><br><br><span class="hljs-comment">/* 3.字面量声明 */</span><br><br><span class="hljs-comment">// 下面的语句相当于定义了一个a3常量；</span><br><span class="hljs-keyword">let</span> a3: <span class="hljs-number">10</span>;<br><span class="hljs-comment">// a3 = 11; // 尝试将a3赋值为11，报错；</span><br><br><span class="hljs-comment">/* 4.联合类型 */</span><br><br><span class="hljs-keyword">let</span> b4: <span class="hljs-string">&quot;male&quot;</span> | <span class="hljs-string">&quot;female&quot;</span>;<br>b4 = <span class="hljs-string">&quot;male&quot;</span>;<br>b4 = <span class="hljs-string">&quot;female&quot;</span>;<br><br><span class="hljs-keyword">let</span> c4: boolean | string;<br>c4 = <span class="hljs-literal">true</span>;<br>c4 = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><br><span class="hljs-comment">/* 5.组合类型 */</span><br><br><span class="hljs-comment">// &amp;表示同时满足的类型</span><br><span class="hljs-keyword">let</span> a5: &#123; <span class="hljs-attr">name</span>: string &#125; &amp; &#123; <span class="hljs-attr">age</span>: number &#125;;<br>a5 = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;haha&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;;<br><br><span class="hljs-comment">/* 6.其他常见基本类型(除了：number、string、bool之外) */</span><br><br><span class="hljs-comment">/* 6.1 Any */</span><br><br><span class="hljs-comment">// any 表示的是任意类型，一个变量设置类型为any后相当于：对该变量关闭了TS的类型检测！</span><br><span class="hljs-comment">// 使用TS时，强烈不建议使用any类型</span><br><span class="hljs-comment">// let d: any;</span><br><br><span class="hljs-comment">// 声明变量如果不指定类型，则TS解析器会自动判断变量的类型为any （隐式的any）</span><br><span class="hljs-keyword">let</span> a61;<br>a61 = <span class="hljs-number">10</span>;<br>a61 = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>a61 = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">/* 6.2 Unknown */</span><br><br><span class="hljs-keyword">let</span> a62: unknown;<br>a62 = <span class="hljs-number">10</span>;<br>a62 = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>a62 = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">/* 6.2.2 Unknown和Any对比 */</span><br><br><span class="hljs-keyword">let</span> s: string = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-comment">// a61的类型是any，它可以赋值给任意变量</span><br><span class="hljs-comment">// any赋值给其他变量时，TS也会同时关闭对那个赋值变量的类型检查！</span><br>s = a61;<br><br><span class="hljs-comment">// a62的类型是unknown，它不能赋值给一个确定类型！</span><br><span class="hljs-comment">// s = a62;</span><br><br><span class="hljs-comment">// 即：unknown 实际上就是一个类型安全的any</span><br><span class="hljs-comment">// unknown类型的变量，不能直接赋值给其他变量</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a62 === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    s = a62;<br>&#125;<br><br><span class="hljs-comment">/* 6.3 void */</span><br><br><span class="hljs-comment">// void 用来表示空，主要用于函数中</span><br><span class="hljs-comment">// 以函数为例，表示没有返回值的函数：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>&#123;<br>&#125;<br><br><span class="hljs-comment">/* 6.4 undefined */</span><br><br><span class="hljs-comment">// never 表示永远不会返回结果（连undefined都没有）[较少使用]</span><br><span class="hljs-comment">// 下面的函数没有返回值（连undefined都没有），仅抛出error</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>): <span class="hljs-title">never</span> </span>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;报错了！&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">/* 6.5 object */</span><br><br><span class="hljs-comment">// object表示一个js对象类型</span><br><span class="hljs-keyword">let</span> a65: object;<br>a65 = &#123;&#125;;<br>a65 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>&#125;;<br><br><span class="hljs-comment">// &#123;&#125; 用来指定对象中可以包含哪些属性</span><br><span class="hljs-comment">// 语法：</span><br><span class="hljs-comment">//   &#123;属性名:属性值,属性名:属性值&#125;</span><br><span class="hljs-comment">// 在属性名后边加上?，表示属性是可选的</span><br><span class="hljs-keyword">let</span> b65: &#123; <span class="hljs-attr">name</span>: string, age?: number &#125;;<br>b65 = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;haha&#x27;</span>&#125;;<br>b65 = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;;<br><br><span class="hljs-comment">// [propName: string]: any 表示任意类型的属性</span><br><span class="hljs-comment">// 所以下面定义了一个必须包含name属性，其他属性随意的类型</span><br><span class="hljs-keyword">let</span> c65: &#123; <span class="hljs-attr">name</span>: string, [propName: string]: any &#125;;<br>c65 = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;猪八戒&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;;<br><br><span class="hljs-comment">/* 6.5.2 函数对象 */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*   设置函数结构的类型声明：</span><br><span class="hljs-comment">*       语法：(形参:类型, 形参:类型 ...) =&gt; 返回值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> d65: <span class="hljs-function">(<span class="hljs-params">a: number, b: number</span>) =&gt;</span> number;<br><span class="hljs-comment">// 声明了类型之后，在定义时可以不再指出类型</span><br>d65 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n1, n2</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> n1 + n2<br>&#125;<br><span class="hljs-comment">// 也可以指出类型</span><br>d65 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n1: number, n2: number</span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> n1 + n2<br>&#125;<br><br><span class="hljs-comment">// 下面的一些定义都是错误的！</span><br><span class="hljs-comment">// d65 = function (n1: string, n2: number): number &#123;</span><br><span class="hljs-comment">//     return n1 + n2</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// d65 = function (n1: number, n2: number, n3: number): number &#123;</span><br><span class="hljs-comment">//     return n1 + n2 + n3;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 但是下面这个是对的！</span><br>d65 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n1: number</span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> n1<br>&#125;<br><br><span class="hljs-comment">/* 6.6 数组 */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*   数组的类型声明：</span><br><span class="hljs-comment">*       类型[]</span><br><span class="hljs-comment">*       Array&lt;类型&gt;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 例如：string[] 表示字符串数组</span><br><span class="hljs-keyword">let</span> e66: string[];<br>e66 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><br><span class="hljs-comment">// number[] 表示数值数值</span><br><span class="hljs-keyword">let</span> f66: number[];<br><br><span class="hljs-comment">// 也可以使用下面的声明方式</span><br><span class="hljs-keyword">let</span> g66: <span class="hljs-built_in">Array</span>&lt;number&gt;;<br>g66 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-comment">/* 6.7 元组 */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*   元组，元组就是固定长度的数组</span><br><span class="hljs-comment">*       语法：[类型, 类型, 类型]</span><br><span class="hljs-comment">*   相比于数组，元组的性能更高一些</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> a67: [string, number];<br>a67 = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">123</span>];<br><br><span class="hljs-comment">/* 6.8 枚举 */</span><br><br>enum Gender &#123;<br>    Male,<br>    Female,<br>&#125;<br><br><span class="hljs-keyword">let</span> a68: &#123; <span class="hljs-attr">name</span>: string, <span class="hljs-attr">gender</span>: Gender &#125;;<br>a68 = &#123;<br>    name: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>    gender: Gender.Male<br>&#125;<br><span class="hljs-built_in">console</span>.log(a68.gender === Gender.Male);<br><br><span class="hljs-comment">/* 7.类型别名 */</span><br><br><span class="hljs-comment">// 使用关键字type</span><br>type myType = <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span> | <span class="hljs-number">4</span> | <span class="hljs-number">5</span>;<br><span class="hljs-keyword">let</span> k: myType;<br><span class="hljs-keyword">let</span> l: myType;<br><span class="hljs-keyword">let</span> m: myType;<br><br>k = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// k = 6 // error!</span><br><br><span class="hljs-comment">/* 8.类型断言 */</span><br><br><span class="hljs-comment">// 类型断言，用来帮助编译器判断变量的实际类型</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 语法：</span><br><span class="hljs-comment">*   变量 as 类型</span><br><span class="hljs-comment">*   &lt;类型&gt;变量</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-comment">// 有些情况下，变量的类型对于我们来说是很明确</span><br><span class="hljs-comment">// 但是TS编译器却并不清楚</span><br><span class="hljs-comment">// 此时，可以通过类型断言来告诉编译器变量的类型</span><br><span class="hljs-comment">// 断言有两种形式：</span><br><br><span class="hljs-comment">// 8.1：变量 as 类型</span><br><span class="hljs-keyword">let</span> someValue: unknown = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> strLength: number = (someValue <span class="hljs-keyword">as</span> string).length;<br><br><span class="hljs-comment">// 8.2：&lt;类型&gt;变量</span><br><span class="hljs-keyword">let</span> strLength2: number = (&lt;string&gt;someValue).length;<br></code></pre></div></td></tr></table></figure><h1 id="四-编译选修"><a href="#四-编译选修" class="headerlink" title="四.编译选修"></a>四.编译选修</h1><h2 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h2><p>编译文件时，使用 -w 指令后，TS 编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。<br>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">tsc xxx.ts -w<br></code></pre></div></td></tr></table></figure><h2 id="自动编译整个项目"><a href="#自动编译整个项目" class="headerlink" title="自动编译整个项目"></a>自动编译整个项目</h2><p>如果直接使用 tsc 指令，则可以自动将当前项目下的所有 ts 文件编译为 js 文件。<br><strong>但是能直接使用 tsc 命令的前提时，要先在项目根目录下创建一个 ts 的配置文件 tsconfig.json</strong><br>tsconfig.json 是一个 JSON 文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</p><h2 id="配置选项："><a href="#配置选项：" class="headerlink" title="配置选项："></a>配置选项：</h2><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><ul><li>定义希望被编译文件所在的目录</li><li>默认值：[“**/*”]</li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;include&quot;</span>:[<span class="hljs-string">&quot;src/**/*&quot;</span>, <span class="hljs-string">&quot;tests/**/*&quot;</span>]<br></code></pre></div></td></tr></table></figure><p>上述示例中，所有 src 目录和 tests 目录下的文件都会被编译</p><h3 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h3><ul><li>定义需要排除在外的目录</li><li>默认值：<code>[&quot;node_modules&quot;, &quot;bower_components&quot;, &quot;jspm_packages&quot;]</code></li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;exclude&quot;</span>: [<span class="hljs-string">&quot;./src/hello/**/*&quot;</span>]<br></code></pre></div></td></tr></table></figure><p>上述示例中，src 下 hello 目录下的文件都不会被编译</p><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><ul><li>定义被继承的配置文件</li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;extends&quot;</span>: <span class="hljs-string">&quot;./configs/base&quot;</span><br></code></pre></div></td></tr></table></figure><p>上述示例中，当前配置文件中会自动包含 config 目录下 base.json 中的所有配置信息</p><h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><ul><li>指定被编译文件的列表，<strong>只有需要编译的文件少时才会用到</strong></li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;files&quot;</span>: [<br>    <span class="hljs-string">&quot;core.ts&quot;</span>,<br>    <span class="hljs-string">&quot;sys.ts&quot;</span>,<br>    <span class="hljs-string">&quot;types.ts&quot;</span>,<br>    <span class="hljs-string">&quot;scanner.ts&quot;</span>,<br>    <span class="hljs-string">&quot;parser.ts&quot;</span>,<br>    <span class="hljs-string">&quot;utilities.ts&quot;</span>,<br>    <span class="hljs-string">&quot;binder.ts&quot;</span>,<br>    <span class="hljs-string">&quot;checker.ts&quot;</span>,<br>    <span class="hljs-string">&quot;tsc.ts&quot;</span><br>  ]<br><br></code></pre></div></td></tr></table></figure><ul><li>列表中的文件都会被 TS 编译器所编译</li></ul><h3 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h3><ul><li>编译选项是配置文件中非常重要也比较复杂的配置选项</li><li>在 compilerOptions 中包含多个子选项，用来完成对编译的配置</li></ul><p>项目选项：</p><h4 id="target"><a href="#target" class="headerlink" title="target"></a>target</h4><ul><li>设置 ts 代码编译的目标版本</li><li>可选值：<ul><li><code>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</code></li></ul></li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES6&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><ul><li>如上设置，我们所编写的 ts 代码将会被编译为 ES6 版本的 js 代码</li></ul><h4 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h4><ul><li>指定代码运行时所包含的库（宿主环境）</li><li>可选值：<ul><li><code>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ......</code></li></ul></li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES6&quot;</span>,     <span class="hljs-string">&quot;lib&quot;</span>: [<span class="hljs-string">&quot;ES6&quot;</span>, <span class="hljs-string">&quot;DOM&quot;</span>],     <span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span>,     <span class="hljs-string">&quot;outFile&quot;</span>: <span class="hljs-string">&quot;dist/aa.js&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><ul><li>设置编译后代码使用的模块化系统</li><li>可选值：<ul><li><code>CommonJS、UMD、AMD、System、ES2020、ESNext、None</code></li></ul></li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;CommonJS&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="outDir"><a href="#outDir" class="headerlink" title="outDir"></a>outDir</h4><ul><li>编译后文件的所在目录</li><li>默认情况下，编译后的 js 文件会和 ts 文件位于相同的目录，设置 outDir 后可以改变编译后文件的位置</li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>  - 设置后编译后的js文件将会生成到dist目录</code></pre></div><h4 id="outFile"><a href="#outFile" class="headerlink" title="outFile"></a>outFile</h4><ul><li>将所有的文件编译为一个 js 文件</li><li>默认会将所有的编写在全局作用域中的代码合并为一个 js 文件，如果 module 制定了 None、System 或 AMD 则会将模块一起合并到文件之中</li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;outFile&quot;</span>: <span class="hljs-string">&quot;dist/app.js&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="rootDir"><a href="#rootDir" class="headerlink" title="rootDir"></a>rootDir</h4><ul><li>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过 rootDir 可以手动指定根目录</li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;rootDir&quot;</span>: <span class="hljs-string">&quot;./src&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="allowJs"><a href="#allowJs" class="headerlink" title="allowJs"></a>allowJs</h4><ul><li>是否对 js 文件编译</li></ul><h4 id="checkJs"><a href="#checkJs" class="headerlink" title="checkJs"></a>checkJs</h4><ul><li>是否对 js 文件进行检查</li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span>,     <span class="hljs-string">&quot;checkJs&quot;</span>: <span class="hljs-literal">true</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="removeComments"><a href="#removeComments" class="headerlink" title="removeComments"></a>removeComments</h4><ul><li>是否删除注释</li><li>默认值：false</li></ul><h4 id="noEmit"><a href="#noEmit" class="headerlink" title="noEmit"></a>noEmit</h4><ul><li>不对代码进行编译</li><li>默认值：false</li></ul><h4 id="sourceMap"><a href="#sourceMap" class="headerlink" title="sourceMap"></a>sourceMap</h4><ul><li>是否生成 sourceMap</li><li>默认值：false</li></ul><h4 id="严格检查"><a href="#严格检查" class="headerlink" title="严格检查"></a>严格检查</h4><ul><li>strict<ul><li>启用所有的严格检查，默认值为 true，设置后相当于开启了所有的严格检查</li></ul></li><li>alwaysStrict<ul><li>总是以严格模式对代码进行编译</li></ul></li><li>noImplicitAny<ul><li>禁止隐式的 any 类型</li></ul></li><li>noImplicitThis<ul><li>禁止类型不明确的 this</li></ul></li><li>strictBindCallApply<ul><li>严格检查 bind、call 和 apply 的参数列表</li></ul></li><li>strictFunctionTypes<ul><li>严格检查函数的类型</li></ul></li><li>strictNullChecks<ul><li>严格的空值检查</li></ul></li><li>strictPropertyInitialization<ul><li>严格检查属性是否初始化</li></ul></li></ul><h4 id="额外检查"><a href="#额外检查" class="headerlink" title="额外检查"></a>额外检查</h4><ul><li>noFallthroughCasesInSwitch<ul><li>检查 switch 语句包含正确的 break</li></ul></li><li>noImplicitReturns<ul><li>检查函数没有隐式的返回值</li></ul></li><li>noUnusedLocals<ul><li>检查未使用的局部变量</li></ul></li><li>noUnusedParameters<ul><li>检查未使用的参数</li></ul></li></ul><h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4><ul><li>allowUnreachableCode<ul><li>检查不可达代码</li><li>可选值：<ul><li>true，忽略不可达代码</li><li>false，不可达代码将引起错误</li></ul></li></ul></li><li>noEmitOnError<ul><li>有错误的情况下不进行编译</li><li>默认值：false</li></ul></li></ul><h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-comment">// 此json文件中可以写注释！</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    tsconfig.json是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译</span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    &quot;include&quot; 用来指定哪些ts文件需要被编译</span><br><span class="hljs-comment">      默认：当前路径下所有文件, **\*</span><br><span class="hljs-comment">      路径：** 表示任意目录</span><br><span class="hljs-comment">            * 表示任意文件</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-string">&quot;include&quot;</span>: [<span class="hljs-string">&quot;./src/**/*&quot;</span>],<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    &quot;exclude&quot; 不需要被编译的文件目录</span><br><span class="hljs-comment">    默认值：</span><br><span class="hljs-comment">      [&quot;node_modules&quot;, &quot;bower_components&quot;, &quot;jspm_packages&quot;, &quot;./dist&quot;]</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-string">&quot;exclude&quot;</span>: [<span class="hljs-string">&quot;./src/exclude/**/*&quot;</span>],<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    被继承的配置文件</span><br><span class="hljs-comment">    例如：&quot;extends&quot;: &quot;。/configs/base&quot;,</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-comment">//  &quot;extends&quot;: &quot;&quot;,</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    指定被编译文件的列表，只有需要编译的文件少时才会用到</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-comment">//  &quot;files&quot;: [],</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    compilerOptions 编译器的选项</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-comment">// target 用来指定ts被编译为的ES的版本</span><br>    <span class="hljs-comment">// &#x27;es3&#x27;, &#x27;es5&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;, &#x27;es2018&#x27;, ...</span><br>    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;es2015&quot;</span>,<br>    <span class="hljs-comment">// module 指定要使用的模块化的规范</span><br>    <span class="hljs-comment">// &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, ...</span><br>    <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;es2015&quot;</span>,<br>    <span class="hljs-comment">// lib用来指定项目中要使用的库</span><br>    <span class="hljs-comment">// 在node项目中可以声明用到的库，在前端中可以声明dom(浏览器中的内置库，但是在node中是不需要的！)</span><br>    <span class="hljs-comment">// 默认就是在浏览器中的运行环境！</span><br>    <span class="hljs-comment">//&#x27;es5&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es7&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;, &#x27;es2018&#x27;, &#x27;es2019&#x27;, &#x27;es2020&#x27;,</span><br>    <span class="hljs-comment">// &#x27;esnext&#x27;, &#x27;dom&#x27;, &#x27;dom.iterable&#x27;, ...</span><br>    <span class="hljs-string">&quot;lib&quot;</span>: [<span class="hljs-string">&quot;es6&quot;</span>, <span class="hljs-string">&quot;dom&quot;</span>],<br>    <span class="hljs-comment">// outDir 用来指定编译后文件所在的目录</span><br>    <span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;./dist&quot;</span>,<br>    <span class="hljs-comment">// 将代码合并为一个文件</span><br>    <span class="hljs-comment">// 设置outFile后，所有的全局作用域中的代码会合并到同一个文件中</span><br>    <span class="hljs-comment">//&quot;outFile&quot;: &quot;./dist/app.js&quot;</span><br>    <span class="hljs-comment">// 是否对js文件进行编译，默认是false</span><br>    <span class="hljs-string">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 是否检查js代码是否符合语法规范，默认是false</span><br>    <span class="hljs-string">&quot;checkJs&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 是否移除注释</span><br>    <span class="hljs-string">&quot;removeComments&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 不生成编译后的文件</span><br>    <span class="hljs-comment">// 仅用TS检查语法</span><br>    <span class="hljs-string">&quot;noEmit&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 当有错误时不生成编译后的文件</span><br>    <span class="hljs-string">&quot;noEmitOnError&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      语法检查属性</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">// 所有严格检查的总开关</span><br>    <span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 用来设置编译后的文件是否使用严格模式，默认false</span><br>    <span class="hljs-comment">// 在ES6中的模块化会自动使用严格模式，而无需在文件开头添加`&#x27;use strict&#x27;`</span><br>    <span class="hljs-string">&quot;alwaysStrict&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 不允许隐式的any类型</span><br>    <span class="hljs-string">&quot;noImplicitAny&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 不允许不明确类型的this</span><br>    <span class="hljs-string">&quot;noImplicitThis&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 严格的检查空值</span><br>    <span class="hljs-string">&quot;strictNullChecks&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="五-TypeScript-打包"><a href="#五-TypeScript-打包" class="headerlink" title="五.TypeScript 打包"></a>五.TypeScript 打包</h1><h2 id="webpack-整合"><a href="#webpack-整合" class="headerlink" title="webpack 整合"></a>webpack 整合</h2><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包；<br>TS 同样也可以结合构建工具一起使用，下边以 webpack 为例介绍一下如何结合构建工具使用 TS；<br>步骤如下：</p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>进入项目根目录，执行命令 npm init -y，创建 package.json 文件</p><h3 id="下载构建工具"><a href="#下载构建工具" class="headerlink" title="下载构建工具"></a>下载构建工具</h3><p>命令如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin<br></code></pre></div></td></tr></table></figure><p>共安装了 7 个包:</p><ul><li>webpack：构建工具 webpack</li><li>webpack-cli：webpack 的命令行工具</li><li>webpack-dev-server：webpack 的开发服务器</li><li>typescript：ts 编译器</li><li>ts-loader：ts 加载器，用于在 webpack 中编译 ts 文件</li><li>html-webpack-plugin：webpack 中 html 插件，用来自动创建 html 文件</li><li>clean-webpack-plugin：webpack 中的清除插件，每次构建都会先清除目录</li></ul><h3 id="配置-webpack"><a href="#配置-webpack" class="headerlink" title="配置 webpack"></a>配置 webpack</h3><p>根目录下创建 webpack 的配置文件 webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  optimization: &#123;<br>    minimize: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 关闭代码压缩，可选</span><br>  &#125;,<br><br>  entry: <span class="hljs-string">&#x27;./src/index.ts&#x27;</span>,<br><br>  devtool: <span class="hljs-string">&#x27;inline-source-map&#x27;</span>,<br><br>  devServer: &#123;<br>    contentBase: <span class="hljs-string">&#x27;./dist&#x27;</span>,<br>  &#125;,<br><br>  output: &#123;<br>    path: path.resolve(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    filename: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>    environment: &#123;<br>      arrowFunction: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 关闭webpack的箭头函数，可选</span><br>    &#125;,<br>  &#125;,<br><br>  resolve: &#123;<br>    extensions: [<span class="hljs-string">&#x27;.ts&#x27;</span>, <span class="hljs-string">&#x27;.js&#x27;</span>],<br>  &#125;,<br><br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.ts$/</span>,<br>        use: &#123;<br>          loader: <span class="hljs-string">&#x27;ts-loader&#x27;</span>,<br>        &#125;,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br><br>  plugins: [<br>    <span class="hljs-keyword">new</span> CleanWebpackPlugin(),<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      title: <span class="hljs-string">&#x27;TS测试&#x27;</span>,<br>    &#125;),<br>  ],<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="配置-TS-编译选项"><a href="#配置-TS-编译选项" class="headerlink" title="配置 TS 编译选项"></a>配置 TS 编译选项</h4><p>根目录下创建 tsconfig.json，配置可以根据自己需要</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>   <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>       <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>       <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>       <span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span><br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="修改-package-json-配置"><a href="#修改-package-json-配置" class="headerlink" title="修改 package.json 配置"></a>修改 package.json 配置</h4><p>修改 package.json 添加如下配置</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>   ...<br>   <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>       <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br>       <span class="hljs-comment">//&quot;build&quot;: &quot;webpack&quot;,</span><br>       <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;webpack serve --open chrome.exe&quot;</span><br>       <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack --mode development&quot;</span>,<br>     <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --mode production&quot;</span><br>   &#125;,<br>   ...<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h4><p>在 src 下创建 ts 文件，并在并命令行执行<code>npm run build</code>对代码进行编译；<br>或者执行<code>npm start</code>来启动开发服务器；</p><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>除了 webpack，开发中还经常需要结合 babel 来对代码进行转换；<br>以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将 babel 引入到项目中；<br>虽然 TS 在编译时也支持代码转换，但是只支持简单的代码转换；<br>对于例如：Promise 等 ES6 特性，TS 无法直接转换，这时还要用到 babel 来做转换；</p><h4 id="安装依赖包："><a href="#安装依赖包：" class="headerlink" title="安装依赖包："></a>安装依赖包：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm i -D @babel/core @babel/preset-env babel-loader core-js<br></code></pre></div></td></tr></table></figure><p>共安装了 4 个包，分别是：</p><ul><li>@babel/core：babel 的核心工具</li><li>@babel/preset-env：babel 的预定义环境</li><li>@babel-loader：babel 在 webpack 中的加载器</li><li>core-js：core-js 用来使老版本的浏览器支持新版 ES 语法</li></ul><h4 id="修改-webpack-config-js-配置文件"><a href="#修改-webpack-config-js-配置文件" class="headerlink" title="修改 webpack.config.js 配置文件"></a>修改 webpack.config.js 配置文件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">...<br><span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>        &#123;<br>            test: <span class="hljs-regexp">/\.ts$/</span>,<br>            use: [<br>                &#123;<br>                    loader: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>                    options:&#123;<br>                        presets: [<br>                            [<br>                                <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>                                &#123;<br>                                    <span class="hljs-string">&quot;targets&quot;</span>:&#123;<br>                                        <span class="hljs-string">&quot;chrome&quot;</span>: <span class="hljs-string">&quot;58&quot;</span>,<br>                                        <span class="hljs-string">&quot;ie&quot;</span>: <span class="hljs-string">&quot;11&quot;</span><br>                                    &#125;,<br>                                    <span class="hljs-string">&quot;corejs&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>,<br>                                    <span class="hljs-string">&quot;useBuiltIns&quot;</span>: <span class="hljs-string">&quot;usage&quot;</span><br>                                &#125;<br>                            ]<br>                        ]<br>                    &#125;<br>                &#125;,<br>                &#123;<br>                    loader: <span class="hljs-string">&quot;ts-loader&quot;</span>,<br><br>                &#125;<br>            ],<br>            exclude: <span class="hljs-regexp">/node_modules/</span><br>        &#125;<br>    ]<br>&#125;<br>...<br></code></pre></div></td></tr></table></figure><p>如此一来，使用 ts 编译后的文件将会再次被 babel 处理；<br>使得代码可以在大部分浏览器中直接使用；<br>同时可以在配置选项的 targets 中指定要兼容的浏览器版本；<br>​</p><h1 id="六、面向对象"><a href="#六、面向对象" class="headerlink" title="六、面向对象"></a>六、面向对象</h1><p>要想面向对象，操作对象，首先便要拥有对象；<br>要创建对象，必须要先定义类，所谓的类可以理解为对象的模型；<br>程序中可以根据类创建指定类型的对象；<br>举例来说：<br>可以通过 Person 类来创建人的对象，通过 Dog 类创建狗的对象，不同的类可以用来创建不同的对象；<br>​</p><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>    属性名: 类型;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">参数: 类型</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.属性名 = 参数;<br>    &#125;<br><br>    方法名()&#123;<br>        ....<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>  name: string;<br>  age: number;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用类：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);<br>p.sayHello();<br></code></pre></div></td></tr></table></figure><h3 id="1-class-ts"><a href="#1-class-ts" class="headerlink" title="1_class.ts"></a>1_class.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用class关键字来定义一个类</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *   对象中主要包含了两个部分：</span><br><span class="hljs-comment"> *       属性</span><br><span class="hljs-comment"> *       方法</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   *   直接定义的属性是实例属性，需要通过对象的实例去访问：</span><br><span class="hljs-comment">   *       const per = new Person();</span><br><span class="hljs-comment">   *       per.name</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   *   使用static开头的属性是静态属性（类属性），可以直接通过类去访问</span><br><span class="hljs-comment">   *       Person.age</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   *   readonly开头的属性表示一个只读的属性无法修改</span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">        定义实例属性（new出实例之后才能访问的属性）</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-comment">// name: string = &#x27;孙悟空&#x27;;</span><br>  <span class="hljs-comment">// age:number = 18;</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">        定义静态属性：在属性前使用static关键字可以定义类属性（静态属性）</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-comment">// static age: number = 18;</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">        readonly开头的属性表示一个只读的属性无法修改</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-comment">// readonly name: string = &#x27;孙悟空&#x27;;</span><br><br>  name: string = <span class="hljs-string">&#x27;孙悟空&#x27;</span>;<br>  age: number = <span class="hljs-number">18</span>;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 定义方法：如果方法以static开头则方法就是类方法，可以直接通过类去调用</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 实例方法</span><br>  <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hello 大家好！&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 类方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hello 大家好！&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 创建实例 */</span><br><span class="hljs-keyword">const</span> per = <span class="hljs-keyword">new</span> Person();<br><br><span class="hljs-comment">/* 属性 */</span><br><br><span class="hljs-comment">// 访问实例属性</span><br><span class="hljs-built_in">console</span>.log(per);<br><span class="hljs-built_in">console</span>.log(per.name, per.age);<br><br><span class="hljs-comment">// 访问静态(类)属性</span><br><span class="hljs-comment">// console.log(Person.age);</span><br><br><span class="hljs-comment">// 如果是readonly类型，则无法修改</span><br><span class="hljs-comment">// 下面的代码报错</span><br><span class="hljs-comment">// per.name = &#x27;tom&#x27;;</span><br><br><span class="hljs-comment">/* 方法 */</span><br><br><span class="hljs-comment">// 访问实例方法</span><br>per.sayHello();<br><br><span class="hljs-comment">// 访问静态方法</span><br>Person.sayHello();<br></code></pre></div></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="可以使用-constructor-定义一个构造器方法；"><a href="#可以使用-constructor-定义一个构造器方法；" class="headerlink" title="可以使用 constructor 定义一个构造器方法；"></a>可以使用 constructor 定义一个构造器方法；</h3><p><strong>注 1：在 TS 中只能有一个构造器方法！</strong><br>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>  name: string;<br>  age: number;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>同时也可以直接将属性定义在构造函数中：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">public name: string, public age: number</span>)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面两种定义方法是完全相同的！</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>在类中，使用 this 表示当前对象</p><h3 id="2-constructor-ts"><a href="#2-constructor-ts" class="headerlink" title="2_constructor.ts"></a>2_constructor.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br>  name: string;<br>  age: number;<br><br>  <span class="hljs-comment">// constructor 被称为构造函数</span><br>  <span class="hljs-comment">// 构造函数会在对象创建时调用</span><br>  <span class="hljs-comment">// TS中仅能创建一个构造函数！</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>    <span class="hljs-comment">// 在实例方法中，this就表示当前当前的实例</span><br>    <span class="hljs-comment">// 在构造函数中的当前对象就是新建的那个对象</span><br>    <span class="hljs-comment">// 可以通过this向新建的对象中添加属性</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">bark</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// alert(&#x27;汪汪汪！&#x27;);</span><br>    <span class="hljs-comment">// 在方法中可以通过this来表示当前调用方法的对象</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-number">4</span>);<br><span class="hljs-keyword">const</span> dog2 = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-built_in">console</span>.log(dog);<br><span class="hljs-built_in">console</span>.log(dog2);<br><br>dog2.bark();<br></code></pre></div></td></tr></table></figure><p><strong>注 2：子类继承父类时，必须调用父类的构造方法（如果子类中也定义了构造方法）！</strong><br>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    protected num: number;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">num: number</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.num = num;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br>    protected name: string;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">num: number, name: string</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(num);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>如果在 X 类中不调用 super 将会报错！</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承时面向对象中的又一个特性<br>通过继承可以将其他类中的属性和方法引入到当前类中<br>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  name: string;<br>  age: number;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">bark</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>, <span class="hljs-number">4</span>);<br>dog.bark();<br></code></pre></div></td></tr></table></figure><p>通过继承可以在不修改类的情况下完成对类的扩展</p><h3 id="extends-ts"><a href="#extends-ts" class="headerlink" title="extends.ts"></a>extends.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 定义一个Animal类</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    name: string;<br>    age: number;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.name = name;<br>      <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;动物在叫~&#x27;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Dog extends Animal</span><br><span class="hljs-comment">   *   - 此时，Animal被称为父类，Dog被称为子类</span><br><span class="hljs-comment">   *   - 使用继承后，子类将会拥有父类所有的方法和属性</span><br><span class="hljs-comment">   *   - 通过继承可以将多个类中共有的代码写在一个父类中，</span><br><span class="hljs-comment">   *       这样只需要写一次即可让所有的子类都同时拥有父类中的属性和方法</span><br><span class="hljs-comment">   *       如果希望在子类中添加一些父类中没有的属性或方法直接加就行</span><br><span class="hljs-comment">   *   - 如果在子类中添加了和父类相同的方法，则子类方法会覆盖掉父类的方法</span><br><span class="hljs-comment">   *       这种子类覆盖掉父类方法的形式，我们称为方法重写</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 定义一个表示狗的类</span><br>  <span class="hljs-comment">// 使Dog类继承Animal类</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>在跑~~~`</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪汪汪汪！&#x27;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 定义一个表示猫的类</span><br>  <span class="hljs-comment">// 使Cat类继承Animal类</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;喵喵喵喵！&#x27;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>, <span class="hljs-number">5</span>);<br>  <span class="hljs-keyword">const</span> cat = <span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&#x27;咪咪&#x27;</span>, <span class="hljs-number">3</span>);<br>  <span class="hljs-built_in">console</span>.log(dog);<br>  dog.sayHello();<br>  dog.run();<br>  <span class="hljs-built_in">console</span>.log(cat);<br>  cat.sayHello();<br>&#125;)();<br></code></pre></div></td></tr></table></figure><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写<br>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  name: string;<br>  age: number;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`父类中的run方法！`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">bark</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`子类中的run方法，会重写父类中的run方法！`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>, <span class="hljs-number">4</span>);<br>dog.bark();<br></code></pre></div></td></tr></table></figure><p><strong>在子类中可以使用 super 来完成对父类的引用</strong></p><h3 id="super-ts"><a href="#super-ts" class="headerlink" title="super.ts"></a>super.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    name: string;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;动物在叫~&#x27;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    age: number;<br><br>    <span class="hljs-comment">// 如果在子类中写了构造函数，在子类构造函数中&quot;必须&quot;对父类的构造函数进行调用</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>      <span class="hljs-comment">// 调用父类的构造函数</span><br>      <span class="hljs-built_in">super</span>(name);<br>      <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-comment">// 在类的方法中 super就表示当前类的父类</span><br>      <span class="hljs-comment">//super.sayHello();</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪汪汪汪！&#x27;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>, <span class="hljs-number">3</span>);<br>  dog.sayHello();<br>&#125;)();<br></code></pre></div></td></tr></table></figure><h2 id="抽象类（abstract-class）"><a href="#抽象类（abstract-class）" class="headerlink" title="抽象类（abstract class）"></a>抽象类（abstract class）</h2><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>  abstract run(): <span class="hljs-keyword">void</span>;<br>  <span class="hljs-function"><span class="hljs-title">bark</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;动物在叫~&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animals</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;狗在跑~&#x27;</span>);<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>使用 abstract 开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现;</p><h3 id="abstract-ts"><a href="#abstract-ts" class="headerlink" title="abstract.ts"></a>abstract.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   *   以abstract开头的类是抽象类，</span><br><span class="hljs-comment">   *       抽象类和其他类区别不大，只是不能用来创建对象</span><br><span class="hljs-comment">   *       抽象类就是专门用来被继承的类</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   *       抽象类中可以添加抽象方法</span><br><span class="hljs-comment">   */</span><br>  abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    name: string<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.name = name<br>    &#125;<br><br>    <span class="hljs-comment">// 定义一个抽象方法</span><br>    <span class="hljs-comment">// 抽象方法使用 abstract开头，没有方法体</span><br>    <span class="hljs-comment">// 抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写</span><br>    abstract sayHello(): <span class="hljs-keyword">void</span><br>  &#125;<br><br>  <span class="hljs-comment">// 下面的代码会报错</span><br>  <span class="hljs-comment">// const an = new Animal();</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪汪汪汪！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;喵喵喵喵！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>)<br>  dog.sayHello()<br>&#125;)()<br><br></code></pre></div></td></tr></table></figure><h2 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h2><p>接口的作用类似于抽象类，不同点在于：接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法；<br>接口主要负责定义一个类的结构，接口可以去限制一个对象的接口：对象只有包含接口中定义的所有属性和方法时才能匹配接口；<br>同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性；<br>示例（检查对象类型）：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">interface Person &#123;<br>  name: string;<br>  sayHello(): <span class="hljs-keyword">void</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">per: Person</span>) </span>&#123;<br>  per.sayHello();<br>&#125;<br><br>fn(&#123;<br>  name: <span class="hljs-string">&#x27;孙悟空&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Hello, 我是 <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>示例（实现）：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">interface Person&#123;<br>   name: string;<br>   sayHello():<span class="hljs-keyword">void</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-title">implements</span> <span class="hljs-title">Person</span></span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">public name: string</span>)</span> &#123;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;大家好，我是&#x27;</span>+<span class="hljs-built_in">this</span>.name);<br>   &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="interface-ts"><a href="#interface-ts" class="headerlink" title="interface.ts"></a>interface.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 描述一个对象的类型</span><br>  type myType = &#123;<br>    name: string,<br>    age: number,<br>  &#125;;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   *   接口用来定义一个类结构，用来定义一个类中应该包含哪些属性和方法</span><br><span class="hljs-comment">   *       同时接口也可以当成类型声明去使用</span><br><span class="hljs-comment">   */</span><br>  interface myInterface &#123;<br>    name: string;<br>    age: number;<br>  &#125;<br><br>  interface myInterface &#123;<br>    gender: string;<br>  &#125;<br><br>  <span class="hljs-comment">// const obj: myInterface = &#123;</span><br>  <span class="hljs-comment">//     name: &#x27;sss&#x27;,</span><br>  <span class="hljs-comment">//     age: 111,</span><br>  <span class="hljs-comment">//     gender: &#x27;男&#x27;</span><br>  <span class="hljs-comment">// &#125;;</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 接口可以在定义类的时候去限制类的结构，</span><br><span class="hljs-comment">   *   接口中的所有的属性都不能有实际的值</span><br><span class="hljs-comment">   *   接口只定义对象的结构，而不考虑实际值</span><br><span class="hljs-comment">   *       在接口中所有的方法都是抽象方法</span><br><span class="hljs-comment">   */</span><br>  interface myInter &#123;<br>    name: string;<br><br>    sayHello(): <span class="hljs-keyword">void</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 定义类时，可以使类去实现一个接口,</span><br><span class="hljs-comment">   *   实现接口就是使类满足接口的要求</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> <span class="hljs-title">implements</span> <span class="hljs-title">myInter</span> </span>&#123;<br>    name: string;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;大家好~~&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;)();<br></code></pre></div></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装<br>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在 TS 中可以对属性的权限进行设置</p><ul><li>静态属性（static）：<ul><li>声明为 static 的属性或方法不再属于实例，而是属于类的属性；</li></ul></li><li>只读属性（readonly）：<ul><li>如果在声明属性时添加一个 readonly，则属性便成了只读属性无法修改</li></ul></li><li>TS 中属性具有三种修饰符：<ul><li>public（默认值），可以在类、子类和对象中修改</li><li>protected ，可以在类、子类中修改</li><li>private ，可以在类中修改</li></ul></li></ul><p>示例：</p><h3 id="静态属性（static）"><a href="#静态属性（static）" class="headerlink" title="静态属性（static）"></a>静态属性（static）</h3><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用<br>静态属性（方法）使用 static 开头<br>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tools</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> PI = <span class="hljs-number">3.1415926</span>;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params">num1: number, num2: number</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> num1 + num2;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(Tools.PI);<br><span class="hljs-built_in">console</span>.log(Tools.sum(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>));<br></code></pre></div></td></tr></table></figure><h3 id="只读属性（readonly）"><a href="#只读属性（readonly）" class="headerlink" title="只读属性（readonly）"></a>只读属性（readonly）</h3><p>如果在声明属性时添加一个 readonly，则属性便成了只读属性无法修改</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    readonly开头的属性表示一个只读的属性无法修改</span><br><span class="hljs-comment">*/</span><br>readonly name: string = <span class="hljs-string">&#x27;孙悟空&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="TS-中属性具有三种访问修饰符"><a href="#TS-中属性具有三种访问修饰符" class="headerlink" title="TS 中属性具有三种访问修饰符"></a>TS 中属性具有三种访问修饰符</h3><p>public（默认值），可以在类、子类和对象中修改</p><h4 id="public："><a href="#public：" class="headerlink" title="public："></a>public：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    public name: string; <span class="hljs-comment">// 写或什么都不写都是public</span><br>    public age: number;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">// 可以在类中修改</span><br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">//子类中可以修改</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);<br>p.name = <span class="hljs-string">&#x27;猪八戒&#x27;</span>;<span class="hljs-comment">// 可以通过对象修改</span><br><br></code></pre></div></td></tr></table></figure><p>protected ，可以在类、子类中修改</p><h4 id="protected："><a href="#protected：" class="headerlink" title="protected："></a>protected：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    protected name: string;<br>    protected age: number;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">// 可以修改</span><br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">//子类中可以修改</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);<br>p.name = <span class="hljs-string">&#x27;猪八戒&#x27;</span>;<span class="hljs-comment">// 不能修改</span><br><br></code></pre></div></td></tr></table></figure><p>private ，可以在类中修改</p><h4 id="private："><a href="#private：" class="headerlink" title="private："></a>private：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    private name: string;<br>    private age: number;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">// 可以修改</span><br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">//子类中不能修改</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);<br>p.name = <span class="hljs-string">&#x27;猪八戒&#x27;</span>;<span class="hljs-comment">// 不能修改</span><br><br></code></pre></div></td></tr></table></figure><h3 id="属性存取器"><a href="#属性存取器" class="headerlink" title="属性存取器"></a>属性存取器</h3><p>对于一些不希望被任意修改的属性，可以将其设置为 private<br>直接将其设置为 private 将导致无法再通过对象修改其中的属性<br>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器<br>读取属性的方法叫做 setter 方法，设置属性的方法叫做 getter 方法<br>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    private _name: string;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>._name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">get</span> <span class="hljs-title">name</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._name;<br>    &#125;<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-title">name</span>(<span class="hljs-params">name: string</span>)&#123;<br>        <span class="hljs-built_in">this</span>._name = name;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>);<br><span class="hljs-comment">// 实际通过调用getter方法读取name属性</span><br><span class="hljs-built_in">console</span>.log(p1.name);<br><span class="hljs-comment">// 实际通过调用setter方法修改name属性</span><br>p1.name = <span class="hljs-string">&#x27;猪八戒&#x27;</span>;<br><br></code></pre></div></td></tr></table></figure><h2 id="泛型（Generic）"><a href="#泛型（Generic）" class="headerlink" title="泛型（Generic）"></a>泛型（Generic）</h2><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定）；<br>此时泛型便能够发挥作用；<br>举个例子：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">function test(arg: any): any&#123;<br>    return arg;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>上例中，test 函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的；<br>由于类型不确定所以参数和返回值均使用了 any，但是很明显这样做是不合适的：<br>首先使用 any 会关闭 TS 的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型；</p><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><h4 id="创建泛型函数"><a href="#创建泛型函数" class="headerlink" title="创建泛型函数"></a>创建泛型函数</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">function test&lt;T&gt;(arg: T): T&#123;<br>    return arg;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这里的<T>就是泛型；<br>T 是我们给这个类型起的名字（不一定非叫 T），设置泛型后即可在函数中使用 T 来表示该类型；<br>所以泛型其实很好理解，就表示某个类型；<br>那么如何使用上边的函数呢？</p><h4 id="使用泛型函数"><a href="#使用泛型函数" class="headerlink" title="使用泛型函数"></a>使用泛型函数</h4><h5 id="方式一（直接使用）："><a href="#方式一（直接使用）：" class="headerlink" title="方式一（直接使用）："></a>方式一（直接使用）：</h5><p><code>test(10)</code><br>使用时可以直接传递参数使用，类型会由 TS 自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</p><h5 id="方式二（指定类型）："><a href="#方式二（指定类型）：" class="headerlink" title="方式二（指定类型）："></a>方式二（指定类型）：</h5><p><code>test&lt;number&gt;(10)</code><br>也可以在函数后手动指定泛型；</p><h4 id="函数中声明多个泛型"><a href="#函数中声明多个泛型" class="headerlink" title="函数中声明多个泛型"></a>函数中声明多个泛型</h4><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">function test&lt;T, K&gt;(a: T, b: K): K&#123;<br>  return b;<br>&#125;<br><br>test&lt;number, string&gt;(10, &quot;hello&quot;);<br><br></code></pre></div></td></tr></table></figure><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用；</p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>类中同样可以使用泛型：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">class MyClass&lt;T&gt;&#123;<br>  prop: T;<br><br>  constructor(prop: T)&#123;<br>      this.prop = prop;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h3><p>除此之外，也可以对泛型的范围进行约束</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">interface MyInter&#123;<br>  length: number;<br>&#125;<br><br>function test&lt;T extends MyInter&gt;(arg: T): number&#123;<br>  return arg.length;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>使用 T extends MyInter 表示泛型 T 必须是 MyInter 的子类，不一定非要使用接口类和抽象类同样适用；<br>​</p><h3 id="如何使用泛型作为一个具体的类型注解"><a href="#如何使用泛型作为一个具体的类型注解" class="headerlink" title="如何使用泛型作为一个具体的类型注解"></a>如何使用泛型作为一个具体的类型注解</h3><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">//如何使用泛型作为一个具体的类型注解</span><br>function hello&lt;T&gt;(params: T) &#123;<br>  return params;<br>&#125;<br>const func: &lt;T&gt;(param: T) =&gt; T = hello;<br><br></code></pre></div></td></tr></table></figure><h1 id="七、高级用法"><a href="#七、高级用法" class="headerlink" title="七、高级用法"></a>七、高级用法</h1><h2 id="命名空间-namespace"><a href="#命名空间-namespace" class="headerlink" title="命名空间 namespace"></a>命名空间 namespace</h2><p>提供一种类似模块化的编程方式，尽可能少的减少全局变量或者是把一组相关的内容封装到一起，提供统一的暴露接口</p><h3 id="同一个文件内的命名空间"><a href="#同一个文件内的命名空间" class="headerlink" title="同一个文件内的命名空间"></a>同一个文件内的命名空间</h3><p>在 demo1\src\page.ts 文件中，声明<code>namespace</code>，将三个类封装到到一起，最后暴露<code>Page</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">namespace Home &#123;<br>  class Header &#123;<br>    constructor() &#123;<br>      const elem = document.createElement(&#x27;div&#x27;);<br>      elem.innerText = &#x27;this is Header&#x27;;<br>      document.body.appendChild(elem);<br>    &#125;<br>  &#125;<br>  class Content &#123;<br>    constructor() &#123;<br>      const elem = document.createElement(&#x27;div&#x27;);<br>      elem.innerText = &#x27;this is Content&#x27;;<br>      document.body.appendChild(elem);<br>    &#125;<br>  &#125;<br>  class Footer &#123;<br>    constructor() &#123;<br>      const elem = document.createElement(&#x27;div&#x27;);<br>      elem.innerText = &#x27;this is Footer&#x27;;<br>      document.body.appendChild(elem);<br>    &#125;<br>  &#125;<br><br>  export class Page &#123;<br>    constructor() &#123;<br>      new Header();<br>      new Content();<br>      new Footer();<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在 demo1\dist\page.js 中自动生成 js 文件<br>​</p><p>在 demo1\index.html 中，调用 page.js 文件，并且调用<code>Home</code>中的<code>Page</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br><br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script src=&quot;./dist/page.js&quot;&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;script&gt;<br>      new Home.Page();<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><p>最后打开浏览器查看效果，打开控制台输入<code>Home.</code>就能找到 Page<br>​</p><h3 id="多个文件的命名空间互相调用以及子命名空间、接口调用"><a href="#多个文件的命名空间互相调用以及子命名空间、接口调用" class="headerlink" title="多个文件的命名空间互相调用以及子命名空间、接口调用"></a>多个文件的命名空间互相调用以及子命名空间、接口调用</h3><p>先删除原来的 dist 文件<br>在 demo1\tsconfig.json 文件中，更改配置文件<code>&quot;outFile&quot;: &quot;./dist/page.js&quot;</code>将生成的文件统一打包成一个文件，生成的文件不支持<code>commonjs</code>格式，修改<code>&quot;module&quot;: &quot;amd&quot; </code>，改成 amd 格式</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">...<br>&quot;module&quot;: &quot;amd&quot; /* Specify module code generation: &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es2015&#x27;, &#x27;es2020&#x27;, or &#x27;ESNext&#x27;. */,<br>    <span class="hljs-comment">// &quot;lib&quot;: [],                                   /* Specify library files to be included in the compilation. */</span><br>    <span class="hljs-comment">// &quot;allowJs&quot;: true,                             /* Allow javascript files to be compiled. */</span><br>    <span class="hljs-comment">// &quot;checkJs&quot;: true,                             /* Report errors in .js files. */</span><br>    <span class="hljs-comment">// &quot;jsx&quot;: &quot;preserve&quot;,                           /* Specify JSX code generation: &#x27;preserve&#x27;, &#x27;react-native&#x27;, &#x27;react&#x27;, &#x27;react-jsx&#x27; or &#x27;react-jsxdev&#x27;. */</span><br>    <span class="hljs-comment">// &quot;declaration&quot;: true,                         /* Generates corresponding &#x27;.d.ts&#x27; file. */</span><br>    <span class="hljs-comment">// &quot;declarationMap&quot;: true,                      /* Generates a sourcemap for each corresponding &#x27;.d.ts&#x27; file. */</span><br>    <span class="hljs-comment">// &quot;sourceMap&quot;: true,                           /* Generates corresponding &#x27;.map&#x27; file. */</span><br>    &quot;outFile&quot;: &quot;./dist/page.js&quot; /* Concatenate and emit output to single file. */,<br>    &quot;outDir&quot;: &quot;./dist&quot; /* Redirect output structure to the directory. */,<br>    &quot;rootDir&quot;: &quot;./src&quot; /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,<br> ...<br></code></pre></div></td></tr></table></figure><p>在 demo1\src\components.ts 文件中，使用命名空间并暴露原来的三个类</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">namespace Components &#123;<br>  export class Header &#123;<br>    constructor() &#123;<br>      const elem = document.createElement(&#x27;div&#x27;);<br>      elem.innerText = &#x27;this is Header&#x27;;<br>      document.body.appendChild(elem);<br>    &#125;<br>  &#125;<br>  export class Content &#123;<br>    constructor() &#123;<br>      const elem = document.createElement(&#x27;div&#x27;);<br>      elem.innerText = &#x27;this is Content&#x27;;<br>      document.body.appendChild(elem);<br>    &#125;<br>  &#125;<br>  export class Footer &#123;<br>    constructor() &#123;<br>      const elem = document.createElement(&#x27;div&#x27;);<br>      elem.innerText = &#x27;this is Footer&#x27;;<br>      document.body.appendChild(elem);<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在 demo1\src\page.ts 文件中，也使用命名空间，并通过<code>new Components.Header();</code>的方式调用<code>Components</code>的类<br>使用<code>///&lt;reference path=&quot;./components.ts&quot; /&gt;</code>，表明调用文件的关系<br><code>///&lt;reference path=&quot;&quot; /&gt;</code>是固定格式<code>///</code>不能省略</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">///&lt;reference path=&quot;./components.ts&quot; /&gt;</span><br><br>namespace Home &#123;<br>  export class Page &#123;<br>    user: Components.User = &#123;<br>      name: &#x27;dell&#x27;,<br>    &#125;;<br><br>    constructor() &#123;<br>      new Components.Header();<br>      new Components.Content();<br>      new Components.Footer();<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在浏览器控制台输入<code>Components.SubComponents.Test</code>就可以找到子命名空间</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">Components.SubComponents.Test<br>ƒ Test() &#123;<br>            &#125;<br></code></pre></div></td></tr></table></figure><h3 id="使用import导入对应的模块-ES6-语法"><a href="#使用import导入对应的模块-ES6-语法" class="headerlink" title="使用import导入对应的模块 ES6 语法"></a>使用<code>import</code>导入对应的模块 ES6 语法</h3><p>使用 es6 语法通过<code>import</code>导入模块替换<code>///&lt;reference path=&quot;./components.ts&quot; /&gt;</code>​<br>在 demo1\src\page.ts 中，用<code>import</code>以及<code>se6</code>的语法来导入模块，并暴露<code>export default class Page</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import &#123; Header, Content, Footer &#125; from &#x27;./components&#x27;;<br><br>export default class Page &#123;<br>  constructor() &#123;<br>    new Header();<br>    new Content();<br>    new Footer();<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在 demo1\src\components.ts 中</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">export class Header &#123;<br>  constructor() &#123;<br>    const elem = document.createElement(&#x27;div&#x27;);<br>    elem.innerText = &#x27;this is Header&#x27;;<br>    document.body.appendChild(elem);<br>  &#125;<br>&#125;<br>export class Content &#123;<br>  constructor() &#123;<br>    const elem = document.createElement(&#x27;div&#x27;);<br>    elem.innerText = &#x27;this is Content&#x27;;<br>    document.body.appendChild(elem);<br>  &#125;<br>&#125;<br>export class Footer &#123;<br>  constructor() &#123;<br>    const elem = document.createElement(&#x27;div&#x27;);<br>    elem.innerText = &#x27;this is Footer&#x27;;<br>    document.body.appendChild(elem);<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在 demo1\index.html 中，通过<code>require</code>使用<code>page</code>,其中还要引入 <code> &lt;script src=&quot;[https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js&quot;&gt;&lt;/script&gt;](https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js&quot;&gt;&lt;/script&gt;)</code>,<br>否则会报错</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br><br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js&quot;&gt;&lt;/script&gt;<br>    &lt;script src=&quot;./dist/page.js&quot;&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;script&gt;<br>      require([&#x27;page&#x27;], function (page) &#123;<br>        new page.default();<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h3 id="parcel-打包"><a href="#parcel-打包" class="headerlink" title="parcel 打包"></a>parcel 打包</h3><p><code>parcel</code>官方文档<a href="https://github.com/parcel-bundler/parcel">https://github.com/parcel-bundler/parcel</a><br>将浏览器无法运行的 ts 文件编译才可以运行的 js 文件<br>在初始文件中<br>demo2\src\page.ts</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">const teacher: string = &#x27;dell&#x27;;<br>console.log(teacher);<br><br></code></pre></div></td></tr></table></figure><p>demo2\src\index.html</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script src=&quot;./page.ts&quot;&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><p>直接使用 <code>&lt;script src=&quot;./page.ts&quot;&gt;&lt;/script&gt;</code>，浏览器会报错，浏览器无法识别 ts 代码</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">Uncaught SyntaxError: Missing initializer in const declaration<br></code></pre></div></td></tr></table></figure><p>所以我们使用<code>parcel</code>，自动类型转换<br>安装 <code>npm install parcel@next -D </code><br>在 demo2\package.json 中更改 <code>&quot;test&quot;: &quot;parcel ./src/index.html&quot;</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;demo2&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;parcel ./src/index.html&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;keywords&quot;</span>: [],<br>  <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>,<br>  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;parcel&quot;</span>: <span class="hljs-string">&quot;^2.0.0-beta.3.1&quot;</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>不要再中文文件夹下运行，会运行失败的<br>最后运行 <code>npm run test</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&gt; demo2@1.0.0 test E:\demo2<br>&gt; parcel ./src/index.html<br><br>ℹ Server running at http://localhost:1234<br>√ Built in 7.52s<br><br></code></pre></div></td></tr></table></figure><p>运行成功，打开地址到浏览器即可预览</p>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何判断 0.1 + 0.2 与 0.3 相等</title>
    <link href="/2021/05/30/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%200.1%20+%200.2%20%E4%B8%8E%200.3%20%E7%9B%B8%E7%AD%89/"/>
    <url>/2021/05/30/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%200.1%20+%200.2%20%E4%B8%8E%200.3%20%E7%9B%B8%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DeviationValue</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.abs(num1 - num2) &lt; <span class="hljs-built_in">Number</span>.EPSILON<br>&#125;<br></code></pre></div></td></tr></table></figure><p>像 ECMAScript 采用的就是双精确度，也就是说，会用 64 位字节来储存一个浮点数。<br>转换为二进制在计算但是小数无限延伸，二进制截取 53 位导致精度丢失。这就是 0.1+0.2 不为 0.3 的原因 Number.EPSILON 的精度是 2^-52，所以只要丢失精度小于 Number.EPSILON 基本可以确认相等。</p><p>作为一道面试题，我觉得重要的是要讲出一点其他人一般不会答出来的深度。像这道题，可以从原理和解决方案两个地方作为答题点，最好在编一个案例。大致讲自己遇到过这个问题，于是很好奇深入研究了一下，发现是浮点数精度导致……原理怎样怎样……然后又看了业界的库的源码，然后怎样怎样解决。<br>关于原理，<a href="https://github.com/mqyqingfeng/Blog/issues/155">JavaScript 深入之浮点数精度</a>来解释，实际回答的时候，我觉得答出来</p><ol><li>非是 ECMAScript 独有</li><li>IEEE754 标准中 64 位的储存格式，比如 11 位存偏移值</li><li>其中涉及的三次精度丢失</li></ol><p>就已经 OK 了。<br>再讲解决方案，这个可以直接搜索到，各种方案都了解一下，比较一下优劣，还可以参考业界的一些库的实现，比如 math.js，不过相关的我并没有看过，后面我会研究一下。<br>如果还有精力的话，可以从加法再拓展讲讲超出安全值的数字的计算问题。<br>所以我觉得一能回答出底层实现，二能回答出多种解决方案的优劣，三能拓展讲出 bignum 的问题，就是一个非常完美的回答了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> === <span class="hljs-number">0.30000000000000004</span><br></code></pre></div></td></tr></table></figure><p>JavaScript 使用 Number 类型表示数字（整数和浮点数），遵循 IEEE 754 标准，通过 64 位来表示一个数字。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1618467913497-02dafff5-534f-4924-88d6-5c35055da92b.png#clientId=u6ac8959b-2b28-4&from=paste&height=288&id=u7dfa5716&margin=%5Bobject%20Object%5D&originHeight=288&originWidth=721&originalType=binary&size=149667&status=done&style=none&taskId=ub81cf025-31a2-4f86-8cba-01874727ab7&width=721"><br>计算机无法直接对十进制的数字进行运算，这是硬件物理特性决定的。这样运算就分成了两个部分：先按照 IEEE 754 转成相应的二进制，然后对阶运算<br>0.1 和 0.2 转换成二进制后会无限循环，但是由于 IEEE 754 尾数位数的限制，需要将后面多余的位截掉。这样在进制之间的转换过程中精度已经损失。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">0.0001100110011001100110011001100110011001100110011001101</span>(<span class="hljs-number">0.1</span>)<br><span class="hljs-number">0.001100110011001100110011001100110011001100110011001101</span>(<span class="hljs-number">0.2</span>)<br></code></pre></div></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h4 id="1-将数字转成整数，计算完成后再转小数"><a href="#1-将数字转成整数，计算完成后再转小数" class="headerlink" title="1.将数字转成整数，计算完成后再转小数"></a>1.将数字转成整数，计算完成后再转小数</h4><h4 id="2-小数点直接计算取精确小数点几位数，最后字符串再转换成浮点数"><a href="#2-小数点直接计算取精确小数点几位数，最后字符串再转换成浮点数" class="headerlink" title="2.小数点直接计算取精确小数点几位数，最后字符串再转换成浮点数"></a>2.小数点直接计算取精确小数点几位数，最后字符串再转换成浮点数</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">;(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>).toFixed(<span class="hljs-number">5</span>) <span class="hljs-comment">// &quot;0.30000&quot;结果是字符串</span><br><br><span class="hljs-built_in">parseFloat</span>((<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>).toFixed(<span class="hljs-number">5</span>)) <span class="hljs-comment">// 0.3 parseFloat() 函数可解析一个字符串，并返回一个浮点数。</span><br></code></pre></div></td></tr></table></figure><h4 id="三方库"><a href="#三方库" class="headerlink" title="三方库"></a>三方库</h4><p>Math.js<br>big.js</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECMAScript</tag>
      
      <tag>IEEE754标准</tag>
      
      <tag>双精确度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包</title>
    <link href="/2021/05/30/%E9%97%AD%E5%8C%85/"/>
    <url>/2021/05/30/%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>当内部函数被返回到外部并保持时，一定会产生闭包，闭包会产生原来的作用域链不释放，<br>过度的闭包可能会导致内存泄漏或加载过慢</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span><br>    <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//1</span><br>  &#125;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> test2 <span class="hljs-comment">//test1执行结束，test1自己的AO销毁，返回test2，</span><br>  <span class="hljs-comment">//当test1赋值到全局的test3时,test2被挂载到全局GO</span><br>&#125;<br><span class="hljs-keyword">var</span> c = <span class="hljs-number">3</span><br><span class="hljs-keyword">var</span> test3 = test1() <span class="hljs-comment">//此处返回的是函数test2。</span><br><span class="hljs-comment">//test2中包含test1的AO，可以访问到test1内部的变量</span><br><span class="hljs-comment">//test3() //test3执行结束时，test2也结束，test2的AO销毁，但是test1的AO未断开，</span><br><span class="hljs-comment">//再执行test3仍可以操作test1的变量</span><br></code></pre></div></td></tr></table></figure><h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2><p>函数嵌套函数，内部函数就是闭包。就是<strong>能够访问其他函数内部变量的函数</strong>。<br>闭包可以做数据缓存</p><ol><li>封装一段代码利用闭包实现模块化功能，<strong>读取/设置一个函数内部的私有变量</strong></li><li>让变量的值始终保持在内存中<h3 id="普通闭包"><a href="#普通闭包" class="headerlink" title="普通闭包"></a>普通闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> n = <span class="hljs-number">100</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br>    n++<br>    <span class="hljs-built_in">console</span>.log(n)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduce</span>(<span class="hljs-params"></span>) </span>&#123;<br>    n--<br>    <span class="hljs-built_in">console</span>.log(n)<br>  &#125;<br>  <span class="hljs-keyword">return</span> [add, reduce] <span class="hljs-comment">//返回两个函数</span><br>&#125;<br><span class="hljs-keyword">let</span> arr = test()<br>arr[<span class="hljs-number">0</span>]()<br>arr[<span class="hljs-number">1</span>]()<br>arr[<span class="hljs-number">1</span>]()<br><span class="hljs-comment">//101</span><br><span class="hljs-comment">//100</span><br><span class="hljs-comment">//99</span><br></code></pre></div></td></tr></table></figure>add和reduce函数属于同级，两个的AO互不干扰，不能互相访问。但是都有上一级test的AO，可以同时访问test的变量<h3 id="对象闭包"><a href="#对象闭包" class="headerlink" title="对象闭包"></a>对象闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> compute = &#123;<br>    <span class="hljs-attr">add</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      num++<br>      <span class="hljs-built_in">console</span>.log(num)<br>    &#125;,<br>    <span class="hljs-attr">minus</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      num--<br>      <span class="hljs-built_in">console</span>.log(num)<br>    &#125;,<br>  &#125;<br>  <span class="hljs-keyword">return</span> compute<br>&#125;<br><span class="hljs-keyword">let</span> compute = test()<br>compute.add() <span class="hljs-comment">//1</span><br>compute.add() <span class="hljs-comment">//2</span><br>compute.minus() <span class="hljs-comment">//1</span><br></code></pre></div></td></tr></table></figure><h3 id="构造函数闭包"><a href="#构造函数闭包" class="headerlink" title="构造函数闭包"></a>构造函数闭包</h3>构造函数被实例化时，内部产生一个this，最后隐式返回this<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Compute</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> num = <span class="hljs-number">10</span><br>  <span class="hljs-built_in">this</span>.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    num++<br>    <span class="hljs-built_in">console</span>.log(num)<br>  &#125;<br>  <span class="hljs-built_in">this</span>.minus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    num--<br>    <span class="hljs-built_in">console</span>.log(num)<br>  &#125;<br>  <span class="hljs-comment">//return this //构造函数被实例化时，内部产生一个this，最后隐式返回this</span><br>&#125;<br><span class="hljs-keyword">let</span> compute = <span class="hljs-keyword">new</span> Compute()<br>compute.add() <span class="hljs-comment">//11</span><br>compute.add() <span class="hljs-comment">//12</span><br>compute.minus() <span class="hljs-comment">//11</span><br></code></pre></div></td></tr></table></figure><h2 id="闭包中的this对象"><a href="#闭包中的this对象" class="headerlink" title="闭包中的this对象"></a>闭包中的this对象</h2>在闭包中使用 this 会让代码变复杂。<br>如果内部函数没有使用箭头函数定义，则 this 对象会在运行时绑定到执行函数的上下文。<br>如果在全局函数中调用，则 this 在非严格模式下等于 window，在严格模式下等于 undefined。<br>如果作为某个对象的方法调用，则 this 等于这个对象。</li></ol><p><strong>匿名函数在这种情况下不会绑定到某个对象，这就意味着 this 会指向 window，除非在严格模式下 this 是 undefined。</strong><br>不过，由于闭包的写法所致，这个事实有时候没有那么容易看出来。  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.identity = <span class="hljs-string">&#x27;The Window&#x27;</span><br><span class="hljs-keyword">let</span> object = &#123;<br>  <span class="hljs-attr">identity</span>: <span class="hljs-string">&#x27;My Object&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">getIdentityFunc</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.identity<br>    &#125;<br>  &#125;,<br>&#125;<br><span class="hljs-built_in">console</span>.log(object.getIdentityFunc()()) <span class="hljs-comment">// &#x27;The Window&#x27;</span><br></code></pre></div></td></tr></table></figure><p>为什么匿名函数没有使用其包含作用域（<code>getIdentityFunc()</code>）的 this 对象呢？<br>每个函数在被调用时都会自动创建两个特殊变量：this 和 arguments。内部函数永远不可能直接访问外部函数的这两个变量。但是，如果把 this 保存到闭包可以访问的另一个变量中， 则是行得通的。  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.identity = <span class="hljs-string">&#x27;The Window&#x27;</span><br><span class="hljs-keyword">let</span> object = &#123;<br>  <span class="hljs-attr">identity</span>: <span class="hljs-string">&#x27;My Object&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">getIdentityFunc</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> that = <span class="hljs-built_in">this</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> that.identity<br>    &#125;<br>  &#125;,<br>&#125;<br><span class="hljs-built_in">console</span>.log(object.getIdentityFunc()()) <span class="hljs-comment">// &#x27;My Object&#x27;</span><br></code></pre></div></td></tr></table></figure><p>在定义匿名函数之前，先把外部函数的 this 保存到变量 that 中。然后在定义闭包时，就可以让它访问 that，因为这是包含函数中名称没有任何冲突的一个变量。即使在外部函数返回之后，that 仍然指向 object，所以调用 <code>object.getIdentityFunc()()</code> 就会返回”My Object”  </p><h2 id="闭包必需了解的问题"><a href="#闭包必需了解的问题" class="headerlink" title="闭包必需了解的问题"></a>闭包必需了解的问题</h2><h3 id="引用的变量可能发生变化"><a href="#引用的变量可能发生变化" class="headerlink" title="引用的变量可能发生变化"></a>引用的变量可能发生变化</h3><p>以下代码输出什么</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  data[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>  &#125;;<br>&#125;<br>data[<span class="hljs-number">0</span>]();<span class="hljs-comment">//3</span><br>data[<span class="hljs-number">1</span>]();<span class="hljs-comment">//3</span><br>data[<span class="hljs-number">2</span>]();<span class="hljs-comment">//3</span><br></code></pre></div></td></tr></table></figure><p>为什么打印出来都是3？<br>循环可以改写成</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// var data = []</span><br><span class="hljs-comment">// var i = 0</span><br><span class="hljs-comment">// for (; i &lt; 3; ) &#123;</span><br><span class="hljs-comment">//   data[i] = function () &#123;</span><br><span class="hljs-comment">//     console.log(i)</span><br><span class="hljs-comment">//   &#125; //不是立即执行函数，i=2时就存了3个匿名函数</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// i++</span><br></code></pre></div></td></tr></table></figure><p>循环结束后等价于</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">data[<span class="hljs-number">0</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(i);<br>&#125;;<br>data[<span class="hljs-number">1</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(i);<br>&#125;;<br>data[<span class="hljs-number">2</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(i);<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>此时 i 的值已经为 3 ，所以当 data[0]、data[1]、data[2] 中任意一个执行时输出结果都为 3。<br>利用闭包解决：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = []<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>) </span>&#123;<br>    data[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(i)<br>    &#125;<br>  &#125;)(i)<span class="hljs-comment">//立即执行函数，传参传i把变量缓存</span><br>  <span class="hljs-comment">// 或者写成下面这种形式</span><br>  <span class="hljs-comment">// data[i] = (function(i) &#123;</span><br>  <span class="hljs-comment">//   return function() &#123;</span><br>  <span class="hljs-comment">//     console.log(i);</span><br>  <span class="hljs-comment">//   &#125;;</span><br>  <span class="hljs-comment">// &#125;)(i);</span><br>&#125;<br>data[<span class="hljs-number">0</span>]() <span class="hljs-comment">// =&gt; 0</span><br>data[<span class="hljs-number">1</span>]() <span class="hljs-comment">// =&gt; 1</span><br>data[<span class="hljs-number">2</span>]() <span class="hljs-comment">// =&gt; 2</span><br></code></pre></div></td></tr></table></figure><p>当然更简单的方法就是使用 let 声明变量。</p><h3 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h3><p>匿名函数在这种情况下不会绑定到某个对象，这就意味着 this 会指向 window，除非在严格模式下 this 是 undefined。  </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">      <span class="hljs-keyword">var</span> object = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;object&#x27;</span>,<br>        <span class="hljs-attr">getName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.info(<span class="hljs-built_in">this</span>.name);<br>          &#125;;<br>        &#125;,<br>      &#125;;<br>      object.getName()();    <span class="hljs-comment">// underfined</span><br><span class="hljs-comment">// 因为里面的闭包函数是在window作用域下执行的，也就是说，this指向windows</span><br></code></pre></div></td></tr></table></figure><h3 id="IE中内存泄露问题"><a href="#IE中内存泄露问题" class="headerlink" title="IE中内存泄露问题"></a>IE中内存泄露问题</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">showId</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;app&quot;</span>)<br>    el.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//.onclick就相当于是return，每点击一下就形成了闭包</span><br>      aler(el.id)   <span class="hljs-comment">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 改成下面</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">showId</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;app&quot;</span>)<br>    <span class="hljs-keyword">var</span> id  = el.id<br>    el.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      aler(id)   <span class="hljs-comment">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span><br>    &#125;<br>    el = <span class="hljs-literal">null</span>    <span class="hljs-comment">// 主动释放el</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>闭包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>var与let、const的区别</title>
    <link href="/2021/05/27/var%E4%B8%8Elet%E3%80%81const%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/05/27/var%E4%B8%8Elet%E3%80%81const%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="var-与-let、const-的区别"><a href="#var-与-let、const-的区别" class="headerlink" title="var 与 let、const 的区别"></a>var 与 let、const 的区别</h1><h3 id="什么是变量提升？"><a href="#什么是变量提升？" class="headerlink" title="什么是变量提升？"></a>什么是变量提升？</h3><p>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。<br>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明</p><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><ul><li>暂时性死区的本质就是，只要进入当前作用域，所要使用的变量就己经存在，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</li></ul><p>在解析代码时，JavaScript 引擎也会注意出现在块后面的 let 声明。只不过在此声明之前不能以任何方式来引用未声明的变量。<br>在 let 声明之前的执行瞬间被称为“暂时性死区”，在此阶段引用任何后面才声明的变量都会抛出 ReferenceError</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//ReferenceError: a is not defined</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h3 id="全局声明"><a href="#全局声明" class="headerlink" title="全局声明"></a>全局声明</h3><p>与 var 关键字不同，使用 let 在全局作用域中声明变量不会成为 windows 对象的属性（var 声明的变量则会编程 windows 对象的属性）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Matt&#x27;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.name) <span class="hljs-comment">//&#x27;Matt&#x27;</span><br><br><span class="hljs-keyword">let</span> age = <span class="hljs-number">26</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.age) <span class="hljs-comment">//undefined</span><br></code></pre></div></td></tr></table></figure><p>不过 let 声明仍然是在全局作用域中发生的<br>​</p><h3 id="for-循环中的-let-声明"><a href="#for-循环中的-let-声明" class="headerlink" title="for 循环中的 let 声明"></a>for 循环中的 let 声明</h3><p>在 let 出现之前， for 循环定义的迭代变量会渗透到循环体外部：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br>  <span class="hljs-comment">// 循环逻辑</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(i) <span class="hljs-comment">// 5</span><br></code></pre></div></td></tr></table></figure><p>改成使用 let 之后，这个问题就消失了，因为迭代变量的作用 域仅限于 for 循环块内部：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br>  <span class="hljs-comment">// 循环逻辑</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(i) <span class="hljs-comment">// ReferenceError: i没有定义</span><br></code></pre></div></td></tr></table></figure><p>在使用 var 的时候，最常见的问题就是对迭代变量的奇特声明 和修改：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(i), <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-comment">// 你可能以为会输出0、1、2、3、4</span><br><span class="hljs-comment">// 实际上会输出5、5、5、5、5</span><br></code></pre></div></td></tr></table></figure><p>之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。<br>在之后执行超时逻辑时，所有的 i 都是同一个变量，因而输出的都是同一个最终值。 而在使用 let 声明迭代变量时，JavaScript 引擎在后台会为每个迭代循环声明一个新的迭代变量。每个 setTimeout 引用的都是不同的变量实例，所以 console.log 输出的是我们期望的值，也就是循环执行过程中每个迭代变量的值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(i), <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-comment">// 会输出0、1、2、3、4</span><br></code></pre></div></td></tr></table></figure><p>这种每次迭代声明一个独立变量实例的行为适用于所有风格的 for 循环，包括 for-in 和 for-of 循环。<br>for 循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-string">&#x27;abc&#x27;</span><br>  <span class="hljs-built_in">console</span>.log(i)<br>&#125;<br><span class="hljs-comment">//abc</span><br><span class="hljs-comment">//abc</span><br><span class="hljs-comment">//abc</span><br></code></pre></div></td></tr></table></figure><p>正确运行以上代码将输出 3 次 abc 。这表明函数内部的变量 i 与循环变量土不在同一个作用域，而是有各自单独的作用域。</p><h1 id="一、var-声明变量存在变量提升，let-和-const-不存在变量提升"><a href="#一、var-声明变量存在变量提升，let-和-const-不存在变量提升" class="headerlink" title="一、var 声明变量存在变量提升，let 和 const 不存在变量提升"></a>一、var 声明变量存在变量提升，let 和 const 不存在变量提升</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// undefined  ===&gt;  a已声明还没赋值，默认得到undefined值</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span><br><span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">10</span><br><span class="hljs-built_in">console</span>.log(c) <span class="hljs-comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span><br><span class="hljs-keyword">const</span> c = <span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><h2 id="1-const-定义的常量不可以修改，而且必须初始化。"><a href="#1-const-定义的常量不可以修改，而且必须初始化。" class="headerlink" title="1.const 定义的常量不可以修改，而且必须初始化。"></a>1.const 定义的常量不可以修改，而且必须初始化。</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> b = <span class="hljs-number">2</span> <span class="hljs-comment">//正确// const b;//错误，必须初始化 console.log(&#x27;函数外const定义b：&#x27; + b);//有输出值// b = 5;// console.log(&#x27;函数外修改const定义b：&#x27; + b);//无法输出</span><br></code></pre></div></td></tr></table></figure><h2 id="2-var-定义的变量可以修改，如果不初始化会输出-undefined，不会报错。"><a href="#2-var-定义的变量可以修改，如果不初始化会输出-undefined，不会报错。" class="headerlink" title="2.var 定义的变量可以修改，如果不初始化会输出 undefined，不会报错。"></a>2.var 定义的变量可以修改，如果不初始化会输出 undefined，不会报错。</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br><span class="hljs-comment">// var a;//不会报错</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数外var定义a：&#x27;</span> + a) <span class="hljs-comment">//可以输出a=1</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>) </span>&#123;<br>  a = <span class="hljs-number">4</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数内var定义a：&#x27;</span> + a) <span class="hljs-comment">//可以输出a=4</span><br>&#125;<br>change()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数调用后var定义a为函数内部修改值：&#x27;</span> + a) <span class="hljs-comment">//可以输出a=4</span><br></code></pre></div></td></tr></table></figure><h2 id="3-let-是块级作用域，函数内部使用-let-定义后，对函数外部无影响。"><a href="#3-let-是块级作用域，函数内部使用-let-定义后，对函数外部无影响。" class="headerlink" title="3.let 是块级作用域，函数内部使用 let 定义后，对函数外部无影响。"></a>3.let 是块级作用域，函数内部使用 let 定义后，对函数外部无影响。</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//函数内部使用let定义后，对函数外部无影响</span><br><span class="hljs-keyword">let</span> c = <span class="hljs-number">3</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数外let定义c：&#x27;</span> + c) <span class="hljs-comment">//输出c=3</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> c = <span class="hljs-number">6</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数内let定义c：&#x27;</span> + c) <span class="hljs-comment">//输出c=6</span><br>&#125;<br>change()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数调用后let定义c不受函数内部定义影响：&#x27;</span> + c) <span class="hljs-comment">//输出c=3</span><br><br><span class="hljs-comment">//嵌套使用相同的标识符不会报错，因为同一个块中没有重复声明</span><br><span class="hljs-keyword">let</span> age = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(age) <span class="hljs-comment">//1</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">let</span> age = <span class="hljs-number">2</span><br>  <span class="hljs-built_in">console</span>.log(age) <span class="hljs-comment">//2</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>再来看这段代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//var a</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(a + <span class="hljs-string">&#x27; now&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>  &#125;<br>&#125;<br><br>fn() <span class="hljs-comment">// a -&gt; undefined</span><br></code></pre></div></td></tr></table></figure><p>我们发现不执行的代码也会影响会执行的代码，因为 var a 会提升到 if 语句的前面</p><blockquote><p>undefined 可以翻译为不明确，not defined 可以翻译为未定义</p></blockquote><p>在 Java 中变量的分为全局变量（成员变量）或者局部变量，在方法体中定义的变量都是局部变量，否则是全局变量（即在方法体外，在类中定义的变量）<br>在 JavaScript 中，在方法体外外用 var 定义的变量其它方法可以共享，在方法中用 var 定义的变量只有该方法内生效。<br>​</p><p>var 定义变量没有块级作用域的概念，定义变量会被提升到全局和全局变量没有什么区别<br>let 定义变量有块级作用域，外部无法访问<br>建议弃用 var，多使用 let 定义变量</p><h1 id="二、let、const-都是块级局部变量"><a href="#二、let、const-都是块级局部变量" class="headerlink" title="二、let、const 都是块级局部变量"></a>二、let、const 都是块级局部变量</h1><p>let（定义变量，有块级作用域）<br>const（定义常量，不能被修改）</p><p>顾名思义，就是只在当前代码块起作用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure><p>const 的行为与 let 基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改 const 声明的变量会导致运行时错误。</p><h2 id="1）const-声明时候必须赋值"><a href="#1）const-声明时候必须赋值" class="headerlink" title="1）const 声明时候必须赋值"></a>1）const 声明时候必须赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a<br></code></pre></div></td></tr></table></figure><p>编译器报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">SyntaxError</span>: Missing initializer <span class="hljs-keyword">in</span> <span class="hljs-keyword">const</span> declaration<br></code></pre></div></td></tr></table></figure><h2 id="2）const-只能进行一次赋值，即声明后不能再修改"><a href="#2）const-只能进行一次赋值，即声明后不能再修改" class="headerlink" title="2）const 只能进行一次赋值，即声明后不能再修改"></a>2）const 只能进行一次赋值，即声明后不能再修改</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a=<span class="hljs-number">1</span> a=<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>控制台报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">TypeError</span>: Assignment to constant variable.<br></code></pre></div></td></tr></table></figure><h2 id="3）const-如果声明的是复合类型数据-主要是对象和数组-，可以修改其属性"><a href="#3）const-如果声明的是复合类型数据-主要是对象和数组-，可以修改其属性" class="headerlink" title="3）const 如果声明的是复合类型数据(主要是对象和数组)，可以修改其属性"></a>3）const 如果声明的是复合类型数据(主要是对象和数组)，可以修改其属性</h2><p>const 声明的限制只适用于它指向的变量的引用。换句话说， 如果 const 变量引用的是一个对象，那么修改这个对象内部的属性并不违反 const 的限制。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> person = &#123;&#125;<br>person.name = <span class="hljs-string">&#x27;Matt&#x27;</span> <span class="hljs-comment">//&#x27;Matt&#x27;</span><br></code></pre></div></td></tr></table></figure><p>const 声明一个只读的常量。一旦声明，常量的值就不能改变 。const 实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。<br>对于简单类型的数据（数值、字符串、布尔值〉而言，值就保存在变量指向的内存地址中，因此等同于常量。<br>但对于复合类型的数据（主要是对象和数组）而言，变量指向的内存地址保存的只是一个指针， const 只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，这完全不能控制 。 因此，将一个对象声明为常量时必须非常小心。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">2</span>,<br>&#125;<br>obj.name = <span class="hljs-string">&#x27;小红&#x27;</span><br><span class="hljs-built_in">console</span>.log(obj)<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/12/RrnCUaLWsBvumZP.png#height=251&id=t3Gp6&originHeight=216&originWidth=390&originalType=binary&ratio=1&status=done&style=none&width=454"></p><h1 id="三、同一作用域下-let-和-const-不能声明同名变量，而-var-可以"><a href="#三、同一作用域下-let-和-const-不能声明同名变量，而-var-可以" class="headerlink" title="三、同一作用域下 let 和 const 不能声明同名变量，而 var 可以"></a>三、同一作用域下 let 和 const 不能声明同名变量，而 var 可以</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">2</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>控制台报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Uncaught <span class="hljs-built_in">SyntaxError</span>: Identifier <span class="hljs-string">&#x27;a&#x27;</span> has already been declared<br></code></pre></div></td></tr></table></figure><h2 id="let-和-const-的区别："><a href="#let-和-const-的区别：" class="headerlink" title="let 和 const 的区别："></a>let 和 const 的区别：</h2><p><strong>相似：</strong></p><ul><li>都是块级作用域</li><li>都不能和它所在作用域内的其他变量或函数拥有相同的名称</li></ul><p><strong>区别：</strong></p><ul><li>const 声明的常量必须初始化，而 let 声明的变量不用。</li><li>const 定义常量的值不能通过再赋值修改，也不能再次声明。</li><li>而 let 定义的变量值可以修改。</li></ul><h3 id="什么时候用-let，什么时候用-const"><a href="#什么时候用-let，什么时候用-const" class="headerlink" title="什么时候用 let，什么时候用 const"></a>什么时候用 let，什么时候用 const</h3><p>定义函数、对象和不变的值用 const</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fun = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><span class="hljs-keyword">const</span> PI = <span class="hljs-number">3.24</span><br></code></pre></div></td></tr></table></figure><p>计算或者需要修改的值用 let</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num1 = <span class="hljs-number">1</span>,<br>  num2 = <span class="hljs-number">2</span><br><span class="hljs-built_in">console</span>.log(num1 + num2)<br></code></pre></div></td></tr></table></figure><p>一般推荐 const 优先，let 次之</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>JavaScript高级程序设计第四版笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>var</tag>
      
      <tag>let</tag>
      
      <tag>const</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON.stringify()与JSON.parse()的区别</title>
    <link href="/2021/05/15/JSON.stringify()%E4%B8%8EJSON.parse()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/05/15/JSON.stringify()%E4%B8%8EJSON.parse()%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、JSON-stringify-与JSON-parse-的区别"><a href="#一、JSON-stringify-与JSON-parse-的区别" class="headerlink" title="一、JSON.stringify()与JSON.parse()的区别"></a>一、JSON.stringify()与JSON.parse()的区别</h1><p>最近做项目，发现JSON.stringify()使用场景真的挺多，我们都知道<strong>JSON.stringify()的作用是将 JavaScript 对象转换为 JSON 字符串，</strong>而<strong>JSON.parse()可以将JSON字符串转为一个对象。</strong><br><strong>简单点说，它们的作用是相对的，我用JSON.stringify()将对象a变成了字符串c，那么我就可以用JSON.parse()将字符串c还原成对象a。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">JSON</span>.stringify(arr);<span class="hljs-comment">//&#x27;[1,2,3]&#x27;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">JSON</span>.stringify(arr);<span class="hljs-comment">//string</span><br><br><span class="hljs-keyword">let</span> string = <span class="hljs-string">&#x27;[1,2,3]&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(string))<span class="hljs-comment">//[1,2,3]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">JSON</span>.parse(string))<span class="hljs-comment">//object</span><br></code></pre></div></td></tr></table></figure><p>在使用<strong>JSON.parse()<strong>需要注意一点，由于此方法是将JSON字符串转换成对象，所以</strong>你的字符串必须符合JSON格式，即键值都必须使用双引号包裹</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;[&quot;1&quot;,&quot;2&quot;]&#x27;</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-string">&quot;[&#x27;1&#x27;,&#x27;2&#x27;]&quot;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(a));<span class="hljs-comment">// Array [1,2]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(b));<span class="hljs-comment">// 报错</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621086076297-88d56312-1e17-40be-a6cb-57bd652f520c.png#clientId=uebe074b5-5cc7-4&from=paste&height=195&id=u31fe0495&margin=%5Bobject%20Object%5D&originHeight=195&originWidth=410&originalType=url&status=done&style=none&taskId=u362845fd-b7bb-499b-83ca-f62bcd533b3&width=410"><br>上面例子中变量b就无法转换，因为格式不符合，那么知道了这些知识点，我们能用来做什么呢？</p><h1 id="二、JSON-stringify-的几种妙用"><a href="#二、JSON-stringify-的几种妙用" class="headerlink" title="二、JSON.stringify()的几种妙用"></a>二、JSON.stringify()的几种妙用</h1><h2 id="1-判断数组是否包含某对象，或者判断对象是否相等。"><a href="#1-判断数组是否包含某对象，或者判断对象是否相等。" class="headerlink" title="1.判断数组是否包含某对象，或者判断对象是否相等。"></a>1.判断数组是否包含某对象，或者判断对象是否相等。</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//判断数组是否包含某对象</span><br><span class="hljs-keyword">let</span> data = [<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;echo&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;听风是风&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;天子笑&#x27;</span>&#125;,<br>    ],<br>    val = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;天子笑&#x27;</span>&#125;;<br><span class="hljs-built_in">JSON</span>.stringify(data).indexOf(<span class="hljs-built_in">JSON</span>.stringify(val)) !== -<span class="hljs-number">1</span>;<span class="hljs-comment">//true</span><br><br><span class="hljs-comment">//判断两数组/对象是否相等</span><br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>    b = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">JSON</span>.stringify(a) === <span class="hljs-built_in">JSON</span>.stringify(b);<span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><h2 id="2-让localStorage-sessionStorage可以存储对象。"><a href="#2-让localStorage-sessionStorage可以存储对象。" class="headerlink" title="2.让localStorage/sessionStorage可以存储对象。"></a>2.让localStorage/sessionStorage可以存储对象。</h2><p>localStorage/sessionStorage默认只能存储字符串，而实际开发中，我们往往需要存储的数据多为对象类型，那么这里我们就可以在存储时利用json.stringify()将对象转为字符串，而在取缓存时，只需配合json.parse()转回对象即可。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//存</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setLocalStorage</span>(<span class="hljs-params">key,val</span>)</span>&#123;<br>    <span class="hljs-built_in">window</span>.localStorage.setItem(key,<span class="hljs-built_in">JSON</span>.stringify(val));<br>&#125;;<br><span class="hljs-comment">//取</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLocalStorage</span>(<span class="hljs-params">key</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> val = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">window</span>.localStorage.getItem(key));<br>    <span class="hljs-keyword">return</span> val;<br>&#125;;<br><span class="hljs-comment">//测试</span><br>setLocalStorage(<span class="hljs-string">&#x27;demo&#x27;</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]);<br><span class="hljs-keyword">let</span>  a = getLocalStorage(<span class="hljs-string">&#x27;demo&#x27;</span>);<span class="hljs-comment">//[1,2,3]</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621086077695-85e57da6-da42-4218-aad3-b930f22150e8.png#clientId=uebe074b5-5cc7-4&from=paste&height=131&id=u0d154632&margin=%5Bobject%20Object%5D&originHeight=131&originWidth=480&originalType=url&status=done&style=none&taskId=u2e90027d-347b-4305-95e8-f78e62052f2&width=480"></p><h2 id="3-实现对象深拷贝"><a href="#3-实现对象深拷贝" class="headerlink" title="3.实现对象深拷贝"></a>3.实现对象深拷贝</h2><p>实际开发中，如果怕影响原数据，我们常深拷贝出一份数据做任意操作，其实使用JSON.stringify()与JSON.parse()来实现深拷贝是很不错的选择。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//深拷贝</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> _data = <span class="hljs-built_in">JSON</span>.stringify(data),<br>        dataClone = <span class="hljs-built_in">JSON</span>.parse(_data);<br>    <span class="hljs-keyword">return</span> dataClone;<br>&#125;;<br><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>    _arr = deepClone(arr);<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(arr,_arr)<span class="hljs-comment">//[2,2,3]  [1,2,3]</span><br></code></pre></div></td></tr></table></figure><h1 id="三、JSON-stringify-与toString-的区别"><a href="#三、JSON-stringify-与toString-的区别" class="headerlink" title="三、JSON.stringify()与toString()的区别"></a>三、JSON.stringify()与toString()的区别</h1><p>这两者虽然都可以将目标值转为字符串，但本质上还是有区别的，比如</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">JSON</span>.stringify(arr);<span class="hljs-comment">//&#x27;[1,2,3]&#x27;</span><br>arr.toString();<span class="hljs-comment">//1,2,3</span><br></code></pre></div></td></tr></table></figure><p>其次，JSON.stringify()的受众更多是对象，而toString()虽然可以将数组转为字符串，但并不能对{name:’天子笑’}这类对象实现你想要的操作，它的受众更多是数字。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JSON</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>antd_pro_shop_admin项目笔记</title>
    <link href="/2021/05/15/antd-pro-shop-admin%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/05/15/antd-pro-shop-admin%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、项目搭建"><a href="#一、项目搭建" class="headerlink" title="一、项目搭建"></a>一、项目搭建</h1><h2 id="1-1-安装脚手架"><a href="#1-1-安装脚手架" class="headerlink" title="1.1 安装脚手架"></a>1.1 安装脚手架</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn create umi<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620995323162-68a0b083-ece6-4b2b-8b0d-36daa8098291.png#clientId=u4de613e7-ed76-4&from=paste&height=263&id=u3ea1dff9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=263&originWidth=565&originalType=binary&size=24386&status=done&style=none&taskId=u97744768-50fe-4132-8afa-89f689a6231&width=565" alt="image.png"></p><h2 id="1-2-选择版本"><a href="#1-2-选择版本" class="headerlink" title="1.2 选择版本"></a>1.2 选择版本</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620995413718-5bc82348-871a-4de9-b66f-f3ab981a1498.png#clientId=u4de613e7-ed76-4&from=paste&height=309&id=u4b5f0a9a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=309&originWidth=558&originalType=binary&size=31989&status=done&style=none&taskId=uc07da9f4-9a9d-4fcb-8c84-6142c7b5aad&width=558" alt="image.png"></p><h2 id="1-3-安装依赖"><a href="#1-3-安装依赖" class="headerlink" title="1.3 安装依赖"></a>1.3 安装依赖</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn<br></code></pre></div></td></tr></table></figure><h2 id="1-4-启动项目"><a href="#1-4-启动项目" class="headerlink" title="1.4 启动项目"></a>1.4 启动项目</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm start<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620998686519-b310d168-8f77-4f4f-a430-5930dc03d3a7.png#clientId=u4de613e7-ed76-4&from=paste&height=272&id=u81cb4066&margin=%5Bobject%20Object%5D&name=image.png&originHeight=272&originWidth=630&originalType=binary&size=21916&status=done&style=none&taskId=u1d860442-c951-4c0e-a38f-f299987a587&width=630" alt="image.png"></p><h2 id="1-5-点击链接进入浏览器"><a href="#1-5-点击链接进入浏览器" class="headerlink" title="1.5 点击链接进入浏览器"></a>1.5 点击链接进入浏览器</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620998751638-14b8d4f9-4999-4960-b0d0-c44de6b60ede.png#clientId=u4de613e7-ed76-4&from=paste&height=978&id=udceab73e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=978&originWidth=1916&originalType=binary&size=110241&status=done&style=none&taskId=u4e2ee6a5-a808-41f2-b751-f333c11a6cd&width=1916" alt="image.png"></p><h1 id="二、初始化项目"><a href="#二、初始化项目" class="headerlink" title="二、初始化项目"></a>二、初始化项目</h1><h2 id="项目接口文档"><a href="#项目接口文档" class="headerlink" title="项目接口文档"></a>项目接口文档</h2><p><a href="https://www.showdoc.com.cn/1207745568269674?page_id=6094279351627422">https://www.showdoc.com.cn/1207745568269674?page_id=6094279351627422</a></p><h2 id="2-1-删掉多余的文件"><a href="#2-1-删掉多余的文件" class="headerlink" title="2.1 删掉多余的文件"></a>2.1 删掉多余的文件</h2><p><strong>在编译器中打开项目</strong><br>删掉\src\pages 中<code>TableList</code>文件夹，<code>Admin.jsx</code>、<code>Welcome.jsx</code>、<code>Welcome.less</code>文件<br>删掉\mock 中<code>listTableList.js</code>文件<br>删掉\config\routes.js 文件夹中，删掉对应不用的路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    component: <span class="hljs-string">&#x27;../layouts/BlankLayout&#x27;</span>,<br>    routes: [<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>        component: <span class="hljs-string">&#x27;../layouts/UserLayout&#x27;</span>,<br>        routes: [<br>          &#123;<br>            name: <span class="hljs-string">&#x27;login&#x27;</span>,<br>            path: <span class="hljs-string">&#x27;/user/login&#x27;</span>,<br>            component: <span class="hljs-string">&#x27;./User/login&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        component: <span class="hljs-string">&#x27;../layouts/SecurityLayout&#x27;</span>,<br>        routes: [<br>          &#123;<br>            path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            component: <span class="hljs-string">&#x27;../layouts/BasicLayout&#x27;</span>,<br>            routes: [<br>              &#123;<br>                path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>              &#125;,<br>              &#123;<br>                component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>              &#125;,<br>            ],<br>          &#125;,<br>          &#123;<br>            component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>  &#125;,<br>]<br></code></pre></div></td></tr></table></figure><h2 id="2-2-更改-Logo-和底部文字替换"><a href="#2-2-更改-Logo-和底部文字替换" class="headerlink" title="2.2 更改 Logo 和底部文字替换"></a>2.2 更改 Logo 和底部文字替换</h2><p>在\src\layouts\BasicLayout.jsx 文件中找到<code>defaultFooterDom</code>更改默认文字，将<code>links=&#123;null&#125;</code>设置为空，不能删掉<code>links=&#123;&#125;</code>否则会编程默认的样子</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> defaultFooterDom = (<br>  &lt;DefaultFooter copyright=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear()&#125;</span> 融职商城`</span>&#125; links=&#123;<span class="hljs-literal">null</span>&#125; /&gt;<br>)<br></code></pre></div></td></tr></table></figure><p>底部文字就更改好了<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621001473729-5a1cd8ff-7b29-4801-9053-bc651b9499a0.png#clientId=u4de613e7-ed76-4&from=paste&height=207&id=ude7af6a7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=207&originWidth=1915&originalType=binary&size=11957&status=done&style=none&taskId=u84b1c93c-25f7-437f-b3f1-823df51c5d8&width=1915" alt="image.png"><br>在\Econfig\defaultSettings.js 中更改<code>title</code>，这里的<code>title</code>是更改的网页标题和左上角文字<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621001434658-83fbb50f-5b07-405c-942d-413ee87ef3bc.png#clientId=u4de613e7-ed76-4&from=paste&height=248&id=uc379e464&margin=%5Bobject%20Object%5D&name=image.png&originHeight=248&originWidth=316&originalType=binary&size=16228&status=done&style=none&taskId=uc8c8a1c8-d9e2-45a0-ade1-e3e12e0b7de&width=316" alt="image.png"><br>在\src\assets 文件夹中提换掉 logo，并在用到的地方重新导入 logo 文件，否则会报错</p><h2 id="2-3-更改刷新时的-logo"><a href="#2-3-更改刷新时的-logo" class="headerlink" title="2.3 更改刷新时的 logo"></a>2.3 更改刷新时的 logo</h2><p>打开控制台，到网络请求，选择所有请求，快速刷新页面会发现这个图标<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621002688764-274ce7d8-ece1-47b3-bed8-a87f1e750e06.png#clientId=u4de613e7-ed76-4&from=paste&height=752&id=u8de5d96b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=752&originWidth=1878&originalType=binary&size=113643&status=done&style=none&taskId=u4e53df56-d01a-464d-94cd-044acc21097&width=1878" alt="image.png"><br>将自己的 logo.png 文件复制到\public 文件下<br>然后在\src\pages\document.ejs 中更改自己的 logo</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div<br>  style=<span class="hljs-string">&quot;</span><br><span class="hljs-string">          display: flex;</span><br><span class="hljs-string">          flex-direction: column;</span><br><span class="hljs-string">          align-items: center;</span><br><span class="hljs-string">          justify-content: center;</span><br><span class="hljs-string">          height: 100%;</span><br><span class="hljs-string">          min-height: 420px;</span><br><span class="hljs-string">        &quot;</span>&gt;<br>  &lt;img src=<span class="hljs-string">&quot;&lt;%= context.config.publicPath +&#x27;logo.png&#x27;%&gt;&quot;</span> alt=<span class="hljs-string">&quot;logo&quot;</span> width=<span class="hljs-string">&quot;256&quot;</span> /&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-loading-warp&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin ant-spin-lg ant-spin-spinning&quot;</span>&gt;<br>      &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot ant-spin-dot-spin&quot;</span>&gt;<br>        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot-item&quot;</span>&gt;&lt;/i&gt;<br>        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot-item&quot;</span>&gt;&lt;/i&gt;<br>        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot-item&quot;</span>&gt;&lt;/i&gt;<br>        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot-item&quot;</span>&gt;&lt;/i&gt;<br>      &lt;/span&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;div style=<span class="hljs-string">&quot;display: flex; align-items: center; justify-content: center&quot;</span>&gt;<br>    &lt;img src=<span class="hljs-string">&quot;&lt;%= context.config.publicPath +&#x27;logo.png&#x27;%&gt;&quot;</span> width=<span class="hljs-string">&quot;32&quot;</span> style=<span class="hljs-string">&quot;margin-right: 8px&quot;</span> /&gt;<br>    融职商城<br>  &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><h2 id="2-4-更改网页标题的-ico"><a href="#2-4-更改网页标题的-ico" class="headerlink" title="2.4 更改网页标题的 ico"></a>2.4 更改网页标题的 ico</h2><h3 id="2-4-1-将图片格式改成-ioc"><a href="#2-4-1-将图片格式改成-ioc" class="headerlink" title="2.4.1 将图片格式改成 ioc"></a>2.4.1 将图片格式改成 ioc</h3><ol><li>第一步我们用<strong>画图</strong>的方式打开原始图片，可以看到这里是一张 png 格式的原始图片，如下图所示：</li><li><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621004331012-681faf70-73fe-4eae-919d-b805ed024698.png#clientId=u4de613e7-ed76-4&from=paste&height=856&id=u6fcca602&margin=%5Bobject%20Object%5D&name=image.png&originHeight=856&originWidth=1520&originalType=binary&size=97261&status=done&style=none&taskId=udb509057-727f-40e9-a3f1-86c55d349a0&width=1520" alt="image.png"></li><li>第二步点击画图中文件图标，选择“另存为-&gt;BMP 图片”</li><li>第四步我们将 BMP 格式的后缀名改为 ico 格式的，弹出框之后，点击确定，可以看到已经成功更改为 ico 格式的图片，需要注意的是有时候直接改后缀名会出现图片默认是白色，点击进去时正常的，不影响程序使用</li></ol><h3 id="2-4-2-更改网页默认的-ico"><a href="#2-4-2-更改网页默认的-ico" class="headerlink" title="2.4.2 更改网页默认的 ico"></a>2.4.2 更改网页默认的 ico</h3><p>在\public 中将自己的 ico 提换掉 favicon.ico</p><h2 id="2-5-删除登录页多余的东西"><a href="#2-5-删除登录页多余的东西" class="headerlink" title="2.5 删除登录页多余的东西"></a>2.5 删除登录页多余的东西</h2><p>在\src\pages\User\login\index.jsx 文件中精简代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; LockOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Alert, Tabs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useIntl, connect, FormattedMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">const</span> LoginMessage = <span class="hljs-function">(<span class="hljs-params">&#123; content &#125;</span>) =&gt;</span> (<br>  &lt;Alert<br>    style=&#123;&#123;<br>      marginBottom: <span class="hljs-number">24</span>,<br>    &#125;&#125;<br>    message=&#123;content&#125;<br>    type=<span class="hljs-string">&quot;error&quot;</span><br>    showIcon<br>  /&gt;<br>)<br><br><span class="hljs-keyword">const</span> Login = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; userLogin = &#123;&#125;, submitting &#125; = props<br>  <span class="hljs-keyword">const</span> &#123; status, <span class="hljs-attr">type</span>: loginType &#125; = userLogin<br>  <span class="hljs-keyword">const</span> [type, setType] = useState(<span class="hljs-string">&#x27;account&#x27;</span>)<br>  <span class="hljs-keyword">const</span> intl = useIntl()<br><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; dispatch &#125; = props<br>    dispatch(&#123;<br>      type: <span class="hljs-string">&#x27;login/login&#x27;</span>,<br>      payload: &#123; ...values, type &#125;,<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=&#123;styles.main&#125;&gt;<br>      &lt;ProForm<br>        initialValues=&#123;&#123;<br>          autoLogin: <span class="hljs-literal">true</span>,<br>        &#125;&#125;<br>        submitter=&#123;&#123;<br>          render: <span class="hljs-function">(<span class="hljs-params">_, dom</span>) =&gt;</span> dom.pop(),<br>          submitButtonProps: &#123;<br>            loading: submitting,<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            style: &#123;<br>              width: <span class="hljs-string">&#x27;100%&#x27;</span>,<br>            &#125;,<br>          &#125;,<br>        &#125;&#125;<br>        onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>          handleSubmit(values)<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve()<br>        &#125;&#125;&gt;<br>        &lt;Tabs activeKey=&#123;type&#125; onChange=&#123;setType&#125;&gt;<br>          &lt;Tabs.TabPane<br>            key=<span class="hljs-string">&quot;account&quot;</span><br>            tab=&#123;intl.formatMessage(&#123;<br>              id: <span class="hljs-string">&#x27;pages.login.accountLogin.tab&#x27;</span>,<br>              defaultMessage: <span class="hljs-string">&#x27;Account password login&#x27;</span>,<br>            &#125;)&#125;<br>          /&gt;<br>        &lt;/Tabs&gt;<br><br>        &#123;status === <span class="hljs-string">&#x27;error&#x27;</span> &amp;&amp; !submitting &amp;&amp; (<br>          &lt;LoginMessage<br>            content=&#123;intl.formatMessage(&#123;<br>              id: <span class="hljs-string">&#x27;pages.login.accountLogin.errorMessage&#x27;</span>,<br>              defaultMessage: <span class="hljs-string">&#x27;Incorrect account or password（admin/ant.design)&#x27;</span>,<br>            &#125;)&#125;<br>          /&gt;<br>        )&#125;<br>        &lt;ProFormText<br>          name=<span class="hljs-string">&quot;userName&quot;</span><br>          fieldProps=&#123;&#123;<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            prefix: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UserOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.prefixIcon&#125;</span> /&gt;</span></span>,<br>          &#125;&#125;<br>          placeholder=&#123;intl.formatMessage(&#123;<br>            id: <span class="hljs-string">&#x27;pages.login.username.placeholder&#x27;</span>,<br>            defaultMessage: <span class="hljs-string">&#x27;Username: admin or user&#x27;</span>,<br>          &#125;)&#125;<br>          rules=&#123;[<br>            &#123;<br>              required: <span class="hljs-literal">true</span>,<br>              message: (<br>                &lt;FormattedMessage<br>                  id=<span class="hljs-string">&quot;pages.login.username.required&quot;</span><br>                  defaultMessage=<span class="hljs-string">&quot;Please enter user name!&quot;</span><br>                /&gt;<br>              ),<br>            &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;ProFormText.Password<br>          name=<span class="hljs-string">&quot;password&quot;</span><br>          fieldProps=&#123;&#123;<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            prefix: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">LockOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.prefixIcon&#125;</span> /&gt;</span></span>,<br>          &#125;&#125;<br>          placeholder=&#123;intl.formatMessage(&#123;<br>            id: <span class="hljs-string">&#x27;pages.login.password.placeholder&#x27;</span>,<br>            defaultMessage: <span class="hljs-string">&#x27;Password: ant.design&#x27;</span>,<br>          &#125;)&#125;<br>          rules=&#123;[<br>            &#123;<br>              required: <span class="hljs-literal">true</span>,<br>              message: (<br>                &lt;FormattedMessage<br>                  id=<span class="hljs-string">&quot;pages.login.password.required&quot;</span><br>                  defaultMessage=<span class="hljs-string">&quot;Please enter password！&quot;</span><br>                /&gt;<br>              ),<br>            &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;div<br>          style=&#123;&#123;<br>            marginBottom: <span class="hljs-number">24</span>,<br>          &#125;&#125;&gt;&lt;/div&gt;<br>      &lt;/ProForm&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<span class="hljs-function">(<span class="hljs-params">&#123; login, loading &#125;</span>) =&gt;</span> (&#123;<br>  userLogin: login,<br>  submitting: loading.effects[<span class="hljs-string">&#x27;login/login&#x27;</span>],<br>&#125;))(Login)<br></code></pre></div></td></tr></table></figure><p>在\src\layouts\UserLayout.jsx 中将默认的 logo 替换成自己的 logo</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../assets/logo.png&#x27;</span><br></code></pre></div></td></tr></table></figure><p>在 UserLayout.jsx 文件删除标签<code>FormattedMessage</code>内<code>defaultMessage=“”</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div className=&#123;styles.desc&#125;&gt;<br>  &lt;FormattedMessage id=<span class="hljs-string">&quot;pages.layouts.userLayout.title&quot;</span> /&gt;<br>&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p>在国际化\src\locales\zh-CN\pages.js 文件中修改 pages.layouts.userLayout.title 的默认文字</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;pages.layouts.userLayout.title&#x27;</span>: <span class="hljs-string">&#x27;融职商城后台管理系统&#x27;</span>,<br></code></pre></div></td></tr></table></figure><h2 id="2-6-删除首页头部多余东西"><a href="#2-6-删除首页头部多余东西" class="headerlink" title="2.6 删除首页头部多余东西"></a>2.6 删除首页头部多余东西</h2><p>在\src\components\GlobalHeader\RightContent.jsx 文件中删除搜索组件<code>HeaderSearch</code>和文档组件<code>Tooltip</code></p><h2 id="2-7-优化登录页"><a href="#2-7-优化登录页" class="headerlink" title="2.7 优化登录页"></a>2.7 优化登录页</h2><h3 id="2-7-1-优化登录页文件"><a href="#2-7-1-优化登录页文件" class="headerlink" title="2.7.1 优化登录页文件"></a>2.7.1 优化登录页文件</h3><p>将登录页移到 pages 下删除 User 文件夹，注意非必要不要随意更改 pages 下的文件夹，因为改动文件夹要配置对应路由<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621012663592-2b6e11f9-08fe-4a02-a092-8a3ef86dc96f.png#clientId=u4de613e7-ed76-4&from=paste&height=195&id=ub076cd51&margin=%5Bobject%20Object%5D&name=image.png&originHeight=195&originWidth=360&originalType=binary&size=8854&status=done&style=none&taskId=u5cbc6b9b-753b-4f7a-91b3-e8e3478b3ba&width=360" alt="image.png"></p><h3 id="2-7-2-配置登录页路由"><a href="#2-7-2-配置登录页路由" class="headerlink" title="2.7.2 配置登录页路由"></a>2.7.2 配置登录页路由</h3><p>在\config\routes.js 将原来 user 的路由修改成 login 的路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>  component: <span class="hljs-string">&#x27;../layouts/LoginLayout&#x27;</span>,<br>  routes: [<br>    &#123;<br>      name: <span class="hljs-string">&#x27;login&#x27;</span>,<br>      path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>      component: <span class="hljs-string">&#x27;./Login&#x27;</span>,<br>    &#125;,<br>  ],<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>同时修改\src\layouts 文件下 UserLayout.jsx less 文件重命名为 LginLayout 的<br>以及修改 UserLayout.jsx 中的样式导入<code>import styles from &#39;./LoginLayout.less&#39;;</code><br>在\src\layouts\SecurityLayout.jsx 中更改重定向的登录路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (!isLogin &amp;&amp; <span class="hljs-built_in">window</span>.location.pathname !== <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`/<span class="hljs-attr">login</span>?$&#123;<span class="hljs-attr">queryString</span>&#125;`&#125; /&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-8-封装网络请求"><a href="#2-8-封装网络请求" class="headerlink" title="2.8 封装网络请求"></a>2.8 封装网络请求</h2><h3 id="2-8-1-添加请求拦截器"><a href="#2-8-1-添加请求拦截器" class="headerlink" title="2.8.1 添加请求拦截器"></a>2.8.1 添加请求拦截器</h3><p><strong>具体如何找请求拦截器</strong> 1.先进入<a href="https://umijs.org/zh-CN">umijs</a>找到<strong>插件</strong>选择<strong>plugin-request</strong>进去找到<a href="https://umijs.org/zh-CN/plugins/plugin-request#request">request</a>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621051841217-6924f9a7-bbca-448c-a09e-34dcd7cb46c6.png#clientId=u79fc6bc8-ff2c-4&from=paste&height=148&id=u33d47bbd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=148&originWidth=1249&originalType=binary&size=18888&status=done&style=none&taskId=ue22fa43b-c8c8-4cf8-8845-0ee898b74f4&width=1249" alt="image.png"> 2.点击参考文档地址找到<a href="https://github.com/umijs/umi-request#interceptor"><strong>Interceptor</strong></a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621051557253-22301f45-88cd-4334-8321-9b60c4656053.png#clientId=u79fc6bc8-ff2c-4&from=paste&height=412&id=u87e50faa&margin=%5Bobject%20Object%5D&name=image.png&originHeight=412&originWidth=1164&originalType=binary&size=34493&status=done&style=none&taskId=u90f3f4cf-a242-46e6-9e8c-f3b4cc656ed&width=1164" alt="image.png"> 3.添加请求头<br>在\src\utils\request.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> request = extend(&#123;<br>  errorHandler,<br>  <span class="hljs-comment">// default error handling</span><br>  credentials: <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-comment">// Does the default request bring cookies</span><br>&#125;)<br><br><span class="hljs-comment">// 请求拦截器，在请求之前添加Header头</span><br>request.interceptors.request.use(<span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取token</span><br>  <span class="hljs-keyword">const</span> token = <span class="hljs-string">&#x27;hello&#x27;</span><br>  <span class="hljs-comment">// 设置Header头</span><br>  <span class="hljs-keyword">const</span> headers = &#123;<br>    Authorization: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;token&#125;</span>`</span>,<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    url,<br>    options: &#123; ...options, headers &#125;,<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request<br></code></pre></div></td></tr></table></figure><h3 id="2-8-2-封装错误信息提示"><a href="#2-8-2-封装错误信息提示" class="headerlink" title="2.8.2 封装错误信息提示"></a>2.8.2 封装错误信息提示</h3><h4 id="1-重新启动项目"><a href="#1-重新启动项目" class="headerlink" title="1.重新启动项目"></a>1.重新启动项目</h4><p><strong>通过</strong><code>**yarn dev**</code><strong>启动项目会关闭 mock，之后就能添加自己的 api</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn dev<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621055060891-822ef533-9e43-4870-984d-ffcb882ca15e.png#clientId=u79fc6bc8-ff2c-4&from=paste&height=179&id=u0891d995&margin=%5Bobject%20Object%5D&name=image.png&originHeight=179&originWidth=475&originalType=binary&size=10389&status=done&style=none&taskId=u69ae0f45-eb73-4eec-87d7-8baafb08129&width=475" alt="image.png"><br>在\package.json 可以查到相关配置</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;start:dev&quot;</span>: <span class="hljs-string">&quot;cross-env REACT_APP_ENV=dev MOCK=none UMI_ENV=dev umi dev&quot;</span>,<br></code></pre></div></td></tr></table></figure><h4 id="2-更改代理"><a href="#2-更改代理" class="headerlink" title="2.更改代理"></a>2.更改代理</h4><p>在\config\proxy.js 中将 dev 的域名改成自己的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">dev: &#123;<br>  <span class="hljs-string">&#x27;/api/&#x27;</span>: &#123;<br>    target: <span class="hljs-string">&#x27;https://api.shop.eduwork.cn/&#x27;</span>,<br>    changeOrigin: <span class="hljs-literal">true</span>,<br>    pathRewrite: &#123;<br>      <span class="hljs-string">&#x27;^&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>在\src\services\user.js 中将接口请求改成<code>request.post(&#39;/api/admin/user&#39;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryCurrent</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// return request(&#x27;/api/currentUser&#x27;);</span><br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/api/admin/user&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-修改错误提示"><a href="#3-修改错误提示" class="headerlink" title="3.修改错误提示"></a>3.修改错误提示</h4><p>在\src\utils\request.js 中，通过<code>async</code> <code>await</code>替换<code>promise</code>完成异步请求<br>async/await 场景：这是一个用同步的思维来解决异步问题的方案，当前端接口调用需要等到接口返回值以后渲染页面时</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> errorHandler = <span class="hljs-keyword">async</span> error =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; response &#125; = error<br><br>  <span class="hljs-keyword">if</span> (response &amp;&amp; response.status) &#123;<br>    <span class="hljs-keyword">let</span> errorText = codeMessage[response.status] || response.statusText<br>    <span class="hljs-keyword">const</span> &#123; status &#125; = response<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.json()<br><br>    <span class="hljs-comment">// 处理422未验证通过的情况</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">422</span>) &#123;<br>      <span class="hljs-keyword">let</span> errs = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> result.errors) &#123;<br>        errs += result.errors[key][<span class="hljs-number">0</span>]<br>      &#125;<br>      errorText += <span class="hljs-string">`[ <span class="hljs-subst">$&#123;errs&#125;</span> ]`</span><br>    &#125;<br>    <span class="hljs-comment">// 处理400的情况</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">400</span>) &#123;<br>      errorText += <span class="hljs-string">`[ <span class="hljs-subst">$&#123;result.message&#125;</span> ]`</span><br>    &#125;<br>    message.error(errorText)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!response) &#123;<br>    message.error(<span class="hljs-string">&#x27;网络发生异常，无法连接服务器&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> response<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-简化接口前缀（初始化项目可不设置）"><a href="#4-简化接口前缀（初始化项目可不设置）" class="headerlink" title="4.简化接口前缀（初始化项目可不设置）"></a>4.简化接口前缀（初始化项目可不设置）</h4><p>在\src\utils\request.js 中的 request 函数添加<code>prefix: &#39;/api&#39;</code>，则可以自动添加前缀简化接口写法<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621057857088-cae9855c-c15f-4411-b7bb-c7963663e66c.png#clientId=u79fc6bc8-ff2c-4&from=paste&height=166&id=u5a31ab0d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=166&originWidth=559&originalType=binary&size=12815&status=done&style=none&taskId=u62aabca7-6d8e-4ade-a2ec-0bf71b6863c&width=559" alt="image.png"><br>在\src\services\user.js 中，前缀则可以少写<code>/api</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryCurrent</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// return request(&#x27;/api/currentUser&#x27;);</span><br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/auth/login&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="三、登录-退出功能"><a href="#三、登录-退出功能" class="headerlink" title="三、登录/退出功能"></a>三、登录/退出功能</h1><h2 id="3-1-登录基本设置"><a href="#3-1-登录基本设置" class="headerlink" title="3.1 登录基本设置"></a>3.1 登录基本设置</h2><p>在 src\pages\Login\index.jsx 登录页简化，</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; LockOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Tabs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">const</span> Login = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; submitting &#125; = props<br><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; dispatch &#125; = props<br>    dispatch(&#123;<br>      type: <span class="hljs-string">&#x27;login/login&#x27;</span>,<br>      payload: &#123; ...values &#125;,<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=&#123;styles.main&#125;&gt;<br>      &lt;ProForm<br>        initialValues=&#123;&#123;<br>          autoLogin: <span class="hljs-literal">true</span>,<br>        &#125;&#125;<br>        submitter=&#123;&#123;<br>          render: <span class="hljs-function">(<span class="hljs-params">_, dom</span>) =&gt;</span> dom.pop(),<br>          submitButtonProps: &#123;<br>            loading: submitting,<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            style: &#123;<br>              width: <span class="hljs-string">&#x27;100%&#x27;</span>,<br>            &#125;,<br>          &#125;,<br>        &#125;&#125;<br>        onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>          handleSubmit(values)<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve()<br>        &#125;&#125;&gt;<br>        &lt;Tabs activeKey=<span class="hljs-string">&quot;account&quot;</span>&gt;<br>          &lt;Tabs.TabPane key=<span class="hljs-string">&quot;account&quot;</span> tab=<span class="hljs-string">&quot;账号密码登录&quot;</span> /&gt;<br>        &lt;/Tabs&gt;<br><br>        &lt;ProFormText<br>          name=<span class="hljs-string">&quot;email&quot;</span><br>          fieldProps=&#123;&#123;<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            prefix: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UserOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.prefixIcon&#125;</span> /&gt;</span></span>,<br>          &#125;&#125;<br>          placeholder=<span class="hljs-string">&quot;邮箱：super@a.com&quot;</span><br>          rules=&#123;[<br>            &#123;<br>              required: <span class="hljs-literal">true</span>,<br>              message: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span>,<br>            &#125;,<br>            &#123;<br>              type: <span class="hljs-string">&#x27;email&#x27;</span>,<br>              message: <span class="hljs-string">&#x27;请输入正确的邮箱格式&#x27;</span>,<br>            &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;ProFormText.Password<br>          name=<span class="hljs-string">&quot;password&quot;</span><br>          fieldProps=&#123;&#123;<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            prefix: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">LockOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.prefixIcon&#125;</span> /&gt;</span></span>,<br>          &#125;&#125;<br>          placeholder=<span class="hljs-string">&quot;密码：123123&quot;</span><br>          rules=&#123;[<br>            &#123;<br>              required: <span class="hljs-literal">true</span>,<br>              message: <span class="hljs-string">&#x27;请输入密码&#x27;</span>,<br>            &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;div<br>          style=&#123;&#123;<br>            marginBottom: <span class="hljs-number">24</span>,<br>          &#125;&#125;&gt;&lt;/div&gt;<br>      &lt;/ProForm&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<span class="hljs-function">(<span class="hljs-params">&#123; login, loading &#125;</span>) =&gt;</span> (&#123;<br>  userLogin: login,<br>  submitting: loading.effects[<span class="hljs-string">&#x27;login/login&#x27;</span>],<br>&#125;))(Login)<br></code></pre></div></td></tr></table></figure><h3 id="3-1-1-用户登录接口文档"><a href="#3-1-1-用户登录接口文档" class="headerlink" title="3.1.1 用户登录接口文档"></a>3.1.1 用户登录接口文档</h3><h5 id="接口描述"><a href="#接口描述" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>用户登录接口</li></ul><h5 id="请求-URL"><a href="#请求-URL" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/auth/login</li></ul><h5 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="Body-请求参数"><a href="#Body-请求参数" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>password</td><td>是</td><td>string</td><td>密码</td></tr></tbody></table><h5 id="返回参数"><a href="#返回参数" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>access_token</td><td>是</td><td>string</td><td>token</td></tr><tr><td>token_type</td><td>是</td><td>string</td><td>token 类型</td></tr><tr><td>expires_in</td><td>是</td><td>int</td><td>过期时间</td></tr></tbody></table><h5 id="返回示例"><a href="#返回示例" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;access_token&quot;</span>: <span class="hljs-string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9hcGkudGVzdFwvYXBpXC9hdXRoXC9sb2dpbiIsImlhdCI6MTYwNzUyMDE0MSwiZXhwIjoxNjA3NTIzNzQxLCJuYmYiOjE2MDc1MjAxNDEsImp0aSI6IktVdWFsTmxnOXYzZmlTZHEiLCJzdWIiOjMsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.BpVdvBjKEhQ2aIZBfkE-SoU2a3UeFkYCKQKh42Ncbio&quot;</span>,<br>    <span class="hljs-string">&quot;token_type&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span>,<br>    <span class="hljs-string">&quot;expires_in&quot;</span>: <span class="hljs-number">3600</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>状态码 422 参数错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;email&quot;</span>: [<br>            <span class="hljs-string">&quot;邮箱 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;password&quot;</span>: [<br>            <span class="hljs-string">&quot;密码 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-1-2-添加登录接口"><a href="#3-1-2-添加登录接口" class="headerlink" title="3.1.2 添加登录接口"></a>3.1.2 添加登录接口</h3><p>在 src\services\login.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeAccountLogin</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/auth/login&#x27;</span>, &#123;<br>    method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    data: params,<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFakeCaptcha</span>(<span class="hljs-params">mobile</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">`/api/login/captcha?mobile=<span class="hljs-subst">$&#123;mobile&#125;</span>`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="1-将token存入localStorage"><a href="#1-将token存入localStorage" class="headerlink" title="1.将token存入localStorage"></a>1.将<code>token</code>存入<code>localStorage</code></h4><p>在\src\models\login.js 判断是否登录，并跳转到首页，将<code>token</code>存入<code>localStorage</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; stringify &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;querystring&#x27;</span><br><span class="hljs-keyword">import</span> &#123; history &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> &#123; fakeAccountLogin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/login&#x27;</span><br><span class="hljs-keyword">import</span> &#123; setAuthority &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/authority&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getPageQuery &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/utils&#x27;</span><br><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><br><span class="hljs-keyword">const</span> Model = &#123;<br>  namespace: <span class="hljs-string">&#x27;login&#x27;</span>,<br>  state: &#123;&#125;,<br>  effects: &#123;<br>    *<span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">&#123; payload &#125;, &#123; call, put &#125;</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">yield</span> call(fakeAccountLogin, payload)<br>      <span class="hljs-comment">// 判断是否登陆成功</span><br>      <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">yield</span> put(&#123;<br>          type: <span class="hljs-string">&#x27;changeLoginStatus&#x27;</span>,<br>          payload: response,<br>        &#125;) <span class="hljs-comment">// Login successfully</span><br><br>        <span class="hljs-comment">// 跳转到首页</span><br>        history.replace(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        message.success(<span class="hljs-string">&#x27;🎉 🎉 🎉  登录成功！&#x27;</span>)<br>      &#125;<br>    &#125;,<br><br>    <span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123; redirect &#125; = getPageQuery() <span class="hljs-comment">// Note: There may be security issues, please note</span><br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.location.pathname !== <span class="hljs-string">&#x27;/user/login&#x27;</span> &amp;&amp; !redirect) &#123;<br>        history.replace(&#123;<br>          pathname: <span class="hljs-string">&#x27;/user/login&#x27;</span>,<br>          search: stringify(&#123;<br>            redirect: <span class="hljs-built_in">window</span>.location.href,<br>          &#125;),<br>        &#125;)<br>      &#125;<br>    &#125;,<br>  &#125;,<br>  reducers: &#123;<br>    <span class="hljs-function"><span class="hljs-title">changeLoginStatus</span>(<span class="hljs-params">state, &#123; payload &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// 将token存入localStorage</span><br>      <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;access_token&#x27;</span>, payload.access_token)<br>      <span class="hljs-keyword">return</span> &#123; ...state &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Model<br></code></pre></div></td></tr></table></figure><h4 id="2-取出token，加在Header头中"><a href="#2-取出token，加在Header头中" class="headerlink" title="2.取出token，加在Header头中"></a>2.取出<code>token</code>，加在<code>Header</code>头中</h4><p>在\src\utils\request.js 取出<code>token</code>，加在<code>Header</code>头中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/** Request 网络请求工具 更详细的 api 文档: https://github.com/umijs/umi-request */</span><br><span class="hljs-keyword">import</span> &#123; extend &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi-request&#x27;</span><br><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><br><span class="hljs-keyword">const</span> codeMessage = &#123;<br>  <span class="hljs-number">200</span>: <span class="hljs-string">&#x27;服务器成功返回请求的数据。&#x27;</span>,<br>  <span class="hljs-number">201</span>: <span class="hljs-string">&#x27;新建数据成功。&#x27;</span>,<br>  <span class="hljs-number">202</span>: <span class="hljs-string">&#x27;一个请求已经进入后台排队（异步任务）。&#x27;</span>,<br>  <span class="hljs-number">204</span>: <span class="hljs-string">&#x27;处理成功。&#x27;</span>,<br>  <span class="hljs-number">400</span>: <span class="hljs-string">&#x27;发出的请求有错误，服务器没有进行新建或修改数据的操作。&#x27;</span>,<br>  <span class="hljs-number">401</span>: <span class="hljs-string">&#x27;用户没有权限（令牌、用户名、密码错误）。&#x27;</span>,<br>  <span class="hljs-number">403</span>: <span class="hljs-string">&#x27;用户得到授权，但是访问是被禁止的。&#x27;</span>,<br>  <span class="hljs-number">404</span>: <span class="hljs-string">&#x27;发出的请求针对的是不存在的记录，服务器没有进行操作。&#x27;</span>,<br>  <span class="hljs-number">406</span>: <span class="hljs-string">&#x27;请求的格式不可得。&#x27;</span>,<br>  <span class="hljs-number">410</span>: <span class="hljs-string">&#x27;请求的资源被永久删除，且不会再得到的。&#x27;</span>,<br>  <span class="hljs-number">422</span>: <span class="hljs-string">&#x27;当创建一个对象时，发生一个验证错误。&#x27;</span>,<br>  <span class="hljs-number">500</span>: <span class="hljs-string">&#x27;服务器发生错误，请检查服务器。&#x27;</span>,<br>  <span class="hljs-number">502</span>: <span class="hljs-string">&#x27;网关错误。&#x27;</span>,<br>  <span class="hljs-number">503</span>: <span class="hljs-string">&#x27;服务不可用，服务器暂时过载或维护。&#x27;</span>,<br>  <span class="hljs-number">504</span>: <span class="hljs-string">&#x27;网关超时。&#x27;</span>,<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@zh</span>-CN 异常处理程序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@en</span>-US Exception handler</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> errorHandler = <span class="hljs-keyword">async</span> error =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; response &#125; = error<br><br>  <span class="hljs-keyword">if</span> (response &amp;&amp; response.status) &#123;<br>    <span class="hljs-keyword">let</span> errorText = codeMessage[response.status] || response.statusText<br>    <span class="hljs-keyword">const</span> &#123; status &#125; = response<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.json()<br>    <span class="hljs-comment">// 处理422未验证通过的情况</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">422</span>) &#123;<br>      <span class="hljs-keyword">let</span> errs = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> result.errors) &#123;<br>        errs += result.errors[key][<span class="hljs-number">0</span>]<br>      &#125;<br>      errorText += <span class="hljs-string">`[ <span class="hljs-subst">$&#123;errs&#125;</span> ]`</span><br>    &#125;<br>    <span class="hljs-comment">// 处理400的情况</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">400</span>) &#123;<br>      errorText += <span class="hljs-string">`[ <span class="hljs-subst">$&#123;result.message&#125;</span> ]`</span><br>    &#125;<br>    message.error(errorText)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!response) &#123;<br>    message.error(<span class="hljs-string">&#x27;网络发生异常，无法连接服务器&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> response<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@en</span>-US Configure the default parameters for request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@zh</span>-CN 配置request请求时的默认参数</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> request = extend(&#123;<br>  errorHandler,<br>  <span class="hljs-comment">// default error handling</span><br>  credentials: <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-comment">// Does the default request bring cookies</span><br>  prefix: <span class="hljs-string">&#x27;/api&#x27;</span>,<br>&#125;)<br><br><span class="hljs-comment">// 请求拦截器，在请求之前添加Header头</span><br>request.interceptors.request.use(<span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取token</span><br>  <span class="hljs-keyword">const</span> token = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;access_token&#x27;</span>) || <span class="hljs-string">&#x27; &#x27;</span><br>  <span class="hljs-comment">// 设置Header头</span><br>  <span class="hljs-keyword">const</span> headers = &#123;<br>    Authorization: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;token&#125;</span>`</span>,<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    url,<br>    options: &#123; ...options, headers &#125;,<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request<br></code></pre></div></td></tr></table></figure><h2 id="3-2-获取用户信息"><a href="#3-2-获取用户信息" class="headerlink" title="3.2 获取用户信息"></a>3.2 获取用户信息</h2><h3 id="3-2-1-登录信息接口文档"><a href="#3-2-1-登录信息接口文档" class="headerlink" title="3.2.1 登录信息接口文档"></a>3.2.1 登录信息接口文档</h3><h5 id="接口描述-1"><a href="#接口描述-1" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>登录信息</li></ul><h5 id="请求-URL-1"><a href="#请求-URL-1" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/user</li></ul><h5 id="请求方式-1"><a href="#请求方式-1" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="返回参数-1"><a href="#返回参数-1" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>主键</td></tr><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>phone</td><td>是</td><td>string</td><td>手机号</td></tr><tr><td>avatar</td><td>是</td><td>string</td><td>头像</td></tr><tr><td>avatar_url</td><td>是</td><td>string</td><td>头像地址</td></tr><tr><td>is_locked</td><td>是</td><td>int</td><td>是否锁定： 0 正常 1 锁定</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>创建时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>更新时间</td></tr></tbody></table><h5 id="返回示例-1"><a href="#返回示例-1" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;super@a.com&quot;</span>,<br>    <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T02:58:08.000000Z&quot;</span>,<br>    <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T04:32:27.000000Z&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-2-添加获取用户登录信息接口"><a href="#3-2-2-添加获取用户登录信息接口" class="headerlink" title="3.2.2 添加获取用户登录信息接口"></a>3.2.2 添加获取用户登录信息接口</h3><p>在\src\services\user.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/api/users&#x27;</span>)<br>&#125;<br><span class="hljs-comment">// 获取当前登录用户信息</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryCurrent</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/user&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryNotices</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/api/notices&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-3-将用户信息存入localstorage"><a href="#3-2-3-将用户信息存入localstorage" class="headerlink" title="3.2.3 将用户信息存入localstorage"></a>3.2.3 将用户信息存入<code>localstorage</code></h3><p>在\src\models\user.js 中判断<code>localstorage</code>是否有用户信息，没有则请求，再将用户信息存入<code>localstorage</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; queryCurrent, query <span class="hljs-keyword">as</span> queryUsers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> UserModel = &#123;<br>  namespace: <span class="hljs-string">&#x27;user&#x27;</span>,<br>  state: &#123;<br>    currentUser: &#123;&#125;,<br>  &#125;,<br>  effects: &#123;<br>    *<span class="hljs-function"><span class="hljs-title">fetch</span>(<span class="hljs-params">_, &#123; call, put &#125;</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">yield</span> call(queryUsers)<br>      <span class="hljs-keyword">yield</span> put(&#123;<br>        type: <span class="hljs-string">&#x27;save&#x27;</span>,<br>        payload: response,<br>      &#125;)<br>    &#125;,<br><br>    <span class="hljs-comment">// 获取用户信息</span><br>    *<span class="hljs-function"><span class="hljs-title">fetchCurrent</span>(<span class="hljs-params">_, &#123; call, put &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// 查看localstorage是否有用户信息，没有再去请求</span><br>      <span class="hljs-keyword">let</span> userInfo = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>))<br>      <span class="hljs-keyword">if</span> (!userInfo) &#123;<br>        userInfo = <span class="hljs-keyword">yield</span> call(queryCurrent)<br>        <span class="hljs-comment">//修复BUG：有时候userInfo返回的是useCache=false被误存入localStorage，错误的userInfo导致页面一直刷新</span><br>        <span class="hljs-keyword">if</span> (userInfo.useCache !== <span class="hljs-literal">false</span>) <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>, <span class="hljs-built_in">JSON</span>.stringify(userInfo))<br>      &#125;<br><br>      <span class="hljs-keyword">yield</span> put(&#123;<br>        type: <span class="hljs-string">&#x27;saveCurrentUser&#x27;</span>,<br>        payload: userInfo,<br>      &#125;)<br>    &#125;,<br>  &#125;,<br>  reducers: &#123;<br>    <span class="hljs-function"><span class="hljs-title">saveCurrentUser</span>(<span class="hljs-params">state, action</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123; ...state, <span class="hljs-attr">currentUser</span>: action.payload || &#123;&#125; &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> UserModel<br></code></pre></div></td></tr></table></figure><h4 id="1-判断用户是否登录"><a href="#1-判断用户是否登录" class="headerlink" title="1.判断用户是否登录"></a>1.判断用户是否登录</h4><p>在\src\layouts\SecurityLayout.jsx 中精简代码，判断用户是否登录<br>//关键代码 <code>const isLogin = currentUser &amp;&amp; currentUser.id;</code>因为后台返回的用户<code>id</code>是<code>id</code>不是<code>userId</code></p><h5 id="返回示例-2"><a href="#返回示例-2" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;super@a.com&quot;</span>,<br>    <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T02:58:08.000000Z&quot;</span>,<br>    <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T04:32:27.000000Z&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageLoading &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Redirect, connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> &#123; stringify &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;querystring&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityLayout</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    isReady: <span class="hljs-literal">false</span>,<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      isReady: <span class="hljs-literal">true</span>,<br>    &#125;)<br>    <span class="hljs-keyword">const</span> &#123; dispatch &#125; = <span class="hljs-built_in">this</span>.props<br><br>    <span class="hljs-keyword">if</span> (dispatch) &#123;<br>      dispatch(&#123;<br>        type: <span class="hljs-string">&#x27;user/fetchCurrent&#x27;</span>,<br>      &#125;)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; isReady &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> &#123; children, loading, currentUser &#125; = <span class="hljs-built_in">this</span>.props <span class="hljs-comment">// You can replace it to your authentication rule (such as check token exists)</span><br>    <span class="hljs-comment">// You can replace it with your own login authentication rules (such as judging whether the token exists)</span><br><br>    <span class="hljs-keyword">const</span> isLogin = currentUser &amp;&amp; currentUser.id<br>    <span class="hljs-keyword">const</span> queryString = stringify(&#123;<br>      redirect: <span class="hljs-built_in">window</span>.location.href,<br>    &#125;)<br><br>    <span class="hljs-keyword">if</span> ((!isLogin &amp;&amp; loading) || !isReady) &#123;<br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PageLoading</span> /&gt;</span></span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!isLogin &amp;&amp; <span class="hljs-built_in">window</span>.location.pathname !== <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`/<span class="hljs-attr">login</span>?$&#123;<span class="hljs-attr">queryString</span>&#125;`&#125; /&gt;</span></span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> children<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<span class="hljs-function">(<span class="hljs-params">&#123; user, loading &#125;</span>) =&gt;</span> (&#123;<br>  currentUser: user.currentUser,<br>  loading: loading.models.user,<br>&#125;))(SecurityLayout)<br></code></pre></div></td></tr></table></figure><h3 id="3-2-4-修改管理员头像"><a href="#3-2-4-修改管理员头像" class="headerlink" title="3.2.4 修改管理员头像"></a>3.2.4 修改管理员头像</h3><p>在\src\components\GlobalHeader\AvatarDropdown.jsx 修改管理员头像，将<code>currentUser.avatar</code>更改为<code>currentUser.avatar_url</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Avatar size=<span class="hljs-string">&quot;small&quot;</span> className=&#123;styles.avatar&#125; src=&#123;currentUser.avatar_url&#125; alt=<span class="hljs-string">&quot;avatar&quot;</span> /&gt;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-5-优化登录，判断登录之后重定向到首页"><a href="#3-2-5-优化登录，判断登录之后重定向到首页" class="headerlink" title="3.2.5 优化登录，判断登录之后重定向到首页"></a>3.2.5 优化登录，判断登录之后重定向到首页</h3><p>在\src\pages\Login\index.jsx 中 优化登录，判断登录之后重定向到首页<br>导入<code>useEffect</code>和<code>history</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect, history &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br></code></pre></div></td></tr></table></figure><p>加入<code>useEffect</code>代替生命周期函数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 判断如果已经登录过，直接去首页</span><br>  <span class="hljs-keyword">const</span> userInfo = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>)<br>  <span class="hljs-keyword">if</span> (userInfo) history.replace(<span class="hljs-string">&#x27;/&#x27;</span>)<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><h3 id="3-2-6-登录-bug"><a href="#3-2-6-登录-bug" class="headerlink" title="3.2.6 登录 bug"></a>3.2.6 登录 bug</h3><p>在在\src\models\user.js 中 将用户数据存入<code>localStorage</code>时，有时候<code>userInfo</code>返回的是<code>useCache=false</code>被误存入<code>localStorage</code>，错误的<code>userInfo</code>导致页面一直刷新</p><h4 id="1-解决"><a href="#1-解决" class="headerlink" title="1.解决"></a>1.解决</h4><p>在接口请求获取<code>userInfo</code>之后判断是否为正确的数据，是才存入<code>localStorage</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (!userInfo) &#123;<br>  userInfo = <span class="hljs-keyword">yield</span> call(queryCurrent);<br>  <span class="hljs-comment">//修复BUG：有时候userInfo返回的是useCache=false被误存入localStorage，错误的userInfo导致页面一直刷新</span><br>  <span class="hljs-keyword">if</span> (userInfo.useCache !== <span class="hljs-literal">false</span>) <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>, <span class="hljs-built_in">JSON</span>.stringify(userInfo));<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-3-退出"><a href="#3-3-退出" class="headerlink" title="3.3 退出"></a>3.3 退出</h2><h3 id="3-3-1-退出接口文档"><a href="#3-3-1-退出接口文档" class="headerlink" title="3.3.1 退出接口文档"></a>3.3.1 退出接口文档</h3><h5 id="接口描述-2"><a href="#接口描述-2" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>退出登录</li></ul><h5 id="请求-URL-2"><a href="#请求-URL-2" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/auth/logout</li></ul><h5 id="请求方式-2"><a href="#请求方式-2" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="请求头部-1"><a href="#请求头部-1" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="返回示例-3"><a href="#返回示例-3" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 请求成功</li></ul><h3 id="3-3-2-添加退出接口"><a href="#3-3-2-添加退出接口" class="headerlink" title="3.3.2 添加退出接口"></a>3.3.2 添加退出接口</h3><p>在\src\services\login.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logout</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/auth/logout&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-3-添加退出方法"><a href="#3-3-3-添加退出方法" class="headerlink" title="3.3.3 添加退出方法"></a>3.3.3 添加退出方法</h3><p>在\src\models\login.js 中导入<code>logout</code>并添加退出方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; history &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> &#123; fakeAccountLogin, logout &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/login&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><br><span class="hljs-keyword">const</span> Model = &#123;<br>  namespace: <span class="hljs-string">&#x27;login&#x27;</span>,<br>  state: &#123;&#125;,<br>  effects: &#123;<br>    *<span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">&#123; payload &#125;, &#123; call, put &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// loading</span><br>      <span class="hljs-keyword">const</span> load = message.loading(<span class="hljs-string">&#x27;登录中...&#x27;</span>)<br><br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">yield</span> call(fakeAccountLogin, payload)<br>      <span class="hljs-comment">// 判断是否登陆成功</span><br>      <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">yield</span> put(&#123;<br>          type: <span class="hljs-string">&#x27;changeLoginStatus&#x27;</span>,<br>          payload: response,<br>        &#125;) <span class="hljs-comment">// Login successfully</span><br><br>        <span class="hljs-comment">// 跳转到首页</span><br>        history.replace(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        message.success(<span class="hljs-string">&#x27;🎉 🎉 🎉  登录成功！&#x27;</span>)<br>      &#125;<br>      load()<br>    &#125;,<br><br>    *<span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params">_, &#123; call &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// loading</span><br>      <span class="hljs-keyword">const</span> load = message.loading(<span class="hljs-string">&#x27;退出中...&#x27;</span>)<br><br>      <span class="hljs-comment">// 请求Api，退出登录</span><br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">yield</span> call(logout)<br><br>      <span class="hljs-comment">// 判断是否成功退出</span><br>      <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-comment">// 删除本地存储的token和userInfo</span><br>        <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;access_token&#x27;</span>)<br>        <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>)<br>        <span class="hljs-comment">// 重定向到登录页</span><br>        history.replace(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>        message.success(<span class="hljs-string">&#x27;🎉 🎉 🎉  退出成功！&#x27;</span>)<br>      &#125;<br>      load()<br>    &#125;,<br>  &#125;,<br>  reducers: &#123;<br>    <span class="hljs-function"><span class="hljs-title">changeLoginStatus</span>(<span class="hljs-params">state, &#123; payload &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// 将token存入localStorage</span><br>      <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;access_token&#x27;</span>, payload.access_token)<br>      <span class="hljs-keyword">return</span> &#123; ...state &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Model<br></code></pre></div></td></tr></table></figure><h1 id="四、首页统计"><a href="#四、首页统计" class="headerlink" title="四、首页统计"></a>四、首页统计</h1><h2 id="4-1-新建统计面板文件"><a href="#4-1-新建统计面板文件" class="headerlink" title="4.1 新建统计面板文件"></a>4.1 新建统计面板文件</h2><p>在 src\pages 文件夹下创建一个文件夹和文件 DashBoard\index.jsx<br>因为只有一个接口请求，而且不需要获取共享数据，就直接在文件里写请求，可以不用<code>models</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Statistic, Card, Row, Col &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ArrowUpOutlined, ArrowDownOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; fetchDashboard &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/dashboard&#x27;</span><br><br><span class="hljs-keyword">const</span> DashBoard = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 定义组件状态，状态改变，重新渲染组件</span><br>  <span class="hljs-keyword">const</span> [data, setData] = useState(&#123;&#125;)<br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，获取统计数据</span><br>    <span class="hljs-keyword">const</span> resData = <span class="hljs-keyword">await</span> fetchDashboard()<br>    <span class="hljs-comment">// 得到数据之后更新组件状态</span><br>    setData(resData)<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;Row gutter=&#123;<span class="hljs-number">16</span>&#125;&gt;<br>        &lt;Col span=&#123;<span class="hljs-number">8</span>&#125;&gt;<br>          &lt;Card&gt;<br>            &lt;Statistic<br>              title=<span class="hljs-string">&quot;用户数量&quot;</span><br>              value=&#123;data.users_count&#125;<br>              precision=&#123;<span class="hljs-number">0</span>&#125;<br>              valueStyle=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#3f8600&#x27;</span> &#125;&#125;<br>              prefix=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ArrowUpOutlined</span> /&gt;</span></span>&#125;<br>            /&gt;<br>          &lt;/Card&gt;<br>        &lt;/Col&gt;<br>        &lt;Col span=&#123;<span class="hljs-number">8</span>&#125;&gt;<br>          &lt;Card&gt;<br>            &lt;Statistic<br>              title=<span class="hljs-string">&quot;订单数量&quot;</span><br>              value=&#123;data.goods_count&#125;<br>              precision=&#123;<span class="hljs-number">0</span>&#125;<br>              valueStyle=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#cf1322&#x27;</span> &#125;&#125;<br>              prefix=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ArrowDownOutlined</span> /&gt;</span></span>&#125;<br>            /&gt;<br>          &lt;/Card&gt;<br>        &lt;/Col&gt;<br>        &lt;Col span=&#123;<span class="hljs-number">8</span>&#125;&gt;<br>          &lt;Card&gt;<br>            &lt;Statistic<br>              title=<span class="hljs-string">&quot;商品数量&quot;</span><br>              value=&#123;data.order_count&#125;<br>              precision=&#123;<span class="hljs-number">0</span>&#125;<br>              valueStyle=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#234abc&#x27;</span> &#125;&#125;<br>              prefix=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ArrowDownOutlined</span> /&gt;</span></span>&#125;<br>            /&gt;<br>          &lt;/Card&gt;<br>        &lt;/Col&gt;<br>      &lt;/Row&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> DashBoard<br></code></pre></div></td></tr></table></figure><h2 id="4-2-添加统计面板路由"><a href="#4-2-添加统计面板路由" class="headerlink" title="4.2 添加统计面板路由"></a>4.2 添加统计面板路由</h2><p>在 config\routes.js 中添加统计面板路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    component: <span class="hljs-string">&#x27;../layouts/BlankLayout&#x27;</span>,<br>    routes: [<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>        component: <span class="hljs-string">&#x27;../layouts/LoginLayout&#x27;</span>,<br>        routes: [<br>          &#123;<br>            name: <span class="hljs-string">&#x27;login&#x27;</span>,<br>            path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>            component: <span class="hljs-string">&#x27;./Login&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        component: <span class="hljs-string">&#x27;../layouts/SecurityLayout&#x27;</span>,<br>        routes: [<br>          &#123;<br>            path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            component: <span class="hljs-string">&#x27;../layouts/BasicLayout&#x27;</span>,<br>            routes: [<br>              &#123;<br>                path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>                redirect: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,<br>              &#125;,<br>              &#123;<br>                name: <span class="hljs-string">&#x27;dashboard&#x27;</span>,<br>                path: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,<br>                icon: <span class="hljs-string">&#x27;PieChartOutlined&#x27;</span>,<br>                component: <span class="hljs-string">&#x27;@/pages/DashBoard&#x27;</span>,<br>              &#125;,<br><br>              &#123;<br>                component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>              &#125;,<br>            ],<br>          &#125;,<br>          &#123;<br>            component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>  &#125;,<br>]<br></code></pre></div></td></tr></table></figure><h2 id="4-3-统计面板接口文档"><a href="#4-3-统计面板接口文档" class="headerlink" title="4.3 统计面板接口文档"></a>4.3 统计面板接口文档</h2><h5 id="接口描述-3"><a href="#接口描述-3" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>首页统计</li></ul><h5 id="请求-URL-3"><a href="#请求-URL-3" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/index</li></ul><h5 id="请求方式-3"><a href="#请求方式-3" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="返回参数-2"><a href="#返回参数-2" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>users_count</td><td>是</td><td>int</td><td>用户数量</td></tr><tr><td>goods_count</td><td>是</td><td>int</td><td>商品数量</td></tr><tr><td>order_count</td><td>是</td><td>int</td><td>订单数据</td></tr></tbody></table><h5 id="返回示例-4"><a href="#返回示例-4" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;users_count&quot;</span>: <span class="hljs-number">7</span>,<br>    <span class="hljs-string">&quot;goods_count&quot;</span>: <span class="hljs-number">237</span>,<br>    <span class="hljs-string">&quot;order_count&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-4-添加统计面板接口"><a href="#4-4-添加统计面板接口" class="headerlink" title="4.4 添加统计面板接口"></a>4.4 添加统计面板接口</h2><p>在 src\services\dashboard.js 添加统计面板接口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取统计面板数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchDashboard</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/index&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="五、用户列表"><a href="#五、用户列表" class="headerlink" title="五、用户列表"></a>五、用户列表</h1><h2 id="5-1-用户基本列表"><a href="#5-1-用户基本列表" class="headerlink" title="5.1 用户基本列表"></a>5.1 用户基本列表</h2><h3 id="5-1-1-用户列表接口文档"><a href="#5-1-1-用户列表接口文档" class="headerlink" title="5.1.1 用户列表接口文档"></a>5.1.1 用户列表接口文档</h3><h5 id="接口描述-4"><a href="#接口描述-4" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>用户列表</li></ul><h5 id="请求-URL-4"><a href="#请求-URL-4" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users</li></ul><h5 id="请求方式-4"><a href="#请求方式-4" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-2"><a href="#请求头部-2" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Query-请求参数"><a href="#Query-请求参数" class="headerlink" title="Query 请求参数"></a>Query 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>current</td><td>否</td><td>int</td><td>分页-当前页</td></tr><tr><td>name</td><td>否</td><td>string</td><td>姓名模糊搜索</td></tr><tr><td>email</td><td>否</td><td>string</td><td>邮箱匹配搜索</td></tr><tr><td>phone</td><td>否</td><td>string</td><td>手机号匹配搜索</td></tr></tbody></table><h5 id="返回参数-3"><a href="#返回参数-3" class="headerlink" title="返回参数"></a>返回参数</h5><p><strong>data</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>主键</td></tr><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>phone</td><td>是</td><td>string</td><td>手机号</td></tr><tr><td>avatar</td><td>是</td><td>string</td><td>头像</td></tr><tr><td>avatar_url</td><td>是</td><td>string</td><td>头像地址</td></tr><tr><td>is_locked</td><td>是</td><td>int</td><td>是否锁定： 0 正常 1 锁定</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>创建时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>更新时间</td></tr></tbody></table><p><strong>meta.pagination</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>total</td><td>是</td><td>int</td><td>数据总数</td></tr><tr><td>count</td><td>是</td><td>int</td><td>当前页数据</td></tr><tr><td>per_page</td><td>是</td><td>int</td><td>每页显示条数</td></tr><tr><td>current_page</td><td>是</td><td>int</td><td>当前页页码</td></tr><tr><td>total_pages</td><td>是</td><td>int</td><td>总页数</td></tr><tr><td>links.previous</td><td>是</td><td>string</td><td>上一页链接</td></tr><tr><td>links.next</td><td>是</td><td>string</td><td>下一页链接</td></tr></tbody></table><h5 id="返回示例-5"><a href="#返回示例-5" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;data&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>            <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;super@a.com&quot;</span>,<br>            <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T02:58:08.000000Z&quot;</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-24T06:40:44.000000Z&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;xx&quot;</span>,<br>            <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;12311@qq.com&quot;</span>,<br>            <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-24T03:47:48.000000Z&quot;</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-24T06:44:43.000000Z&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-string">&quot;meta&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;pagination&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;per_page&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;current_page&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;total_pages&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-string">&quot;links&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;previous&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-string">&quot;next&quot;</span>: <span class="hljs-string">&quot;http://shopapi.mamp/api/admin/users?page=2&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-1-2-添加用户列表接口"><a href="#5-1-2-添加用户列表接口" class="headerlink" title="5.1.2 添加用户列表接口"></a>5.1.2 添加用户列表接口</h3><p>在 src\services\user.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取当前登录用户信息</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryCurrent</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/user&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 获取用户列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUsers</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/users&#x27;</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-1-3-创建基本的用户列表"><a href="#5-1-3-创建基本的用户列表" class="headerlink" title="5.1.3 创建基本的用户列表"></a>5.1.3 创建基本的用户列表</h3><p><a href="https://procomponents.ant.design/components/table">ProTable</a>参考文档<br>在\src\pages\User\index.jsx 中新建用户列表文件和文件，创建基本的 table，根据接口文档写需要的字段</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Avatar, Switch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getUsers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;avatar_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatar_url&#125;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;32&#125;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>&#125; /&gt;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否禁用&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_locked&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;启用&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;禁用&quot;</span><br>          defaultChecked=&#123;record.is_locked === <span class="hljs-number">0</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;&#125;&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-comment">// 获取用户列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getUsers(params)<br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button key=<span class="hljs-string">&quot;button&quot;</span> icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125; type=<span class="hljs-string">&quot;primary&quot;</span>&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h2 id="5-2-禁用和启用"><a href="#5-2-禁用和启用" class="headerlink" title="5.2 禁用和启用"></a>5.2 禁用和启用</h2><h3 id="5-2-1-禁启和启用接口文档"><a href="#5-2-1-禁启和启用接口文档" class="headerlink" title="5.2.1 禁启和启用接口文档"></a>5.2.1 禁启和启用接口文档</h3><h5 id="接口描述-5"><a href="#接口描述-5" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>禁用和启用</li></ul><h5 id="请求-URL-5"><a href="#请求-URL-5" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users/{user}/lock</li></ul><h5 id="请求方式-5"><a href="#请求方式-5" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PATCH</li></ul><h5 id="请求头部-3"><a href="#请求头部-3" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数"><a href="#RESET-参数" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>user</td><td>是</td><td>int</td><td>用户 id</td></tr></tbody></table><h5 id="返回示例-6"><a href="#返回示例-6" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 请求成功</li></ul><h3 id="5-2-2-添加禁用和启用接口"><a href="#5-2-2-添加禁用和启用接口" class="headerlink" title="5.2.2 添加禁用和启用接口"></a>5.2.2 添加禁用和启用接口</h3><p>在\src\services\user.js 中添加禁启用接口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 禁用和启用</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;用户id&#125;</span> <span class="hljs-variable">uid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lockUser</span>(<span class="hljs-params">uid</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/users/<span class="hljs-subst">$&#123;uid&#125;</span>/lock`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-2-3-添加和启用方法"><a href="#5-2-3-添加和启用方法" class="headerlink" title="5.2.3 添加和启用方法"></a>5.2.3 添加和启用方法</h3><p>在\src\pages\User\index.jsx 中，先导入<code>lockUser</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; getUsers, lockUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br></code></pre></div></td></tr></table></figure><p>创建禁启用函数接收用户 id，因为成功后后端返回值是空，所以<code>response.status===undefined</code>判断为空则操作成功</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 禁启用</span><br><span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>  <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>    message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    message.error(<span class="hljs-string">&#x27;操作失败！&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后在<code>columns</code>列表中，找到禁启用字段，使用禁启用函数，同时传出<code>record.id</code>用户 id</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    title:<span class="hljs-string">&quot;是否禁用&quot;</span>,<br>    dataIndex:<span class="hljs-string">&quot;is_locked&quot;</span>,<br>    hideInSearch:<span class="hljs-literal">true</span>,<br>    render:<span class="hljs-function">(<span class="hljs-params">_,record</span>)=&gt;</span> <span class="xml">&lt;Switch</span><br><span class="xml">        checkedChildren=&quot;启用&quot;</span><br><span class="xml">        unCheckedChildren=&quot;禁用&quot;</span><br><span class="xml">        defaultChecked=&#123;record.is_locked === 0&#125;</span><br><span class="xml">        onChange=&#123;()=&gt;&#123;heandleLockUser(record.id)&#125;&#125;</span><br><span class="xml">    /&gt;</span><br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="5-3-添加用户"><a href="#5-3-添加用户" class="headerlink" title="5.3 添加用户"></a>5.3 添加用户</h2><p><a href="https://ant.design/components/modal-cn/">Modal</a>对话框文档 <a href="https://procomponents.ant.design/components/form#%E8%A1%A8%E5%8D%95%E8%81%94%E5%8A%A8">ProForm</a>高级表单文档</p><h3 id="5-3-1-添加用户接口文档"><a href="#5-3-1-添加用户接口文档" class="headerlink" title="5.3.1 添加用户接口文档"></a>5.3.1 添加用户接口文档</h3><h5 id="接口描述-6"><a href="#接口描述-6" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>添加用户</li></ul><p><em>注意： 后台 Api 做了 RBAC 权限验证， 新创建的用户无法登陆， 必须为新创建的用户分配响应的角色或权限才可以</em><br><em>注意： 权限管理暂未开放 Api</em></p><h5 id="请求-URL-6"><a href="#请求-URL-6" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users</li></ul><h5 id="请求方式-6"><a href="#请求方式-6" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="请求头部-4"><a href="#请求头部-4" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Body-请求参数-1"><a href="#Body-请求参数-1" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>password</td><td>是</td><td>string</td><td>密码</td></tr></tbody></table><h5 id="返回示例-7"><a href="#返回示例-7" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 201 创建成功</li><li>状态码 422 参数错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: [<br>            <span class="hljs-string">&quot;昵称 不能为空&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;email&quot;</span>: [<br>            <span class="hljs-string">&quot;邮箱 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;password&quot;</span>: [<br>            <span class="hljs-string">&quot;密码 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-3-2-添加添加用户接口"><a href="#5-3-2-添加添加用户接口" class="headerlink" title="5.3.2 添加添加用户接口"></a>5.3.2 添加添加用户接口</h3><p>在\src\services\user.js 中<br>这里添加用户接口和获取用户列表是同一个接口<code>/admin/users</code>，但是他们的请求方式不一样，添加用户接口用<code>post</code>，而获取用户列表接口是用默认的<code>get</code>方式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addUser</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/users&#x27;</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-3-3-封装添加用户模态框"><a href="#5-3-3-封装添加用户模态框" class="headerlink" title="5.3.3 封装添加用户模态框"></a>5.3.3 封装添加用户模态框</h3><h4 id="1-封装添加用户模态框组件Create"><a href="#1-封装添加用户模态框组件Create" class="headerlink" title="1.封装添加用户模态框组件Create"></a>1.封装添加用户模态框组件<code>Create</code></h4><p>在\src\pages\User 文件夹下新建公共文件夹和<code>Create.jsx</code>文件 \src\pages\User\components\Create.jsx<br><code>Create</code>组件在父组件中使用，并用<code>props</code>接收父组件传的方法和实例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> Create = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef &#125; = props<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加用户</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;表单数据&#125;</span> <span class="hljs-variable">values</span></span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> createUser = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，添加用户</span><br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> addUser(values)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;添加成功！&#x27;</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=<span class="hljs-string">&quot;添加用户&quot;</span><br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &lt;ProForm<br>        onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>          createUser(values)<br>        &#125;&#125;&gt;<br>        &lt;ProFormText<br>          name=<span class="hljs-string">&quot;name&quot;</span><br>          label=<span class="hljs-string">&quot;昵称&quot;</span><br>          placeholder=<span class="hljs-string">&quot;请输入昵称&quot;</span><br>          rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入昵称&#x27;</span> &#125;]&#125;<br>        /&gt;<br>        &lt;ProFormText<br>          name=<span class="hljs-string">&quot;email&quot;</span><br>          label=<span class="hljs-string">&quot;邮箱&quot;</span><br>          placeholder=<span class="hljs-string">&quot;请输入邮箱&quot;</span><br>          rules=&#123;[<br>            &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span> &#125;,<br>            &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span> &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;ProFormText.Password<br>          name=<span class="hljs-string">&quot;password&quot;</span><br>          label=<span class="hljs-string">&quot;密码&quot;</span><br>          placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span><br>          rules=&#123;[<br>            &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入密码&#x27;</span> &#125;,<br>            &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;密码最小6位&#x27;</span> &#125;,<br>          ]&#125;<br>        /&gt;<br>      &lt;/ProForm&gt;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Create<br></code></pre></div></td></tr></table></figure><h4 id="2-调用封装的Create组件"><a href="#2-调用封装的Create组件" class="headerlink" title="2.调用封装的Create组件"></a>2.调用封装的<code>Create</code>组件</h4><p>这里是使用<code>Create</code>组件，并且将方法和实例传给子组件，在父组件里只做简单的显示关闭操作，不做过多的逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Create isModalVisible=&#123;isModalVisible&#125; isShowModal=&#123;isShowModal&#125; actionRef=&#123;actionRef&#125; /&gt;<br></code></pre></div></td></tr></table></figure><p>在\src\pages\User\index.jsx，在父组件中导入<code>import Create from &#39;./components/Create&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Avatar, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getUsers, lockUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> Create <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Create&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取用户列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getUsers(params)<br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 禁启用</span><br>  <span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function"><span class="hljs-params">show</span> =&gt;</span> &#123;<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;avatar_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatar_url&#125;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;32&#125;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>&#125; /&gt;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否禁用&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_locked&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;启用&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;禁用&quot;</span><br>          defaultChecked=&#123;record.is_locked === <span class="hljs-number">0</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br>      &lt;Create isModalVisible=&#123;isModalVisible&#125; isShowModal=&#123;isShowModal&#125; actionRef=&#123;actionRef&#125; /&gt;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h2 id="5-4-编辑用户"><a href="#5-4-编辑用户" class="headerlink" title="5.4 编辑用户"></a>5.4 编辑用户</h2><h3 id="5-4-1-更新用户信息和用户详情接口文档"><a href="#5-4-1-更新用户信息和用户详情接口文档" class="headerlink" title="5.4.1 更新用户信息和用户详情接口文档"></a>5.4.1 更新用户信息和用户详情接口文档</h3><h5 id="接口描述-7"><a href="#接口描述-7" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>更新用户信息</li></ul><h5 id="请求-URL-7"><a href="#请求-URL-7" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users/{users}</li></ul><h5 id="请求方式-7"><a href="#请求方式-7" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PUT</li></ul><h5 id="REST-请求参数"><a href="#REST-请求参数" class="headerlink" title="REST 请求参数"></a>REST 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>users</td><td>是</td><td>int</td><td>用户 id</td></tr></tbody></table><h5 id="Body-请求参数-2"><a href="#Body-请求参数-2" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr></tbody></table><h5 id="返回示例-8"><a href="#返回示例-8" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 201 创建成功</li><li>状态码 422 参数错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: [<br>            <span class="hljs-string">&quot;昵称 不能为空&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;email&quot;</span>: [<br>            <span class="hljs-string">&quot;邮箱 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;password&quot;</span>: [<br>            <span class="hljs-string">&quot;密码 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接口描述-8"><a href="#接口描述-8" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>用户详情</li></ul><h5 id="请求-URL-8"><a href="#请求-URL-8" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users/{user}</li></ul><h5 id="请求方式-8"><a href="#请求方式-8" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-5"><a href="#请求头部-5" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数-1"><a href="#RESET-参数-1" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>user</td><td>是</td><td>string</td><td>用户 id</td></tr></tbody></table><h5 id="返回参数-4"><a href="#返回参数-4" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>主键</td></tr><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>phone</td><td>是</td><td>string</td><td>手机号</td></tr><tr><td>avatar</td><td>是</td><td>string</td><td>头像</td></tr><tr><td>avatar_url</td><td>是</td><td>string</td><td>头像地址</td></tr><tr><td>is_locked</td><td>是</td><td>int</td><td>是否锁定： 0 正常 1 锁定</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>创建时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>更新时间</td></tr></tbody></table><h5 id="返回示例-9"><a href="#返回示例-9" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;super@a.com&quot;</span>,<br>    <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T02:58:08.000000Z&quot;</span>,<br>    <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T04:32:27.000000Z&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-4-2-添加更新用户信息和用户详情接口"><a href="#5-4-2-添加更新用户信息和用户详情接口" class="headerlink" title="5.4.2 添加更新用户信息和用户详情接口"></a>5.4.2 添加更新用户信息和用户详情接口</h3><p>在\src\services\user.js 中添加更新用户和用户详情接口，虽然这两个接口请求是同一个，但是他们的传参方式和参数是不一样的。<br><code>updateUser</code>是<code>put</code>方法，用于更新数据，需要传编辑的用户 id 和修改的参数，<br><code>showUser</code>是<code>get</code>方法，用于设置编辑栏上的默认值，只需要传编辑用户 id，后端返回改用户具体参数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateUser</span>(<span class="hljs-params">editId, params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.put(<span class="hljs-string">`/admin/users/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>, &#123; params &#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">editId</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showUser</span>(<span class="hljs-params">editId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">`/admin/users/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-4-3-封装编辑用户模态框"><a href="#5-4-3-封装编辑用户模态框" class="headerlink" title="5.4.3 封装编辑用户模态框"></a>5.4.3 封装编辑用户模态框</h3><h4 id="1-封装编辑模态框组件-Edit"><a href="#1-封装编辑模态框组件-Edit" class="headerlink" title="1.封装编辑模态框组件 Edit"></a>1.封装编辑模态框组件 Edit</h4><p>在\src\pages\User\components 文件夹下创建编辑用户组件<code>Edit.jsx</code>，先导入接口请求方法<code>import &#123; showUser, updateUser &#125; from &#39;@/services/user&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> Edit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加用户</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;表单数据&#125;</span> <span class="hljs-variable">values</span></span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> editUser = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，更新用户</span><br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;更新成功！&#x27;</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=<span class="hljs-string">&quot;编辑用户&quot;</span><br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;initialValues === <span class="hljs-literal">undefined</span> ? (<br>        &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>      ) : (<br>        &lt;ProForm<br>          initialValues=&#123;initialValues&#125;<br>          onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>            editUser(values)<br>          &#125;&#125;&gt;<br>          &lt;ProFormText<br>            name=<span class="hljs-string">&quot;name&quot;</span><br>            label=<span class="hljs-string">&quot;昵称&quot;</span><br>            placeholder=<span class="hljs-string">&quot;请输入昵称&quot;</span><br>            rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入昵称&#x27;</span> &#125;]&#125;<br>          /&gt;<br>          &lt;ProFormText<br>            name=<span class="hljs-string">&quot;email&quot;</span><br>            label=<span class="hljs-string">&quot;邮箱&quot;</span><br>            placeholder=<span class="hljs-string">&quot;请输入邮箱&quot;</span><br>            rules=&#123;[<br>              &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span> &#125;,<br>              &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span> &#125;,<br>            ]&#125;<br>          /&gt;<br>        &lt;/ProForm&gt;<br>      )&#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Edit<br></code></pre></div></td></tr></table></figure><p>其中加入了<code>antd</code>的骨架框，原因是页面渲染比接口请求快，在获取用户详情之前页面就渲染完了，导致编辑栏上没有得到该被编辑用户的数据，加入骨架框起到缓冲作用。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621443253764-18ae7b8e-90db-433d-8917-67c3ad549ba2.png#clientId=u76ffcb00-d6fc-4&from=paste&height=292&id=fwwDs&margin=%5Bobject%20Object%5D&name=image.png&originHeight=292&originWidth=527&originalType=binary&size=15903&status=done&style=none&taskId=ub7c5cca0-015f-4df4-991d-46b3a3aed8a&width=527" alt="image.png"><br>同时给骨架框和编辑表单添加了三元运算符，避免两个同时被渲染，判断接口请求接收到用户详情之后骨架框消失，编辑表单出现。一下是主要代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br><br>useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 发送请求，获取用户详情</span><br>  <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>    setinitialValues(&#123;<br>      name: response.name,<br>      email: response.email,<br>    &#125;)<br>  &#125;<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  initialValues === <span class="hljs-literal">undefined</span> ? (<br>    &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>  ) : (<br>    &lt;ProForm<br>      initialValues=&#123;initialValues&#125;<br>      onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>        editUser(values)<br>      &#125;&#125;&gt;<br>      &lt;ProFormText<br>        name=<span class="hljs-string">&quot;name&quot;</span><br>        label=<span class="hljs-string">&quot;昵称&quot;</span><br>        placeholder=<span class="hljs-string">&quot;请输入昵称&quot;</span><br>        rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入昵称&#x27;</span> &#125;]&#125;<br>      /&gt;<br>      &lt;ProFormText<br>        name=<span class="hljs-string">&quot;email&quot;</span><br>        label=<span class="hljs-string">&quot;邮箱&quot;</span><br>        placeholder=<span class="hljs-string">&quot;请输入邮箱&quot;</span><br>        rules=&#123;[<br>          &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span> &#125;,<br>          &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span> &#125;,<br>        ]&#125;<br>      /&gt;<br>    &lt;/ProForm&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-调用封装的Edit组件"><a href="#2-调用封装的Edit组件" class="headerlink" title="2.调用封装的Edit组件"></a>2.调用封装的<code>Edit</code>组件</h4><p>在\src\pages\User\index.jsx 中，导入编辑组件<code>import Edit from &#39;./components/Edit&#39;;</code><br>调用了<code>Edit</code>组件并且多传一个被编辑用户 id <code>editId=&#123;editId&#125;</code>给子组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Avatar, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getUsers, lockUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> Create <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Create&#x27;</span><br><span class="hljs-keyword">import</span> Edit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Edit&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [isModalVisibleEdit, setisModalVisibleEdit] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取用户列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getUsers(params)<br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 禁启用</span><br>  <span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function"><span class="hljs-params">show</span> =&gt;</span> &#123;<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-comment">// 控制编辑用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModalEdit = <span class="hljs-function">(<span class="hljs-params">show, id</span>) =&gt;</span> &#123;<br>    setisModalVisibleEdit(show)<br>    setEditId(id)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;avatar_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatar_url&#125;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;32&#125;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>&#125; /&gt;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否禁用&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_locked&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;启用&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;禁用&quot;</span><br>          defaultChecked=&#123;record.is_locked === <span class="hljs-number">0</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModalEdit(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br>      &lt;Create isModalVisible=&#123;isModalVisible&#125; isShowModal=&#123;isShowModal&#125; actionRef=&#123;actionRef&#125; /&gt;<br><br>      &#123;!isModalVisibleEdit ? (<br>        <span class="hljs-string">&#x27;&#x27;</span><br>      ) : (<br>        &lt;Edit<br>          isModalVisible=&#123;isModalVisibleEdit&#125;<br>          isShowModal=&#123;isShowModalEdit&#125;<br>          actionRef=&#123;actionRef&#125;<br>          editId=&#123;editId&#125;<br>        /&gt;<br>      )&#125;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><p>其中关键代码<br>这里设置了编辑模态框的打开或者关闭，并且设置被编辑用户 id，传给<code>Edit</code>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [isModalVisibleEdit, setisModalVisibleEdit] = useState(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>);<br><br><br><br><span class="hljs-comment">// 控制编辑用户模态框显示和隐藏</span><br><span class="hljs-keyword">const</span> isShowModalEdit = <span class="hljs-function">(<span class="hljs-params">show, id</span>) =&gt;</span> &#123;<br>  setisModalVisibleEdit(show);<br>  setEditId(id);<br>&#125;;<br><br><br><br>  &#123;<br>    title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>    render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModalEdit(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>  &#125;,<br></code></pre></div></td></tr></table></figure><p>这里也设置了三目运算，主要原因是因为每次编辑都会有不同的用户 id，在编辑组件时挂载时，触发<code>Edit</code>子组件的生命周期请求用户 id，编辑组件关闭时卸载生命周期</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//关键代码,  isModalVisibleEdit编辑模态框显示时，挂载生命周期获取用户详情，编辑模态框关闭时卸载生命周期函数</span><br>useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 发送请求，获取用户详情</span><br>  <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>    setinitialValues(&#123;<br>      name: response.name,<br>      email: response.email,<br>    &#125;)<br>  &#125;<br>&#125;, [])<br><br>&#123;<br>  !isModalVisibleEdit ? (<br>    <span class="hljs-string">&#x27;&#x27;</span><br>  ) : (<br>    &lt;Edit<br>      isModalVisible=&#123;isModalVisibleEdit&#125;<br>      isShowModal=&#123;isShowModalEdit&#125;<br>      actionRef=&#123;actionRef&#125;<br>      editId=&#123;editId&#125;<br>    /&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-5-封装编辑和添加用户"><a href="#5-5-封装编辑和添加用户" class="headerlink" title="5.5 封装编辑和添加用户"></a>5.5 封装编辑和添加用户</h2><p>1.在\src\pages\User\components 文件夹中，复制<code>Edit.jsx</code>并重命名<code>CreateOrEdit.jsx</code>，将<code>Create</code>组件和<code>Edit</code>组件合并在一起，通过有<code>editId</code>判断是编辑。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>用户`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;name&quot;</span><br>              label=<span class="hljs-string">&quot;昵称&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入昵称&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入昵称&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;email&quot;</span><br>              label=<span class="hljs-string">&quot;邮箱&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入邮箱&quot;</span><br>              rules=&#123;[<br>                &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span> &#125;,<br>                &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span> &#125;,<br>              ]&#125;<br>            /&gt;<br>            &#123;<br>              <span class="hljs-comment">// 只有添加用户才有密码框</span><br>              editId !== <span class="hljs-literal">undefined</span> ? (<br>                <span class="hljs-string">&#x27;&#x27;</span><br>              ) : (<br>                &lt;ProFormText.Password<br>                  name=<span class="hljs-string">&quot;password&quot;</span><br>                  label=<span class="hljs-string">&quot;密码&quot;</span><br>                  placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span><br>                  rules=&#123;[<br>                    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入密码&#x27;</span> &#125;,<br>                    &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;密码最小6位&#x27;</span> &#125;,<br>                  ]&#125;<br>                /&gt;<br>              )<br>            &#125;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><p>2.在\src\pages\User\index.jsx 中导入<code>import CreateOrEdit from &#39;./components/CreateOrEdit&#39;;``CreateOrEdit</code>组件，将编辑和添加用户的方法改成相同的，并用过是否有<code>editId</code>来判断是编辑（有 id 是编辑）还是添加。最后删除掉\src\pages\User\components 文件夹中的<code>Create.jsx</code>和<code>Edit.jsx</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Avatar, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getUsers, lockUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> CreateOrEdit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/CreateOrEdit&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取用户列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getUsers(params)<br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 禁启用</span><br>  <span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建/添加用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function">(<span class="hljs-params">show, id = <span class="hljs-literal">undefined</span></span>) =&gt;</span> &#123;<br>    setEditId(id)<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;avatar_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatar_url&#125;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;32&#125;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>&#125; /&gt;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否禁用&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_locked&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;启用&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;禁用&quot;</span><br>          defaultChecked=&#123;record.is_locked === <span class="hljs-number">0</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModal(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br><br>      &#123;<br>        <span class="hljs-comment">// 模态框隐藏的时候，不挂载组件，显示的时候挂载组件，这是为了触发子组件的生命周期</span><br>        !isModalVisible ? (<br>          <span class="hljs-string">&#x27;&#x27;</span><br>        ) : (<br>          &lt;CreateOrEdit<br>            isModalVisible=&#123;isModalVisible&#125;<br>            isShowModal=&#123;isShowModal&#125;<br>            actionRef=&#123;actionRef&#125;<br>            editId=&#123;editId&#125;<br>          /&gt;<br>        )<br>      &#125;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h1 id="六、商品列表"><a href="#六、商品列表" class="headerlink" title="六、商品列表"></a>六、商品列表</h1><h2 id="6-1-商品基本列表"><a href="#6-1-商品基本列表" class="headerlink" title="6.1 商品基本列表"></a>6.1 商品基本列表</h2><h3 id="6-1-1-商品列表接口"><a href="#6-1-1-商品列表接口" class="headerlink" title="6.1.1 商品列表接口"></a>6.1.1 商品列表接口</h3><h5 id="接口描述-9"><a href="#接口描述-9" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>商品列表</li></ul><h5 id="请求-URL-9"><a href="#请求-URL-9" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods</li></ul><h5 id="请求方式-9"><a href="#请求方式-9" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-6"><a href="#请求头部-6" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Query-请求参数-1"><a href="#Query-请求参数-1" class="headerlink" title="Query 请求参数"></a>Query 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>current</td><td>否</td><td>int</td><td>分页-当前页</td></tr><tr><td>title</td><td>否</td><td>string</td><td>商品名模糊搜索</td></tr><tr><td>category_id</td><td>否</td><td>int</td><td>分类</td></tr><tr><td>is_on</td><td>否</td><td>int</td><td>是否上架 0 不上架 1 上架</td></tr><tr><td>is_recommend</td><td>否</td><td>int</td><td>是否推荐 0 不推荐 1 推荐</td></tr><tr><td>include</td><td>否</td><td>string</td><td>包含额外的数据： category 分类，user 用户， comments 评论</td></tr></tbody></table><p><em>inlude 可以返回额外的数据， 多个使用，分隔， 比如：include=category,user,comments</em></p><h5 id="返回参数-5"><a href="#返回参数-5" class="headerlink" title="返回参数"></a>返回参数</h5><p><strong>data</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>自增长主键 ID</td></tr><tr><td>user_id</td><td>是</td><td>int</td><td>创建者</td></tr><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>sales</td><td>是</td><td>int</td><td>销量</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>cover_url</td><td>是</td><td>string</td><td>封面图 url</td></tr><tr><td>pics</td><td>是</td><td>array</td><td>小图集</td></tr><tr><td>pics_url</td><td>是</td><td>array</td><td>小图集 url</td></tr><tr><td>is_on</td><td>是</td><td>int</td><td>是否上架 0 不上架 1 上架</td></tr><tr><td>is_recommend</td><td>是</td><td>int</td><td>是否推荐 0 不推荐 1 推荐</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>注册时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>修改时间</td></tr></tbody></table><p><strong>meta.pagination</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>total</td><td>是</td><td>int</td><td>数据总数</td></tr><tr><td>count</td><td>是</td><td>int</td><td>当前页数据</td></tr><tr><td>per_page</td><td>是</td><td>int</td><td>每页显示条数</td></tr><tr><td>current_page</td><td>是</td><td>int</td><td>当前页页码</td></tr><tr><td>total_pages</td><td>是</td><td>int</td><td>总页数</td></tr><tr><td>links.previous</td><td>是</td><td>string</td><td>上一页链接</td></tr><tr><td>links.next</td><td>是</td><td>string</td><td>下一页链接</td></tr></tbody></table><h5 id="返回示例-10"><a href="#返回示例-10" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;data&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;电脑11111电脑&quot;</span>,<br>            <span class="hljs-string">&quot;category_id&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;这是一个电脑1111&quot;</span>,<br>            <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>,<br>            <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">999</span>,<br>            <span class="hljs-string">&quot;sales&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;cover&quot;</span>: <span class="hljs-string">&quot;100x100.jpg&quot;</span>,<br>            <span class="hljs-string">&quot;cover_url&quot;</span>: <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/100x100.jpg&quot;</span>,<br>            <span class="hljs-string">&quot;pics&quot;</span>: [<br>                <span class="hljs-string">&quot;a.png&quot;</span>,<br>                <span class="hljs-string">&quot;b.png&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;pics_url&quot;</span>: [<br>                <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/a.png&quot;</span>,<br>                <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/b.png&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;details&quot;</span>: <span class="hljs-string">&quot;这是一个电脑这是一个电脑这是一个电脑这是一个电脑&quot;</span>,<br>            <span class="hljs-string">&quot;is_on&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;is_recommend&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T07:38:37.000000Z&quot;</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T10:13:45.000000Z&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;电脑2&quot;</span>,<br>            <span class="hljs-string">&quot;category_id&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;这是一个电脑&quot;</span>,<br>            <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>,<br>            <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">999</span>,<br>            <span class="hljs-string">&quot;sales&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;cover&quot;</span>: <span class="hljs-string">&quot;/imgs/img1.png&quot;</span>,<br>            <span class="hljs-string">&quot;cover_url&quot;</span>: <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com//imgs/img1.png&quot;</span>,<br>            <span class="hljs-string">&quot;pics&quot;</span>: [<br>                <span class="hljs-string">&quot;a.png&quot;</span>,<br>                <span class="hljs-string">&quot;b.png&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;pics_url&quot;</span>: [<br>                <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/a.png&quot;</span>,<br>                <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/b.png&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;details&quot;</span>: <span class="hljs-string">&quot;这是一个电脑这是一个电脑这是一个电脑这是一个电脑&quot;</span>,<br>            <span class="hljs-string">&quot;is_on&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;is_recommend&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T07:38:45.000000Z&quot;</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T07:38:45.000000Z&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-string">&quot;meta&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;pagination&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;per_page&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;current_page&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;total_pages&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-string">&quot;links&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;previous&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-string">&quot;next&quot;</span>: <span class="hljs-string">&quot;http://api.test/api/admin/goods?page=2&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-1-2-添加商品列表接口"><a href="#6-1-2-添加商品列表接口" class="headerlink" title="6.1.2 添加商品列表接口"></a>6.1.2 添加商品列表接口</h3><p>在\src\services 文件夹中复制<code>user.jsx</code>文件夹并重命名<code>goods.jsx</code><br>根据接口文档添加商品列表接口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-1-3-创建基本商品列表页面"><a href="#6-1-3-创建基本商品列表页面" class="headerlink" title="6.1.3 创建基本商品列表页面"></a>6.1.3 创建基本商品列表页面</h3><p>在\src\pages 文件夹中，复制<code>User</code>文件夹并重命名<code>Goods</code>，<br>修改基本页面，添加商品图片预览，<br>其中<code>valueType</code>是设置筛选的单选按钮，<code>valueEnum</code>是选项，可以枚举也可以直接列出来，<a href="https://procomponents.ant.design/components/table#valuetype---%E9%80%89%E6%8B%A9%E7%B1%BB">选择类</a>参考文档</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>valueEnum: &#123;<br>  <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已推荐&#x27;</span> &#125;,<br>  <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未推荐&#x27;</span> &#125;,<br>&#125;,<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Image, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getGoods &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/goods&#x27;</span><br><span class="hljs-keyword">import</span> CreateOrEdit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/CreateOrEdit&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取商品列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getGoods(params)<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 禁启用</span><br>  <span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建/添加用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function">(<span class="hljs-params">show, id = <span class="hljs-literal">undefined</span></span>) =&gt;</span> &#123;<br>    setEditId(id)<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;商品图&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;cover_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Image<br>          width=&#123;<span class="hljs-number">64</span>&#125;<br>          src=&#123;record.cover_url&#125;<br>          placeholder=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">preview</span>=<span class="hljs-string">&#123;false&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.cover_url&#125;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;200&#125;</span> /&gt;</span></span>&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;标题&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;title&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;价格&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;price&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;库存&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;stock&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;销量&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;sales&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br><br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否上架&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_on&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;已上架&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;未上架&quot;</span><br>          defaultChecked=&#123;record.is_on === <span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>      valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>      valueEnum: &#123;<br>        <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已上架&#x27;</span> &#125;,<br>        <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未上架&#x27;</span> &#125;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否推荐&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_recommend&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;已推荐&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;未推荐&quot;</span><br>          defaultChecked=&#123;record.is_recommend === <span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>      valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>      valueEnum: &#123;<br>        <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已推荐&#x27;</span> &#125;,<br>        <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未推荐&#x27;</span> &#125;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModal(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br><br>      &#123;<br>        <span class="hljs-comment">// 模态框隐藏的时候，不挂载组件，显示的时候挂载组件，这是为了触发子组件的生命周期</span><br>        !isModalVisible ? (<br>          <span class="hljs-string">&#x27;&#x27;</span><br>        ) : (<br>          &lt;CreateOrEdit<br>            isModalVisible=&#123;isModalVisible&#125;<br>            isShowModal=&#123;isShowModal&#125;<br>            actionRef=&#123;actionRef&#125;<br>            editId=&#123;editId&#125;<br>          /&gt;<br>        )<br>      &#125;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h2 id="6-2-是否上架-推荐商品"><a href="#6-2-是否上架-推荐商品" class="headerlink" title="6.2 是否上架/推荐商品"></a>6.2 是否上架/推荐商品</h2><h3 id="6-2-1-商品上架和下架接口文档"><a href="#6-2-1-商品上架和下架接口文档" class="headerlink" title="6.2.1 商品上架和下架接口文档"></a>6.2.1 商品上架和下架接口文档</h3><h5 id="接口描述-10"><a href="#接口描述-10" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>上架和下架</li></ul><h5 id="请求-URL-10"><a href="#请求-URL-10" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods/{good}/on</li></ul><h5 id="请求方式-10"><a href="#请求方式-10" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PATCH</li></ul><h5 id="请求头部-7"><a href="#请求头部-7" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数-2"><a href="#RESET-参数-2" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>good</td><td>是</td><td>int</td><td>商品 id</td></tr></tbody></table><h5 id="返回示例-11"><a href="#返回示例-11" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 请求成功</li></ul><h3 id="6-2-2-商品推荐和不推荐接口文档"><a href="#6-2-2-商品推荐和不推荐接口文档" class="headerlink" title="6.2.2 商品推荐和不推荐接口文档"></a>6.2.2 商品推荐和不推荐接口文档</h3><h5 id="接口描述-11"><a href="#接口描述-11" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>推荐和不推荐</li></ul><h5 id="请求-URL-11"><a href="#请求-URL-11" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods/{good}/recommend</li></ul><h5 id="请求方式-11"><a href="#请求方式-11" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PATCH</li></ul><h5 id="请求头部-8"><a href="#请求头部-8" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数-3"><a href="#RESET-参数-3" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>good</td><td>是</td><td>int</td><td>商品 id</td></tr></tbody></table><h5 id="返回示例-12"><a href="#返回示例-12" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 请求成功</li></ul><h3 id="6-2-3-添加是否上架-推荐商品接口"><a href="#6-2-3-添加是否上架-推荐商品接口" class="headerlink" title="6.2.3 添加是否上架/推荐商品接口"></a>6.2.3 添加是否上架/推荐商品接口</h3><p>在\src\services\goods.js 中添加是否上架/推荐商品接口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架和下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isOn</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/on`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 推荐和不推荐商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRecommend</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/recommend`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-2-4-添加是否上架-推荐商品方法"><a href="#6-2-4-添加是否上架-推荐商品方法" class="headerlink" title="6.2.4 添加是否上架/推荐商品方法"></a>6.2.4 添加是否上架/推荐商品方法</h3><p>在\src\pages\Goods\index.jsx 中,先导入接口<code>import &#123; getGoods, isOn, isRecommend &#125; from &#39;@/services/goods&#39;;</code><br>修改并添加是否上架/推荐商品方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Image, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getGoods, isOn, isRecommend &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/goods&#x27;</span><br><span class="hljs-keyword">import</span> CreateOrEdit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/CreateOrEdit&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取商品列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getGoods(params)<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 是否上架商品</span><br>  <span class="hljs-keyword">const</span> heandleIsOn = <span class="hljs-keyword">async</span> goodsId =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> isOn(goodsId)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 是否推荐商品</span><br>  <span class="hljs-keyword">const</span> heandleIsRecommend = <span class="hljs-keyword">async</span> goodsId =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> isRecommend(goodsId)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建/添加用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function">(<span class="hljs-params">show, id = <span class="hljs-literal">undefined</span></span>) =&gt;</span> &#123;<br>    setEditId(id)<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;商品图&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;cover_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Image<br>          width=&#123;<span class="hljs-number">64</span>&#125;<br>          src=&#123;record.cover_url&#125;<br>          placeholder=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">preview</span>=<span class="hljs-string">&#123;false&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.cover_url&#125;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;200&#125;</span> /&gt;</span></span>&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;标题&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;title&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;价格&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;price&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;库存&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;stock&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;销量&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;sales&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br><br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否上架&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_on&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;已上架&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;未上架&quot;</span><br>          defaultChecked=&#123;record.is_on === <span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleIsOn(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>      valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>      valueEnum: &#123;<br>        <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已上架&#x27;</span> &#125;,<br>        <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未上架&#x27;</span> &#125;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否推荐&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_recommend&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;已推荐&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;未推荐&quot;</span><br>          defaultChecked=&#123;record.is_recommend === <span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleIsRecommend(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>      valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>      valueEnum: &#123;<br>        <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已推荐&#x27;</span> &#125;,<br>        <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未推荐&#x27;</span> &#125;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModal(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;商品列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br><br>      &#123;<br>        <span class="hljs-comment">// 模态框隐藏的时候，不挂载组件，显示的时候挂载组件，这是为了触发子组件的生命周期</span><br>        !isModalVisible ? (<br>          <span class="hljs-string">&#x27;&#x27;</span><br>        ) : (<br>          &lt;CreateOrEdit<br>            isModalVisible=&#123;isModalVisible&#125;<br>            isShowModal=&#123;isShowModal&#125;<br>            actionRef=&#123;actionRef&#125;<br>            editId=&#123;editId&#125;<br>          /&gt;<br>        )<br>      &#125;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h2 id="6-3-新建商品页面"><a href="#6-3-新建商品页面" class="headerlink" title="6.3 新建商品页面"></a>6.3 新建商品页面</h2><h3 id="6-3-1-添加商品接口文档"><a href="#6-3-1-添加商品接口文档" class="headerlink" title="6.3.1 添加商品接口文档"></a>6.3.1 添加商品接口文档</h3><h5 id="接口描述-12"><a href="#接口描述-12" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>添加商品</li></ul><h5 id="请求-URL-12"><a href="#请求-URL-12" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods</li></ul><h5 id="请求方式-12"><a href="#请求方式-12" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="请求头部-9"><a href="#请求头部-9" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Body-请求参数-3"><a href="#Body-请求参数-3" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>pics</td><td>否</td><td>array</td><td>小图集</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr></tbody></table><h5 id="返回示例-13"><a href="#返回示例-13" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 201 创建成功</li><li>状态码 400 请求错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;分类不存在&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br><br>&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;分类被禁用&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br><br>&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;只能向2级分类添加商品&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br><br>状态码 <span class="hljs-number">422</span> 参数错误<br>&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>: [<br>            <span class="hljs-string">&quot;标题 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;category_id&quot;</span>: [<br>            <span class="hljs-string">&quot;category id 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;description&quot;</span>: [<br>            <span class="hljs-string">&quot;描述 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;price&quot;</span>: [<br>            <span class="hljs-string">&quot;price 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;stock&quot;</span>: [<br>            <span class="hljs-string">&quot;stock 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;cover&quot;</span>: [<br>            <span class="hljs-string">&quot;cover 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;pics&quot;</span>: [<br>            <span class="hljs-string">&quot;pics 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;details&quot;</span>: [<br>            <span class="hljs-string">&quot;details 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-3-2-编辑添加商品页面"><a href="#6-3-2-编辑添加商品页面" class="headerlink" title="6.3.2 编辑添加商品页面"></a>6.3.2 编辑添加商品页面</h3><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，<a href="https://procomponents.ant.design/components/field-set">ProFormFields</a> 表单项 参考文档。<br>只是简单完成添加商品必须的页面</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123;<br>  ProFormText,<br>  ProFormTextArea,<br>  ProFormDigit,<br>  ProFormUploadButton,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormUploadButton<br>              label=<span class="hljs-string">&quot;上传封面图&quot;</span><br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              action=<span class="hljs-string">&quot;upload.do&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;详情&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>            /&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h2 id="6-4-处理商品分类"><a href="#6-4-处理商品分类" class="headerlink" title="6.4 处理商品分类"></a>6.4 处理商品分类</h2><h3 id="6-4-1-商品分类接口文档"><a href="#6-4-1-商品分类接口文档" class="headerlink" title="6.4.1 商品分类接口文档"></a>6.4.1 商品分类接口文档</h3><h5 id="接口描述-13"><a href="#接口描述-13" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>分类列表</li></ul><h5 id="请求-URL-13"><a href="#请求-URL-13" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/category</li></ul><h5 id="请求方式-13"><a href="#请求方式-13" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-10"><a href="#请求头部-10" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Query-请求参数-2"><a href="#Query-请求参数-2" class="headerlink" title="Query 请求参数"></a>Query 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>type</td><td>否</td><td>string</td><td>all 查所有分类，包含禁用的。不传则只返回非禁用的</td></tr></tbody></table><h5 id="返回参数-6"><a href="#返回参数-6" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>主键</td></tr><tr><td>pid</td><td>是</td><td>int</td><td>父级</td></tr><tr><td>name</td><td>是</td><td>string</td><td>名称</td></tr><tr><td>level</td><td>是</td><td>int</td><td>层级</td></tr><tr><td>status</td><td>是</td><td>int</td><td>状态： 0 正常 1 禁用</td></tr><tr><td>children</td><td>否</td><td>array</td><td>子类</td></tr></tbody></table><h5 id="返回示例-14"><a href="#返回示例-14" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">;[<br>  &#123;<br>    id: <span class="hljs-number">1</span>,<br>    pid: <span class="hljs-number">0</span>,<br>    name: <span class="hljs-string">&#x27;电子数码&#x27;</span>,<br>    level: <span class="hljs-number">1</span>,<br>    status: <span class="hljs-number">1</span>,<br>    children: [<br>      &#123;<br>        id: <span class="hljs-number">3</span>,<br>        pid: <span class="hljs-number">1</span>,<br>        name: <span class="hljs-string">&#x27;手机&#x27;</span>,<br>        level: <span class="hljs-number">2</span>,<br>        status: <span class="hljs-number">1</span>,<br>        children: [<br>          &#123;<br>            id: <span class="hljs-number">5</span>,<br>            pid: <span class="hljs-number">3</span>,<br>            name: <span class="hljs-string">&#x27;华为&#x27;</span>,<br>            level: <span class="hljs-number">3</span>,<br>            status: <span class="hljs-number">1</span>,<br>          &#125;,<br>          &#123;<br>            id: <span class="hljs-number">6</span>,<br>            pid: <span class="hljs-number">3</span>,<br>            name: <span class="hljs-string">&#x27;小米&#x27;</span>,<br>            level: <span class="hljs-number">3</span>,<br>            status: <span class="hljs-number">1</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>      &#123;<br>        id: <span class="hljs-number">4</span>,<br>        pid: <span class="hljs-number">1</span>,<br>        name: <span class="hljs-string">&#x27;电脑&#x27;</span>,<br>        level: <span class="hljs-number">2</span>,<br>        status: <span class="hljs-number">1</span>,<br>        children: [<br>          &#123;<br>            id: <span class="hljs-number">7</span>,<br>            pid: <span class="hljs-number">4</span>,<br>            name: <span class="hljs-string">&#x27;戴尔&#x27;</span>,<br>            level: <span class="hljs-number">3</span>,<br>            status: <span class="hljs-number">1</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    id: <span class="hljs-number">2</span>,<br>    pid: <span class="hljs-number">0</span>,<br>    name: <span class="hljs-string">&#x27;服装衣帽&#x27;</span>,<br>    level: <span class="hljs-number">1</span>,<br>    status: <span class="hljs-number">1</span>,<br>    children: [<br>      &#123;<br>        id: <span class="hljs-number">9</span>,<br>        pid: <span class="hljs-number">2</span>,<br>        name: <span class="hljs-string">&#x27;男装&#x27;</span>,<br>        level: <span class="hljs-number">2</span>,<br>        status: <span class="hljs-number">1</span>,<br>        children: [],<br>      &#125;,<br>      &#123;<br>        id: <span class="hljs-number">10</span>,<br>        pid: <span class="hljs-number">2</span>,<br>        name: <span class="hljs-string">&#x27;女装&#x27;</span>,<br>        level: <span class="hljs-number">2</span>,<br>        status: <span class="hljs-number">1</span>,<br>        children: [],<br>      &#125;,<br>    ],<br>  &#125;,<br>]<br></code></pre></div></td></tr></table></figure><h3 id="6-4-2-添加分类列表接口–非禁用的分类"><a href="#6-4-2-添加分类列表接口–非禁用的分类" class="headerlink" title="6.4.2 添加分类列表接口–非禁用的分类"></a>6.4.2 添加分类列表接口–非禁用的分类</h3><p>在 src\services 中新建一个<code>category.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取分类列表-非禁用的分类</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCategory</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/category&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-4-3-添加商品分类Select组件"><a href="#6-4-3-添加商品分类Select组件" class="headerlink" title="6.4.3 添加商品分类Select组件"></a>6.4.3 添加商品分类<code>Select</code>组件</h3><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中<br>设置<code>options</code>为空，储存后端返回的数据 <code>const [options, setOptions] = useState([]);</code><br>在生命周期函数中<code>useEffect</code>请求查询分类数据</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 查询分类数据</span><br>  <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>  <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>  <span class="hljs-comment">// 发送请求，获取用户详情</span><br>  <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>    <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>    setinitialValues(&#123;<br>      name: response.name,<br>      email: response.email,<br>    &#125;)<br>  &#125;<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><p>其中需要加 <a href="https://ant.design/components/cascader-cn/#components-cascader-demo-lazy">Cascader</a> 级联选择，还要加<code>ProForm.Item</code>标签包裹<code>Cascader</code>，设置分类的<code>name</code>和<code>rules</code>等，<a href="https://procomponents.ant.design/components/field-set/#proformfields-%E8%A1%A8%E5%8D%95%E9%A1%B9">ProFormFields</a>表单项参考文档。<br>同时，后端返回来的字段和<code>Cascader</code>官方的文档字段不一样时，查看 API 文档<code>fieldNames</code>属性可以自定义字段</p><table><thead><tr><th><strong>fieldNames</strong></th><th>自定义 options 中 label name children 的字段</th><th>object</th><th>{ label: label, value: value, children: children }</th></tr></thead></table><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item name=<span class="hljs-string">&quot;category_id&quot;</span> label=<span class="hljs-string">&quot;分类&quot;</span> rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>  &lt;Cascader<br>    fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>    options=&#123;options&#125;<br>    placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>  /&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><p>然后导入<code>import &#123; getCategory &#125; from &#39;@/services/category&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123;<br>  ProFormText,<br>  ProFormTextArea,<br>  ProFormDigit,<br>  ProFormUploadButton,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormUploadButton<br>              label=<span class="hljs-string">&quot;上传封面图&quot;</span><br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              action=<span class="hljs-string">&quot;upload.do&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;详情&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>            /&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h2 id="6-5-封装-OSS-上传"><a href="#6-5-封装-OSS-上传" class="headerlink" title="6.5 封装 OSS 上传"></a>6.5 封装 OSS 上传</h2><h3 id="6-5-1-获取阿里云-OSS-Token-接口文档"><a href="#6-5-1-获取阿里云-OSS-Token-接口文档" class="headerlink" title="6.5.1 获取阿里云 OSS Token 接口文档"></a>6.5.1 获取阿里云 OSS Token 接口文档</h3><h5 id="接口描述-14"><a href="#接口描述-14" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>获取阿里云 OSS Token，用于前端直传文件使用</li></ul><h5 id="请求-URL-14"><a href="#请求-URL-14" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/auth/oss/token</li></ul><h5 id="请求方式-14"><a href="#请求方式-14" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-11"><a href="#请求头部-11" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="返回参数-7"><a href="#返回参数-7" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>accessid</td><td>是</td><td>string</td><td>accessid</td></tr><tr><td>host</td><td>是</td><td>string</td><td>host</td></tr><tr><td>policy</td><td>是</td><td>string</td><td>policy</td></tr><tr><td>signature</td><td>是</td><td>string</td><td>signature</td></tr><tr><td>expire</td><td>是</td><td>int</td><td>expire</td></tr><tr><td>callback</td><td>是</td><td>string</td><td>callback</td></tr><tr><td>callback-var</td><td>是</td><td>string</td><td>callback-var</td></tr><tr><td>dir</td><td>是</td><td>string</td><td>dir</td></tr></tbody></table><h5 id="返回示例-15"><a href="#返回示例-15" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;accessid&quot;</span>: <span class="hljs-string">&quot;C4jYcNjUFLSKHToP&quot;</span>,<br>    <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;http:/laravel_shop_api.luwnto.oss-cn-beijing.aliyuncs.com/&quot;</span>,<br>    <span class="hljs-string">&quot;policy&quot;</span>: <span class="hljs-string">&quot;eyJleHBpcmF0aW9uIjoiMjAyMC0xMi0yM1QwMToyMzo1OFoiLCJjb25kaXRpb25zIjpbWyJjb250ZW50LWxlbmd0aC1yYW5nZSIsMCwxMDQ4NTc2MDAwXSxbInN0YXJ0cy13aXRoIiwiJGtleSIsIiJdXX0=&quot;</span>,<br>    <span class="hljs-string">&quot;signature&quot;</span>: <span class="hljs-string">&quot;Vx3jPcUQXVQ7rKSJvYRHyYCS5pA=&quot;</span>,<br>    <span class="hljs-string">&quot;expire&quot;</span>: <span class="hljs-number">1608686638</span>,<br>    <span class="hljs-string">&quot;callback&quot;</span>: <span class="hljs-string">&quot;eyJjYWxsYmFja1VybCI6IiIsImNhbGxiYWNrQm9keSI6ImJ1Y2tldD0ke2J1Y2tldH0mZXRhZz0ke2V0YWd9JmZpbGVuYW1lPSR7b2JqZWN0fSZzaXplPSR7c2l6ZX0mbWltZVR5cGU9JHttaW1lVHlwZX0maGVpZ2h0PSR7aW1hZ2VJbmZvLmhlaWdodH0md2lkdGg9JHtpbWFnZUluZm8ud2lkdGh9JmZvcm1hdD0ke2ltYWdlSW5mby5mb3JtYXR9IiwiY2FsbGJhY2tCb2R5VHlwZSI6ImFwcGxpY2F0aW9uXC94LXd3dy1mb3JtLXVybGVuY29kZWQifQ==&quot;</span>,<br>    <span class="hljs-string">&quot;callback-var&quot;</span>: [],<br>    <span class="hljs-string">&quot;dir&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-5-2-添加阿里云-OSS-Token-接口"><a href="#6-5-2-添加阿里云-OSS-Token-接口" class="headerlink" title="6.5.2 添加阿里云 OSS Token 接口"></a>6.5.2 添加阿里云 OSS Token 接口</h3><p>在\src\services 文件夹中新建一个<code>commom.js</code>​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取oss上传策略和签名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ossConfig</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/auth/oss/token&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-5-3-初步封装公共AliyunOSSUpload组件"><a href="#6-5-3-初步封装公共AliyunOSSUpload组件" class="headerlink" title="6.5.3 初步封装公共AliyunOSSUpload组件"></a>6.5.3 初步封装公共<code>AliyunOSSUpload</code>组件</h3><p>在 src\components 中新建<code>AliyunOSSUpload</code>文件夹<code>index.jsx</code>文件<br><a href="https://ant.design/components/upload-cn/#components-upload-demo-upload-with-aliyun-oss">Upload</a>参考文档</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Form, Upload, message, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; UploadOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ossConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/commom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AliyunOSSUpload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    OSSData: &#123;&#125;,<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>  &#125;<br><br>  <span class="hljs-comment">// 初始化获取oss上传签名</span><br>  init = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> OSSData = <span class="hljs-keyword">await</span> ossConfig()<br><br>      <span class="hljs-built_in">this</span>.setState(&#123;<br>        OSSData,<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      message.error(error)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 文件上传过程中触发的回调函数，直到上传完成</span><br>  onChange = <span class="hljs-function">(<span class="hljs-params">&#123; fileList &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; onChange &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Aliyun OSS:&#x27;</span>, fileList)<br>    <span class="hljs-keyword">if</span> (onChange) &#123;<br>      onChange([...fileList])<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 额外的上传参数</span><br>  getExtraData = <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      key: file.url,<br>      OSSAccessKeyId: OSSData.accessid, <span class="hljs-comment">// 注意查看后端返回的字段是否和官方的OSSData一致</span><br>      policy: OSSData.policy,<br>      Signature: OSSData.signature,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 选择文件之后，上传文件之前，执行的回调</span><br>  beforeUpload = <span class="hljs-keyword">async</span> file =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> expire = OSSData.expire * <span class="hljs-number">1000</span><br><br>    <span class="hljs-keyword">if</span> (expire &lt; <span class="hljs-built_in">Date</span>.now()) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> suffix = file.name.slice(file.name.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>))<br>    <span class="hljs-keyword">const</span> filename = <span class="hljs-built_in">Date</span>.now() + suffix<br>    file.url = OSSData.dir + filename<br><br>    <span class="hljs-keyword">return</span> file<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; value &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">const</span> props = &#123;<br>      name: <span class="hljs-string">&#x27;file&#x27;</span>,<br>      fileList: value,<br>      action: <span class="hljs-built_in">this</span>.state.OSSData.host,<br>      onChange: <span class="hljs-built_in">this</span>.onChange,<br>      <span class="hljs-comment">// onRemove: this.onRemove,</span><br>      data: <span class="hljs-built_in">this</span>.getExtraData,<br>      beforeUpload: <span class="hljs-built_in">this</span>.beforeUpload,<br>      listType: <span class="hljs-string">&#x27;picture&#x27;</span>,<br>      maxCount: <span class="hljs-number">1</span>,<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;Upload &#123;...props&#125;&gt;<br>        &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;Click to Upload&lt;/Button&gt;<br>      &lt;/Upload&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中注意额外上传的参数，后端返回的字段是否和阿里云 OSS 字段一致，</p><h3 id="6-5-4-在新建商品模态框中使用AliyunOSSUpload组件"><a href="#6-5-4-在新建商品模态框中使用AliyunOSSUpload组件" class="headerlink" title="6.5.4 在新建商品模态框中使用AliyunOSSUpload组件"></a>6.5.4 在新建商品模态框中使用<code>AliyunOSSUpload</code>组件</h3><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，先导入<code>AliyunOSSUpload</code>，最后在上传封面图标签后添加<code>&lt;AliyunOSSUpload /&gt;</code>标签</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123;<br>  ProFormText,<br>  ProFormTextArea,<br>  ProFormDigit,<br>  ProFormUploadButton,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormUploadButton<br>              label=<span class="hljs-string">&quot;上传封面图&quot;</span><br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              action=<span class="hljs-string">&quot;upload.do&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>            /&gt;<br><br>            &lt;AliyunOSSUpload /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;详情&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>            /&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h3 id="6-5-5-简单封装优化AliyunOSSUpload组件"><a href="#6-5-5-简单封装优化AliyunOSSUpload组件" class="headerlink" title="6.5.5 简单封装优化AliyunOSSUpload组件"></a>6.5.5 简单封装优化<code>AliyunOSSUpload</code>组件</h3><h4 id="1-将原来上传图片的ProFormUploadButton组件替换成AliyunOSSUpload组件"><a href="#1-将原来上传图片的ProFormUploadButton组件替换成AliyunOSSUpload组件" class="headerlink" title="1.将原来上传图片的ProFormUploadButton组件替换成AliyunOSSUpload组件"></a>1.将原来上传图片的<code>ProFormUploadButton</code>组件替换成<code>AliyunOSSUpload</code>组件</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，将原来上传图片的<code>ProFormUploadButton</code>组件替换为<code>AliyunOSSUpload</code>组件，添加验证规则并写成双标签，将在其中显示的内容写入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;cover&quot;</span><br>  label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>  &lt;AliyunOSSUpload&gt;点击上传商品主图&lt;/AliyunOSSUpload&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><h4 id="2-修改OSSData文件上传路径，简单封装优化AliyunOSSUpload组件"><a href="#2-修改OSSData文件上传路径，简单封装优化AliyunOSSUpload组件" class="headerlink" title="2.修改OSSData文件上传路径，简单封装优化AliyunOSSUpload组件"></a>2.修改<code>OSSData</code>文件上传路径，简单封装优化<code>AliyunOSSUpload</code>组件</h4><p>在\src\components\AliyunOSSUpload\index.jsx 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Upload, message, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; UploadOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ossConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/commom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AliyunOSSUpload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    OSSData: &#123;&#125;,<br>  &#125;<br><br>  <span class="hljs-comment">// 组件挂载完成后，进行初始化，获取oss配置</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>  &#125;<br><br>  <span class="hljs-comment">// 初始化获取oss上传签名</span><br>  init = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> OSSData = <span class="hljs-keyword">await</span> ossConfig()<br><br>      <span class="hljs-built_in">this</span>.setState(&#123;<br>        OSSData,<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      message.error(error)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 文件上传过程中触发的回调函数，直到上传完成</span><br>  onChange = <span class="hljs-function">(<span class="hljs-params">&#123; file &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (file.status === <span class="hljs-string">&#x27;done&#x27;</span>) message.success(<span class="hljs-string">&#x27;上传成功！&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// 额外的上传参数</span><br>  getExtraData = <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      key: file.key,<br>      OSSAccessKeyId: OSSData.accessid, <span class="hljs-comment">// 注意查看后端返回的字段是否和官方的OSSData一致</span><br>      policy: OSSData.policy,<br>      Signature: OSSData.signature,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 选择文件之后，上传文件之前，执行的回调</span><br>  beforeUpload = <span class="hljs-keyword">async</span> file =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> expire = OSSData.expire * <span class="hljs-number">1000</span><br><br>    <span class="hljs-comment">// 如果签名过期了就重新获取</span><br>    <span class="hljs-keyword">if</span> (expire &lt; <span class="hljs-built_in">Date</span>.now()) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> dir = <span class="hljs-string">&#x27;react/&#x27;</span> <span class="hljs-comment">// 定义上传的目录</span><br><br>    <span class="hljs-keyword">const</span> suffix = file.name.slice(file.name.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>))<br>    <span class="hljs-keyword">const</span> filename = OSSData.dir + dir + <span class="hljs-built_in">Date</span>.now() + suffix<br>    file.key = OSSData.dir + dir + filename <span class="hljs-comment">// 在getExtraData 函数中会用到，在云存储的文件的 key</span><br>    file.url = OSSData.host + OSSData.dir + dir + filename <span class="hljs-comment">// 上传完成后，用于显示内容</span><br><br>    <span class="hljs-keyword">return</span> file<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; value &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">const</span> props = &#123;<br>      name: <span class="hljs-string">&#x27;file&#x27;</span>,<br>      fileList: value,<br>      action: <span class="hljs-built_in">this</span>.state.OSSData.host,<br>      onChange: <span class="hljs-built_in">this</span>.onChange,<br>      <span class="hljs-comment">// onRemove: this.onRemove,</span><br>      data: <span class="hljs-built_in">this</span>.getExtraData,<br>      beforeUpload: <span class="hljs-built_in">this</span>.beforeUpload,<br>      listType: <span class="hljs-string">&#x27;picture&#x27;</span>,<br>      maxCount: <span class="hljs-number">1</span>,<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>      &lt;Upload &#123;...props&#125;&gt;<br>        &#123;<span class="hljs-comment">/* 将Button标签放在在AliyunOSSUpload组件里写，这里直接使用&#123;this.props.children&#125;，会报错 */</span>&#125;<br>        &#123;<span class="hljs-comment">/* 这里的解决方案是，Button标签封装在AliyunOSSUpload组件内部，其他函数使用AliyunOSSUpload组件时，只需要将AliyunOSSUpload写成双标签，里边写显示的文字 */</span>&#125;<br>        &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;&#123;<span class="hljs-built_in">this</span>.props.children&#125;&lt;/Button&gt;<br>      &lt;/Upload&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>修复上传主图，显示默认文字 bug</strong><br>其中<code>Upload</code>内部直接写<code>&#123;this.props.children&#125;</code>获取父组件的内容，无法渲染会报错，最后只需要在父组件中将<code>AliyunOSSUpload</code>写成双标签，里边写显示的文字。将<code>Button</code>封装在<code>AliyunOSSUpload</code>组件内部，自取显示内容即可解决</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Upload &#123;...props&#125;&gt;<br>  &#123;<span class="hljs-comment">/* 将Button标签放在在AliyunOSSUpload组件里写，这里直接使用&#123;this.props.children&#125;，会报错 */</span>&#125;<br>  &#123;<span class="hljs-comment">/* 这里的解决方案是，Button标签封装在AliyunOSSUpload组件内部，其他函数使用AliyunOSSUpload组件时，只需要将AliyunOSSUpload写成双标签，里边写显示的文字 */</span>&#125;<br>  &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;&#123;<span class="hljs-built_in">this</span>.props.children&#125;&lt;/Button&gt;<br>&lt;/Upload&gt;<br></code></pre></div></td></tr></table></figure><p>后期富文本编辑器将<strong>显示默认文字 bug</strong>解决了，可以将<code>button</code>封装在<code>AliyunOSSUpload</code></p><h4 id="3-限制上传文件类型为图片"><a href="#3-限制上传文件类型为图片" class="headerlink" title="3.限制上传文件类型为图片"></a>3.限制上传文件类型为图片</h4><p>在\src\components\AliyunOSSUpload\index.jsx 中，解构<code>accept</code>，并且设置<code>accept</code>的值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; value, accept &#125; = <span class="hljs-built_in">this</span>.props;<br>  <span class="hljs-keyword">const</span> props = &#123;<br>    accept: accept || <span class="hljs-string">&#x27;&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;file&#x27;</span>,<br>    fileList: value,<br>    action: <span class="hljs-built_in">this</span>.state.OSSData.host,<br>    onChange: <span class="hljs-built_in">this</span>.onChange,<br>    <span class="hljs-comment">// onRemove: this.onRemove,</span><br>    data: <span class="hljs-built_in">this</span>.getExtraData,<br>    beforeUpload: <span class="hljs-built_in">this</span>.beforeUpload,<br>    listType: <span class="hljs-string">&#x27;picture&#x27;</span>,<br>    maxCount: <span class="hljs-number">1</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Upload &#123;...props&#125;&gt;<br>      &#123;<span class="hljs-comment">/* 将Button标签放在在AliyunOSSUpload组件里写，这里直接使用&#123;this.props.children&#125;，会报错 */</span>&#125;<br>      &#123;<span class="hljs-comment">/* 这里的解决方案是，Button标签封装在AliyunOSSUpload组件内部，其他函数使用AliyunOSSUpload组件时，只需要将AliyunOSSUpload写成双标签，里边写显示的文字 */</span>&#125;<br>      &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;&#123;<span class="hljs-built_in">this</span>.props.children&#125;&lt;/Button&gt;<br>    &lt;/Upload&gt;<br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，<code>AliyunOSSUpload</code>标签中设置<code>accept</code>属性，<br><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept">accept</a>参考文档，<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept">详情</a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;cover&quot;</span><br>  label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>  &lt;AliyunOSSUpload accept=<span class="hljs-string">&quot;image/*&quot;</span>&gt;点击上传商品主图&lt;/AliyunOSSUpload&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><p>但是其中也有一个 bug，<code>ProForm.Item</code>组件和我们封装的<code>AliyunOSSUpload</code>组件(或者第三方组件)并不关联，<code>ProForm.Item</code>当进行表单验证的时候，并没有包括<code>AliyunOSSUpload</code>。所以当文件上传成功之后，把文件的 key，设置成表单某个字段的值。</p><h4 id="4-关联ProForm-Item和AliyunOSSUpload，完成图片验证"><a href="#4-关联ProForm-Item和AliyunOSSUpload，完成图片验证" class="headerlink" title="4.关联ProForm.Item和AliyunOSSUpload，完成图片验证"></a>4.关联<code>ProForm.Item</code>和<code>AliyunOSSUpload</code>，完成图片验证</h4><h4 id="使用通用方式完成文件验证以及解除组件受控"><a href="#使用通用方式完成文件验证以及解除组件受控" class="headerlink" title="使用通用方式完成文件验证以及解除组件受控"></a>使用通用方式完成文件验证以及解除组件受控</h4><p>通过 <a href="https://ant.design/components/form-cn/#components-form-demo-control-hooks">Form.useForm</a> 对表单数据域进行交互。<br>在\src\pages\Goods\components\CreateOrEdit.jsx 中，为<code>ProForm</code>标签添加<code>form=&#123;formObj&#125;</code>控制实例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm<br>        form=&#123;formObj&#125;<br>        initialValues=&#123;initialValues&#125;<br>        onFinish=&#123;<span class="hljs-function">(<span class="hljs-params">values</span>) =&gt;</span> &#123;<br>          handleSubmit(values);<br>        &#125;&#125;<br>      &gt;<br></code></pre></div></td></tr></table></figure><p>定义<code>Form</code>实例和<code>setCoverKey</code>方法，用于当文件上传之后设置<code>cover</code>字段的<code>value</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义Form实例，用来操作表单</span><br><span class="hljs-keyword">const</span> [formObj] = ProForm.useForm()<br><br><span class="hljs-comment">// 文件上传成功后，设置cover字段的value</span><br><span class="hljs-keyword">const</span> setCoverKey = <span class="hljs-function"><span class="hljs-params">fileKey</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">cover</span>: fileKey &#125;)<br></code></pre></div></td></tr></table></figure><p>在<code>AliyunOSSUpload</code>组件中传入<code>setCoverKey</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span>&gt;<br>  点击上传商品主图<br>&lt;/AliyunOSSUpload&gt;<br></code></pre></div></td></tr></table></figure><p>在\src\components\AliyunOSSUpload\index.jsx 中设置上传文件的回调函数，将文件的<code>key</code>设置成文件某个字段的值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 文件上传过程中触发的回调函数，直到上传完成</span><br>onChange = <span class="hljs-function">(<span class="hljs-params">&#123; file &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (file.status === <span class="hljs-string">&#x27;done&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 上传成功之后，把文件的key，设置成表单某个字段的值</span><br>    <span class="hljs-built_in">this</span>.props.setCoverKey(file.key)<br>    message.success(<span class="hljs-string">&#x27;上传成功&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当点击上传文件时会报错<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622121030697-e1898d39-f9a8-4f0f-9b23-5f055fe79f41.png#clientId=u1314c606-21ea-4&from=paste&height=855&id=ued8660b4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=855&originWidth=1151&originalType=binary&size=76930&status=done&style=none&taskId=ube7311d5-7a2f-4889-95ac-3428b202387&width=1151" alt="image.png"><br>原因是当我们文件上传过程中触发的回调函数时通过 <code> // 文件上传成功后，设置cover字段的value const setCoverKey = (fileKey) =&gt; formObj.setFieldsValue(&#123; cover: fileKey &#125;);</code>设置了<code>ProForm.Item</code>中<code>name=&quot;cover&quot;</code>的值，<code>ProForm.Item</code>组件和<code>AliyunOSSUpload</code>组件形成了受控组件，<code>value</code>值被设置了，但是上传过程中触发的回调函数检测到文件还没有，拿不到文件就会报错。<br>查看<a href="https://ant.design/components/form-cn/#Form.Item">Form.Item</a>的 api 就有介绍<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622123548883-f5da8b27-70a4-455b-b39e-ac08b831ea6e.png#clientId=u1314c606-21ea-4&from=paste&height=343&id=uc94ee111&margin=%5Bobject%20Object%5D&name=image.png&originHeight=343&originWidth=1206&originalType=binary&size=61746&status=done&style=none&taskId=u0c1c7d0a-41dc-4b6d-b04f-3d07f9e95ad&width=1206" alt="image.png"><br><strong>解决办法</strong>：用<code>div</code>标签将<code>AliyunOSSUpload</code>组件包裹，<code>div</code>成为<code>ProForm.Item</code>的第一个子组件，他们两个形成受控组件，<code>div</code>受它控制。<code>AliyunOSSUpload</code>组件可以验证但是不受控，就解决了这个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123;<br>  ProFormText,<br>  ProFormTextArea,<br>  ProFormDigit,<br>  ProFormUploadButton,<br>  UploadOutlined,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 定义Form实例，用来操作表单</span><br>  <span class="hljs-keyword">const</span> [formObj] = ProForm.useForm()<br><br>  <span class="hljs-comment">// 文件上传成功后，设置cover字段的value</span><br>  <span class="hljs-keyword">const</span> setCoverKey = <span class="hljs-function"><span class="hljs-params">fileKey</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">cover</span>: fileKey &#125;)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            form=&#123;formObj&#125;<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br><br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>              &lt;div&gt;<br>                &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span>&gt;<br>                  点击上传商品主图<br>                &lt;/AliyunOSSUpload&gt;<br>              &lt;/div&gt;<br>            &lt;/ProForm.Item&gt;<br><br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;详情&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>            /&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h2 id="6-6-使用富文本编辑器"><a href="#6-6-使用富文本编辑器" class="headerlink" title="6.6 使用富文本编辑器"></a>6.6 使用富文本编辑器</h2><h3 id="6-6-1-安装富文本编辑器"><a href="#6-6-1-安装富文本编辑器" class="headerlink" title="6.6.1 安装富文本编辑器"></a>6.6.1 安装富文本编辑器</h3><p>富文本编辑器文档在<a href="https://ant.design/index-cn">antd</a>官网=&gt;组件=&gt;社区精选组件可以找到<br>​</p><p>我们选择的是<a href="https://github.com/margox/braft-editor">braft-editor</a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn add braft-editor<br></code></pre></div></td></tr></table></figure><h3 id="6-6-2-封装富文本编辑器"><a href="#6-6-2-封装富文本编辑器" class="headerlink" title="6.6.2 封装富文本编辑器"></a>6.6.2 封装富文本编辑器</h3><h4 id="1-简单封装文本编辑器"><a href="#1-简单封装文本编辑器" class="headerlink" title="1.简单封装文本编辑器"></a>1.简单封装文本编辑器</h4><p>在\src\components 文件夹中，新建<code>Editor</code>文件夹，并在<code>Editor</code>下新建 i<code>ndex.jsx</code>和<code>index.less</code>文件<br>在\src\components\Editor\index.less 中设置基本样式</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.my-component &#123;<br>  border: 1px solid #d1d1d1;<br>  border-radius: 5px;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>参考<a href="https://www.yuque.com/braft-editor/be/lzwpnr">braft-editor</a>官方手册将<code>EditorDemo</code>拷贝，将不用的暂时注释掉，并引入样式<code>import &#39;./index.less&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// 引入编辑器组件</span><br><span class="hljs-keyword">import</span> BraftEditor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-editor&#x27;</span><br><span class="hljs-comment">// 引入编辑器样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EditorDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-comment">// 创建一个空的editorState作为初始值</span><br>    editorState: BraftEditor.createEditorState(<span class="hljs-literal">null</span>),<br>  &#125;<br><br>  <span class="hljs-comment">// async componentDidMount() &#123;</span><br>  <span class="hljs-comment">//   // 假设此处从服务端获取html格式的编辑器内容</span><br>  <span class="hljs-comment">//   const htmlContent = await fetchEditorContent();</span><br>  <span class="hljs-comment">//   // 使用BraftEditor.createEditorState将html字符串转换为编辑器需要的editorStat</span><br>  <span class="hljs-comment">//   this.setState(&#123;</span><br>  <span class="hljs-comment">//     editorState: BraftEditor.createEditorState(htmlContent),</span><br>  <span class="hljs-comment">//   &#125;);</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-comment">// submitContent = async () =&gt; &#123;</span><br>  <span class="hljs-comment">//   // 在编辑器获得焦点时按下ctrl+s会执行此方法</span><br>  <span class="hljs-comment">//   // 编辑器内容提交到服务端之前，可直接调用editorState.toHTML()来获取HTML格式的内容</span><br>  <span class="hljs-comment">//   const htmlContent = this.state.editorState.toHTML();</span><br>  <span class="hljs-comment">//   const result = await saveEditorContent(htmlContent);</span><br>  <span class="hljs-comment">// &#125;;</span><br><br>  handleEditorChange = <span class="hljs-function"><span class="hljs-params">editorState</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123; editorState &#125;)<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; editorState &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&quot;my-component&quot;</span>&gt;<br>        &lt;BraftEditor<br>          value=&#123;editorState&#125;<br>          onChange=&#123;<span class="hljs-built_in">this</span>.handleEditorChange&#125;<br>          <span class="hljs-comment">// onSave=&#123;this.submitContent&#125;</span><br>        /&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-使用富文本编辑器"><a href="#2-使用富文本编辑器" class="headerlink" title="2.使用富文本编辑器"></a>2.使用富文本编辑器</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中引入<code>import Editor from &#39;@/components/Editor&#39;;</code><br>将原来商品详情<code>ProFormTextArea</code>组件的换成<code>ProForm.Item</code>组件并使用 <code>&lt;Editor /&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;details&quot;</span><br>  label=<span class="hljs-string">&quot;商品详情&quot;</span><br>  placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;&gt;<br>  &lt;Editor /&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><h4 id="3-处理富文本编辑器表单验证"><a href="#3-处理富文本编辑器表单验证" class="headerlink" title="3.处理富文本编辑器表单验证"></a>3.处理富文本编辑器表单验证</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，给<code>Editor</code>传入一个设置<code>details</code>字段的<code>value</code>的方法<br>将富文本输入的内容设置成<code>details</code>字段的<code>value</code>，并添加这个方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 文件上传成功后，设置details字段的value</span><br><span class="hljs-keyword">const</span> setDetails = <span class="hljs-function"><span class="hljs-params">content</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">details</span>: content &#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">    &lt;ProForm.Item<br>      name=<span class="hljs-string">&quot;details&quot;</span><br>      label=<span class="hljs-string">&quot;商品详情&quot;</span><br>      rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>    &gt;<br>      &lt;Editor setDetails=&#123;setDetails&#125; /&gt;<br>    &lt;/ProForm.Item&gt;<br>  &lt;/ProForm&gt;<br>)<br></code></pre></div></td></tr></table></figure><p>在\src\components\Editor\index.jsx 中，接调用 editorState.toHTML()来获取 HTML 格式的内容，调用父组件的函数，将编辑器输入的内容传递回去</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">handleEditorChange = <span class="hljs-function"><span class="hljs-params">editorState</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 更新编辑器的状态</span><br>  <span class="hljs-built_in">this</span>.setState(&#123; editorState &#125;)<br>  <span class="hljs-comment">// 要判断输入的内容，如果有内容设置输入的内容；如果没有内容设置成空字符串</span><br>  <span class="hljs-comment">// 为什么要这样判断，因为即使是空内容editorState.toHTML()也是一对空标签，不能直接给表单使用</span><br>  <span class="hljs-keyword">if</span> (!editorState.isEmpty()) &#123;<br>    <span class="hljs-comment">// 可直接调用editorState.toHTML()来获取HTML格式的内容</span><br>    <span class="hljs-keyword">const</span> content = editorState.toHTML()<br>    <span class="hljs-comment">// 调用父组件的函数，将编辑器输入的内容传递回去</span><br>    <span class="hljs-built_in">this</span>.props.setDetails(content)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">this</span>.props.setDetails(<span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中当富文本获取到焦点时，并没有写入任何内容，但是<code>editorState.toHTML()</code>也是一对空标签<code>&lt;p&gt;&lt;/p&gt;</code>，不能直接给表单使用<br>调用<code>editorState.isEmpty()</code>会判断是否为空，没有写入任何内容会返回 true，并设置成空字符串<br>​</p><h3 id="6-6-3-富文本编辑器集成阿里-OSS-上传"><a href="#6-6-3-富文本编辑器集成阿里-OSS-上传" class="headerlink" title="6.6.3 富文本编辑器集成阿里 OSS 上传"></a>6.6.3 富文本编辑器集成阿里 OSS 上传</h3><h4 id="1-自定义控件–插入图片"><a href="#1-自定义控件–插入图片" class="headerlink" title="1.自定义控件–插入图片"></a>1.自定义控件–插入图片</h4><p>集成<a href="https://braft.margox.cn/demos/antd-upload">Ant Design</a>上传组件<br>在\src\components\Editor\index.jsx 中，引入自定义控件–插入图片的例子，适当修改。<br>在<code>AliyunOSSUpload</code>组件添加<code>insertImage</code>方法，图片上传完成后执行此方法，将<code>url</code>传给父组件用来在编译器中显示图片。<code>showUploadList</code>用来控制是否展示文件列表 <a href="https://ant.design/components/upload-cn/#API"><strong>showUploadList</strong></a><strong>文档</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// 引入编辑器组件</span><br><span class="hljs-keyword">import</span> BraftEditor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-editor&#x27;</span><br><span class="hljs-comment">// 引入编辑器样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ContentUtils &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-utils&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EditorDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-comment">// 创建一个空的editorState作为初始值</span><br>    editorState: BraftEditor.createEditorState(<span class="hljs-literal">null</span>),<br>  &#125;<br><br>  <span class="hljs-comment">// async componentDidMount() &#123;</span><br>  <span class="hljs-comment">//   // 假设此处从服务端获取html格式的编辑器内容</span><br>  <span class="hljs-comment">//   const htmlContent = await fetchEditorContent();</span><br>  <span class="hljs-comment">//   // 使用BraftEditor.createEditorState将html字符串转换为编辑器需要的editorStat</span><br>  <span class="hljs-comment">//   this.setState(&#123;</span><br>  <span class="hljs-comment">//     editorState: BraftEditor.createEditorState(htmlContent),</span><br>  <span class="hljs-comment">//   &#125;);</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-comment">// 编辑器内容改变的时候执行</span><br>  handleEditorChange = <span class="hljs-function"><span class="hljs-params">editorState</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 更新编辑器的状态</span><br>    <span class="hljs-built_in">this</span>.setState(&#123; editorState &#125;)<br>    <span class="hljs-comment">// 要判断输入的内容，如果有内容设置输入的内容；如果没有内容设置成空字符串</span><br>    <span class="hljs-comment">// 为什么要这样判断，因为即使是空内容editorState.toHTML()也是一对空标签，不能直接给表单使用</span><br>    <span class="hljs-keyword">if</span> (!editorState.isEmpty()) &#123;<br>      <span class="hljs-comment">// 可直接调用editorState.toHTML()来获取HTML格式的内容</span><br>      <span class="hljs-keyword">const</span> content = editorState.toHTML()<br>      <span class="hljs-comment">// 调用父组件的函数，将编辑器输入的内容传递回去</span><br>      <span class="hljs-built_in">this</span>.props.setDetails(content)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.props.setDetails(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 图片上传完成后执行此方法，用来在编译器中显示图片</span><br>  insertImage = <span class="hljs-function"><span class="hljs-params">url</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      editorState: ContentUtils.insertMedias(<span class="hljs-built_in">this</span>.state.editorState, [<br>        &#123;<br>          type: <span class="hljs-string">&#x27;IMAGE&#x27;</span>,<br>          url,<br>        &#125;,<br>      ]),<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 自定义控件--插入图片</span><br>    <span class="hljs-keyword">const</span> extendControls = [<br>      &#123;<br>        key: <span class="hljs-string">&#x27;antd-uploader&#x27;</span>,<br>        type: <span class="hljs-string">&#x27;component&#x27;</span>,<br>        component: (<br>          &lt;AliyunOSSUpload insertImage=&#123;<span class="hljs-built_in">this</span>.insertImage&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">false</span>&#125;&gt;<br>            &#123;<span class="hljs-comment">/* 这里的按钮最好加上type=&quot;button&quot;，以避免在表单容器中触发表单提交，用Antd的Button组件则无需如此 */</span>&#125;<br>            &lt;button<br>              type=<span class="hljs-string">&quot;button&quot;</span><br>              className=<span class="hljs-string">&quot;control-item button upload-button&quot;</span><br>              data-title=<span class="hljs-string">&quot;插入图片&quot;</span>&gt;<br>              插入图片<br>            &lt;/button&gt;<br>          &lt;/AliyunOSSUpload&gt;<br>        ),<br>      &#125;,<br>    ]<br><br>    <span class="hljs-keyword">const</span> &#123; editorState &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&quot;my-component&quot;</span>&gt;<br>        &lt;BraftEditor<br>          value=&#123;editorState&#125;<br>          onChange=&#123;<span class="hljs-built_in">this</span>.handleEditorChange&#125;<br>          extendControls=&#123;extendControls&#125;<br>        /&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-添加富文本图片显示，修复显示默认文字-bug"><a href="#2-添加富文本图片显示，修复显示默认文字-bug" class="headerlink" title="2.添加富文本图片显示，修复显示默认文字 bug"></a>2.添加富文本图片显示，修复显示默认文字 bug</h4><p>在\src\components\AliyunOSSUpload\index.jsx 中，<code>insertImage(file.url)</code>在文件上传完成之后，如果需要 url，那么返回 url 给父组件。<br>添加解构<code>showUploadList</code>，默认展示文件列表，<br>修复直接使用{this.props.children}，会报错的 bug</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Upload, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ossConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/commom&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AliyunOSSUpload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    OSSData: &#123;&#125;,<br>  &#125;<br><br>  <span class="hljs-comment">// 组件挂载完成后，进行初始化获取oss配置</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>  &#125;<br><br>  <span class="hljs-comment">// 初始化获取oss上传签名</span><br>  init = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> OSSData = <span class="hljs-keyword">await</span> ossConfig()<br><br>      <span class="hljs-built_in">this</span>.setState(&#123;<br>        OSSData,<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      message.error(error)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 文件上传过程中触发的回调函数，直到上传完成</span><br>  onChange = <span class="hljs-function">(<span class="hljs-params">&#123; file &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (file.status === <span class="hljs-string">&#x27;done&#x27;</span>) &#123;<br>      <span class="hljs-keyword">const</span> &#123; setCoverKey, insertImage &#125; = <span class="hljs-built_in">this</span>.props<br>      <span class="hljs-keyword">if</span> (setCoverKey) &#123;<br>        <span class="hljs-comment">// 上传成功之后，把文件的key，设置成表单某个字段的值</span><br>        setCoverKey(file.key)<br>      &#125;<br><br>      <span class="hljs-comment">// 上传完成之后，如果需要url，那么返回url给父组件</span><br>      <span class="hljs-keyword">if</span> (insertImage) &#123;<br>        insertImage(file.url)<br>      &#125;<br><br>      message.success(<span class="hljs-string">&#x27;上传成功&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 额外的上传参数</span><br>  getExtraData = <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      key: file.key,<br>      OSSAccessKeyId: OSSData.accessid, <span class="hljs-comment">// 注意查看后端返回的字段是否和官方的OSSData一致</span><br>      policy: OSSData.policy,<br>      Signature: OSSData.signature,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 选择文件之后，上传文件之前，执行的回调</span><br>  beforeUpload = <span class="hljs-keyword">async</span> file =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> expire = OSSData.expire * <span class="hljs-number">1000</span><br><br>    <span class="hljs-comment">// 如果签名过期了就重新获取</span><br>    <span class="hljs-keyword">if</span> (expire &lt; <span class="hljs-built_in">Date</span>.now()) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> dir = <span class="hljs-string">&#x27;react/&#x27;</span> <span class="hljs-comment">// 定义上传的目录</span><br><br>    <span class="hljs-keyword">const</span> suffix = file.name.slice(file.name.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>))<br>    <span class="hljs-keyword">const</span> filename = OSSData.dir + dir + <span class="hljs-built_in">Date</span>.now() + suffix<br>    file.key = OSSData.dir + dir + filename <span class="hljs-comment">// 在getExtraData 函数中会用到，在云存储的文件的 key</span><br>    file.url = OSSData.host + OSSData.dir + dir + filename <span class="hljs-comment">// 上传完成后，用于显示内容</span><br><br>    <span class="hljs-keyword">return</span> file<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; value, accept, showUploadList &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">const</span> props = &#123;<br>      accept: accept || <span class="hljs-string">&#x27;&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;file&#x27;</span>,<br>      fileList: value,<br>      action: <span class="hljs-built_in">this</span>.state.OSSData.host,<br>      onChange: <span class="hljs-built_in">this</span>.onChange,<br>      <span class="hljs-comment">// onRemove: this.onRemove,</span><br>      data: <span class="hljs-built_in">this</span>.getExtraData,<br>      beforeUpload: <span class="hljs-built_in">this</span>.beforeUpload,<br>      listType: <span class="hljs-string">&#x27;picture&#x27;</span>,<br>      maxCount: <span class="hljs-number">1</span>,<br>      showUploadList,<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>      &lt;Upload &#123;...props&#125;&gt;<br>        &#123;<span class="hljs-comment">/* 将Button标签放在在AliyunOSSUpload组件里写，这里直接使用&#123;this.props.children&#125;，会报错 */</span>&#125;<br>        &#123;<span class="hljs-comment">/* 这里的解决方案是，Button标签封装在AliyunOSSUpload组件内部，其他函数使用AliyunOSSUpload组件时，只需要将AliyunOSSUpload写成双标签，里边写显示的文字 */</span>&#125;<br>        &#123;<span class="hljs-comment">/* &lt;Button icon=&#123;&lt;UploadOutlined /&gt;&#125;&gt;&#123;this.props.children&#125;&lt;/Button&gt; */</span>&#125;<br>        &#123;<span class="hljs-comment">/* 修复直接使用&#123;this.props.children&#125;，会报错的bug */</span>&#125;<br>        &#123;<span class="hljs-built_in">this</span>.props.children&#125;<br>      &lt;/Upload&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，给<code>AliyunOSSUpload</code>组件传值<code>showUploadList=&#123;true&#125;</code>显示文件图片，并将<code>Button</code>在<code>AliyunOSSUpload</code>中写</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText, ProFormTextArea, ProFormDigit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; UploadOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><span class="hljs-keyword">import</span> Editor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Editor&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 定义Form实例，用来操作表单</span><br>  <span class="hljs-keyword">const</span> [formObj] = ProForm.useForm()<br><br>  <span class="hljs-comment">// 文件上传成功后，设置cover字段的value</span><br>  <span class="hljs-keyword">const</span> setCoverKey = <span class="hljs-function"><span class="hljs-params">fileKey</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">cover</span>: fileKey &#125;)<br><br>  <span class="hljs-comment">// 文件上传成功后，设置details字段的value</span><br>  <span class="hljs-keyword">const</span> setDetails = <span class="hljs-function"><span class="hljs-params">content</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">details</span>: content &#125;)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            form=&#123;formObj&#125;<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br><br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>              &lt;div&gt;<br>                &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>                  &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;点击上传商品主图&lt;/Button&gt;<br>                &lt;/AliyunOSSUpload&gt;<br>              &lt;/div&gt;<br>            &lt;/ProForm.Item&gt;<br><br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Editor setDetails=&#123;setDetails&#125; /&gt;<br>            &lt;/ProForm.Item&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h2 id="6-7-添加商品"><a href="#6-7-添加商品" class="headerlink" title="6.7 添加商品"></a>6.7 添加商品</h2><h3 id="6-7-1-添加商品接口文档"><a href="#6-7-1-添加商品接口文档" class="headerlink" title="6.7.1 添加商品接口文档"></a>6.7.1 添加商品接口文档</h3><h5 id="接口描述-15"><a href="#接口描述-15" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>添加商品</li></ul><h5 id="请求-URL-15"><a href="#请求-URL-15" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods</li></ul><h5 id="请求方式-15"><a href="#请求方式-15" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="请求头部-12"><a href="#请求头部-12" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Body-请求参数-4"><a href="#Body-请求参数-4" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>pics</td><td>否</td><td>array</td><td>小图集</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr></tbody></table><h5 id="返回示例-16"><a href="#返回示例-16" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 201 创建成功</li><li>状态码 400 请求错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>: [<br>            <span class="hljs-string">&quot;标题 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;category_id&quot;</span>: [<br>            <span class="hljs-string">&quot;category id 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;description&quot;</span>: [<br>            <span class="hljs-string">&quot;描述 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;price&quot;</span>: [<br>            <span class="hljs-string">&quot;price 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;stock&quot;</span>: [<br>            <span class="hljs-string">&quot;stock 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;cover&quot;</span>: [<br>            <span class="hljs-string">&quot;cover 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;pics&quot;</span>: [<br>            <span class="hljs-string">&quot;pics 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;details&quot;</span>: [<br>            <span class="hljs-string">&quot;details 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-7-2-添加添加商品接口"><a href="#6-7-2-添加添加商品接口" class="headerlink" title="6.7.2 添加添加商品接口"></a>6.7.2 添加添加商品接口</h3><p>在\src\services\goods.js 中，添加商品接口和获取商品列表接口是同一个接口，但是获取商品列表是<code>get</code>请求，添加商品是<code>post</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架和下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isOn</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/on`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 推荐和不推荐商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRecommend</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/recommend`</span>)<br>&#125;<br><br><span class="hljs-comment">// 添加商品</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，引入<code>import &#123; addGoods &#125; from &#39;@/services/goods&#39;;</code>添加商品接口<br>在提交表单时，执行添加</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br><span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>  <span class="hljs-built_in">console</span>.log(values)<br>  <span class="hljs-keyword">let</span> response = []<br>  <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-comment">// 执行添加</span><br>    <span class="hljs-comment">// 发送请求，添加商品</span><br>    response = <span class="hljs-keyword">await</span> addGoods(&#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 执行编辑</span><br>    <span class="hljs-comment">// 发送请求，更新商品</span><br>    <span class="hljs-comment">// response = await updateUser(editId, values);</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>    message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>    <span class="hljs-comment">// 刷新表格数据</span><br>    actionRef.current.reload()<br>    <span class="hljs-comment">// 关闭模态框</span><br>    isShowModal(<span class="hljs-literal">false</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622267547002-39018e6f-c9c3-43ab-bd26-4f99fa84e9ef.png#clientId=u07f7d054-2036-4&from=paste&height=306&id=u983b8f51&margin=%5Bobject%20Object%5D&name=image.png&originHeight=306&originWidth=672&originalType=binary&size=19356&status=done&style=none&taskId=u1ef4a3f6-2392-467e-b148-1a2ada35a53&width=672" alt="image.png"><br>其中我们要添加<code>category_id</code>二级分类的商品在 <code>response = await addGoods(&#123; ...values, category_id: values.category_id[1] &#125;);</code>中，我们先将<code>...values</code>展开，随后再处理二级分类的商品</p><h2 id="6-8-修改商品"><a href="#6-8-修改商品" class="headerlink" title="6.8 修改商品"></a>6.8 修改商品</h2><h3 id="6-8-1-商品详情接口文档、修改商品接口文档"><a href="#6-8-1-商品详情接口文档、修改商品接口文档" class="headerlink" title="6.8.1 商品详情接口文档、修改商品接口文档"></a>6.8.1 商品详情接口文档、修改商品接口文档</h3><h5 id="接口描述-16"><a href="#接口描述-16" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>商品详情</li></ul><h5 id="请求-URL-16"><a href="#请求-URL-16" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods/{good}</li></ul><h5 id="请求方式-16"><a href="#请求方式-16" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-13"><a href="#请求头部-13" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="REST-参数"><a href="#REST-参数" class="headerlink" title="REST 参数"></a>REST 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>good</td><td>是</td><td>int</td><td>商品 ID</td></tr></tbody></table><h5 id="Query-请求参数-3"><a href="#Query-请求参数-3" class="headerlink" title="Query 请求参数"></a>Query 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>include</td><td>否</td><td>string</td><td>包含额外的数据： category 分类，user 用户， comments 评论</td></tr></tbody></table><p><em>inlude 可以返回额外的数据， 多个使用 ， 分隔， 比如： include=category,user,comments</em></p><h5 id="返回参数-8"><a href="#返回参数-8" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>user_id</td><td>是</td><td>int</td><td>创建者</td></tr><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>sales</td><td>是</td><td>int</td><td>销量</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>cover_url</td><td>是</td><td>string</td><td>封面图 url</td></tr><tr><td>pics</td><td>是</td><td>array</td><td>小图集</td></tr><tr><td>pics_url</td><td>是</td><td>array</td><td>小图集 url</td></tr><tr><td>is_on</td><td>是</td><td>int</td><td>是否上架 0 不上架 1 上架</td></tr><tr><td>is_recommend</td><td>是</td><td>int</td><td>是否推荐 0 不推荐 1 推荐</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr><tr><td>category</td><td>否</td><td>object</td><td>额外的 分类 数据，使用 include 才会返回</td></tr><tr><td>user</td><td>否</td><td>object</td><td>额外的 用户 数据，使用 include 才会返回</td></tr><tr><td>comments</td><td>否</td><td>object</td><td>额外的 评论 数数，使用 include 才会返回</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>添加时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>修改时间</td></tr></tbody></table><h5 id="返回示例-17"><a href="#返回示例-17" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;电脑11111电脑&quot;</span>,<br>    <span class="hljs-string">&quot;category_id&quot;</span>: <span class="hljs-number">7</span>,<br>    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;这是一个电脑1111&quot;</span>,<br>    <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>,<br>    <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">999</span>,<br>    <span class="hljs-string">&quot;sales&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;cover&quot;</span>: <span class="hljs-string">&quot;100x100.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;cover_url&quot;</span>: <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/100x100.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;pics&quot;</span>: [<br>        <span class="hljs-string">&quot;a.png&quot;</span>,<br>        <span class="hljs-string">&quot;b.png&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;pics_url&quot;</span>: [<br>        <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/a.png&quot;</span>,<br>        <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/b.png&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;details&quot;</span>: <span class="hljs-string">&quot;这是一个电脑这是一个电脑这是一个电脑这是一个电脑&quot;</span>,<br>    <span class="hljs-string">&quot;is_on&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;is_recommend&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T07:38:37.000000Z&quot;</span>,<br>    <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T10:13:45.000000Z&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接口描述-17"><a href="#接口描述-17" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>修改商品</li></ul><h5 id="请求-URL-17"><a href="#请求-URL-17" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods/{good}</li></ul><h5 id="请求方式-17"><a href="#请求方式-17" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PUT</li></ul><h5 id="请求头部-14"><a href="#请求头部-14" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数-4"><a href="#RESET-参数-4" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>good</td><td>是</td><td>int</td><td>商品 id</td></tr></tbody></table><h5 id="Body-请求参数-5"><a href="#Body-请求参数-5" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>pics</td><td>否</td><td>array</td><td>小图集</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr></tbody></table><h5 id="返回示例-18"><a href="#返回示例-18" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 成功</li><li>状态码 400 请求错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;分类不存在&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;分类被禁用&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;只能向2级分类添加商品&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ul><li>状态码 422 参数错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>: [<br>            <span class="hljs-string">&quot;标题 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;category_id&quot;</span>: [<br>            <span class="hljs-string">&quot;category id 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;description&quot;</span>: [<br>            <span class="hljs-string">&quot;描述 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;price&quot;</span>: [<br>            <span class="hljs-string">&quot;price 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;stock&quot;</span>: [<br>            <span class="hljs-string">&quot;stock 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;cover&quot;</span>: [<br>            <span class="hljs-string">&quot;cover 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;pics&quot;</span>: [<br>            <span class="hljs-string">&quot;pics 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;details&quot;</span>: [<br>            <span class="hljs-string">&quot;details 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-8-2-添加商品详情接口、修改商品接口"><a href="#6-8-2-添加商品详情接口、修改商品接口" class="headerlink" title="6.8.2 添加商品详情接口、修改商品接口"></a>6.8.2 添加商品详情接口、修改商品接口</h3><p>在\src\services\goods.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架和下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isOn</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/on`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 推荐和不推荐商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRecommend</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/recommend`</span>)<br>&#125;<br><br><span class="hljs-comment">// 添加商品</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 商品详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">editId</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showGoods</span>(<span class="hljs-params">editId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;editId&#125;</span>?include=category`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateGoods</span>(<span class="hljs-params">editId, params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.put(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中商品详情接口，由于有二级列表所以要加上<code>?include=category</code></p><h3 id="6-8-3-获取商品详情数据并提交修改"><a href="#6-8-3-获取商品详情数据并提交修改" class="headerlink" title="6.8.3 获取商品详情数据并提交修改"></a>6.8.3 获取商品详情数据并提交修改</h3><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中先引入<code>import &#123; addGoods, showGoods, updateGoods &#125; from &#39;@/services/goods&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText, ProFormTextArea, ProFormDigit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader, Button, Image &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; UploadOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; addGoods, showGoods, updateGoods &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/goods&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><span class="hljs-keyword">import</span> Editor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Editor&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setInitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 定义Form实例，用来操作表单</span><br>  <span class="hljs-keyword">const</span> [formObj] = ProForm.useForm()<br><br>  <span class="hljs-comment">// 文件上传成功后，设置cover字段的value</span><br>  <span class="hljs-keyword">const</span> setCoverKey = <span class="hljs-function"><span class="hljs-params">fileKey</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">cover</span>: fileKey &#125;)<br><br>  <span class="hljs-comment">// 文件上传成功后，设置details字段的value</span><br>  <span class="hljs-keyword">const</span> setDetails = <span class="hljs-function"><span class="hljs-params">content</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">details</span>: content &#125;)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取商品详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showGoods(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      <span class="hljs-keyword">const</span> &#123; pid, id &#125; = response.category<br>      <span class="hljs-keyword">const</span> defaultCategory = pid === <span class="hljs-number">0</span> ? [id] : [pid, id]<br>      setInitialValues(&#123; ...response, <span class="hljs-attr">category_id</span>: defaultCategory &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加商品</span><br>      response = <span class="hljs-keyword">await</span> addGoods(&#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新商品</span><br>      response = <span class="hljs-keyword">await</span> updateGoods(editId, &#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            form=&#123;formObj&#125;<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br><br>            &lt;ProFormText name=<span class="hljs-string">&quot;cover&quot;</span> hidden=&#123;<span class="hljs-literal">true</span>&#125; /&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>              &lt;div&gt;<br>                &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>                  &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;点击上传商品主图&lt;/Button&gt;<br>                &lt;/AliyunOSSUpload&gt;<br>                &#123;!initialValues.cover_url ? (<br>                  <span class="hljs-string">&#x27;&#x27;</span><br>                ) : (<br>                  &lt;Image width=&#123;<span class="hljs-number">200</span>&#125; src=&#123;initialValues.cover_url&#125; /&gt;<br>                )&#125;<br>              &lt;/div&gt;<br>            &lt;/ProForm.Item&gt;<br><br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Editor setDetails=&#123;setDetails&#125; content=&#123;initialValues.details&#125; /&gt;<br>            &lt;/ProForm.Item&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h4 id="1-获取商品列表，处理商品分类"><a href="#1-获取商品列表，处理商品分类" class="headerlink" title="1.获取商品列表，处理商品分类"></a>1.获取商品列表，处理商品分类</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中<br>后端字段和前端设置的字段一样能够直接赋值，所以先将数据<code>...response</code>展开。后单独设置<code>category_id: defaultCategory</code>，因为有二级菜单，后端用的数组表示，所以解构<code>response.category</code>分别将二级菜单<code>pid</code>，一级菜单<code>id</code>填入数组赋值给<code>category_id</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送请求，获取商品详情</span><br><span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showGoods(editId)<br>  <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>  <span class="hljs-keyword">const</span> &#123; pid, id &#125; = response.category<br>  <span class="hljs-keyword">const</span> defaultCategory = pid === <span class="hljs-number">0</span> ? [id] : [pid, id]<br>  setInitialValues(&#123; ...response, <span class="hljs-attr">category_id</span>: defaultCategory &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-处理图片获取"><a href="#2-处理图片获取" class="headerlink" title="2.处理图片获取"></a>2.处理图片获取</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中,<br>先处理图片显示，用三目运算符判断原来是否有图片，没有则为空，有则添加图片<code>&lt;Image width=&#123;200&#125; src=&#123;initialValues.cover_url&#125; /&gt;</code><br>但是我们在点击上传图片时需要上传<code>cover</code>，当我们添加新图片时<code>cover</code>会被重新设置，所以将它隐藏起来<br><code>&lt;ProFormText name=&quot;cover&quot; hidden=&#123;true&#125; /&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProFormText name=<span class="hljs-string">&quot;cover&quot;</span> hidden=&#123;<span class="hljs-literal">true</span>&#125; /&gt;<br>&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;cover&quot;</span><br>  label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>&gt;<br>  &lt;div&gt;<br>    &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;点击上传商品主图&lt;/Button&gt;<br>    &lt;/AliyunOSSUpload&gt;<br>    &#123;!initialValues.cover_url ? (<br>      <span class="hljs-string">&#x27;&#x27;</span><br>    ) : (<br>      &lt;Image width=&#123;<span class="hljs-number">200</span>&#125; src=&#123;initialValues.cover_url&#125; /&gt;<br>    )&#125;<br>  &lt;/div&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><h4 id="3-处理富文本显示"><a href="#3-处理富文本显示" class="headerlink" title="3.处理富文本显示"></a>3.处理富文本显示</h4><p>在 src\pages\Goods\components\CreateOrEdit.jsx 中，在<code>Editor</code>组件设置<code>content</code>接收到原来的值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Editor setDetails=&#123;setDetails&#125; content=&#123;initialValues.details&#125; /&gt;<br></code></pre></div></td></tr></table></figure><p>在\src\components\Editor\index.jsx 中，，设置显示富文本的内容</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// 引入编辑器组件</span><br><span class="hljs-keyword">import</span> BraftEditor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-editor&#x27;</span><br><span class="hljs-comment">// 引入编辑器样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ContentUtils &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-utils&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EditorDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-comment">// 创建一个空的editorState作为初始值</span><br>    editorState: BraftEditor.createEditorState(<span class="hljs-built_in">this</span>.props.content ?? <span class="hljs-literal">null</span>),<br>  &#125;<br><br>  <span class="hljs-comment">// 编辑器内容改变的时候执行</span><br>  handleEditorChange = <span class="hljs-function"><span class="hljs-params">editorState</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 更新编辑器的状态</span><br>    <span class="hljs-built_in">this</span>.setState(&#123; editorState &#125;)<br>    <span class="hljs-comment">// 要判断输入的内容，如果有内容设置输入的内容；如果没有内容设置成空字符串</span><br>    <span class="hljs-comment">// 为什么要这样判断，因为即使是空内容editorState.toHTML()也是一对空标签，不能直接给表单使用</span><br>    <span class="hljs-keyword">if</span> (!editorState.isEmpty()) &#123;<br>      <span class="hljs-comment">// 可直接调用editorState.toHTML()来获取HTML格式的内容</span><br>      <span class="hljs-keyword">const</span> content = editorState.toHTML()<br>      <span class="hljs-comment">// 调用父组件的函数，将编辑器输入的内容传递回去</span><br>      <span class="hljs-built_in">this</span>.props.setDetails(content)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.props.setDetails(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 图片上传完成后执行此方法，用来在编译器中显示图片</span><br>  insertImage = <span class="hljs-function"><span class="hljs-params">url</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      editorState: ContentUtils.insertMedias(<span class="hljs-built_in">this</span>.state.editorState, [<br>        &#123;<br>          type: <span class="hljs-string">&#x27;IMAGE&#x27;</span>,<br>          url,<br>        &#125;,<br>      ]),<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 自定义控件--插入图片</span><br>    <span class="hljs-keyword">const</span> extendControls = [<br>      &#123;<br>        key: <span class="hljs-string">&#x27;antd-uploader&#x27;</span>,<br>        type: <span class="hljs-string">&#x27;component&#x27;</span>,<br>        component: (<br>          &lt;AliyunOSSUpload insertImage=&#123;<span class="hljs-built_in">this</span>.insertImage&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">false</span>&#125;&gt;<br>            &#123;<span class="hljs-comment">/* 这里的按钮最好加上type=&quot;button&quot;，以避免在表单容器中触发表单提交，用Antd的Button组件则无需如此 */</span>&#125;<br>            &lt;button<br>              type=<span class="hljs-string">&quot;button&quot;</span><br>              className=<span class="hljs-string">&quot;control-item button upload-button&quot;</span><br>              data-title=<span class="hljs-string">&quot;插入图片&quot;</span>&gt;<br>              插入图片<br>            &lt;/button&gt;<br>          &lt;/AliyunOSSUpload&gt;<br>        ),<br>      &#125;,<br>    ]<br><br>    <span class="hljs-keyword">const</span> &#123; editorState &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&quot;my-component&quot;</span>&gt;<br>        &lt;BraftEditor<br>          value=&#123;editorState&#125;<br>          onChange=&#123;<span class="hljs-built_in">this</span>.handleEditorChange&#125;<br>          extendControls=&#123;extendControls&#125;<br>        /&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中<code>editorState: BraftEditor.createEditorState(this.props.content ?? null),</code>是关键代码，</p><p><code>this.props.content ?? null</code>是三目运算符简写，如果<code>this.props.content</code>有值就传值显示在富文本上，没有就<code>null</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">state = &#123;<br>  <span class="hljs-comment">// 创建一个空的editorState作为初始值</span><br>  editorState: BraftEditor.createEditorState(<span class="hljs-built_in">this</span>.props.content ?? <span class="hljs-literal">null</span>),<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-提交表单更新商品"><a href="#4-提交表单更新商品" class="headerlink" title="4.提交表单更新商品"></a>4.提交表单更新商品</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，添加<code>updateGoods</code>接口</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> (values) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = [];<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加商品</span><br>      response = <span class="hljs-keyword">await</span> addGoods(&#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新商品</span><br>      response = <span class="hljs-keyword">await</span> updateGoods(editId, &#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-keyword">type</span>&#125;</span>成功！`</span>);<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload();<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>);<br>    &#125;<br>  &#125;;<br></code></pre></div></td></tr></table></figure><h1 id="七、项目总结和优化"><a href="#七、项目总结和优化" class="headerlink" title="七、项目总结和优化"></a>七、项目总结和优化</h1><h2 id="7-1-优化新建时报错"><a href="#7-1-优化新建时报错" class="headerlink" title="7.1 优化新建时报错"></a>7.1 优化新建时报错</h2><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，由于<code>initialValues</code>没有初始化，刚开始是<code>undefined</code>，所以添加一个判断</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;cover&quot;</span><br>  label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>&gt;<br>  &lt;div&gt;<br>    &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;点击上传商品主图&lt;/Button&gt;<br>    &lt;/AliyunOSSUpload&gt;<br>    &#123;initialValues === <span class="hljs-literal">undefined</span> || !initialValues.cover_url ? (<br>      <span class="hljs-string">&#x27;&#x27;</span><br>    ) : (<br>      &lt;Image<br>        width=&#123;<span class="hljs-number">200</span>&#125;<br>        src=&#123;initialValues === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;&#x27;</span> : initialValues.cover_url&#125;<br>      /&gt;<br>    )&#125;<br>  &lt;/div&gt;<br>&lt;/ProForm.Item&gt;<br><br>&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;details&quot;</span><br>  label=<span class="hljs-string">&quot;商品详情&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>&gt;<br>  &lt;Editor<br>    setDetails=&#123;setDetails&#125;<br>    content=&#123;initialValues === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;&#x27;</span> : initialValues.details&#125;<br>  /&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><h2 id="7-2-优化刷新重定向问题"><a href="#7-2-优化刷新重定向问题" class="headerlink" title="7.2 优化刷新重定向问题"></a>7.2 优化刷新重定向问题</h2><p>在\src\models\user.js 中，先判断是请求的接口否有<code>userInfo.id</code>，有的话才将用户信息存入<code>localStorage</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取用户信息</span><br>*<span class="hljs-function"><span class="hljs-title">fetchCurrent</span>(<span class="hljs-params">_, &#123; call, put &#125;</span>)</span> &#123;<br>  <span class="hljs-comment">// 查看localstorage是否有用户信息，没有再去请求</span><br>  <span class="hljs-keyword">let</span> userInfo = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>));<br>  <span class="hljs-keyword">if</span> (!userInfo) &#123;<br>    userInfo = <span class="hljs-keyword">yield</span> call(queryCurrent);<br><br>    <span class="hljs-comment">// 判断是否获取到用户信息，再把用户信息存入localstorage</span><br>    <span class="hljs-keyword">if</span> (userInfo.id !== <span class="hljs-literal">undefined</span>) <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>, <span class="hljs-built_in">JSON</span>.stringify(userInfo));<br><br>    <span class="hljs-comment">// 完善登录，修复BUG：有时候userInfo返回的是useCache=false被误存入localStorage，错误的userInfo导致页面一直刷新</span><br>    <span class="hljs-comment">// if (userInfo.useCache !== false) localStorage.setItem(&#x27;userInfo&#x27;, JSON.stringify(userInfo));</span><br>  &#125;<br>  <span class="hljs-keyword">yield</span> put(&#123;<br>    type: <span class="hljs-string">&#x27;saveCurrentUser&#x27;</span>,<br>    payload: userInfo,<br>  &#125;);<br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="7-3-优化-401-异常处理重定向到登录页"><a href="#7-3-优化-401-异常处理重定向到登录页" class="headerlink" title="7.3 优化 401 异常处理重定向到登录页"></a>7.3 优化 401 异常处理重定向到登录页</h2><p>在\src\utils\request.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 处理401的情况</span><br><span class="hljs-keyword">if</span> (status === <span class="hljs-number">401</span>) &#123;<br>  <span class="hljs-comment">// 清空用户本地缓存的token和用户信息</span><br>  <span class="hljs-comment">// 删除本地存储的token和userInfo</span><br>  <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;access_token&#x27;</span>)<br>  <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>)<br><br>  <span class="hljs-comment">// 跳转到登录页</span><br>  <span class="hljs-comment">// 重定向到登录页</span><br>  history.replace(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="7-4-修复传参问题"><a href="#7-4-修复传参问题" class="headerlink" title="7.4 修复传参问题"></a>7.4 修复传参问题</h2><h3 id="关于-request-第二参数，常用两个传参方式"><a href="#关于-request-第二参数，常用两个传参方式" class="headerlink" title="关于 request 第二参数，常用两个传参方式"></a>关于 request 第二参数，常用两个传参方式</h3><p>1.params 传参，也就是 query 传参，多用于 get 请求，查询数据使用，类型是对象或者 URLSearchParams<br>2.data 传参，也就是 body 传参，多用于提交表单数据，类型是 any，推荐使用对象</p><p>在\src\services\user.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addUser</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/users&#x27;</span>, &#123; data &#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateUser</span>(<span class="hljs-params">editId, data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.put(<span class="hljs-string">`/admin/users/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>, &#123; data &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\services\login.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeAccountLogin</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/auth/login&#x27;</span>, &#123;<br>    method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    data,<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logout</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/auth/logout&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\services\goods.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架和下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isOn</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/on`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 推荐和不推荐商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRecommend</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/recommend`</span>)<br>&#125;<br><br><span class="hljs-comment">// 添加商品</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addGoods</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; data &#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 商品详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">editId</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showGoods</span>(<span class="hljs-params">editId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;editId&#125;</span>?include=category`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateGoods</span>(<span class="hljs-params">editId, data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.put(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>, &#123; data &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd Pro</tag>
      
      <tag>React</tag>
      
      <tag>Umi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>errorBoundary错误边界</title>
    <link href="/2021/05/13/errorBoundary%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C/"/>
    <url>/2021/05/13/errorBoundary%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h2><p>错误边界：用来捕获后代组件错误，渲染出备用页面<br>​</p><p>子组件出现错误，导致组件不可控，出现穿透影响其他组件显示<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620891793939-814a3455-ac2e-45eb-9d24-eb78ca4677df.png#clientId=ud80257e6-e9cf-4&from=paste&height=384&id=u362f825b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=384&originWidth=1290&originalType=binary&size=453765&status=done&style=none&taskId=u67a5be2c-356d-4896-a5fc-de771370360&width=1290" alt="image.png"></p><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><p>只能捕获后代组件生命周期产生的错误，比如<code>render</code>里产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误<br>​</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>在父组件中设置<code>getDerivedStateFromError</code>，当后代组件出现错误时，<code>getDerivedStateFromError</code>就会触发，并且携带错误信息。（常常调用API中的数据时会出错）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React，&#123;Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> Children <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./children&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>state = &#123;<span class="hljs-attr">hasError</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;<br><br>    <span class="hljs-comment">// 生命周期函数，一旦后台组件报错，就会触发</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">getDerivedStateFromError</span>(<span class="hljs-params">error</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(error);<br>      <span class="hljs-comment">// 在render之前触发</span><br>      <span class="hljs-comment">// 返回新的state</span><br>      <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span> &#125;;<br>  &#125;<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;h3&gt;我是Parent组件&lt;/h3&gt;<br>      &#123;<span class="hljs-built_in">this</span>.state.hasError ? <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>请求繁忙，请稍后再试...<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span> : <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Children</span> /&gt;</span></span>&#125;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p><code>getDerivedStateFromError</code>配合<code>componentDidCatch</code>使用，<code>componentDidCatch</code>是出现错误时执行，一般用于统计并记录错误的信息</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 生命周期函数，一旦后台组件报错，就会触发</span><br><span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">getDerivedStateFromError</span>(<span class="hljs-params">error</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(error);<br>    <span class="hljs-comment">// 在render之前触发</span><br>    <span class="hljs-comment">// 返回新的state</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span>&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">componentDidCatch</span>(<span class="hljs-params">error, info</span>)</span> &#123;<br>    <span class="hljs-comment">// 统计页面的错误,发送请求发送到后台去</span><br>    <span class="hljs-built_in">console</span>.log(error, info);<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>错误边界</tag>
      
      <tag>组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组件间的通信方式总结</title>
    <link href="/2021/05/13/%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2021/05/13/%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="组件间的关系"><a href="#组件间的关系" class="headerlink" title="组件间的关系:"></a>组件间的关系:</h2><ul><li><strong>父子组件</strong></li><li><strong>兄弟组件(非嵌套组件)</strong></li><li><strong>祖孙组件(跨级组件)</strong></li></ul><h2 id="几种通信方式："><a href="#几种通信方式：" class="headerlink" title="几种通信方式："></a>几种通信方式：</h2><ol><li><strong>props</strong>:<ol><li><code>childen props</code></li><li><code>render props</code></li></ol></li><li><strong>消息订阅-发布</strong>：<code>pubs-sub</code>、<code>event</code>等</li><li><strong>集中式管理</strong>：<code>redux</code>、<code>dva</code>等</li><li><strong>conText</strong>：生产者-消费者模式</li></ol><h2 id="比较好的搭配方式："><a href="#比较好的搭配方式：" class="headerlink" title="比较好的搭配方式："></a>比较好的搭配方式：</h2><p><strong>父子组件</strong>：<code>props</code><br><strong>兄弟组件</strong>：消息订阅-发布、集中式管理<br>**祖孙组件(跨级组件)**：消息订阅-发布、集中式管理、<code>conText</code>(开发用的少，封装插件用的多)<br>​</p>]]></content>
    
    
    <categories>
      
      <category>组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>组件</tag>
      
      <tag>通信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Antd Pro 快速上手</title>
    <link href="/2021/05/07/Antd%20Pro%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <url>/2021/05/07/Antd%20Pro%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<p>Antd Pro官网<a href="https://pro.ant.design/docs/getting-started-cn">https://pro.ant.design/docs/getting-started-cn</a></p><h2 id="第一步，安装-umi"><a href="#第一步，安装-umi" class="headerlink" title="第一步，安装 umi"></a>第一步，安装 umi</h2><p><code>yarn create umi</code></p><h2 id="第二步，选择-ant-design-pro"><a href="#第二步，选择-ant-design-pro" class="headerlink" title="第二步，选择 ant-design-pro"></a>第二步，选择 ant-design-pro</h2><p><code>ant-design-pro </code><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620363053142-3ecfe8fa-5853-4fbd-a60e-0c803f88ea0d.png#clientId=uebac18f4-dbcb-4&from=paste&height=308&id=uac99949c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=308&originWidth=723&originalType=binary&size=34564&status=done&style=none&taskId=u13af6859-cfb9-4785-b5b3-e5f1ce86d6a&width=723" alt="image.png"><br>根据需求选择不同的版本、语言、完整区块或核心脚手架</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">success Installed <span class="hljs-string">&quot;create-umi@0.26.0&quot;</span> <span class="hljs-keyword">with</span> binaries:<br>      - create-umi<br>? Select the boilerplate type ant-design-pro<br><br>? ? Be the first to experience the <span class="hljs-keyword">new</span> umi@<span class="hljs-number">3</span> ? Pro V4<br>? ? Which language <span class="hljs-keyword">do</span> you want to use? JavaScript<br>? ? Do you need all the blocks or a simple scaffold? complete<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620363334538-4e1f62b4-024c-46ae-961f-016f35ad995b.png#clientId=uebac18f4-dbcb-4&from=paste&height=380&id=u6c4ab34f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=380&originWidth=723&originalType=binary&size=48746&status=done&style=none&taskId=u74320950-d639-4bd7-bff5-48e0366e982&width=723" alt="image.png"></p><h2 id="第三步，安装依赖包"><a href="#第三步，安装依赖包" class="headerlink" title="第三步，安装依赖包"></a>第三步，安装依赖包</h2><p>推荐使用<code>yarn install </code>，如果安装失败 清理缓存<code>yarn cache clean</code>，重新安装多试几次<br><code>yarn install </code><br>安装完成<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620364412433-a0fbda2e-cad0-4e62-a5d9-c0a131e45a7f.png#clientId=uebac18f4-dbcb-4&from=paste&height=348&id=ue0103481&margin=%5Bobject%20Object%5D&name=image.png&originHeight=348&originWidth=717&originalType=binary&size=47155&status=done&style=none&taskId=u273cdc48-904a-46cb-a8a1-c4585953c84&width=717" alt="image.png"><br>启动<br><code>yarn start</code>   </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn run v1<span class="hljs-number">.22</span><span class="hljs-number">.5</span><br>$ cross-env UMI_ENV=dev umi dev<br>Starting the development server...<br><br>√ Webpack<br>  Compiled successfully <span class="hljs-keyword">in</span> <span class="hljs-number">47.</span>11s<br><br> DONE  Compiled successfully <span class="hljs-keyword">in</span> 47119ms                              下午<span class="hljs-number">1</span>:<span class="hljs-number">28</span>:<span class="hljs-number">37</span><br><br><br>  App running at:<br>  - Local:   http:<span class="hljs-comment">//localhost:8001 (copied to clipboard)</span><br>  - Network: http:<span class="hljs-comment">//192.168.43.198:8001</span><br></code></pre></div></td></tr></table></figure><p>点击<a href="http://localhost:8001/">http://localhost:8001</a>进入<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620365347570-94ccfe46-b7e6-4dc1-98a0-caaf4053969a.png#clientId=uebac18f4-dbcb-4&from=paste&height=1006&id=uaa9c11dd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1006&originWidth=1901&originalType=binary&size=166904&status=done&style=none&taskId=u68d647f6-675d-4ade-b0cc-9b74827ab1e&width=1901" alt="image.png"></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>我们已经为你生成了一个完整的开发框架，提供了涵盖中后台开发的各类功能和坑位，下面是整个项目的目录结构。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">├── config                   # umi 配置，包含路由，构建等配置<br>├── mock                     # 本地模拟数据<br>├── public<br>│   └── favicon.png          # Favicon<br>├── src<br>│   ├── assets               # 本地静态资源<br>│   ├── components           # 业务通用组件<br>│   ├── e2e                  # 集成测试用例<br>│   ├── layouts              # 通用布局<br>│   ├── models               # 全局 dva model<br>│   ├── pages                # 业务页面入口和常用模板<br>│   ├── services             # 后台接口服务<br>│   ├── utils                # 工具库<br>│   ├── locales              # 国际化资源<br>│   ├── global.less          # 全局样式<br>│   └── global.ts            # 全局 JS<br>├── tests                    # 测试工具<br>├── README.md<br>└── package.json<br></code></pre></div></td></tr></table></figure><h3 id="页面代码结构推荐"><a href="#页面代码结构推荐" class="headerlink" title="页面代码结构推荐"></a>页面代码结构推荐</h3><p>为了让项目代码组织更加规范，让开发能够更方便的定位到相关页面组件代码，我们定义了一套规范，该规范当前只作为推荐的指导，并非强制。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">src<br>├── components<br>└── pages<br>    ├── Welcome        <span class="hljs-comment">// 路由组件下不应该再包含其他路由组件，基于这个约定就能清楚的区分路由组件和非路由组件了</span><br>    |   ├── components <span class="hljs-comment">// 对于复杂的页面可以再自己做更深层次的组织，但建议不要超过三层</span><br>    |   ├── Form.tsx<br>    |   ├── index.tsx  <span class="hljs-comment">// 页面组件的代码</span><br>    |   └── index.less <span class="hljs-comment">// 页面样式</span><br>    ├── Order          <span class="hljs-comment">// 路由组件下不应该再包含其他路由组件，基于这个约定就能清楚的区分路由组件和非路由组件了</span><br>    |   ├── index.tsx<br>    |   └── index.less<br>    ├── user           <span class="hljs-comment">// 一系列页面推荐通过小写的单一字母做 group 目录</span><br>    |   ├── components <span class="hljs-comment">// group 下公用的组件集合</span><br>    |   ├── Login      <span class="hljs-comment">// group 下的页面 Login</span><br>    |   ├── Register   <span class="hljs-comment">// group 下的页面 Register</span><br>    |   └── util.ts    <span class="hljs-comment">// 这里可以有一些共用方法之类，不做推荐和约束，看业务场景自行做组织</span><br>    └── *              <span class="hljs-comment">// 其它页面组件代码</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UmiJS</tag>
      
      <tag>Antd</tag>
      
      <tag>Antd Pro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在React中antd实现前端在线解析csv文件</title>
    <link href="/2021/05/06/%E5%9C%A8React%E4%B8%ADantd%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E5%9C%A8%E7%BA%BF%E8%A7%A3%E6%9E%90csv%E6%96%87%E4%BB%B6/"/>
    <url>/2021/05/06/%E5%9C%A8React%E4%B8%ADantd%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E5%9C%A8%E7%BA%BF%E8%A7%A3%E6%9E%90csv%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-在本地新建一个-csv文件"><a href="#1-在本地新建一个-csv文件" class="headerlink" title="1.在本地新建一个.csv文件"></a>1.在本地新建一个.csv文件</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620230292970-83538686-34c1-4ecc-a87e-ef8672bf09b4.png#clientId=ufe86c338-c935-4&from=paste&height=285&id=uf8151a50&margin=%5Bobject%20Object%5D&name=image.png&originHeight=304&originWidth=812&originalType=binary&size=38517&status=done&style=none&taskId=u466fec12-80f5-4c74-b6cd-d72bbb4ec8a&width=762" alt="image.png"></p><h2 id="2-实现代码"><a href="#2-实现代码" class="headerlink" title="2.实现代码"></a>2.实现代码</h2><p>安装<code>papaparse</code>和<code>jschardet</code>插件，<code>npm install papapars</code>、<code>npm install jschardet</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Upload, Button, Icon &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><span class="hljs-keyword">import</span> Papa <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;papaparse&#x27;</span>; <span class="hljs-comment">// 解析scv插件 市面上使用较多的</span><br><span class="hljs-keyword">import</span> jschardet <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jschardet&#x27;</span>; <span class="hljs-comment">// 编码识别</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Csv</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>    <span class="hljs-built_in">this</span>.state = &#123;<br>      csvParseData: [],<br>    &#125;;<br>  &#125;<br>  <span class="hljs-comment">// 检查编排</span><br>  checkEncoding = <span class="hljs-function">(<span class="hljs-params">base64Str</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//这种方式得到的是一种二进制串</span><br>    <span class="hljs-keyword">const</span> str = atob(base64Str.split(<span class="hljs-string">&quot;;base64,&quot;</span>)[<span class="hljs-number">1</span>]); <span class="hljs-comment">// atob  方法 Window 对象 定义和用法 atob() 方法用于解码使用 base-64 编码的字符</span><br>    <span class="hljs-comment">//要用二进制格式</span><br>    <span class="hljs-keyword">let</span> encoding = jschardet.detect(str);<br>    encoding = encoding.encoding;<br>    <span class="hljs-comment">// 有时候会识别错误</span><br>    <span class="hljs-keyword">if</span>(encoding == <span class="hljs-string">&quot;windows-1252&quot;</span>)&#123;<br>      encoding = <span class="hljs-string">&quot;ANSI&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> encoding;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> _this = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">const</span> props = &#123;<br>      beforeUpload: <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> fReader = <span class="hljs-keyword">new</span> FileReader();<br>        fReader.readAsDataURL(file); <span class="hljs-comment">//  readAsDataURL 读取本地文件 得到的是一个base64值</span><br>        fReader.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>)</span>&#123;<span class="hljs-comment">// 读取文件成功</span><br>          <span class="hljs-keyword">const</span> data = evt.target.result;<br>          <span class="hljs-keyword">const</span> encoding = _this.checkEncoding(data);<br>          <span class="hljs-comment">//papaparse.js 用来解析转换成二维数组</span><br>          Papa.parse(file, &#123;<br>            encoding: encoding,<br>            complete: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">results</span>) </span>&#123;        <span class="hljs-comment">// UTF8 \r\n与\n混用时有可能会出问题</span><br>              <span class="hljs-keyword">const</span> res = results.data;<br>              <span class="hljs-keyword">if</span>(res[res.length - <span class="hljs-number">1</span>] === <span class="hljs-string">&quot;&quot;</span>)&#123;    <span class="hljs-comment">//去除最后的空行 有些解析数据尾部会多出空格</span><br>                res.pop();<br>              &#125;<br>              <span class="hljs-comment">// 当前res 就是二维数组的值 数据拿到了 那么在前端如何处理渲染 就根据需求再做进一步操作了</span><br>              _this.setState(res);<br>              <span class="hljs-built_in">console</span>.log(res)<br>            &#125;<br>          &#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;Upload &#123;...props&#125;&gt;<br>        &lt;Button&gt;<br>          &lt;Icon type=<span class="hljs-string">&quot;upload&quot;</span> /&gt; 点击上传csv<br>        &lt;/Button&gt;<br>      &lt;/Upload&gt;<br>    );<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-获取结果"><a href="#3-获取结果" class="headerlink" title="3.获取结果"></a>3.获取结果</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620230653971-df05dd7f-67c9-462c-b843-17e4c4451006.png#clientId=ufe86c338-c935-4&from=paste&height=262&id=u93bb8177&margin=%5Bobject%20Object%5D&name=image.png&originHeight=262&originWidth=591&originalType=binary&size=32406&status=done&style=none&taskId=u2df8a61a-af48-4a59-a221-c6914b2c20c&width=591" alt="image.png"><br><strong>如上图就是最终拿到的值 和我们新建测试的csv文件数据是一致的 中文也没有出现乱码 前端解析csv也就实现了</strong></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd</tag>
      
      <tag>React</tag>
      
      <tag>csv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个tcp连接能发几个http请求</title>
    <link href="/2021/05/05/%E4%B8%80%E4%B8%AAtcp%E8%BF%9E%E6%8E%A5%E8%83%BD%E5%8F%91%E5%87%A0%E4%B8%AAhttp%E8%AF%B7%E6%B1%82/"/>
    <url>/2021/05/05/%E4%B8%80%E4%B8%AAtcp%E8%BF%9E%E6%8E%A5%E8%83%BD%E5%8F%91%E5%87%A0%E4%B8%AAhttp%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>如果是 http1.0，一个 tcp 连接只能发一个 http 请求，因为是 HTTP/1.1 开始才有 Connection 头，引入了持续连接的概念，只要不断开，就能够持续发。所以一个 tcp 连接能发多个 http 请求。</p><p>HTTP/1.0 :一个 tcp 连接只能发一个 http 请求。每次服务端返回响应后 TCP 连接会断开。<br>HTTP/1.1: 默认开启 Connection: keep-alive，一个 TCP 连接可以发多个 http 请求，但是多个请求是串行执行。（注意区别 TCP 的 keep-alive）<br>HTTP/2: 引入了多路复用技术和二进制分帧，同个域名下的请求只需要占用一个 TCP 连接，请求和响应是并行执行。</p><p>如果是 HTTP 1.0 版本协议，一般情况下，不支持长连接，因此在每次请求发送完毕之后，TCP 连接即会断开，因此一个 TCP 发送一个 HTTP 请求，但是有一种情况可以将一条 TCP 连接保持在活跃状态，那就是通过 Connection 和 Keep-Alive 首部，在请求头带上 Connection: Keep-Alive，并且可以通过 Keep-Alive 通用首部中指定的，用逗号分隔的选项调节 keep-alive 的行为，如果客户端和服务端都支持，那么其实也可以发送多条，不过此方式也有限制，可以关注《HTTP 权威指南》4.5.5 节对于 Keep-Alive 连接的限制和规则；<br>而如果是 HTTP 1.1 版本协议，支持了长连接，因此只要 TCP 连接不断开，便可以一直发送 HTTP 请求，持续不断，没有上限；<br>同样，如果是 HTTP 2.0 版本协议，支持多用复用，一个 TCP 连接是可以并发多个 HTTP 请求的，同样也是支持长连接，因此只要不断开 TCP 的连接，HTTP 请求数也是可以没有上限地持续发送，</p>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
      <tag>TCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅了解_React为何需要设定唯一key值</title>
    <link href="/2021/05/05/%E6%B5%85%E4%BA%86%E8%A7%A3-React%E4%B8%BA%E4%BD%95%E9%9C%80%E8%A6%81%E8%AE%BE%E5%AE%9A%E5%94%AF%E4%B8%80key%E5%80%BC/"/>
    <url>/2021/05/05/%E6%B5%85%E4%BA%86%E8%A7%A3-React%E4%B8%BA%E4%BD%95%E9%9C%80%E8%A6%81%E8%AE%BE%E5%AE%9A%E5%94%AF%E4%B8%80key%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="一、React规范"><a href="#一、React规范" class="headerlink" title="一、React规范"></a>一、React规范</h3><h4 id="1-1-react-key的作用"><a href="#1-1-react-key的作用" class="headerlink" title="1.1 react key的作用"></a>1.1 react key的作用</h4><p>当渲染重复数据的时候,React.diff会根据生成的key进行虚拟DOM渲染, 所以我们需要在遍历的地方都要加上key,例如map、for等等<br>同样, antd作为react的UI组件库, 有些地方也需要遵循react的key规范.例如 antd-table 在渲染前要求: 在 Table 中，dataSource 和 columns 里的数据值都需要指定 key 值。对于 dataSource 默认将每列数据的 key 属性作为唯一的标识。</p><h4 id="1-2-antd-table-key缺失"><a href="#1-2-antd-table-key缺失" class="headerlink" title="1.2 antd-table key缺失"></a>1.2 antd-table key缺失</h4><p>如果你的数据没有这个属性，务必使用 rowKey 来指定数据列的主键。若没有指定，控制台会出现以下的提示，表格组件也会出现各类奇怪的错误。<br>Each record in table should have a uniquekeyprop,or setrowKeyto an unique primary key.<br>虽然只是一个警告，但是这个会给页面table表格带来无法预测的错误</p><h4 id="1-3-antd-table-key相同"><a href="#1-3-antd-table-key相同" class="headerlink" title="1.3 antd-table key相同"></a>1.3 antd-table key相同</h4><p>这种情况感觉到的错误会比较明显:<strong>因为你在一个列上的操作,在相同key上的列也会响应！</strong><br>当鼠标滑过其中一个列并高亮的时候, 另一个列也会被高亮</p><h3 id="二、添加Key值"><a href="#二、添加Key值" class="headerlink" title="二、添加Key值"></a>二、添加Key值</h3><p>我们知道了为什么添加key, 以及不添加key值会出现什么情况</p><h4 id="2-1-完善dataSource和columns"><a href="#2-1-完善dataSource和columns" class="headerlink" title="2.1 完善dataSource和columns"></a>2.1 完善dataSource和columns</h4><p>每一行(dataSource)和每一列(columns)都应该要有一个唯一key值, 渲染的时候react才能准确知道是否需要修改.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> columns = [&#123;<br>    key: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    title: <span class="hljs-string">&#x27;歌曲名字&#x27;</span>,<br>    dataIndex: <span class="hljs-string">&#x27;title&#x27;</span><br>&#125;]<br><br><span class="hljs-keyword">let</span> dataSource = [&#123;<br>    key: <span class="hljs-number">1</span>,<br>    title: <span class="hljs-string">&#x27;哑巴&#x27;</span><br>&#125;]<br><br>&lt;Table<br>    columns=&#123;columns&#125;<br>    dataSource=&#123;dataSource&#125;<br>/&gt;<br><br></code></pre></div></td></tr></table></figure><h4 id="2-2-直接在table上加上每一列key值-rowKey"><a href="#2-2-直接在table上加上每一列key值-rowKey" class="headerlink" title="2.2 直接在table上加上每一列key值:rowKey"></a>2.2 直接在table上加上每一列key值:rowKey</h4><p>但是注意: 这个key也是要求唯一的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Table<br>    rowKey=&#123;<span class="hljs-function">(<span class="hljs-params">record, index</span>) =&gt;</span> <span class="hljs-string">`complete<span class="hljs-subst">$&#123;record.id&#125;</span><span class="hljs-subst">$&#123;index&#125;</span>`</span>&#125;<br>    ...<br>/&gt;<br></code></pre></div></td></tr></table></figure><p>具体的可以查看官方文档:<a href="https://ant.design/components/table-cn/#Note">《antd-table》</a></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UmiJS踩坑笔记</title>
    <link href="/2021/04/28/UmiJS%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/28/UmiJS%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="UmiJS-踩坑笔记"><a href="#UmiJS-踩坑笔记" class="headerlink" title="UmiJS 踩坑笔记"></a>UmiJS 踩坑笔记</h1><p><a href="https://umijs.org/zh-CN">UmiJS</a>官方网站</p><h2 id="UmiJS-快速上手"><a href="#UmiJS-快速上手" class="headerlink" title="UmiJS 快速上手"></a>UmiJS 快速上手</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1619615607819-3f8fffc7-323e-40f6-a748-4dc4ea86931c.png#clientId=u83cb3f88-d331-4&from=drop&id=u5afa3aa7&margin=%5Bobject%20Object%5D&name=UmiJS%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B1.png&originHeight=673&originWidth=531&originalType=binary&size=60366&status=done&style=none&taskId=ud835d141-fb42-432c-a714-1716b4c9270" alt="UmiJS快速上手1.png"></p><h2 id="官方未介绍目录结构"><a href="#官方未介绍目录结构" class="headerlink" title="官方未介绍目录结构"></a>官方未介绍目录结构</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1619615627002-2ae8f20c-fb55-40ab-a9d3-f01729f8bbe5.png#clientId=u83cb3f88-d331-4&from=drop&id=Q9Mfl&margin=%5Bobject%20Object%5D&name=%E5%AE%98%E6%96%B9%E6%9C%AA%E4%BB%8B%E7%BB%8D%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png&originHeight=210&originWidth=276&originalType=binary&size=29616&status=done&style=none&taskId=uec1d5b9f-1429-48bc-b5ee-853604d1238" alt="官方未介绍的目录结构.png"></p><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1619615653598-9a2bca24-9270-4dfd-a96b-ab6b0290f88c.png#clientId=u83cb3f88-d331-4&from=drop&id=u901e1e7e&margin=%5Bobject%20Object%5D&name=%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE.png&originHeight=581&originWidth=807&originalType=binary&size=88764&status=done&style=none&taskId=u3a7b0986-0e23-4043-addb-c3898e019e1" alt="常用配置.png"></p><h2 id="第一坑"><a href="#第一坑" class="headerlink" title="第一坑:"></a>第一坑:</h2><p>问题场景</p><h3 id="使用-umijs-umi-app-为模板，创建一个项目："><a href="#使用-umijs-umi-app-为模板，创建一个项目：" class="headerlink" title="使用 @umijs/umi-app 为模板，创建一个项目："></a>使用 @umijs/umi-app 为模板，创建一个项目：</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">yarn <span class="hljs-keyword">create</span> <span class="hljs-variable">@umijs</span><span class="hljs-operator">/</span>umi<span class="hljs-operator">-</span>app<br></code></pre></div></td></tr></table></figure><p>创建失败，报如下错误：</p><p>yarn create @umijs/umi-app 报错：文件名、目录名或卷标语法不正确。</p><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">think</span>@<span class="hljs-string">think-PC</span> <span class="hljs-string">MINGW64</span> /<span class="hljs-string">e</span>/<span class="hljs-string">zny-projects</span>/<span class="hljs-string">demo01-umi</span><br><span class="hljs-string"></span>$ <span class="hljs-string">yarn</span> <span class="hljs-string">create</span> @<span class="hljs-string">umijs</span>/<span class="hljs-string">umi-app</span><br><span class="hljs-string">yarn</span> <span class="hljs-string">create</span> <span class="hljs-string">v1</span>.<span class="hljs-string">22</span>.<span class="hljs-string">4</span><br><span class="hljs-string"></span>[<span class="hljs-string">1</span>/<span class="hljs-string">4</span>] <span class="hljs-string">Resolving</span> <span class="hljs-string">packages</span>...<br>[<span class="hljs-string">2</span>/<span class="hljs-string">4</span>] <span class="hljs-string">Fetching</span> <span class="hljs-string">packages</span>...<br><span class="hljs-string">info</span> <span class="hljs-string">fsevents</span>@<span class="hljs-string">2</span>.<span class="hljs-string">1</span>.<span class="hljs-string">2</span>: <span class="hljs-string">The</span> <span class="hljs-string">platform</span> <span class="hljs-string">&quot;win32&quot;</span> <span class="hljs-string">is</span> <span class="hljs-string">incompatible</span> <span class="hljs-string">with</span> <span class="hljs-string">this</span> <span class="hljs-string">module</span>.<br><span class="hljs-string">info</span> <span class="hljs-string">&quot;fsevents@2.1.2&quot;</span> <span class="hljs-string">is</span> <span class="hljs-string">an</span> <span class="hljs-string">optional</span> <span class="hljs-string">dependency</span> <span class="hljs-string">and</span> <span class="hljs-string">failed</span> <span class="hljs-string">compatibility</span> <span class="hljs-string">check</span>. <span class="hljs-string">Excluding</span> <span class="hljs-string">it</span> <span class="hljs-string">from</span> <span class="hljs-string">installation</span>.<br>[<span class="hljs-string">3</span>/<span class="hljs-string">4</span>] <span class="hljs-string">Linking</span> <span class="hljs-string">dependencies</span>...<br><span class="hljs-string">warning</span> <span class="hljs-string">&quot;@umijs/create-umi-app &gt; @umijs/utils &gt; @babel/register@7.8.6&quot;</span> <span class="hljs-string">has</span> <span class="hljs-string">unmet</span> <span class="hljs-string">peer</span> <span class="hljs-string">dependency</span> <span class="hljs-string">&quot;@babel/core@^7.0.0-0&quot;</span>.<br>[<span class="hljs-string">4</span>/<span class="hljs-string">4</span>] <span class="hljs-string">Building</span> <span class="hljs-string">fresh</span> <span class="hljs-string">packages</span>...<br><span class="hljs-string">success</span> <span class="hljs-string">Installed</span> <span class="hljs-string">&quot;@umijs/create-umi-app@3.0.12&quot;</span> <span class="hljs-string">with</span> <span class="hljs-string">binaries</span>:<br>      - <span class="hljs-built_in">create-umi-app</span><br><span class="hljs-built_in">文件名、目录名或卷标语法不正确。</span><br><span class="hljs-built_in">error</span> <span class="hljs-string">Command</span> <span class="hljs-string">failed</span>.<br><span class="hljs-string">Exit</span> <span class="hljs-string">code</span>: <span class="hljs-string">1</span><br><span class="hljs-string">Command</span>: <span class="hljs-string">D</span>:\<span class="hljs-string">Develop</span>\<span class="hljs-string">nodejs</span>\<span class="hljs-string">node_global</span>\<span class="hljs-string">bin</span>\<span class="hljs-built_in">create-umi-app</span><br><span class="hljs-built_in">Arguments:</span><br><span class="hljs-built_in">Directory:</span> <span class="hljs-string">E</span>:\<span class="hljs-string">zny-projects</span>\<span class="hljs-string">demo01-umi</span><br><span class="hljs-string">Output</span>:<br><br><span class="hljs-string">info</span> <span class="hljs-string">Visit</span> <span class="hljs-string">https</span>://<span class="hljs-string">yarnpkg</span>.<span class="hljs-string">com</span>/<span class="hljs-string">en</span>/<span class="hljs-string">docs</span>/<span class="hljs-string">cli</span>/<span class="hljs-string">create</span> <span class="hljs-string">for</span> <span class="hljs-string">documentation</span> <span class="hljs-string">about</span> <span class="hljs-string">this</span> <span class="hljs-string">command</span>.<br></code></pre></div></td></tr></table></figure><h3 id="解决：参考-https-github-com-yaoningvital-blog-issues-207"><a href="#解决：参考-https-github-com-yaoningvital-blog-issues-207" class="headerlink" title="解决：参考 https://github.com/yaoningvital/blog/issues/207"></a>解决：参考 <a href="https://github.com/yaoningvital/blog/issues/207">https://github.com/yaoningvital/blog/issues/207</a></h3><h4 id="1、我是用-npm-安装的-yarn-："><a href="#1、我是用-npm-安装的-yarn-：" class="headerlink" title="1、我是用 npm 安装的 yarn ："></a>1、我是用 npm 安装的 yarn ：</h4><p><code>npm i yarn tyarn -g</code></p><h4 id="2、我重新设定了-npm-全局包的安装位置-和-缓存位置。"><a href="#2、我重新设定了-npm-全局包的安装位置-和-缓存位置。" class="headerlink" title="2、我重新设定了 npm 全局包的安装位置 和 缓存位置。"></a>2、我重新设定了 npm 全局包的安装位置 和 缓存位置。</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 查看 npm 全局包的安装位置</span><br>npm config get prefix    <span class="hljs-comment">// D:\Develop\nodejs\node_global</span><br><span class="hljs-comment">// 查看 npm 缓存位置</span><br>npm config get cache   <span class="hljs-comment">// D:\Develop\nodejs\node_cache</span><br></code></pre></div></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/17041261/77241598-5e534680-6c2f-11ea-9266-55213f7e8ace.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354317219-b0c1900f-d228-4cfd-8c09-f0e7bf3247b4.png#clientId=ud2174ff5-2007-4&from=paste&height=215&id=ua885d2a1&margin=%5Bobject%20Object%5D&originHeight=215&originWidth=362&originalType=url&status=done&style=none&taskId=u4605e564-37d4-4b61-80bc-4a808e97f89&width=362"></a></p><h4 id="3、查看-yarn-命令的目录："><a href="#3、查看-yarn-命令的目录：" class="headerlink" title="3、查看 yarn 命令的目录："></a>3、查看 yarn 命令的目录：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn <span class="hljs-built_in">global</span> bin<br><span class="hljs-comment">// D:\Develop\nodejs\node_global\bin</span><br></code></pre></div></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/17041261/77241622-b7bb7580-6c2f-11ea-82b6-2b8647d98d59.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354317246-c1dad564-34e5-40ca-8696-b19567c78b33.png#clientId=ud2174ff5-2007-4&from=paste&height=99&id=ud9b1e309&margin=%5Bobject%20Object%5D&originHeight=99&originWidth=333&originalType=url&status=done&style=none&taskId=u336a4b32-60ab-4af6-ba0f-edec767eec2&width=333"></a></p><h4 id="4、将获取到的-yarn-命令的目录配置到环境变量-Path-上。"><a href="#4、将获取到的-yarn-命令的目录配置到环境变量-Path-上。" class="headerlink" title="4、将获取到的 yarn 命令的目录配置到环境变量 Path 上。"></a>4、将获取到的 yarn 命令的目录配置到环境变量 Path 上。</h4><p><a href="https://user-images.githubusercontent.com/17041261/77241558-97d78200-6c2e-11ea-9d16-7768b6498f9b.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354318302-73a57f4b-1d54-46c6-b884-2df930e624e2.png#clientId=ud2174ff5-2007-4&from=paste&height=726&id=u0ebe29a1&margin=%5Bobject%20Object%5D&originHeight=726&originWidth=642&originalType=url&status=done&style=none&taskId=ucb8a706d-2fad-4d28-bce3-35bcf7d4d76&width=642"></a><br>到这一步之后，我再尝试执行命令<code>yarn create @umijs/umi-app</code>，问题并没有解决，还是报同样的错误。</p><h4 id="5、查看-yarn-的全局安装位置："><a href="#5、查看-yarn-的全局安装位置：" class="headerlink" title="5、查看 yarn 的全局安装位置："></a>5、查看 yarn 的全局安装位置：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn <span class="hljs-built_in">global</span> bin<br><span class="hljs-comment">// D:\Develop\nodejs\node_global\bin</span><br></code></pre></div></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/17041261/77241671-88593880-6c30-11ea-90d1-2e56ccd5d0a2.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354317996-2ea0b9d7-507e-4dea-aaf6-e0ee2ef37bf6.png#clientId=ud2174ff5-2007-4&from=paste&height=105&id=uae18da4c&margin=%5Bobject%20Object%5D&originHeight=105&originWidth=388&originalType=url&status=done&style=none&taskId=u481a446c-d2b6-4323-9355-c13c89e86ce&width=388"></a><br>可以发现，yarn 的全局安装位置 和 bin 的位置不一致。</p><h4 id="6、修改-yarn-的全局安装位置"><a href="#6、修改-yarn-的全局安装位置" class="headerlink" title="6、修改 yarn 的全局安装位置"></a>6、修改 yarn 的全局安装位置</h4><p>将 yarn 的全局安装位置 修改为和 npm 的一致。<br>因为我的 npm 的位置是 “D:\Develop\nodejs”，那么我在 “D:\Develop” 下创建一个 yarn 文件夹，在 yarn 文件夹下再创建一个 global 文件夹和一个 cache 文件夹。<br>然后执行下面的命令，来设置 yarn 的全局安装位置和 缓存位置：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn config set <span class="hljs-built_in">global</span>-folder <span class="hljs-string">&quot;D:\Develop\yarn\global&quot;</span><br>yarn config set cache-folder <span class="hljs-string">&quot;D:\Develop\yarn\cache&quot;</span><br></code></pre></div></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/17041261/77241766-01a55b00-6c32-11ea-975e-142238576a38.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354318206-a4447745-bf56-4489-9eef-fbb2f29eb2a5.png#clientId=ud2174ff5-2007-4&from=paste&height=166&id=u303b2fc3&margin=%5Bobject%20Object%5D&originHeight=166&originWidth=482&originalType=url&status=done&style=none&taskId=ueeb844d7-3608-4be1-bfa0-12e86f3cfb1&width=482"></a><a href="https://user-images.githubusercontent.com/17041261/77241782-24377400-6c32-11ea-8cfb-7d44bb437e61.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354319864-35bece77-a4c7-4a1b-b18a-f900067ce972.png#clientId=ud2174ff5-2007-4&from=paste&height=168&id=u39b3e83e&margin=%5Bobject%20Object%5D&originHeight=168&originWidth=482&originalType=url&status=done&style=none&taskId=u25081924-59c8-43d2-89c9-f1fc6f3effe&width=482"></a></p><h4 id="7、再查看-yarn-的全局安装位置-和缓存位置"><a href="#7、再查看-yarn-的全局安装位置-和缓存位置" class="headerlink" title="7、再查看 yarn 的全局安装位置 和缓存位置"></a>7、再查看 yarn 的全局安装位置 和缓存位置</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$ yarn <span class="hljs-built_in">global</span> dir<br><span class="hljs-comment">// D:\Develop\yarn\global</span><br><br><br>$ yarn cache dir<br><span class="hljs-comment">// D:\Develop\yarn\cache\v6</span><br></code></pre></div></td></tr></table></figure><p>说明上一步的修改操作成功。</p><h4 id="8、再执行-yarn-create-umijs-umi-app"><a href="#8、再执行-yarn-create-umijs-umi-app" class="headerlink" title="8、再执行 yarn create @umijs/umi-app"></a>8、再执行 yarn create @umijs/umi-app</h4><p>再执行 ：<br><code>yarn create @umijs/umi-app</code><br>操作成功：<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354320114-d0e48a33-0a61-4733-ad7c-7c8496f85e58.png#clientId=ud2174ff5-2007-4&from=paste&height=752&id=u2098019d&margin=%5Bobject%20Object%5D&originHeight=752&originWidth=981&originalType=url&status=done&style=none&taskId=u34227728-c3be-4875-9885-39d6803a4bf&width=981"></p><h2 id="第二坑："><a href="#第二坑：" class="headerlink" title="第二坑："></a>第二坑：</h2><h3 id="在yarn-build打包好，准备在serve服务器上本地验证"><a href="#在yarn-build打包好，准备在serve服务器上本地验证" class="headerlink" title="在yarn build打包好，准备在serve服务器上本地验证"></a>在<code>yarn build</code>打包好，准备在<code>serve</code>服务器上本地验证</h3><p>umi 官方文档显示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">本地验证<br>发布之前，可以通过 serve 做本地验证，<br><br><br>$ yarn <span class="hljs-built_in">global</span> add serve<br>$ serve ./dist<br><br>   ┌────────────────────────────────────────────────────┐<br>   │                                                    │<br>   │   Serving!                                         │<br>   │                                                    │<br>   │   - Local:            http:<span class="hljs-comment">//localhost:5000        │</span><br>   │   - On Your Network:  http:<span class="hljs-comment">//192.168.12.34:5000    │</span><br>   │                                                    │<br>   │   Copied local address to clipboard!               │<br>   │                                                    │<br>   └────────────────────────────────────────────────────┘<br></code></pre></div></td></tr></table></figure><p>结果在 vscode 下报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">PS E:\前端自学\react1\融职商场后台管理\umijs\myapp&gt; serve --version<br>serve : 无法将“serve”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，<br>如果包括路径，请确保路径正确，然后再试一次。<br>所在位置 行:<span class="hljs-number">1</span> 字符: <span class="hljs-number">1</span><br>+ serve --version<br>+ ~~~~~<br>    + CategoryInfo          : ObjectNotFound: (serve:<span class="hljs-built_in">String</span>) [], CommandNotFoundException<br>    + FullyQualifiedErrorId : CommandNotFoundException<br></code></pre></div></td></tr></table></figure><h3 id="解决：最后在改在-CMD-命令行里执行成功"><a href="#解决：最后在改在-CMD-命令行里执行成功" class="headerlink" title="解决：最后在改在 CMD 命令行里执行成功"></a>解决：最后在改在 CMD 命令行里执行成功</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Microsoft Windows [版本 <span class="hljs-number">10.0</span><span class="hljs-number">.19041</span><span class="hljs-number">.685</span>]<br>(c) <span class="hljs-number">2020</span> Microsoft Corporation. 保留所有权利。<br><br>E:\前端自学\react1\融职商场后台管理\umijs\myapp&gt;serve ./dist<br><br>   ┌────────────────────────────────────────────────────┐<br>   │                                                    │<br>   │   Serving!                                         │<br>   │                                                    │<br>   │   - Local:            http:<span class="hljs-comment">//localhost:5000        │</span><br>   │   - On Your Network:  http:<span class="hljs-comment">//192.168.43.198:5000   │</span><br>   │                                                    │<br>   │   Copied local address to clipboard!               │<br>   │                                                    │<br>   └────────────────────────────────────────────────────┘<br></code></pre></div></td></tr></table></figure><h2 id="第三坑："><a href="#第三坑：" class="headerlink" title="第三坑："></a>第三坑：</h2><h3 id="配置publicPath、outputPath"><a href="#配置publicPath、outputPath" class="headerlink" title="配置publicPath、outputPath"></a>配置<code>publicPath</code>、<code>outputPath</code></h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">publicPath:<span class="hljs-string">&#x27;https://xxx.com/cdn/&#x27;</span>,<br>outputPath:<span class="hljs-string">&#x27;build&#x27;</span>,<br></code></pre></div></td></tr></table></figure><p><code>publicPath</code>:暂时无效果<br><code>outputPath</code>:未新建并打包到<code>build</code></p><h3 id="解决：重新启动项目，需要多试几次publicPath、outputPath，"><a href="#解决：重新启动项目，需要多试几次publicPath、outputPath，" class="headerlink" title="解决：重新启动项目，需要多试几次publicPath、outputPath，"></a>解决：重新启动项目，需要多试几次<code>publicPath</code>、<code>outputPath</code>，</h3><h2 id="第四坑："><a href="#第四坑：" class="headerlink" title="第四坑："></a>第四坑：</h2><h3 id="使用dva插件时，执行命令umi-dva-list-model时："><a href="#使用dva插件时，执行命令umi-dva-list-model时：" class="headerlink" title="使用dva插件时，执行命令umi dva list model时："></a>使用<code>dva</code>插件时，执行命令<code>umi dva list model</code>时：</h3><p>umi : 无法将“umi”项识别为 cmdlet、函数、脚本文件或可运行程序的名称</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">umi : 无法将“umi”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。<br>+ umi dva list model<br>+ ~~~<br>    + CategoryInfo          : ObjectNotFound: (umi:<span class="hljs-built_in">String</span>) [], CommandNotFoundException<br>    + FullyQualifiedErrorId : CommandNotFoundException<br></code></pre></div></td></tr></table></figure><h3 id="解决：umi-dva-list-model命令前加上yarn，"><a href="#解决：umi-dva-list-model命令前加上yarn，" class="headerlink" title="解决：umi dva list model命令前加上yarn，"></a>解决：<code>umi dva list model</code>命令前加上<code>yarn</code>，</h3><p>使用<code>npm</code>也不行。<br>执行结果如下：<br><code>yarn umi dva list model </code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn run v1<span class="hljs-number">.22</span><span class="hljs-number">.5</span><br>$ E:\umijs\myapp\node_modules\.bin\umi dva list model<br><br>  Models <span class="hljs-keyword">in</span> your project:<br><br><br>  Totally <span class="hljs-number">0.</span><br><br>Done <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span>92s.<br></code></pre></div></td></tr></table></figure><p>umijsDemo <a href="https://github.com/13982720426/UmiJS-Learning-record.git">https://github.com/13982720426/UmiJS-Learning-record.git</a></p><h2 id="第五坑："><a href="#第五坑：" class="headerlink" title="第五坑："></a>第五坑：</h2><h3 id="使用-umi-ui-时配置-UMI-UI-1-umi-dev"><a href="#使用-umi-ui-时配置-UMI-UI-1-umi-dev" class="headerlink" title="使用 umi-ui 时配置 UMI_UI=1 umi dev"></a>使用 umi-ui 时配置 UMI_UI=1 umi dev</h3><p>在 umi_ui\package.json 中配置了</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;start:umi-ui&quot;</span>: <span class="hljs-string">&quot;UMI_UI=1 umi dev&quot;</span>,<br></code></pre></div></td></tr></table></figure><p>但是使用<code>yarn start:umi-ui</code>启动时 ‘UMI_UI’ 不是内部或外部命令，也不是可运行的程序</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn run v1<span class="hljs-number">.22</span><span class="hljs-number">.5</span><br>$ UMI_UI=<span class="hljs-number">1</span> umi dev<br><span class="hljs-string">&#x27;UMI_UI&#x27;</span> 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。<br>error Command failed <span class="hljs-keyword">with</span> exit code <span class="hljs-number">1.</span><br>info Visit https:<span class="hljs-comment">//yarnpkg.com/en/docs/cli/run for documentation about this command.</span><br></code></pre></div></td></tr></table></figure><h3 id="解决：最后直接使用yarn-start命令"><a href="#解决：最后直接使用yarn-start命令" class="headerlink" title="解决：最后直接使用yarn start命令"></a>解决：最后直接使用<code>yarn start</code>命令</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn run v1<span class="hljs-number">.22</span><span class="hljs-number">.5</span><br>$ umi dev<br>🚀 Starting Umi UI using umi@<span class="hljs-number">3.4</span><span class="hljs-number">.14</span>...<br>🌈 Umi UI mini Ready on port <span class="hljs-number">3000.</span><br>Starting the development server...<br><br>√ Webpack<br>  Compiled successfully <span class="hljs-keyword">in</span> <span class="hljs-number">4.</span>46s<br><br> DONE  Compiled successfully <span class="hljs-keyword">in</span> 4461ms                                                                                                            下午<span class="hljs-number">9</span>:<span class="hljs-number">00</span>:<span class="hljs-number">37</span><br><br>  App running at:<br>  - Local:   http:<span class="hljs-comment">//localhost:8000 (copied to clipboard)</span><br>  - Network: http:<span class="hljs-comment">//192.168.43.198:8000</span><br> WAIT  Compiling...                                                                                                                               下午<span class="hljs-number">9</span>:<span class="hljs-number">00</span>:<span class="hljs-number">37</span><br><br>√ Webpack<br>  Compiled successfully <span class="hljs-keyword">in</span> <span class="hljs-number">252.</span>95ms<br><br> DONE  Compiled successfully <span class="hljs-keyword">in</span> 253ms<br></code></pre></div></td></tr></table></figure><p>打开浏览器结果成功了<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620306125136-3308a634-5ac9-4ddb-aa45-58e65e8319d6.png#clientId=u6cfb84fd-a9b2-4&from=paste&height=515&id=u6091b497&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1030&originWidth=1920&originalType=binary&size=72547&status=done&style=none&taskId=u6a22e13d-26c9-4c6f-bc19-1310cbbdd2a&width=960" alt="浏览器运行成功.png"></p><p>点击右下角悬浮球，就出现了控制台<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620306502779-d8e2c5ba-5ab5-4f3b-b5a6-b927bad01c3a.png#clientId=u6cfb84fd-a9b2-4&from=paste&height=509&id=u4044a1d4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=684&originWidth=1009&originalType=binary&size=55596&status=done&style=none&taskId=ub258df9a-0821-4105-b907-72122d217fe&width=750.4921875" alt="打开umi-ui控制台.png"></p><p>umi-uiDome <a href="https://github.com/13982720426/umi-ui.git">https://github.com/13982720426/umi-ui.git</a></p><h2 id="第六坑："><a href="#第六坑：" class="headerlink" title="第六坑："></a>第六坑：</h2><h3 id="antd-pro-结合-uimjs-使用，安装工作台模板时报错"><a href="#antd-pro-结合-uimjs-使用，安装工作台模板时报错" class="headerlink" title="antd pro 结合 uimjs 使用，安装工作台模板时报错"></a>antd pro 结合 uimjs 使用，安装工作台模板时报错</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620554810078-4732a126-1597-4c36-a85b-e3d73e289c1e.png#clientId=ue197a22d-e4ed-4&from=paste&height=795&id=u0f63c27e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=795&originWidth=1041&originalType=binary&size=157913&status=done&style=none&taskId=u2f8c00ab-9f8d-4a0f-8c2c-2beddbe4466&width=1041" alt="image.png"><br>终端显示<code>Execute task error Error: Error: Command failed: npm install -d bizcharts@^3.5.3-beta.0 prop-types@^15.5.10 --registry=[https://registry.npm.taobao.org](https://registry.npm.taobao.org) --save</code><br>安装失败</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Bundle <span class="hljs-keyword">with</span> webpack <span class="hljs-number">5.</span>..<br>Execute task error <span class="hljs-built_in">Error</span>: <span class="hljs-built_in">Error</span>: Command failed: npm install -d bizcharts@^<span class="hljs-number">3.5</span><span class="hljs-number">.3</span>-beta<span class="hljs-number">.0</span> prop-types@^<span class="hljs-number">15.5</span><span class="hljs-number">.10</span> --registry=https:<span class="hljs-comment">//registry.npm.taobao.org --save</span><br><span class="hljs-literal">undefined</span><br><span class="hljs-literal">undefined</span><br></code></pre></div></td></tr></table></figure><h3 id="解决：在终端使用-cnpm-手动安装"><a href="#解决：在终端使用-cnpm-手动安装" class="headerlink" title="解决：在终端使用 cnpm 手动安装"></a>解决：在终端使用 cnpm 手动安装</h3><p><code>cnpm install -d bizcharts@^3.5.3-beta.0 prop-types@^15.5.10 --registry=[https://registry.npm.taobao.org](https://registry.npm.taobao.org) --save</code><br>安装成功</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>/<span class="hljs-number">2</span>] prop-types@^<span class="hljs-number">15.5</span><span class="hljs-number">.10</span> installed at node_modules\_prop-types@<span class="hljs-number">15.7</span><span class="hljs-number">.2</span>@prop-types<br>[<span class="hljs-number">2</span>/<span class="hljs-number">2</span>] bizcharts@^<span class="hljs-number">3.5</span><span class="hljs-number">.3</span>-beta<span class="hljs-number">.0</span> installed at node_modules\_bizcharts@<span class="hljs-number">3.5</span><span class="hljs-number">.9</span>@bizcharts<br>Recently updated (since <span class="hljs-number">2021</span>-<span class="hljs-number">05</span>-<span class="hljs-number">02</span>): <span class="hljs-number">9</span> packages (detail see file E:\前端自学\react1\融职商场后台管理\antd_pro_simple\node_modules\.recently_updates.txt)<br>  Today:<br>    → bizcharts@<span class="hljs-number">3.5</span><span class="hljs-number">.9</span> › @antv/g2@<span class="hljs-number">3.5</span><span class="hljs-number">.15</span> › venn.js@<span class="hljs-number">0.2</span><span class="hljs-number">.20</span> › fmin@<span class="hljs-number">0.0</span><span class="hljs-number">.2</span> › tape@<span class="hljs-number">4.13</span><span class="hljs-number">.3</span> › string.prototype.trim@<span class="hljs-number">1.2</span><span class="hljs-number">.4</span> › es-abstract@<span class="hljs-number">1.18</span><span class="hljs-number">.0</span> › es-to-primitive@<span class="hljs-number">1.2</span><span class="hljs-number">.1</span> › is-symbol@^<span class="hljs-number">1.0</span><span class="hljs-number">.2</span>(<span class="hljs-number">1.0</span><span class="hljs-number">.4</span>) (<span class="hljs-number">03</span>:<span class="hljs-number">12</span>:<span class="hljs-number">11</span>)<br>All packages installed (<span class="hljs-number">117</span> packages installed <span class="hljs-keyword">from</span> npm registry, used 8s(network 8s), speed <span class="hljs-number">816.</span>88kB/s, json <span class="hljs-number">113</span>(<span class="hljs-number">383.</span>88kB), tarball <span class="hljs-number">5.</span>97MB)<br></code></pre></div></td></tr></table></figure><h2 id="第七坑："><a href="#第七坑：" class="headerlink" title="第七坑："></a>第七坑：</h2><h3 id="在-mock-文件夹中，无法直接打印数据在浏览器上显示"><a href="#在-mock-文件夹中，无法直接打印数据在浏览器上显示" class="headerlink" title="在 mock 文件夹中，无法直接打印数据在浏览器上显示"></a>在 mock 文件夹中，无法直接打印数据在浏览器上显示</h3><p>官方文档解释很少，在<code>express</code>第四版上查看<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620666389853-f734fd75-4f0e-494c-9220-68989d491061.png#clientId=u2ebfdb81-5df4-4&from=paste&height=462&id=ue6d064e4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=462&originWidth=607&originalType=binary&size=37678&status=done&style=none&taskId=u1f60bb4f-ed44-4499-9558-3eee42d51fc&width=607" alt="image.png"><br>mock 类似后端，无法直接在浏览器中 consloe.log(req)打印出数据</p><h3 id="解决：查看express官网，进去-v4-版本-Request-目录"><a href="#解决：查看express官网，进去-v4-版本-Request-目录" class="headerlink" title="解决：查看express官网，进去 v4 版本 Request 目录"></a>解决：查看<a href="https://www.expressjs.com.cn/4x/api.html">express</a>官网，进去 v4 版本 Request 目录</h3><p>在 Request 目录下按住 ctrl+f 搜索 app.post<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620667002424-8dc60de2-b10d-4e74-be83-dd4266c657be.png#clientId=u2ebfdb81-5df4-4&from=paste&height=521&id=ue76268fb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=521&originWidth=1236&originalType=binary&size=129622&status=done&style=none&taskId=u9b56d5b2-1a25-46bc-8d3d-050726a6cfe&width=1236" alt="image.png"><br>得知在<code>req.body</code>可以获取到 mock 中的数据，并能通过<code>console.log(req.body)</code>打印到浏览器上</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-keyword">var</span> app = express()<br><br>app.use(express.json()) <span class="hljs-comment">// for parsing application/json</span><br>app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;)) <span class="hljs-comment">// for parsing application/x-www-form-urlencoded</span><br><br>app.post(<span class="hljs-string">&#x27;/profile&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(req.body)<br>  res.json(req.body)<br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UI</category>
      
      <category>Umi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UmiJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React-Hooks</title>
    <link href="/2021/04/26/React-Hooks/"/>
    <url>/2021/04/26/React-Hooks/</url>
    
    <content type="html"><![CDATA[<p>在 React 的世界中，有容器组件和 UI 组件之分，在 React Hooks 出现之前，UI 组件我们可以使用函数，无状态组件来展示 UI，而对于容器组件，函数组件就显得无能为力，我们依赖于类组件来获取数据，处理数据，并向下传递参数给 UI 组件进行渲染。在我看来，使用 React Hooks 相比于从前的类组件有以下几点好处：</p><ol><li>代码可读性更强，原本同一块功能的代码逻辑被拆分在了不同的生命周期函数中，容易使开发者不利于维护和迭代，通过 React Hooks 可以将功能代码聚合，方便阅读维护</li><li>组件树层级变浅，在原本的代码中，我们经常使用 HOC/render props 等方式来复用组件的状态，增强功能等，无疑增加了组件树层数及渲染，而在 React Hooks 中，这些功能都可以通过强大的自定义的 Hooks 来实现</li></ol><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="第一步：安装-node-js"><a href="#第一步：安装-node-js" class="headerlink" title="第一步：安装 node.js"></a>第一步：安装 node.js</h3><p>官网下载安装<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><h3 id="第二步：安装-create-react-app-脚手架工具"><a href="#第二步：安装-create-react-app-脚手架工具" class="headerlink" title="第二步：安装 create-react-app 脚手架工具"></a>第二步：安装 create-react-app 脚手架工具</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">cnpm <span class="hljs-keyword">install</span> -g create-react-app<br></code></pre></div></td></tr></table></figure><h3 id="第三步：创建-react-项目"><a href="#第三步：创建-react-项目" class="headerlink" title="第三步：创建 react 项目"></a>第三步：创建 react 项目</h3><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">demo01</span><br></code></pre></div></td></tr></table></figure><p>在<code>npm start</code>启动项目时可能会出错</p><p>删除 node_modules 文件夹，在项目下的命令行输出入<code>cnpm install</code>重新安装依赖包</p><h3 id="第四步：精简代码"><a href="#第四步：精简代码" class="headerlink" title="第四步：精简代码"></a>第四步：精简代码</h3><p>vscode 打开项目，精简代码</p><p>demo01\src\Example.js 新建一个文件</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1619433406968-7ac16ccc-f4b6-46b3-85c0-18c6c370c43d.png#clientId=uc8289952-89bf-4&from=ui&id=uaf31030f&margin=%5Bobject%20Object%5D&name=image-20210206164703130.png&originHeight=356&originWidth=1237&originalType=binary&size=42622&status=done&style=none&taskId=u0dd03524-250c-4cfe-8d7d-f24c4a54ce6" alt="image-20210206164703130.png"></p><p>Example.js 中原来 react 写法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props)<br>    <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div&gt;<br>        &lt;p&gt; You clicked &#123;<span class="hljs-built_in">this</span>.state.count&#125; times&lt;/p&gt;<br>        &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.addCount.bind(<span class="hljs-built_in">this</span>)&#125;&gt;Click me&lt;/button&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">addCount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">count</span>: <span class="hljs-built_in">this</span>.state.count + <span class="hljs-number">1</span> &#125;)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>并在 inde.js 中调用<code>import Example from &#39;./Example&#39;</code>以及<code>&lt;Example&gt;</code></p><p>hooks 写法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//函数执行几次？ n+1次 因为useState执行时有缓存，不会将count重新设置成0，会继续累加</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数执行&#x27;</span>)<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt; You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;&gt;<br>        Click me<br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example<br></code></pre></div></td></tr></table></figure><p>useState 有两个参数<code>[count,setCount]</code>, count 就是元素的状态，setCount 是更新元素状态的方法，<br><code>const [count, setCount] = useState(0)</code>//是 ES6 解构赋值写法，useState(0)等于{ count: 0 }</p><p>Example()函数执行几次？ n+1 次 因为 React 底层做了处理，useState 执行时有缓存，将上一次执行的状态保存，不会将 count 重新设置成 0，会继续累加</p><p>hooks 是 react 新特性，react16.8 以上才可以用</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620837974413-7e5a0df2-d39d-4d56-984c-3a947b560d9b.png#clientId=u27aee433-b580-4&from=paste&height=626&id=u1d574cbd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=626&originWidth=597&originalType=binary&size=131735&status=done&style=none&taskId=u1b437a1a-bf49-4539-8716-517cd30fb86&width=597" alt="image.png"></p><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p>在 demo01\src\Example2.js 中，先写一个错误例子<code>useState</code>不能用在条件语句中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">let</span> showSex = <span class="hljs-literal">true</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [age, setAge] = useState(<span class="hljs-number">18</span>)<br>  <span class="hljs-keyword">if</span> (showSex) &#123;<br>    <span class="hljs-keyword">const</span> [sex, setSex] = useState(<span class="hljs-string">&#x27;男&#x27;</span>) <span class="hljs-comment">//useState不能用在条件语句中</span><br>    showSex = <span class="hljs-literal">false</span><br>  &#125;<br>  <span class="hljs-keyword">const</span> [work, setWork] = useState(<span class="hljs-string">&#x27;程序员&#x27;</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;JS今年：&#123;age&#125;&lt;/p&gt;<br>      &lt;p&gt;性别：&#123;sex&#125;&lt;/p&gt;<br>      &lt;p&gt;工作：&#123;work&#125;&lt;/p&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example2<br></code></pre></div></td></tr></table></figure><p>正确写法<strong>就是 React Hooks 不能出现在条件判断语句中，因为它必须有完全一样的渲染顺序</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [age, setAge] = useState(<span class="hljs-number">18</span>)<br>  <span class="hljs-keyword">const</span> [sex, setSex] = useState(<span class="hljs-string">&#x27;男&#x27;</span>)<br>  <span class="hljs-keyword">const</span> [work, setWork] = useState(<span class="hljs-string">&#x27;程序员&#x27;</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;JS今年：&#123;age&#125;&lt;/p&gt;<br>      &lt;p&gt;性别：&#123;sex&#125;&lt;/p&gt;<br>      &lt;p&gt;工作：&#123;work&#125;&lt;/p&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example2<br></code></pre></div></td></tr></table></figure><h2 id="useEffect-代替常用生命周期函数"><a href="#useEffect-代替常用生命周期函数" class="headerlink" title="useEffect 代替常用生命周期函数"></a>useEffect 代替常用生命周期函数</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620838071339-fdcbd33f-d03d-4af1-acea-6e8ea66c6b7a.png#clientId=u27aee433-b580-4&from=paste&height=520&id=u264d2652&margin=%5Bobject%20Object%5D&name=image.png&originHeight=520&originWidth=521&originalType=binary&size=119902&status=done&style=none&taskId=u2a1d051c-d6f3-44c5-b983-3081a6b5ddf&width=521" alt="image.png"><br>useEffect 是异步</p><h3 id="原始的方式"><a href="#原始的方式" class="headerlink" title="原始的方式"></a>原始的方式</h3><p>先用原始的方式把计数器的 Demo 增加两个生命周期函数<code>componentDidMount</code>和<code>componentDidUpdate</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props)<br>    <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`componentDidMount=&gt;You clicked <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.state.count&#125;</span> times`</span>)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">componentDidUpdate</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`componentDidUpdate=&gt;You clicked <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.state.count&#125;</span> times`</span>)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div&gt;<br>        &lt;p&gt; You clicked &#123;<span class="hljs-built_in">this</span>.state.count&#125; times&lt;/p&gt;<br>        &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.addCount.bind(<span class="hljs-built_in">this</span>)&#125;&gt;Click me&lt;/button&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">addCount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">count</span>: <span class="hljs-built_in">this</span>.state.count + <span class="hljs-number">1</span> &#125;)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="useEffect-实现-componentDidUpdate-生命周期函数"><a href="#useEffect-实现-componentDidUpdate-生命周期函数" class="headerlink" title="useEffect 实现 componentDidUpdate 生命周期函数"></a>useEffect 实现 componentDidUpdate 生命周期函数</h3><p><code>useEffect</code>不传参数时，监听所有的状态，类似<code>componentDidUpdate</code>，只要页面的 state 或者 model 中的 state 中定义的变量值发生改变,这个方法就会执行</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;componentDidUpdate&#x27;</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="useEffect-实现-componentDidMonut-生命周期函数"><a href="#useEffect-实现-componentDidMonut-生命周期函数" class="headerlink" title="useEffect 实现 componentDidMonut 生命周期函数"></a>useEffect 实现 componentDidMonut 生命周期函数</h3><p><code>useEffect</code>传第二个参数时[ ]，第二个参数是要监听哪些状态的改变，类似<code>componentDidMonut</code>，组件挂在完成后执行</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;componentDidMonut&#x27;</span>)<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><h3 id="使用React-Hooks的情况下"><a href="#使用React-Hooks的情况下" class="headerlink" title="使用React Hooks的情况下"></a>使用<code>React Hooks</code>的情况下</h3><p>我们可以使用下面的代码来完成上边代码的生命周期效果，代码如下（修改了以前的 diamond）： 记得要先引入<code>useEffect</code>后，才可以正常使用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br>  <span class="hljs-comment">//---关键代码---------start-------</span><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`useEffect=&gt;You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>)<br>  &#125;)<br>  <span class="hljs-comment">//useEffect不传参数时，类似componentDidUpdate，useEffect传第二个参数时，类似componentDidMonut</span><br>  <span class="hljs-comment">//      useEffect(()=&gt;&#123;</span><br>  <span class="hljs-comment">//       console.log(`useEffect=&gt;You clicked $&#123;count&#125; times`)</span><br>  <span class="hljs-comment">//   &#125;,[])</span><br><br>  <span class="hljs-comment">//---关键代码---------end-------</span><br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;&gt;<br>        click me<br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example<br></code></pre></div></td></tr></table></figure><h3 id="useEffect-两个注意点"><a href="#useEffect-两个注意点" class="headerlink" title="useEffect 两个注意点"></a>useEffect 两个注意点</h3><ol><li>React 首次渲染和之后的每次渲染都会调用一遍<code>useEffect</code>函数，而之前我们要用两个生命周期函数分别表示首次渲染(componentDidMonut)和更新导致的重新渲染(componentDidUpdate)。</li><li>useEffect 中定义的函数的执行不会阻碍浏览器更新视图，也就是说这些函数时异步执行的，而<code>componentDidMonut</code>和<code>componentDidUpdate</code>中的代码都是同步执行的。个人认为这个有好处也有坏处吧，比如我们要根据页面的大小，然后绘制当前弹出窗口的大小，如果时异步的就不好操作了。</li></ol><h3 id="useEffect-实现-componentWillUnmount-生命周期函数"><a href="#useEffect-实现-componentWillUnmount-生命周期函数" class="headerlink" title="useEffect 实现 componentWillUnmount 生命周期函数"></a>useEffect 实现 componentWillUnmount 生命周期函数</h3><p>在 useEffect 函数里<code>return ( )=&gt;&#123; &#125;</code>再 return 一个函数，这个函数会在组件卸载之前执行类似<code>componentWillUnmount</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//返回的是一个函数，这个函数会在组件卸载之前执行类似componentWillUnmount</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;componentWillUnmount.....&#x27;</span>)<br>  &#125;<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><p>在写 React 应用的时候，在组件中经常用到<code>componentWillUnmount</code>生命周期函数（组件将要被卸载时执行）。比如我们的定时器要清空，避免发生内存泄漏;比如登录状态要取消掉，避免下次进入信息出错。定时器没有关闭等</p><h4 id="useEffect-关闭定时器"><a href="#useEffect-关闭定时器" class="headerlink" title="useEffect 关闭定时器"></a>useEffect 关闭定时器</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">React.useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    setCount(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count + <span class="hljs-number">1</span>)<br>  &#125;, <span class="hljs-number">1000</span>)<br>  <span class="hljs-comment">//返回的是一个函数，这个函数会在组件卸载之前执行</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">clearInterval</span>(timer)<br>  &#125;<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><h4 id="useEffect-解绑副作用"><a href="#useEffect-解绑副作用" class="headerlink" title="useEffect 解绑副作用"></a>useEffect 解绑副作用</h4><p>学习<code>React Hooks</code> 时，我们要改掉生命周期函数的概念（人往往有先入为主的毛病，所以很难改掉），因为<code>Hooks</code>叫它副作用，所以<code>componentWillUnmount</code>也可以理解成解绑副作用。这里为了演示用<code>useEffect</code>来实现类似<code>componentWillUnmount</code>效果，先安装<code>React-Router</code>路由,进入项目根本录，使用<code>npm</code>进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install --save react-router-dom<br></code></pre></div></td></tr></table></figure><p>然后打开<code>Example.js</code>文件，进行改写代码，先引入对应的<code>React-Router</code>组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; BrowserRouter <span class="hljs-keyword">as</span> Router, Route, Link &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br></code></pre></div></td></tr></table></figure><p>在文件中编写两个新组件，因为这两个组件都非常的简单，所以就不单独建立一个新的文件来写了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSPang.com<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">List</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>List-Page<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>有了这两个组件后，接下来可以编写路由配置，在以前的计数器代码中直接增加就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">return</span> (<br>  &lt;div&gt;<br>    &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>    &lt;button<br>      onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>        setCount(count + <span class="hljs-number">1</span>)<br>      &#125;&#125;&gt;<br>      click me<br>    &lt;/button&gt;<br><br>    &lt;Router&gt;<br>      &lt;ul&gt;<br>        &lt;li&gt;<br>          &#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>          &lt;Link to=<span class="hljs-string">&quot;/&quot;</span>&gt;首页&lt;/Link&gt;&#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>        &lt;/li&gt;<br>        &lt;li&gt;<br>          &lt;Link to=<span class="hljs-string">&quot;/list/&quot;</span>&gt;列表&lt;/Link&gt;&#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>        &lt;/li&gt;<br>      &lt;/ul&gt;<br>      &lt;Route path=<span class="hljs-string">&quot;/&quot;</span> exact component=&#123;Index&#125; /&gt;<br>      &lt;Route path=<span class="hljs-string">&quot;/list/&quot;</span> component=&#123;List&#125; /&gt;<br>    &lt;/Router&gt;<br>  &lt;/div&gt;<br>)<br></code></pre></div></td></tr></table></figure><p>然后到浏览器中查看一下，看看组件和路由是否可用。如果可用，我们现在可以调整<code>useEffect</code>了。在两个新组件中分别加入<code>useEffect()</code>函数:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;useEffect=&gt;老弟，你来了！Index页面&#x27;</span>)<br>        )<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSPang.com<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">List</span>(<span class="hljs-params"></span>) </span>&#123;<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;useEffect=&gt;老弟，你来了！List页面&#x27;</span>)<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>List-Page<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时候我们点击<code>Link</code>进入任何一个组件，在浏览器中都会打印出对应的一段话。这时候可以用<strong>返回一个函数的形式进行解绑</strong>，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;useEffect=&gt;老弟你来了！Index页面&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;老弟，你走了!Index页面&#x27;</span>)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSPang.com<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时候你在浏览器中预览，我们仿佛实现了<code>componentWillUnmount</code>方法。但这只是好像实现了，当点击计数器按钮时，你会发现<code>老弟，你走了!Index页面</code>，也出现了。这到底是怎么回事那？其实每次状态发生变化，<code>useEffect</code>都进行了解绑。</p><h4 id="useEffect-的第二个参数"><a href="#useEffect-的第二个参数" class="headerlink" title="useEffect 的第二个参数"></a>useEffect 的第二个参数</h4><p>那到底要如何实现类似<code>componentWillUnmount</code>的效果那?这就需要请出<code>useEffect</code>的第二个参数，它是一个数组，数组中可以写入很多状态对应的变量，意思是当状态值发生变化时，我们才进行解绑。但是当传空数组<code>[]</code>时，就是当组件将被销毁时才进行解绑，这也就实现了<code>componentWillUnmount</code>的生命周期函数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;useEffect=&gt;老弟你来了！Index页面&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;老弟，你走了!Index页面&#x27;</span>)<br>    &#125;<br>  &#125;, [])<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSPang.com<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>为了更加深入了解第二个参数的作用，把计数器的代码也加上<code>useEffect</code>和解绑方法，并加入第二个参数为空数组。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`useEffect=&gt;You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;====================&#x27;</span>)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;&gt;<br>        click me<br>      &lt;/button&gt;<br><br>      &lt;Router&gt;<br>        &lt;ul&gt;<br>          &lt;li&gt;<br>            &#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>            &lt;Link to=<span class="hljs-string">&quot;/&quot;</span>&gt;首页&lt;/Link&gt;&#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>          &lt;/li&gt;<br>          &lt;li&gt;<br>            &lt;Link to=<span class="hljs-string">&quot;/list/&quot;</span>&gt;列表&lt;/Link&gt;&#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>          &lt;/li&gt;<br>        &lt;/ul&gt;<br>        &lt;Route path=<span class="hljs-string">&quot;/&quot;</span> exact component=&#123;Index&#125; /&gt;<br>        &lt;Route path=<span class="hljs-string">&quot;/list/&quot;</span> component=&#123;List&#125; /&gt;<br>      &lt;/Router&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时候的代码是不能执行解绑副作用函数的。但是如果我们想每次<code>count</code>发生变化，我们都进行解绑，只需要在第二个参数的数组里加入<code>count</code>变量就可以了。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`useEffect=&gt;You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;====================&#x27;</span>)<br>    &#125;<br>  &#125;, [count])<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;&gt;<br>        click me<br>      &lt;/button&gt;<br><br>      &lt;Router&gt;<br>        &lt;ul&gt;<br>          &lt;li&gt;<br>            &#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>            &lt;Link to=<span class="hljs-string">&quot;/&quot;</span>&gt;首页&lt;/Link&gt;&#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>          &lt;/li&gt;<br>          &lt;li&gt;<br>            &lt;Link to=<span class="hljs-string">&quot;/list/&quot;</span>&gt;列表&lt;/Link&gt;&#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>          &lt;/li&gt;<br>        &lt;/ul&gt;<br>        &lt;Route path=<span class="hljs-string">&quot;/&quot;</span> exact component=&#123;Index&#125; /&gt;<br>        &lt;Route path=<span class="hljs-string">&quot;/list/&quot;</span> component=&#123;List&#125; /&gt;<br>      &lt;/Router&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时候只要<code>count</code>状态发生变化，都会执行解绑副作用函数，浏览器的控制台也就打印出了一串<code>=================</code>。</p><h2 id="useContext-让父子组件传值更简单"><a href="#useContext-让父子组件传值更简单" class="headerlink" title="useContext 让父子组件传值更简单"></a>useContext 让父子组件传值更简单</h2><p>有了<code>useState</code>和<code>useEffect</code>已经可以实现大部分的业务逻辑了，但是<code>React Hooks</code>中还是有很多好用的<code>Hooks</code>函数的，比如<code>useContext</code>和<code>useReducer</code>。</p><p>在用类声明组件时，父子组件的传值是通过组件属性和<code>props</code>进行的，那现在使用方法(Function)来声明组件，已经没有了<code>constructor</code>构造函数也就没有了 props 的接收，那父子组件的传值就成了一个问题。<code>React Hooks</code> 为我们准备了<code>useContext</code>。这节课就学习一下<code>useContext</code>，它可以帮助我们跨越组件层级直接传递变量，实现共享。需要注意的是<code>useContext</code>和<code>redux</code>的作用是不同的，一个解决的是组件之间值传递的问题，一个是应用中统一管理状态的问题，但通过和<code>useReducer</code>的配合使用，可以实现类似<code>Redux</code>的作用。</p><p>这就好比玩游戏时有很多英雄，英雄的最总目的都是赢得比赛，但是作用不同，有负责输出的，有负责抗伤害的，有负责治疗的。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620885452357-4883a907-5a9b-4e79-ac57-f7f5d72478d7.png#clientId=u27aee433-b580-4&from=paste&height=723&id=u1cfe21a1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=723&originWidth=848&originalType=binary&size=153410&status=done&style=none&taskId=u60181efe-1980-41ac-9f3d-79ce2166371&width=848" alt="image.png"></p><blockquote><p><code>Context</code>的作用就是对它所包含的组件树提供全局共享数据的一种技术。</p></blockquote><h3 id="createContext-函数创建-context"><a href="#createContext-函数创建-context" class="headerlink" title="createContext 函数创建 context"></a>createContext 函数创建 context</h3><p>直接在<code>src</code>目录下新建一个文件<code>Example4.js</code>,然后拷贝<code>Example.js</code>里的代码，并进行修改，删除路由部分和副作用的代码，只留计数器的核心代码就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example4</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;&gt;<br>        click me<br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example4<br></code></pre></div></td></tr></table></figure><p>然后修改一下<code>index.js</code>让它渲染这个<code>Example4.js</code>组件，修改的代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">import</span> Example <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Example4&#x27;</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Example</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></div></td></tr></table></figure><p>之后在<code>Example4.js</code>中引入<code>createContext</code>函数，并使用得到一个组件，然后在<code>return</code>方法中进行使用。先看代码，然后我再解释。<br>创建<code>Context</code>容器对象要在祖组件和后代组件都能调用的地方<br><code>const CountContext = createContext()//CountContext首字母大写，因为是组件</code><br>在祖组件中使用<code>&lt;CountContext.Provider value=&#123;count&#125;&gt; &lt;/CountContext.Provider&gt;</code>，将<code>count</code>传递给后代组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">//===关键代码</span><br><span class="hljs-keyword">const</span> CountContext = createContext() <span class="hljs-comment">//CountContext首字母大写，因为是组件</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example4</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;&gt;<br>        click me<br>      &lt;/button&gt;<br>      &#123;<span class="hljs-comment">/*======关键代码 */</span>&#125;<br>      &lt;CountContext.Provider value=&#123;count&#125;&gt;&lt;/CountContext.Provider&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example4<br></code></pre></div></td></tr></table></figure><p>这段代码就相当于把<code>count</code>变量允许跨层级实现传递和使用了（也就是实现了上下文），当父组件的<code>count</code>变量发生变化时，子组件也会发生变化。接下来我们就看看一个<code>React Hooks</code>的组件如何接收到这个变量。</p><h3 id="useContext-接收上下文变量"><a href="#useContext-接收上下文变量" class="headerlink" title="useContext 接收上下文变量"></a>useContext 接收上下文变量</h3><p>已经有了上下文变量，剩下的就时如何接收了，接收这个直接使用 useContext 就可以，但是在使用前需要新进行引入<code>useContext</code>（不引入是没办法使用的）。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, createContext, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br></code></pre></div></td></tr></table></figure><p>引入后写一个<code>Counter</code>组件，只是显示上下文中的<code>count</code>变量代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> count = useContext(CountContext) <span class="hljs-comment">//一句话就可以得到count</span><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>得到后就可以显示出来了，但是要记得在<code>&lt;CountContext.Provider&gt;</code>的闭合标签中,代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;CountContext.Provider value=&#123;count&#125;&gt;<br>  &lt;Counter /&gt;<br>&lt;/CountContext.Provider&gt;<br></code></pre></div></td></tr></table></figure><p>其实<code>useContext</code>的用法比以前时简单很多，既然简单，就没必要讲解的那么难，希望小伙伴这节课都能 get 到知识点，完善自己的知识体系。</p><h2 id="useReducer-介绍和简单使用"><a href="#useReducer-介绍和简单使用" class="headerlink" title="useReducer 介绍和简单使用"></a>useReducer 介绍和简单使用</h2><p>上节课学习了<code>useContext</code>函数，那这节课开始学习一下<code>useReducer</code>，因为他们两个很像，并且合作可以完成类似的 Redux 库的操作。在开发中使用<code>useReducer</code>可以让代码具有更好的可读性和可维护性，并且会给测试提供方便。那我们彻底的学习一下<code>useReducer</code>。这节课我们只是简单的学习一下<code>useReducer</code>语法和使用方法，尽量避免<code>Redux</code>的一些操作。这样讲更容易让不了解<code>Redux</code>的小伙伴接受。</p><h3 id="reducer-到底是什么？"><a href="#reducer-到底是什么？" class="headerlink" title="reducer 到底是什么？"></a>reducer 到底是什么？</h3><p>为了更好的理解<code>useReducer</code>，所以先要了解 JavaScript 里的<code>Redcuer</code>是什么。它的兴起是从<code>Redux</code>广泛使用开始的，但不仅仅存在<code>Redux</code>中，可以使用 JavaScript 来完成<code>Reducer</code>操作。那<code>reducer</code>其实就是一个函数，这个函数接收两个参数，一个是状态，一个用来控制业务逻辑的判断参数。我们举一个最简单的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countReducer</span>(<span class="hljs-params">state, action</span>) </span>&#123;<br>  <span class="hljs-keyword">switch</span> (action.type) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;add&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sub&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面的代码就是 Reducer，你主要理解的就是这种形式和两个参数的作用，一个参数是状态，一个参数是如何控制状态。</p><h3 id="useReducer-的使用"><a href="#useReducer-的使用" class="headerlink" title="useReducer 的使用"></a>useReducer 的使用</h3><p>了解 reducer 的含义后，就可以讲 useReducer 了，它也是 React hooks 提供的函数，可以增强我们的<code>Reducer</code>，实现类似 Redux 的功能。我们新建一个<code>Example5.js</code>的文件，然后用 useReducer 实现计数器的加减双向操作。（此部分代码的介绍可以看视频来学习）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ReducerDemo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, dispatch] = useReducer(<span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">switch</span> (action) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;add&#x27;</span>:<br>        <span class="hljs-keyword">return</span> state + <span class="hljs-number">1</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sub&#x27;</span>:<br>        <span class="hljs-keyword">return</span> state - <span class="hljs-number">1</span><br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">return</span> state<br>    &#125;<br>  &#125;, <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;h2&gt;现在的分数是&#123;count&#125;&lt;/h2&gt;<br>      &lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> dispatch(<span class="hljs-string">&#x27;add&#x27;</span>)&#125;&gt;Increment&lt;/button&gt;<br>      &lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> dispatch(<span class="hljs-string">&#x27;sub&#x27;</span>)&#125;&gt;Decrement&lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ReducerDemo<br></code></pre></div></td></tr></table></figure><p>这段代码是 useReducer 的最简单实现了，这时候可以在浏览器中实现了计数器的增加减少。</p><p>修改<code>index.js</code>文件，让<code>ReducerDemo</code>组件起作用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">import</span> Example <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Example5&#x27;</span><br><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Example</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></div></td></tr></table></figure><p>这节课就先到这里，小伙伴们一定对<code>useReducer</code>有所了解啦，那下节课我们在来用一个具体的例子，实现类似<code>Redux</code>的用法。</p><h3 id="useReducer-代替-Redux-小案例-1"><a href="#useReducer-代替-Redux-小案例-1" class="headerlink" title="useReducer 代替 Redux 小案例-1"></a>useReducer 代替 Redux 小案例-1</h3><p>使用<code>useContext</code>和<code>useReducer</code>是可以实现类似<code>Redux</code>的效果，并且一些简单的个人项目，完全可以用下面的方案代替 Redux，这种做法要比 Redux 简单一些。因为<code>useContext</code>和<code>useReducer</code>在前两节课已经学习过了，所以我们这节课把精力就放在如何模拟出<code>Redux</code>的效果。如果你目前还不能掌握基本的语法，可以再复习一下前两节的知识点。</p><blockquote><p>本节课程参考了掘金上缪宇的文章 ，文章地址:<a href="https://juejin.im/post/5ceb37c851882520724c7504">https://juejin.im/post/5ceb37c851882520724c7504</a></p></blockquote><h4 id="理论上的可行性"><a href="#理论上的可行性" class="headerlink" title="理论上的可行性"></a>理论上的可行性</h4><p>我们先从理论层面看看替代<code>Redux</code>的可能性，其实如果你对两个函数有所了解，只要我们巧妙的结合，这种替代方案是完全可行的。</p><p><code>useContext</code>：可访问全局状态，避免一层层的传递状态。这符合<code>Redux</code>其中的一项规则，就是状态全局化，并能统一管理。</p><p><code>useReducer</code>：通过 action 的传递，更新复杂逻辑的状态，主要是可以实现类似<code>Redux</code>中的<code>Reducer</code>部分，实现业务逻辑的可行性。</p><p>经过我们在理论上的分析是完全可行的，接下来我们就用一个简单实例来看一下具体的实现方法。那这节课先实现<code>useContext</code>部分（也就是状态共享），下节再继续讲解<code>useReducer</code>部分（控制业务逻辑）。</p><h4 id="编写基本-UI-组件"><a href="#编写基本-UI-组件" class="headerlink" title="编写基本 UI 组件"></a>编写基本 UI 组件</h4><p>既然是一个实例，就需要有些界面的东西，小伙伴们不要觉的烦。在<code>/src</code>目录下新建一个文件夹<code>Example6</code>，有了文件夹后，在文件夹下面建立一个<code>showArea.js</code>文件。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ShowArea</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color:</span> &#x27;<span class="hljs-attr">blue</span>&#x27; &#125;&#125;&gt;</span>字体颜色为blue<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ShowArea<br></code></pre></div></td></tr></table></figure><p>显示区域写完后，新建一个<code>Buttons.js</code>文件，用来编写按钮，这个是两个按钮，一个红色一个黄色。先不写其他任何业务逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Buttons</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;button&gt;红色&lt;/button&gt;<br>      &lt;button&gt;黄色&lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Buttons<br></code></pre></div></td></tr></table></figure><p>然后再编写一个组合他们的<code>Example6.js</code>组件，引入两个新编写的组件<code>ShowArea</code>和<code>Buttons</code>，并用<code>&lt;div&gt;</code>标签给包裹起来。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ShowArea <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ShowArea&#x27;</span><br><span class="hljs-keyword">import</span> Buttons <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Buttons&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example6</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;ShowArea /&gt;<br>      &lt;Buttons /&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example6<br></code></pre></div></td></tr></table></figure><p>这步做完，需要到<code>/src</code>目录下的<code>index.js</code>中引入一下<code>Example6.js</code>文件，引入后 React 才能正确渲染出刚写的 UI 组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">import</span> Example <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Example6/Example6&#x27;</span><br><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Example</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></div></td></tr></table></figure><p>做完这步可以简单的预览一下 UI 效果，虽然很丑，但是只要能满足学习需求就可以了。我们虽然都是前端，但是在学习时没必要追求漂亮的页面，关键时把知识点弄明白。我们写这么多文件，也就是要为接下来的知识点服务，其实这些组件都是陪衬罢了。</p><h4 id="编写颜色共享组件color-js"><a href="#编写颜色共享组件color-js" class="headerlink" title="编写颜色共享组件color.js"></a>编写颜色共享组件<code>color.js</code></h4><p>有了 UI 组件后，就可以写一些业务逻辑了，这节课我们先实现状态共享，这个就是利用<code>useContext</code>。建立一个<code>color.js</code>文件，然后写入下面的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ColorContext = createContext(&#123;&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> Color = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ColorContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color:</span> &#x27;<span class="hljs-attr">blue</span>&#x27; &#125;&#125;&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ColorContext.Provider</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码中引入了<code>createContext</code>用来创建共享上下文<code>ColorContext</code>组件，然后我们要用<code>&#123;props.children&#125;</code>来显示对应的子组件。详细解释我在视频中讲解吧。</p><p>有了这个组件后，我们就可以把<code>Example6.js</code>进行改写，让她可以共享状态。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ShowArea <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ShowArea&#x27;</span><br><span class="hljs-keyword">import</span> Buttons <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Buttons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Color &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./color&#x27;</span> <span class="hljs-comment">//引入Color组件</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example6</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;Color&gt;<br>        &lt;ShowArea /&gt;<br>        &lt;Buttons /&gt;<br>      &lt;/Color&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example6<br></code></pre></div></td></tr></table></figure><p>然后再改写<code>showArea.js</code>文件，我们会引入<code>useContext</code>和在<code>color.js</code>中声明的<code>ColorContext</code>，让组件可以接收全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ColorContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./color&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ShowArea</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123; color &#125; = useContext(ColorContext)<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color:</span> <span class="hljs-attr">color</span> &#125;&#125;&gt;</span>字体颜色为&#123;color&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ShowArea<br></code></pre></div></td></tr></table></figure><p>这时候就通过<code>useContext</code>实现了状态的共享，可以到浏览器中看一下效果。然后我们下节课再实现复杂逻辑状态的变化。</p><h3 id="useReducer-代替-Redux-小案例-2"><a href="#useReducer-代替-Redux-小案例-2" class="headerlink" title="useReducer 代替 Redux 小案例-2"></a>useReducer 代替 Redux 小案例-2</h3><h4 id="在-color-js-中添加-Reducer"><a href="#在-color-js-中添加-Reducer" class="headerlink" title="在 color.js 中添加 Reducer"></a>在 color.js 中添加 Reducer</h4><p>颜色（state）管理的代码我们都放在了<code>color.js</code>中，所以在文件里添加一个 reducer，用于处理颜色更新的逻辑。先声明一个 reducer 的函数，它就是 JavaScript 中的普通函数，在讲<code>useReducer</code>的时候已经详细讲过了。有了 reducer 后，在 Color 组件里使用<code>useReducer</code>,这样 Color 组件就有了那个共享状态和处理业务逻辑的能力，跟以前使用的<code>Redux</code>几乎一样了。之后修改一下共享状态。我们来看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; createContext, useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ColorContext = createContext(&#123;&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> UPDATE_COLOR = <span class="hljs-string">&#x27;UPDATE_COLOR&#x27;</span><br><br><span class="hljs-keyword">const</span> reducer = <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">switch</span> (action.type) &#123;<br>    <span class="hljs-keyword">case</span> UPDATE_COLOR:<br>      <span class="hljs-keyword">return</span> action.color<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> Color = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [color, dispatch] = useReducer(reducer, <span class="hljs-string">&#x27;blue&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ColorContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color</span>, <span class="hljs-attr">dispatch</span> &#125;&#125;&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ColorContext.Provider</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意，这时候我们共享出去的状态变成了 color 和 dispatch,如果不共享出去 dispatch，你是没办法完成按钮的相应事件的。</p><h4 id="通过-dispatch-修改状态"><a href="#通过-dispatch-修改状态" class="headerlink" title="通过 dispatch 修改状态"></a>通过 dispatch 修改状态</h4><p>目前程序已经有了处理共享状态的业务逻辑能力，接下来就可以在<code>buttons.js</code>使用<code>dispatch</code>来完成按钮的相应操作了。先引入<code>useContext</code>、<code>ColorContext</code>和<code>UPDATE_COLOR</code>，然后写<code>onClick</code>事件就可以了。代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ColorContext, UPDATE_COLOR &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./color&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Buttons</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123; dispatch &#125; = useContext(ColorContext)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          dispatch(&#123; <span class="hljs-attr">type</span>: UPDATE_COLOR, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span> &#125;)<br>        &#125;&#125;&gt;<br>        红色<br>      &lt;/button&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          dispatch(&#123; <span class="hljs-attr">type</span>: UPDATE_COLOR, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;yellow&#x27;</span> &#125;)<br>        &#125;&#125;&gt;<br>        黄色<br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Buttons<br></code></pre></div></td></tr></table></figure><p>这样代码就编写完成了，用<code>useContext</code>和<code>useReducer</code>实现了 Redux 的效果，这个代码编写过程比 Redux 要简单，但是也是有一定难度的。希望第一次接触的小伙伴能自己动手写 5 遍以上，把这种模式掌握好。</p><h2 id="useMemo-优化-React-Hooks-程序性能"><a href="#useMemo-优化-React-Hooks-程序性能" class="headerlink" title="useMemo 优化 React Hooks 程序性能"></a>useMemo 优化 React Hooks 程序性能</h2><p><code>useMemo</code>主要用来解决使用 React hooks 产生的无用渲染的性能问题。使用 function 的形式来声明组件，失去了<code>shouldCompnentUpdate</code>（在组件更新之前）这个生命周期，也就是说我们没有办法通过组件更新前条件来决定组件是否更新。而且在函数组件中，也不再区分<code>mount</code>和<code>update</code>两个状态，这意味着函数组件的每一次调用都会执行内部的所有逻辑，就带来了非常大的性能损耗。<code>useMemo</code>和<code>useCallback</code>都是解决上述性能问题的，这节课先学习<code>useMemo</code>.</p><h3 id="性能问题展示案例"><a href="#性能问题展示案例" class="headerlink" title="性能问题展示案例"></a>性能问题展示案例</h3><p>先编写一下刚才所说的性能问题，建立两个组件,一个父组件一个子组件，组件上由两个按钮，一个是小红，一个是志玲，点击哪个，那个就像我们走来了。在<code>/src</code>文件夹下，新建立一个<code>Example7</code>的文件夹，在文件夹下建立一个<code>Example7.js</code>文件.然后先写第一个父组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example7</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [xiaohong, setXiaohong] = useState(<span class="hljs-string">&#x27;小红待客状态&#x27;</span>)<br>  <span class="hljs-keyword">const</span> [zhiling, setZhiling] = useState(<span class="hljs-string">&#x27;志玲待客状态&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setXiaohong(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime())<br>        &#125;&#125;&gt;<br>        小红<br>      &lt;/button&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setZhiling(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() + <span class="hljs-string">&#x27;,志玲向我们走来了&#x27;</span>)<br>        &#125;&#125;&gt;<br>        志玲<br>      &lt;/button&gt;<br>      &lt;ChildComponent name=&#123;xiaohong&#125;&gt;&#123;zhiling&#125;&lt;/ChildComponent&gt;<br>    &lt;/&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>父组件调用了子组件，子组件我们输出两个姑娘的状态，显示在界面上。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChildComponent</span>(<span class="hljs-params">&#123; name, children &#125;</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeXiaohong</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;她来了，她来了。小红向我们走来了&#x27;</span>)<br>    <span class="hljs-keyword">return</span> name + <span class="hljs-string">&#x27;,小红向我们走来了&#x27;</span><br>  &#125;<br><br>  <span class="hljs-keyword">const</span> actionXiaohong = changeXiaohong(name)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &lt;div&gt;&#123;actionXiaohong&#125;&lt;/div&gt;<br>      &lt;div&gt;&#123;children&#125;&lt;/div&gt;<br>    &lt;/&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后再导出父组件，让<code>index.js</code>可以渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example7<br></code></pre></div></td></tr></table></figure><p>这时候你会发现在浏览器中点击<code>志玲</code>按钮，小红对应的方法都会执行，结果虽然没变，但是每次都执行，这就是性能的损耗。目前只有子组件，业务逻辑也非常简单，如果是一个后台查询，这将产生严重的后果。所以这个问题必须解决。当我们点击<code>志玲</code>按钮时，小红对应的<code>changeXiaohong</code>方法不能执行，只有在点击<code>小红</code>按钮时才能执行。</p><h3 id="useMemo-优化性能"><a href="#useMemo-优化性能" class="headerlink" title="useMemo 优化性能"></a>useMemo 优化性能</h3><p>其实只要使用<code>useMemo</code>，然后给她传递第二个参数，参数匹配成功，才会执行。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChildComponent</span>(<span class="hljs-params">&#123; name, children &#125;</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeXiaohong</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;她来了，她来了。小红向我们走来了&#x27;</span>)<br>    <span class="hljs-keyword">return</span> name + <span class="hljs-string">&#x27;,小红向我们走来了&#x27;</span><br>  &#125;<br><br>  <span class="hljs-keyword">const</span> actionXiaohong = useMemo(<span class="hljs-function">() =&gt;</span> changeXiaohong(name), [name])<br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &lt;div&gt;&#123;actionXiaohong&#125;&lt;/div&gt;<br>      &lt;div&gt;&#123;children&#125;&lt;/div&gt;<br>    &lt;/&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时在浏览器中点击一下<code>志玲</code>按钮，<code>changeXiaohong</code>就不再执行了。也节省了性能的消耗。案例只是让你更好理解，你还要从程序本身看到优化的作用。好的程序员对自己写的程序都是会进行不断优化的，这种没必要的性能浪费也是绝对不允许的，所以<code>useMemo</code>的使用在工作中还是比较多的。希望小伙伴们可以掌握。</p><h3 id="useRef-获取-DOM-元素和保存变量"><a href="#useRef-获取-DOM-元素和保存变量" class="headerlink" title="useRef 获取 DOM 元素和保存变量"></a>useRef 获取 DOM 元素和保存变量</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620868911084-e2962f91-eb6a-49df-b223-285f0dfb893e.png#clientId=u27aee433-b580-4&from=paste&height=235&id=u0e1c6e04&margin=%5Bobject%20Object%5D&name=image.png&originHeight=235&originWidth=445&originalType=binary&size=45666&status=done&style=none&taskId=u32ead6cc-3632-497c-893d-3d21a7eec32&width=445" alt="image.png"></p><p><code>useRef</code>在工作中虽然用的不多，但是也不能缺少。它有两个主要的作用:</p><ul><li>用<code>useRef</code>获取 React JSX 中的 DOM 元素，获取后你就可以控制 DOM 的任何东西了。但是一般不建议这样来作，React 界面的变化可以通过状态来控制。</li><li>用<code>useRef</code>来保存变量，这个在工作中也很少能用到，我们有了<code>useContext</code>这样的保存其实意义不大，但是这是学习，也要把这个特性讲一下。</li></ul><p>界面上有一个文本框，在文本框的旁边有一个按钮，当我们点击按钮时，在控制台打印出<code>input</code>的 DOM 元素，并进行复制到 DOM 中的 value 上。这一切都是通过<code>useRef</code>来实现。</p><p>在<code>/src</code>文件夹下新建一个<code>Example8.js</code>文件，然后先引入 useRef，编写业务逻辑代码如下:</p><p>当点击按钮时，你可以看到在浏览器中的控制台完整的打印出了 DOM 的所有东西，并且界面上的<code>&lt;input/&gt;</code>框的 value 值也输出了我们写好的<code>Hello ,JSPang</code>。这一切说明我们可以使用 useRef 获取 DOM 元素，并且可以通过 useRef 控制 DOM 的属性和值。</p><p>这个操作在实际开发中用的并不多，但我们还是要讲解一下。就是<code>useRef</code>可以保存 React 中的变量。我们这里就写一个文本框，文本框用来改变<code>text</code>状态。又用<code>useRef</code>把<code>text</code>状态进行保存，最后打印在控制台上。写这段代码你会觉的很绕，其实显示开发中没必要这样写，用一个 state 状态就可以搞定，这里只是为了展示知识点。</p><p>接着上面的代码来写，就没必要重新写一个文件了。先用<code>useState</code>声明了一个<code>text</code>状态和<code>setText</code>函数。然后编写界面，界面就是一个文本框。然后输入的时候不断变化。</p><p>这时想每次<code>text</code>发生状态改变，保存到一个变量中或者说是<code>useRef</code>中，这时候就可以使用<code>useRef</code>了。先声明一个<code>textRef</code>变量，他其实就是<code>useRef</code>函数。然后使用<code>useEffect</code>函数实现每次状态变化都进行变量修改，并打印。最后的全部代码如下。</p><p>这时候就可以实现每次状态修改，同时保存到<code>useRef</code>中了。也就是我们说的保存变量的功能。那<code>useRef</code>的主要功能就是获得 DOM 和变量保存，我们都已经讲过了。你的编码能力有增加了一些，让我们一起加油。</p><h3 id="useRef-获取-DOM-元素"><a href="#useRef-获取-DOM-元素" class="headerlink" title="useRef 获取 DOM 元素"></a>useRef 获取 DOM 元素</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example8</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> onButtonClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    inputEl.current.value = <span class="hljs-string">&#x27;Hello ,JSPang&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(inputEl) <span class="hljs-comment">//输出获取到的DOM节点</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &#123;<span class="hljs-comment">/*保存input的ref到inputEl */</span>&#125;<br>      &lt;input ref=&#123;inputEl&#125; type=<span class="hljs-string">&quot;text&quot;</span> /&gt;<br>      &lt;button onClick=&#123;onButtonClick&#125;&gt;在input上展示文字&lt;/button&gt;<br>    &lt;/&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example8<br></code></pre></div></td></tr></table></figure><h3 id="useRef-保存普通变量"><a href="#useRef-保存普通变量" class="headerlink" title="useRef 保存普通变量"></a>useRef 保存普通变量</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example8</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> onButtonClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    inputEl.current.value = <span class="hljs-string">&#x27;Hello ,useRef&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(inputEl)<br>  &#125;<br>  <span class="hljs-keyword">const</span> [text, setText] = useState(<span class="hljs-string">&#x27;jspang&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &#123;<span class="hljs-comment">/*保存input的ref到inputEl */</span>&#125;<br>      &lt;input ref=&#123;inputEl&#125; type=<span class="hljs-string">&quot;text&quot;</span> /&gt;<br>      &lt;button onClick=&#123;onButtonClick&#125;&gt;在input上展示文字&lt;/button&gt;<br>      &lt;br /&gt;<br>      &lt;br /&gt;<br>      &lt;input<br>        value=&#123;text&#125;<br>        onChange=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>          setText(e.target.value)<br>        &#125;&#125;<br>      /&gt;<br>    &lt;/&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example8<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example8</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> onButtonClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    inputEl.current.value = <span class="hljs-string">&#x27;Hello ,useRef&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(inputEl)<br>  &#125;<br>  <span class="hljs-comment">//-----------关键代码--------start</span><br>  <span class="hljs-keyword">const</span> [text, setText] = useState(<span class="hljs-string">&#x27;jspang&#x27;</span>)<br>  <span class="hljs-keyword">const</span> textRef = useRef()<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    textRef.current = text<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;textRef.current:&#x27;</span>, textRef.current)<br>  &#125;)<br>  <span class="hljs-comment">//----------关键代码--------------end</span><br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &#123;<span class="hljs-comment">/*保存input的ref到inputEl */</span>&#125;<br>      &lt;input ref=&#123;inputEl&#125; type=<span class="hljs-string">&quot;text&quot;</span> /&gt;<br>      &lt;button onClick=&#123;onButtonClick&#125;&gt;在input上展示文字&lt;/button&gt;<br>      &lt;br /&gt;<br>      &lt;br /&gt;<br>      &lt;input<br>        value=&#123;text&#125;<br>        onChange=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>          setText(e.target.value)<br>        &#125;&#125;<br>      /&gt;<br>    &lt;/&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example8<br></code></pre></div></td></tr></table></figure><h2 id="自定义-Hooks-函数获取窗口大小"><a href="#自定义-Hooks-函数获取窗口大小" class="headerlink" title="自定义 Hooks 函数获取窗口大小"></a>自定义 Hooks 函数获取窗口大小</h2><p>其实自定义 Hooks 函数和用 Hooks 创建组件很相似，跟我们平时用 JavaScript 写函数几乎一模一样，可能就是多了些<code>React Hooks</code>的特性，自定义 Hooks 函数偏向于功能，而组件偏向于界面和业务逻辑。由于差别不大，所以使用起来也是很随意的。如果是小型项目是可以的，但是如果项目足够复杂，这会让项目结构不够清晰。所以学习自定义 Hooks 函数还是很有必要的。</p><h3 id="编写自定义函数"><a href="#编写自定义函数" class="headerlink" title="编写自定义函数"></a>编写自定义函数</h3><p>在实际开发中，为了界面更加美观。获取浏览器窗口的尺寸是一个经常使用的功能，这样经常使用的功能，就可以封装成一个自定义<code>Hooks</code>函数，记住一定要用 use 开头，这样才能区分出什么是组件，什么是自定义函数。</p><p>新建一个文件<code>Example9.js</code>,然后编写一个 useWinSize,编写时我们会用到<code>useState</code>、<code>useEffect</code>和<code>useCallback</code>所以先用<code>import</code>进行引入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br></code></pre></div></td></tr></table></figure><p>然后编写函数，函数中先用 useState 设置<code>size</code>状态，然后编写一个每次修改状态的方法<code>onResize</code>，这个方法使用<code>useCallback</code>，目的是为了缓存方法(useMemo 是为了缓存变量)。 然后在第一次进入方法时用<code>useEffect</code>来注册<code>resize</code>监听时间。为了防止一直监听所以在方法移除时，使用 return 的方式移除监听。最后返回 size 变量就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useWinSize</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [size, setSize] = useState(&#123;<br>    width: <span class="hljs-built_in">document</span>.documentElement.clientWidth,<br>    height: <span class="hljs-built_in">document</span>.documentElement.clientHeight,<br>  &#125;)<br><br>  <span class="hljs-keyword">const</span> onResize = useCallback(<span class="hljs-function">() =&gt;</span> &#123;<br>    setSize(&#123;<br>      width: <span class="hljs-built_in">document</span>.documentElement.clientWidth,<br>      height: <span class="hljs-built_in">document</span>.documentElement.clientHeight,<br>    &#125;)<br>  &#125;, [])<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, onResize)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, onResize)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> size<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这就是一个自定义函数，其实和我们以前写的 JS 函数没什么区别，所以这里也不做太多的介绍。</p><h3 id="编写组件并使用自定义函数"><a href="#编写组件并使用自定义函数" class="headerlink" title="编写组件并使用自定义函数"></a>编写组件并使用自定义函数</h3><p>自定义<code>Hooks</code>函数已经写好了，可以直接进行使用，用法和<code>JavaScript</code>的普通函数用起来是一样的。直接在<code>Example9</code>组件使用<code>useWinSize</code>并把结果实时展示在页面上。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example9</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> size = useWinSize()<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      页面Size:&#123;size.width&#125;x&#123;size.height&#125;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example9<br></code></pre></div></td></tr></table></figure><p>之后就可以在浏览器中预览一下结果，可以看到当我们放大缩小浏览器窗口时，页面上的结果都会跟着进行变化。说明自定义的函数起到了作用。</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React-Hooks</tag>
      
      <tag>生命周期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React路由传参</title>
    <link href="/2021/04/26/React%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82/"/>
    <url>/2021/04/26/React%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82/</url>
    
    <content type="html"><![CDATA[<h1 id="react-路由传参-3-种方式"><a href="#react-路由传参-3-种方式" class="headerlink" title="react 路由传参(3 种方式)"></a>react 路由传参(3 种方式)</h1><h2 id="1-params-传参-刷新页面后参数不消失，参数会在地址栏显示"><a href="#1-params-传参-刷新页面后参数不消失，参数会在地址栏显示" class="headerlink" title="1.params 传参(刷新页面后参数不消失，参数会在地址栏显示)"></a>1.params 传参(刷新页面后参数不消失，参数会在地址栏显示)</h2><p>路由页面:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Route path=<span class="hljs-string">&quot;/link/:id&quot;</span> component=&#123;Demo&#125;&gt;&lt;<span class="hljs-regexp">/Route&gt; /</span><span class="hljs-regexp">/注意要配置/</span>:id路由跳转并传递参数。<br></code></pre></div></td></tr></table></figure><p>链接方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Link to=&#123;<span class="hljs-string">&#x27;/link/&#x27;</span>+<span class="hljs-string">&#x27;xxx&#x27;</span>&#125;&gt;首页&lt;/Link&gt;<br><span class="hljs-comment">//或</span><br>&lt;Link to=&#123;&#123;<span class="hljs-attr">pathname</span>:<span class="hljs-string">&#x27;/link/&#x27;</span>+<span class="hljs-string">&#x27;xxx&#x27;</span>&#125;&#125;&gt;首页&lt;/Link&gt;<br></code></pre></div></td></tr></table></figure><p>js 方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.history.push(<span class="hljs-regexp">/link/</span><span class="hljs-string">&quot;+&#x27;xxx&#x27;)</span><br><span class="hljs-string">//或</span><br><span class="hljs-string">this.props.history.push(&#123;pathname:&#x27;/link/+&#x27;xxx&#x27;&#125;)</span><br></code></pre></div></td></tr></table></figure><p>获取参数:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.match.params.id <span class="hljs-comment">//注意这里是match而非history</span><br></code></pre></div></td></tr></table></figure><h2 id="2-query-传参-刷新页面后参数消失"><a href="#2-query-传参-刷新页面后参数消失" class="headerlink" title="2.query 传参(刷新页面后参数消失)"></a>2.query 传参(刷新页面后参数消失)</h2><p>路由页面:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Route path=<span class="hljs-string">&quot;/demo&quot;</span> component=&#123;Demo&#125;&gt;&lt;<span class="hljs-regexp">/Route&gt; /</span><span class="hljs-regexp">/无需配置路由跳转并传递参数</span><br></code></pre></div></td></tr></table></figure><p>链接方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Link to=&#123;&#123;<span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/link &quot;,query:&#123; id:22, name:&#x27;</span>dahuang<span class="hljs-string">&quot;&#125;&#125;&#125;&gt;XX&lt;/Link&gt;</span><br></code></pre></div></td></tr></table></figure><p>js 方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.history.push(&#123; <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/demo&#x27;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">22</span>, <span class="hljs-attr">namer</span>: <span class="hljs-string">&#x27;dahuang&#x27;</span> &#125; &#125;)<br></code></pre></div></td></tr></table></figure><p>获取参数:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.location.query.name<br></code></pre></div></td></tr></table></figure><h2 id="3-state-传参-刷新页面后参数不消失，state-传的参数是加密的"><a href="#3-state-传参-刷新页面后参数不消失，state-传的参数是加密的" class="headerlink" title="3.state 传参(刷新页面后参数不消失，state 传的参数是加密的)"></a>3.state 传参(刷新页面后参数不消失，state 传的参数是加密的)</h2><p>路由页面:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Route path=<span class="hljs-string">&quot;/link&quot;</span> component=&#123;Demo&#125;&gt;&lt;<span class="hljs-regexp">/Route&gt; /</span><span class="hljs-regexp">/无需配置路由跳转并传递参数</span><br></code></pre></div></td></tr></table></figure><p>链接方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Link to=&#123;&#123;<span class="hljs-attr">pathname</span>:<span class="hljs-string">&#x27;/link&quot;,state:&#123;id:12,name:&#x27;</span>dahuang<span class="hljs-string">&#x27;&#125;&#125;&#125;&gt;XX&lt;/Link&gt;</span><br></code></pre></div></td></tr></table></figure><p>js 方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.history.push(&#123; <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/demo&#x27;</span>, <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">12</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;dahuang&#x27;</span> &#125; &#125;)<br></code></pre></div></td></tr></table></figure><p>获取参数:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.location.state.name<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>React路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sass和Less</title>
    <link href="/2021/04/26/Sass%E5%92%8CLess/"/>
    <url>/2021/04/26/Sass%E5%92%8CLess/</url>
    
    <content type="html"><![CDATA[<h1 id="Sass和Less"><a href="#Sass和Less" class="headerlink" title="Sass和Less"></a>Sass和Less</h1><p>Sass和Less都属于CSS预处理器，CSS 预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，如：变量、语句、函数、继承等概念。将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行CSS的编码工作。</p><p><p>   官网地址： <a href="http://lesscss.org/">http://lesscss.org/</a></p><p>   VSCode插件：Easy LESS</p><p>   官网地址： <a href="https://sass-lang.com/">https://sass-lang.com/</a></p><p>   VSCode插件：Easy Sass</p><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><p>在Sass和Less文件夹中新建一个style2.scss文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box&#123;<br>    width: 200px;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>输入样式，会自动转换生成style2.css文件和压缩文件style2.min.css</p><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">//单行注释不会被编译</span><br><br><span class="hljs-comment">/*  </span><br><span class="hljs-comment">多行注释会被编译</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$number:123px;<br>.box2&#123;<br>    width:$number;<br>    height:$number;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-插值"><a href="#3-插值" class="headerlink" title="3.插值"></a>3.插值</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$number:123px;<br>$key:margin;<br>$i:<span class="hljs-number">2</span>;<br>.box#&#123;$i&#125;&#123;<br>    width:$number;<br>    height:$number;<br>    #&#123;$key&#125;:auto;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-作用域"><a href="#4-作用域" class="headerlink" title="4.作用域"></a>4.作用域</h3><p>高输出123px；宽输出456px；有顺序要求</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$number:123px;<br>.box3<br>&#123;<br>    height: $number;<br>    $number:456px;<br>    width: $number;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-选择器嵌套"><a href="#5-选择器嵌套" class="headerlink" title="5.选择器嵌套"></a>5.选择器嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-伪类嵌套"><a href="#6-伪类嵌套" class="headerlink" title="6.伪类嵌套"></a>6.伪类嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>    &amp;:hover&#123;<span class="hljs-comment">//不加&amp;符号会有空格</span><br>        color:red<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-属性嵌套"><a href="#7-属性嵌套" class="headerlink" title="7.属性嵌套"></a>7.属性嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>    &amp;:hover&#123;<span class="hljs-comment">//不加&amp;符号会有空格</span><br>        color:red;<br>        font:&#123;<br>            size:10px;<br>            weight:bold;<br>            family:宋体<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="8-运算"><a href="#8-运算" class="headerlink" title="8.运算"></a>8.运算</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$num:100px;<br>.box4&#123;<br>    width:$num*<span class="hljs-number">3</span>;<br>    height: $num+10px;<br>    <span class="hljs-comment">// height: $num+10em;//单位不同不能计算</span><br>    font:20px / <span class="hljs-number">1.5</span>;<span class="hljs-comment">//斜杠默认是分割</span><br>    padding:(20px / <span class="hljs-number">1.5</span>);<span class="hljs-comment">//加上括号可以计算</span><br>    color:#010203 * 2;//颜色也能进行运算<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">//自定义函数</span><br>@<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">$n,$m</span>)</span>&#123;<br>    @<span class="hljs-keyword">return</span> $n + $m;<br>&#125;<br>.box5&#123;<br>    width:round(<span class="hljs-number">3.</span>4px);<br>    height: percentage(<span class="hljs-number">0.2</span>);<span class="hljs-comment">//百分比</span><br>    margin: random();<span class="hljs-comment">//随机数可以产生</span><br>    padding: sqrt(<span class="hljs-number">25</span>%);<span class="hljs-comment">//不能开方</span><br>    font-size: sum(4px,5px);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="10-混入"><a href="#10-混入" class="headerlink" title="10.混入"></a>10.混入</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">@mixin show &#123;<span class="hljs-comment">//只混入 不渲染</span><br>    display: inline;<br>&#125;<br>@mixin <span class="hljs-function"><span class="hljs-title">hide</span>(<span class="hljs-params">$color</span>)</span> &#123;<span class="hljs-comment">//也能传参</span><br>    display: block;<br>    color: $color;<br>&#125;<br>.box6&#123;<br>    width: 100px;<br>    @include show;<br>    @include hide(red)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="11-无命名空间"><a href="#11-无命名空间" class="headerlink" title="11.无命名空间"></a>11.无命名空间</h3><h3 id="12-继承"><a href="#12-继承" class="headerlink" title="12.继承"></a>12.继承</h3><p>继承和混入很像，只是最后生成的代码是分开，还是分组的形式</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">%line&#123;<span class="hljs-comment">//.换成百分号就不会被渲染出来</span><br>    display: inline;<br>&#125;<br>.box7&#123;<br>    @extend %line;<br>&#125;<br>.box8&#123;<br>    @extend %line;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="13-合并"><a href="#13-合并" class="headerlink" title="13.合并"></a>13.合并</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$background:(<br>    a:url(a.png),<br>    b:url(b.png)<br>);<br>$transform:(<br>    a:scale(<span class="hljs-number">2</span>),<br>    b:rotate(30deg)<br>);<br>.box9&#123;<br>    background: map-values($background);<span class="hljs-comment">//逗号隔开效果</span><br>    transform:zip(map-values($transform)...);<span class="hljs-comment">//空格隔开效果</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="14-媒体查询"><a href="#14-媒体查询" class="headerlink" title="14.媒体查询"></a>14.媒体查询</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box10&#123;<br>    width:100px;<br>    @media all and (min-width:768px) &#123;<br>        width:600px;<br>    &#125;<br>    @media all and (min-width:1440px) &#123;<br>        width:900px;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="15-条件"><a href="#15-条件" class="headerlink" title="15.条件"></a>15.条件</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$count:<span class="hljs-number">3</span>;<br>.box11&#123;<br>    @<span class="hljs-keyword">if</span>($count &gt; <span class="hljs-number">4</span>)&#123;<br>        width:100px + $count;<br>    &#125;<br>    @<span class="hljs-keyword">else</span>&#123;<br>        width: 10px + $count;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="16-循环"><a href="#16-循环" class="headerlink" title="16.循环"></a>16.循环</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@<span class="hljs-keyword">for</span> $i <span class="hljs-keyword">from</span> <span class="hljs-number">0</span> through <span class="hljs-number">2</span>&#123;<br>    .box-#&#123;$i&#125;&#123;<br>        width: 100px + $i;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="17-导入"><a href="#17-导入" class="headerlink" title="17.导入"></a>17.导入</h3><p>在Sass和Less中新建一个文件reset.scss</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">*&#123;<span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;padding: <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//写入样式</span><br>img&#123;<span class="hljs-attr">display</span>: block;&#125;<br><br></code></pre></div></td></tr></table></figure><p>在Sass和Less\style2.scss中引入reset.scss</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./reset.scss&#x27;</span><br></code></pre></div></td></tr></table></figure><h2 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h2><p>在Sass和Less文件夹中新建一个style.less文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box&#123;<br>    width: 100px;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>输入样式，会自动转换生成style.css文件</p><h3 id="1-注释-1"><a href="#1-注释-1" class="headerlink" title="1.注释"></a>1.注释</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">//单行注释不会被编译</span><br><br><span class="hljs-comment">/*  </span><br><span class="hljs-comment">多行注释会被编译</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h3 id="2-变量-1"><a href="#2-变量-1" class="headerlink" title="2.变量"></a>2.变量</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@number:123px;<br>.box2&#123;<br>    width:@number;<br>    height:@number;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-插值-1"><a href="#3-插值-1" class="headerlink" title="3.插值"></a>3.插值</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@number:123px;<br>@key:margin;<br>@i:<span class="hljs-number">2</span>;<br>.box@&#123;i&#125;&#123;<br>    width:@number;<br>    height:@number;<br>    @&#123;key&#125;:auto;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-作用域-1"><a href="#4-作用域-1" class="headerlink" title="4.作用域"></a>4.作用域</h3><p>宽高输出的都是456px；作用域有就近原则，局部变量优先找同区块的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@number:123px;<br>.box3<br>&#123;<br>    height:@number;<br>    @number:456px;<br>    width:@number;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-选择器嵌套-1"><a href="#5-选择器嵌套-1" class="headerlink" title="5.选择器嵌套"></a>5.选择器嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-伪类嵌套-1"><a href="#6-伪类嵌套-1" class="headerlink" title="6.伪类嵌套"></a>6.伪类嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>    &amp;:hover&#123;<span class="hljs-comment">//不加&amp;符号会有空格</span><br>        color:red<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-无属性嵌套"><a href="#7-无属性嵌套" class="headerlink" title="7.无属性嵌套"></a>7.无属性嵌套</h3><h3 id="8-运算-1"><a href="#8-运算-1" class="headerlink" title="8.运算"></a>8.运算</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@num:100px;<br>.box4&#123;<br>    width:@num*<span class="hljs-number">3</span>;<br>    height: @num+10em;<br>    margin: 10em+@num;<span class="hljs-comment">//单位不同时，按照第一个计算</span><br>    font:20px / <span class="hljs-number">1.5</span>;<span class="hljs-comment">//斜杠默认是分割</span><br>    padding:(20px / <span class="hljs-number">1.5</span>);<span class="hljs-comment">//加上括号可以被计算转译</span><br>    padding:~<span class="hljs-string">&#x27;20px / 1.5&#x27;</span>;<span class="hljs-comment">//加上~&#x27; &#x27;防止转译，直接变成除(但是我不加的时候暂时也没有转译)</span><br>    color:#010203 * 2;//颜色也能进行<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-函数-1"><a href="#9-函数-1" class="headerlink" title="9.函数"></a>9.函数</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box5&#123;<br>    width:round(<span class="hljs-number">3.</span>4px);<br>    height: percentage(<span class="hljs-number">0.2</span>);<span class="hljs-comment">//百分比</span><br>    margin: random();<span class="hljs-comment">//随机数不能产生</span><br>    padding: sqrt(<span class="hljs-number">25</span>%);<span class="hljs-comment">//开方</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="10-混入-1"><a href="#10-混入-1" class="headerlink" title="10.混入"></a>10.混入</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.show&#123;<span class="hljs-comment">//不加括号会生成，再混入</span><br>    display: block;<br>&#125;<br>.hide(@color)&#123;<span class="hljs-comment">//加括号不生成，直接混入,还能传参</span><br>    display: inline;<br>&#125;<br>.box6&#123;<br>    width: 100px;<br>    .show;<br>    .hide(blue);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="11-命名空间"><a href="#11-命名空间" class="headerlink" title="11.命名空间"></a>11.命名空间</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">#<span class="hljs-function"><span class="hljs-title">nm</span>(<span class="hljs-params"></span>)</span>&#123;<br>    .show&#123;<span class="hljs-attr">display</span>: inline-block;&#125;<br>&#125;<br>.box7&#123;<br>    #nm.show;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="12-继承-1"><a href="#12-继承-1" class="headerlink" title="12.继承"></a>12.继承</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.line&#123;<br>    display: inline;<br>&#125;<br>.box7&#123;<br>    &amp;:extend(.line);<br>&#125;<br>.box8&#123;<br>    &amp;:extend(.line);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="13-合并-1"><a href="#13-合并-1" class="headerlink" title="13.合并"></a>13.合并</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.box9&#123;<br>    background+: url(a.png);<br>    background+: url(b.png);<span class="hljs-comment">//+号是用空格的形式隔开</span><br>    transform+_: scale(<span class="hljs-number">2</span>);<br>    transform+_: rotate(30deg);<span class="hljs-comment">//+_号是用空格隔开</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="14-媒体查询-1"><a href="#14-媒体查询-1" class="headerlink" title="14.媒体查询"></a>14.媒体查询</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box10&#123;<br>    width:100px;<br>    @media all and (min-width:768px) &#123;<br>        width:600px;<br>    &#125;<br>    @media all and (min-width:1440px) &#123;<br>        width:900px;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="15-条件-1"><a href="#15-条件-1" class="headerlink" title="15.条件"></a>15.条件</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@count:<span class="hljs-number">5</span>;<br>.get(@cn) <span class="hljs-function"><span class="hljs-title">when</span>(<span class="hljs-params">@cn &gt; <span class="hljs-number">4</span></span>)</span>&#123;<br>    width: 100px + @cn;<br>&#125;<br>.get(@cn) when (@cn &lt; <span class="hljs-number">4</span>)&#123;<br>    width: 10px + @cn;<br>&#125;<br>.box11&#123;<br>    .get(@count)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="16-循环-1"><a href="#16-循环-1" class="headerlink" title="16.循环"></a>16.循环</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@count2:<span class="hljs-number">0</span>;<br>.get2(@cn) when (@cn&lt;<span class="hljs-number">3</span>)&#123;<span class="hljs-comment">//用递归</span><br>    .get2((@cn+<span class="hljs-number">1</span>));<br>    .box-@&#123;cn&#125;&#123;<br>        width: 100px + @cn;<br>    &#125;<br>&#125;<br>.get2(@count2);<br><br><br></code></pre></div></td></tr></table></figure><h3 id="17-导入-1"><a href="#17-导入-1" class="headerlink" title="17.导入"></a>17.导入</h3><p>在Sass和Less中新建一个文件reset.less</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">*&#123;<span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;padding: <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//写入样式</span><br></code></pre></div></td></tr></table></figure><p>在Sass和Less\style.less中引入reset.less</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./reset.less&#x27;</span>;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sass</tag>
      
      <tag>Less</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【置顶】这是第一条博客，欢迎大家来到我的博客，请尽情留言吧！</title>
    <link href="/2021/04/25/hello-world/"/>
    <url>/2021/04/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>这里是留言板！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
