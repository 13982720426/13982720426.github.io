<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>node.js</title>
    <link href="/2021/07/14/node-js/"/>
    <url>/2021/07/14/node-js/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="Node-介绍"><a href="#Node-介绍" class="headerlink" title="Node 介绍"></a>Node 介绍</h2><p>1.命令行窗口(小黑屏)、CMD 窗口、终端、shell</p><p>开始菜单 –&gt; 运行 –&gt; CMD –&gt; 回车</p><h3 id="常用的指令："><a href="#常用的指令：" class="headerlink" title="常用的指令："></a>常用的指令：</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">dir列出当前目录下的所有文件<br>cd 目录名 进入到指定的目录<br>md 目录名 创建一个文件夹<br>rd 目录名 删除一个文件夹<br></code></pre></div></td></tr></table></figure><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>. 表示当前目录<br>.. 表示上一级目录</p><h3 id="环境变量（windows-系统中变量）"><a href="#环境变量（windows-系统中变量）" class="headerlink" title="环境变量（windows 系统中变量）"></a>环境变量（windows 系统中变量）</h3><p>path</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">C:\work\jdk\jdk1<span class="hljs-number">.7</span><span class="hljs-number">.0_75</span>/bin;<br>%CATALINA_HOME%/bin;<br>C:\work\soft\tools\AppServ\Apache24\bin;<br>C:\work\soft\tools\AppServ\php5;<br>C:\Users\lilichao\AppData\Local\Programs\Fiddler;<br>C:\work\environment\Egret\Egret Wing <span class="hljs-number">3</span>\bin;<br>C:\Users\lilichao\AppData\Roaming\npm;<br>C:\Program Files\MongoDB\Server\<span class="hljs-number">3.2</span>\bin;<br>C:\Users\lilichao\Desktop\hello<br></code></pre></div></td></tr></table></figure><p>当我们在命令行窗口打开一个文件，或调用一个程序时，系统会首先在当前目录下寻找文件程序，如果找到了则直接打开<br>如果没有找到则会依次到环境变量 path 的路径中寻找，直到找到为止如果没找到则报错<br>所以我们可以将一些经常需要访问的程序和文件的路径添加到 path 中，这样我们就可以在任意位置来访问这些文件和程序了</p><h3 id="I-O-Input-Output"><a href="#I-O-Input-Output" class="headerlink" title="I/O (Input/Output)"></a>I/O (Input/Output)</h3><p>I/O 操作指的是对磁盘的读写操作</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>Node 是对 ES 标准一个实现，Node 也是一个 JS 引擎，通过 Node 可以使 js 代码在服务器端执行<br>Node 仅仅对 ES 标准进行了实现，所以在 Node 中不包含 DOM 和 BOM<br>Node 中可以使用所有的内建对象<br>String Number Boolean Math Date RegExp Function Object Array<br>而 BOM 和 DOM 都不能使用，但是可以使用 console 也可以使用定时器（setTimeout() setInterval()）<br>Node 可以在后台来编写服务器<br>Node 编写服务器都是单线程的服务器<br>进程<br>进程就是一个一个的工作计划（工厂中的车间）<br>线程<br>线程是计算机最小的运算单位（工厂中的工人）线程是干活的<br>传统的服务器都是多线程的<br>每进来一个请求，就创建一个线程去处理请求<br>Node 的服务器单线程的<br>Node 处理请求时是单线程，但是在后台拥有一个 I/O 线程池</p><h3 id="Node-的用途"><a href="#Node-的用途" class="headerlink" title="Node 的用途"></a>Node 的用途</h3><ul><li>Web 服务 API，比如 REST</li><li>实时多人游戏</li><li>后端的 Web 服务，例如跨域、服务噐端的请求</li><li>基于 Web 的应用</li><li>多客户端的通信，如即时通信</li></ul><h3 id="为什么要学习-Node-js"><a href="#为什么要学习-Node-js" class="headerlink" title="为什么要学习 Node.js"></a>为什么要学习 Node.js</h3><ul><li><p>企业需求</p><ul><li><p>具有服务端开发经验更改</p></li><li><p>front-end</p></li><li><p>back-end</p></li><li><p>全栈开发工程师</p></li><li><p>基本的网站开发能力</p><ul><li>服务端</li><li>前端</li><li>运维部署</li></ul></li><li><p>多人社区</p></li></ul></li></ul><h3 id="Node-js-是什么"><a href="#Node-js-是什么" class="headerlink" title="Node.js 是什么"></a>Node.js 是什么</h3><ul><li><p>Node.js® is a JavaScript runtime built on <a href="https://v8.dev/">Chrome’s V8 JavaScript engine</a>.</p><ul><li>Node.js 不是一门语言</li><li>Node.js 是 JavaScript 运行时的环境</li><li>Node.js 既不是语言，也不是框架</li><li>简单点来讲就是 Node.js 可以解析和执行</li><li>Javascript 代码以前只有浏览器可以可以解析执行 Javascript 代码</li><li>也就是说现在的 Javascript 可以完全脱离浏览器来运行，一切都归功于： Node.js</li></ul></li><li><p>浏览器中的 JavaScript</p><ul><li>ECMAScript<ul><li>基本语法</li><li>if</li><li>var</li><li>function</li><li>Object</li><li>Array</li></ul></li><li>BOM</li><li>DOM</li></ul></li><li><p>Node.js 中的 JavaScript</p><ul><li><strong>没有 BOM，DOM</strong></li><li>ECMAScript</li><li>在 Node 中这个 JavaScript 执行环境为 JavaScript 提供了一些服务器级别的 API<ul><li>例如文件的读写</li><li>网络服务的构建</li><li>网络通信</li><li>http 服务器</li></ul></li></ul></li><li><p>构建与 Chrome 的 V8 引擎之上</p><ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome 的 V8 引擎是目前公认的解析执行 JavaScript 代码最快的</li><li>Node.js 的作者把 Google Chrome 中的 V8 引擎移植出来，开发了一个独立的 JavaScript 运行时环境</li></ul></li><li><p>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.</p><ul><li>envent-driven 事件驱动</li><li>non-blocking I/O mode   非阻塞 I/O 模型（异步）</li><li>ightweight and efficent.   轻量和高效</li></ul></li><li><p>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world</p><ul><li>npm 是世界上最大的开源生态系统</li><li>绝大多数 JavaScript 相关的包都存放在 npm 上，这样做的目的是为了让开发人员更方便的去下载使用</li><li>例如：npm install jquery</li></ul></li></ul><h3 id="Node-能做什么"><a href="#Node-能做什么" class="headerlink" title="Node 能做什么"></a>Node 能做什么</h3><ul><li><p>web 服务器后台</p></li><li><p>命令行工具</p><ul><li>npm(node)</li><li>git(c 语言)</li><li>hexo（node）</li><li>游戏服务器</li><li>接口服务器</li><li>…</li></ul></li><li><p>对于前端工程师来讲，接触 node 最多的是它的命令行工具</p><ul><li>自己写的很少，主要是用别人第三方的</li><li>webpack</li><li>gulp</li><li>npm</li></ul></li></ul><h3 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h3><p>Node 入门书籍：<a href="http://www.nodebeginner.org/index-zh-cn,html">http://www.nodebeginner.org/index-zh-cn.html</a><br>官方 API 文档（中文）：<a href="http://nodejs.cn/api/">http://nodejs.cn/api/</a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装-Node-环境"><a href="#安装-Node-环境" class="headerlink" title="安装 Node 环境"></a>安装 Node 环境</h3><ul><li><p>查看 Node 环境的版本号</p></li><li><p>下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p></li><li><p>安装：</p><ul><li>傻瓜式安装，一路<code>next</code></li><li>安装过再次安装会升级</li></ul></li><li><p>确认 Node 环境是否安装成功</p><ul><li>查看 node 的版本号：<code>node --version</code></li><li>或者<code>node -v</code></li></ul></li><li><p>配置环境变量</p></li></ul><h3 id="解析执行-JavaScript"><a href="#解析执行-JavaScript" class="headerlink" title="解析执行 JavaScript"></a>解析执行 JavaScript</h3><ol><li>创建编写 JavaScript 脚本文件</li><li>打开终端，定位脚本文件的所属目录</li><li>输入<code>node 文件名</code>执行对应的文件</li></ol><p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>某八戒面筋</title>
    <link href="/2021/07/10/%E6%9F%90%E5%85%AB%E6%88%92%E9%9D%A2%E7%AD%8B/"/>
    <url>/2021/07/10/%E6%9F%90%E5%85%AB%E6%88%92%E9%9D%A2%E7%AD%8B/</url>
    
    <content type="html"><![CDATA[<p>因为是实习，考的问题不多，而且都很基础，没有深入太多</p><h1 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h1><p><a href="https://www.yuque.com/jackhoo-okgnh/exlk0p/skckhw">https://www.yuque.com/jackhoo-okgnh/exlk0p/skckhw</a></p><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><p>因为是实习没有很难，没有涉及算法、计算机网络或者其他计算机方面的知识，问的大部分都是简历上的，前端开发比较基础的，没有深入太多，只有一两个稍微难一点的问题。<br>具体还是参考官方一点的回答。有些问题可能忘了 只能记个大概的</p><h2 id="先是自我介绍"><a href="#先是自我介绍" class="headerlink" title="先是自我介绍"></a>先是自我介绍</h2><h2 id="最近两年职业规划"><a href="#最近两年职业规划" class="headerlink" title="最近两年职业规划"></a>最近两年职业规划</h2><h2 id="1-CSS-JS-哪方面熟悉一点"><a href="#1-CSS-JS-哪方面熟悉一点" class="headerlink" title="1.CSS JS 哪方面熟悉一点"></a>1.CSS JS 哪方面熟悉一点</h2><!-- 当时没有听清楚 多问了一下 CSS 和什么？后来回答 js --><p>​</p><h2 id="2-左边固定右边自适应有几种方式"><a href="#2-左边固定右边自适应有几种方式" class="headerlink" title="2.左边固定右边自适应有几种方式"></a>2.左边固定右边自适应有几种方式</h2><!-- 回答的最简单的就是 flex 布局、使用相对定位、还有浮动 --><p>​</p><h3 id="追问-如何使用浮动，怎么实现"><a href="#追问-如何使用浮动，怎么实现" class="headerlink" title="追问 如何使用浮动，怎么实现"></a>追问 如何使用浮动，怎么实现</h3><!-- 很久没有写样式，复习也没有看这个的代码，当时一直回想没有答上来 --><p>​</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://segmentfault.com/a/1190000010415257">https://segmentfault.com/a/1190000010415257</a><br>​</p><h2 id="3-JavaScript-的数据类型有哪些"><a href="#3-JavaScript-的数据类型有哪些" class="headerlink" title="3.JavaScript 的数据类型有哪些"></a>3.JavaScript 的数据类型有哪些</h2><!-- 分为引用数据类型和基本数据类型，引用数据类型是对象，基本数据类型有 number、null、undefined、string、symbol，(boolean 忘了说没有)，最后回答差不多这些 --><p>​</p><h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><p>1 基本类型<br>Number、Boolean、String、NULL、Undefined<br>以及 ES6 的 Symbol<br>2 引用类型<br>Object、Array、Function、Date</p><h3 id="追问-js-如何判断数据类型"><a href="#追问-js-如何判断数据类型" class="headerlink" title="追问 js 如何判断数据类型"></a>追问 js 如何判断数据类型</h3><!-- 我记得判断数据类型有几种方法，当时记混了回答的是 indexOf，面试官没有听清楚 问什么 of，然后赶紧回答是 typeof --><h3 id="追问-typeof-会返回哪些值"><a href="#追问-typeof-会返回哪些值" class="headerlink" title="追问 typeof 会返回哪些值"></a>追问 typeof 会返回哪些值</h3><!-- function、undefined、string、number、object、symbol，(boolean 也是忘记有没有说，NuN 记不清楚有没有当时没有说)，最后回答差不多这些 --><h4 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h4><p>1、最常见的判断方法：<strong>typeof</strong><br>返回结果包括：number、boolean、string、symbol、object、undefined、function 等 7 种数据类型，但不能判断 null、array 等</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>(); <span class="hljs-comment">// symbol 有效</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// string 有效</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// number 有效</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//boolean 有效</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>; <span class="hljs-comment">//undefined 有效</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(); <span class="hljs-comment">// function 有效</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">//object 无效</span><br><span class="hljs-keyword">typeof</span> []; <span class="hljs-comment">//object 无效</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">//object 无效</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(); <span class="hljs-comment">//object 无效</span><br></code></pre></div></td></tr></table></figure><p>2、判断已知对象类型的方法： <strong>instanceof</strong><br>instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性，但它不能检测 null 和 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">[] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>; <span class="hljs-comment">//true</span><br>&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>;<span class="hljs-comment">//true</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Date</span>;<span class="hljs-comment">//true</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">RegExp</span><span class="hljs-comment">//true</span><br><span class="hljs-literal">null</span> <span class="hljs-keyword">instanceof</span> Null<span class="hljs-comment">//报错</span><br><span class="hljs-literal">undefined</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-literal">undefined</span><span class="hljs-comment">//报错</span><br></code></pre></div></td></tr></table></figure><p><strong>​</strong></p><p>3.Object.prototype.toString.call()<br>Object.prototype.toString.call() 是最准确最常用的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// [object String]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-number">1</span>); <span class="hljs-comment">// [object Number]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-literal">true</span>); <span class="hljs-comment">// [object Boolean]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// [object Undefined]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-literal">null</span>); <span class="hljs-comment">// [object Null]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>()); <span class="hljs-comment">// [object Function]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()); <span class="hljs-comment">// [object Date]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call([]); <span class="hljs-comment">// [object Array]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>()); <span class="hljs-comment">// [object RegExp]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>()); <span class="hljs-comment">// [object Error]</span><br></code></pre></div></td></tr></table></figure><p><strong>​</strong></p><h2 id="4-用哪些方法实现数组去重"><a href="#4-用哪些方法实现数组去重" class="headerlink" title="4.用哪些方法实现数组去重"></a>4.用哪些方法实现数组去重</h2><!-- 当时想到有几种方法都可以实现去重 使用数组方法 set 遍历 ，但是都没有写过，也没有复习代码，就说用遍历​ --><h3 id="追问-遍历如何实现"><a href="#追问-遍历如何实现" class="headerlink" title="追问 遍历如何实现"></a>追问 遍历如何实现</h3><!-- 先查找对应数据第一次出现，再遍历后边也没有重复的，然后想不起来了，最后没有答出来​ --><h4 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h4><p><strong>方法一：</strong><br>双层循环，外层循环元素，内层循环时比较值<br>如果有相同的值则跳过，不相同则 push 进数组</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.distinct = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> arr = <span class="hljs-built_in">this</span>,<br>    result = [],<br>    i,<br>    j,<br>    len = arr.length;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; len; j++) &#123;<br>      <span class="hljs-keyword">if</span> (arr[i] === arr[j]) &#123;<br>        j = ++i;<br>      &#125;<br>    &#125;<br>    result.push(arr[i]);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br><span class="hljs-keyword">var</span> arra = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>];<br>arra.distinct(); <span class="hljs-comment">//返回[3,4,2,1]</span><br></code></pre></div></td></tr></table></figure><p><strong>方法二：利用 splice 直接在原数组进行操作</strong><br>双层循环，外层循环元素，内层循环时比较值<br>值相同时，则删去这个值<br>注意点:删除元素之后，需要将数组的长度也减 1.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.distinct = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> arr = <span class="hljs-built_in">this</span>,<br>    i,<br>    j,<br>    len = arr.length;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; len; j++) &#123;<br>      <span class="hljs-keyword">if</span> (arr[i] == arr[j]) &#123;<br>        arr.splice(j, <span class="hljs-number">1</span>);<br>        len--;<br>        j--;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;;<br><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">56</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>];<br><span class="hljs-keyword">var</span> b = a.distinct();<br><span class="hljs-built_in">console</span>.log(b.toString()); <span class="hljs-comment">//1,2,3,4,5,6,56</span><br></code></pre></div></td></tr></table></figure><p>优点：简单易懂<br>缺点：占用内存高，速度慢<br><strong>方法三：利用对象的属性不能相同的特点进行去重</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.distinct = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> arr = <span class="hljs-built_in">this</span>,<br>    i,<br>    obj = &#123;&#125;,<br>    result = [],<br>    len = arr.length;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (!obj[arr[i]]) &#123;<br>      <span class="hljs-comment">//如果能查找到，证明数组元素重复了</span><br>      obj[arr[i]] = <span class="hljs-number">1</span>;<br>      result.push(arr[i]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">56</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>];<br><span class="hljs-keyword">var</span> b = a.distinct();<br><span class="hljs-built_in">console</span>.log(b.toString()); <span class="hljs-comment">//1,2,3,4,5,6,56</span><br></code></pre></div></td></tr></table></figure><p><strong>方法四：数组递归去重</strong><br>运用递归的思想<br>先排序，然后从最后开始比较，遇到相同，则删除</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.distinct = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> arr = <span class="hljs-built_in">this</span>,<br>    len = arr.length;<br>  arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-comment">//对数组进行排序才能方便比较</span><br>    <span class="hljs-keyword">return</span> a - b;<br>  &#125;);<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loop</span>(<span class="hljs-params">index</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (arr[index] === arr[index - <span class="hljs-number">1</span>]) &#123;<br>        arr.splice(index, <span class="hljs-number">1</span>);<br>      &#125;<br>      loop(index - <span class="hljs-number">1</span>); <span class="hljs-comment">//递归loop函数进行去重</span><br>    &#125;<br>  &#125;<br>  loop(len - <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;;<br><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">56</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">56</span>, <span class="hljs-number">45</span>, <span class="hljs-number">56</span>];<br><span class="hljs-keyword">var</span> b = a.distinct();<br><span class="hljs-built_in">console</span>.log(b.toString()); <span class="hljs-comment">//1,2,3,4,5,6,45,56</span><br></code></pre></div></td></tr></table></figure><p><strong>方法五：利用 indexOf 以及 forEach</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Array</span>.prototype.distinct = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> arr = <span class="hljs-built_in">this</span>,<br>    result = [],<br>    len = arr.length;<br>  arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">v, i, arr</span>) </span>&#123;<br>    <span class="hljs-comment">//这里利用map，filter方法也可以实现</span><br>    <span class="hljs-keyword">var</span> bool = arr.indexOf(v, i + <span class="hljs-number">1</span>); <span class="hljs-comment">//从传入参数的下一个索引值开始寻找是否存在重复</span><br>    <span class="hljs-keyword">if</span> (bool === -<span class="hljs-number">1</span>) &#123;<br>      result.push(v);<br>    &#125;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br><span class="hljs-keyword">var</span> a = [<br>  <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">23</span>, <span class="hljs-number">1</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2</span>,<br>  <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<br>];<br><span class="hljs-keyword">var</span> b = a.distinct();<br><span class="hljs-built_in">console</span>.log(b.toString()); <span class="hljs-comment">//1,23,2,3</span><br></code></pre></div></td></tr></table></figure><p><strong>方法六：利用 ES6 的 set</strong><br>Set 数据结构，它类似于数组，其成员的值都是唯一的。<br>利用 Array.from 将 Set 结构转换成数组</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dedupe</span>(<span class="hljs-params">array</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.from(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(array));<br>&#125;<br>dedupe([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]); <span class="hljs-comment">//[1,2,3]</span><br></code></pre></div></td></tr></table></figure><p>拓展运算符(…)内部使用 for…of 循环</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> resultarr = [...new <span class="hljs-built_in">Set</span>(arr)];<br><span class="hljs-built_in">console</span>.log(resultarr); <span class="hljs-comment">//[1,2,3]</span><br></code></pre></div></td></tr></table></figure><p><strong>下面给大家补充介绍合并数组并去重的方法</strong><br><strong>一、concat()方法</strong><br>思路：concat() 方法将传入的数组或非数组值与原数组合并,组成一个新的数组并返回。该方法会产生一个新的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatArr</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> arr = arr1.concat(arr2);<br>  arr = unique1(arr); <span class="hljs-comment">//再引用上面的任意一个去重方法</span><br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>二、Array.prototype.push.apply()</strong><br>思路：该方法优点是不会产生一个新的数组。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> b = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-built_in">Array</span>.prototype.push.apply(a, b); <span class="hljs-comment">//a=[1,2,3,4,5,6]</span><br><span class="hljs-comment">//等效于:a.push.apply(a, b);</span><br><span class="hljs-comment">//也等效于[].push.apply(a, b);</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">concatArray</span>(<span class="hljs-params">arr1, arr2</span>) </span>&#123;<br>  <span class="hljs-built_in">Array</span>.prototype.push.apply(arr1, arr2);<br>  arr1 = unique1(arr1);<br>  <span class="hljs-keyword">return</span> arr1;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-有没有用过原生-js-写过组件"><a href="#5-有没有用过原生-js-写过组件" class="headerlink" title="5.有没有用过原生 js 写过组件"></a>5.有没有用过原生 js 写过组件</h2><!-- 当时想了想一下好像没有用原生写过什么组件，一直都是用的 antd，就说没有用 js 写过组件，但是用 antd 和 react 封装过一些组件。 --><h3 id="追问-有些什么组件，如何实现的"><a href="#追问-有些什么组件，如何实现的" class="headerlink" title="追问 有些什么组件，如何实现的"></a>追问 有些什么组件，如何实现的</h3><!-- 封装了弹窗组件，在多个页面都会使用到，去掉他默认样式或者功能，比如说确认、取消，然后改用自己的 form 表单的提交​ --><h3 id="追问-有没有预设什么-API-让其他人可以复用，是怎么思考的"><a href="#追问-有没有预设什么-API-让其他人可以复用，是怎么思考的" class="headerlink" title="追问 有没有预设什么 API 让其他人可以复用，是怎么思考的"></a>追问 有没有预设什么 API 让其他人可以复用，是怎么思考的</h3><!-- 当时把我难到了，写程序的时候能跑就行，都没有想过这些问题。思考了一下，突然又想到封装弹窗的细节，就回去补充了一下，在封装弹窗的时候，加了一个骨架屏 --><h3 id="然后又追问骨架屏是怎么实现的"><a href="#然后又追问骨架屏是怎么实现的" class="headerlink" title="然后又追问骨架屏是怎么实现的"></a>然后又追问骨架屏是怎么实现的</h3><!-- 骨架屏也是调用 antd 上的组件，在弹窗点击开始之后有接口请求，有时候接口请求没有那么快，可能就是白屏，在点击弹窗的时候判断接口是否返回了数据，如果没有数据就先显示骨架屏，有数据就直接显示数据，增加了用户体验。 --><h2 id="6-AJAX-实现原理"><a href="#6-AJAX-实现原理" class="headerlink" title="6.AJAX 实现原理"></a>6.AJAX 实现原理</h2><!-- ajax 原理不知道，只是用过。后来就说只用过 Promise 封装过 --><p><em>​</em></p><h4 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h4><p><a href="https://juejin.cn/post/6844904114896240647">https://juejin.cn/post/6844904114896240647</a><br><em>​</em></p><h3 id="追问-如何实现用-promise-封装的"><a href="#追问-如何实现用-promise-封装的" class="headerlink" title="追问 如何实现用 promise 封装的"></a>追问 如何实现用 promise 封装的</h3><!-- 具体步骤我也不太清楚，然后就说了一般用 get 和 post 方法，他们两个传递的参数不一样，然后.then 就写自己的函数​ --><h3 id="然后又追问具体是怎么实现的"><a href="#然后又追问具体是怎么实现的" class="headerlink" title="然后又追问具体是怎么实现的"></a>然后又追问具体是怎么实现的</h3><!-- get 方式是默认的，直接传参数就行了，post 的话参数需要用大括号包裹起来。然后突然想到写项目时遇到的问题，就说后端需传 formdata 数据的时候用 get 方法不行，后来改用 post 方法就成功了当时面试官估计我已经快不行了​ --><h4 id="参考-5"><a href="#参考-5" class="headerlink" title="参考"></a>参考</h4><p><a href="https://segmentfault.com/a/1190000015083939">https://segmentfault.com/a/1190000015083939</a></p><h3 id="然后又问-promise-对象有哪些"><a href="#然后又问-promise-对象有哪些" class="headerlink" title="然后又问 promise 对象有哪些"></a>然后又问 promise 对象有哪些</h3><!-- promise 只看过一两次，实在记不住，最后就乱说了一个.then .catch .finally，我知道不是这几个​ --><h4 id="参考-6"><a href="#参考-6" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.runoob.com/w3cnote/javascript-promise-object.html">https://www.runoob.com/w3cnote/javascript-promise-object.html</a><br>​</p><p>面试回答环节结束，说面试前端有十几个人，具体还是等其他人面试完 hr 的通知</p><h1 id="结束评价"><a href="#结束评价" class="headerlink" title="结束评价"></a>结束评价</h1><p>面试官问还有没有什么问题想问的<br>​</p><p>转折点来了，然后我就说能不能给我面试简单的评价还有建议<br>​</p><p>大概讲的就说需要精简一下，通过简历来看宽度有了深度不够，面试问到答不上是减分项。简历字数不在于多，写上的一定要完全掌握，需要多看红宝书，做点题。<br>​</p><!-- 争取到一点时间后，面试官就看了我的博客笔记，还有 ts 写的贪吃蛇小 demo，面试官看了比较感兴趣。因为我是部署到服务器上的，就现场输入我的网站展示了一下，面试官又问了技术上有没有什么再改进的，我说这个贪吃蛇有 bug 速度太快之后就会冲出去，然后贪吃蛇就是上下左右吃东西，应该就是这样子了。​问为什么要写这个，我说 vue3.0 是 ts 写的，之前我先学的 react，准备学习 vue 所以先了解一下 ts。​然后面试官态度有所转变，大概意思就可能不用等到其他人面试完​最后最关键的来了，就是面试完准备坐电梯的时候，我问了一下面试官，你的 mac 是公司配的还是自己买的。面试官笑了 说自己买的。然后他就给我说他这边问题不大，等 hr 通知就行了，意思就是基本上过了。下楼之后就看到面试官加了我微信，应该就稳了。 --><p>​</p>]]></content>
    
    
    <categories>
      
      <category>面筋</category>
      
    </categories>
    
    
    <tags>
      
      <tag>某八戒</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack5.0基础</title>
    <link href="/2021/07/01/webpack5-0%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/07/01/webpack5-0%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="第-1-章：webpack-简介"><a href="#第-1-章：webpack-简介" class="headerlink" title="第 1 章：webpack 简介"></a>第 1 章：webpack 简介</h1><h2 id="webpack-简介"><a href="#webpack-简介" class="headerlink" title="webpack 简介"></a>webpack 简介</h2><h3 id="1-1-webpack"><a href="#1-1-webpack" class="headerlink" title="1.1 webpack"></a>1.1 webpack</h3><p>是什么 webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)。 在 webpack 看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。 它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)</p><p><img src="https://i.loli.net/2021/07/02/93aYOUlZJ7z2w1F.jpg#id=Dvcks&originHeight=462&originWidth=1055&originalType=binary&ratio=1&status=done&style=none"></p><h2 id="1-2-webpack-五个核心概念"><a href="#1-2-webpack-五个核心概念" class="headerlink" title="1.2 webpack 五个核心概念"></a>1.2 webpack 五个核心概念</h2><h3 id="1-2-1-Entry"><a href="#1-2-1-Entry" class="headerlink" title="1.2.1 Entry"></a>1.2.1 Entry</h3><p>入口(Entry)指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p><h3 id="1-2-2-Output"><a href="#1-2-2-Output" class="headerlink" title="1.2.2 Output"></a>1.2.2 Output</h3><p>输出(Output)指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p><h3 id="1-2-3-Loader"><a href="#1-2-3-Loader" class="headerlink" title="1.2.3 Loader"></a>1.2.3 Loader</h3><p>Loader 让 webpack 能够去处理那些非 JavaScript 文件(webpack 自身只理解<br>JavaScript)</p><h3 id="1-2-4-Plugins"><a href="#1-2-4-Plugins" class="headerlink" title="1.2.4 Plugins"></a>1.2.4 Plugins</h3><p>插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。</p><h3 id="1-2-5-Mode"><a href="#1-2-5-Mode" class="headerlink" title="1.2.5 Mode"></a>1.2.5 Mode</h3><p>模式(Mode)指示 webpack 使用相应模式的配置。</p><table><thead><tr><th>选项</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>development</td><td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</td><td>能让代码本地调试运行的环境</td></tr><tr><td>production</td><td>会将 DefinePlugin 中 process.env.NODE_ENV 的值设置为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。</td><td>能让代码优化上线运行的环境</td></tr></tbody></table><h1 id="第-2-章：webpack-的初体验"><a href="#第-2-章：webpack-的初体验" class="headerlink" title="第 2 章：webpack 的初体验"></a>第 2 章：webpack 的初体验</h1><h2 id="2-1-初始化配置"><a href="#2-1-初始化配置" class="headerlink" title="2.1 初始化配置"></a>2.1 初始化配置</h2><ol><li>初始化 package.json</li></ol><p>输入指令:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm init<br></code></pre></div></td></tr></table></figure><ol start="2"><li>下载并安装 webpack</li></ol><p>输入指令:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install webpack webpack-cli -g<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install webpack webpack-cli -D<br></code></pre></div></td></tr></table></figure><h2 id="2-2-编译打包应用"><a href="#2-2-编译打包应用" class="headerlink" title="2.2 编译打包应用"></a>2.2 编译打包应用</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><h3 id="运行指令"><a href="#运行指令" class="headerlink" title="运行指令"></a>运行指令</h3><p>开发环境指令：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">webpack src/js/index.js -o build/js/built.js --mode=development<br></code></pre></div></td></tr></table></figure><p>功能：webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成浏览器能识别的语法。<br>生产环境指令：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">webpack src/js/index.js -o build/js/built.js --mode=production<br></code></pre></div></td></tr></table></figure><p>功能：在开发配置功能上多一个功能，压缩代码。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>webpack 能够编译打包 js 和 json 文件。<br>能将 es6 的模块化语法转换成浏览器能识别的语法。能压缩代码。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>不能编译打包 css、img 等文件。<br>不能将 js 的 es6 基本语法转化为 es5 以下语法。<br>​</p><h1 id="第-3-章：webpack-开发环境的基本配置"><a href="#第-3-章：webpack-开发环境的基本配置" class="headerlink" title="第 3 章：webpack 开发环境的基本配置"></a>第 3 章：webpack 开发环境的基本配置</h1><h2 id="3-1-创建配置文件"><a href="#3-1-创建配置文件" class="headerlink" title="3.1 创建配置文件"></a>3.1 创建配置文件</h2><ol><li><p> 创建文件 webpack.config.js</p></li><li><p> 配置内容如下</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>); <span class="hljs-comment">// node内置核心模块，用来处理路径问题。</span><br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>, <span class="hljs-comment">// 入口文件</span><br>  output: &#123;<br>    <span class="hljs-comment">// 输出配置</span><br>    filename: <span class="hljs-string">&#x27;./built.js&#x27;</span>, <span class="hljs-comment">// 输出文件名</span><br>    path: resolve(dirname, <span class="hljs-string">&#x27;build&#x27;</span>), <span class="hljs-comment">// 输出文件路径配置</span><br>  &#125;,<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>, <span class="hljs-comment">//开发环境</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li> 运行指令: webpack</li><li> 结论: 此时功能与上节一致</li></ol><h2 id="3-2-打包样式资源"><a href="#3-2-打包样式资源" class="headerlink" title="3.2 打包样式资源"></a>3.2 打包样式资源</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/sZ7RMUQGkxpHKbl.png#height=291&id=CuvWu&originHeight=134&originWidth=160&originalType=binary&ratio=1&status=done&style=none&width=347"></p><ol start="2"><li>下载安装 loader 包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm i css-loader style-loader less-loader less -D<br></code></pre></div></td></tr></table></figure><ol start="3"><li> 修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  webpack.config.js  webpack的配置文件</span><br><span class="hljs-comment">    作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    所有构建工具都是基于nodejs平台运行的~模块化默认采用commonjs。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// resolve用来拼接绝对路径的方法</span><br><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// webpack配置</span><br>  <span class="hljs-comment">// 入口起点</span><br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  <span class="hljs-comment">// 输出</span><br>  output: &#123;<br>    <span class="hljs-comment">// 输出文件名</span><br>    filename: <span class="hljs-string">&#x27;built.js&#x27;</span>,<br>    <span class="hljs-comment">// 输出路径</span><br>    <span class="hljs-comment">// __dirname nodejs的变量，代表当前文件的目录绝对路径</span><br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-comment">// loader的配置</span><br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      <span class="hljs-comment">// 详细loader配置</span><br>      <span class="hljs-comment">// 不同文件必须配置不同loader处理</span><br>      &#123;<br>        <span class="hljs-comment">// 匹配哪些文件</span><br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-comment">// 使用哪些loader进行处理</span><br>        use: [<br>          <span class="hljs-comment">// use数组中loader执行顺序：从右到左，从下到上 依次执行</span><br>          <span class="hljs-comment">// 创建style标签，将js中的样式资源插入进行，添加到head中生效</span><br>          <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>          <span class="hljs-comment">// 将css文件变成commonjs模块加载js中，里面内容是样式字符串</span><br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>        ],<br>      &#125;,<br>      &#123;<br>        test: <span class="hljs-regexp">/\.less$/</span>,<br>        use: [<br>          <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>          <span class="hljs-comment">// 将less文件编译成css文件</span><br>          <span class="hljs-comment">// 需要下载 less-loader和less</span><br>          <span class="hljs-string">&#x27;less-loader&#x27;</span>,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-comment">// plugins的配置</span><br>  plugins: [<br>    <span class="hljs-comment">// 详细plugins的配置</span><br>  ],<br>  <span class="hljs-comment">// 模式</span><br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>, <span class="hljs-comment">// 开发模式</span><br>  <span class="hljs-comment">// mode: &#x27;production&#x27;</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li> 运行指令: webpack</li></ol><h2 id="3-3-打包-HTML-资源"><a href="#3-3-打包-HTML-资源" class="headerlink" title="3.3 打包 HTML 资源"></a>3.3 打包 HTML 资源</h2><ol><li>创建文件</li><li>下载安装 plugin 包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev html-webpack-plugin<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  loader: 1. 下载   2. 使用（配置loader）</span><br><span class="hljs-comment">  plugins: 1. 下载  2. 引入  3. 使用</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      <span class="hljs-comment">// loader的配置</span><br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-comment">// plugins的配置</span><br>    <span class="hljs-comment">// html-webpack-plugin</span><br>    <span class="hljs-comment">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span><br>    <span class="hljs-comment">// 需求：需要有结构的HTML文件</span><br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      <span class="hljs-comment">// 复制 &#x27;./src/index.html&#x27; 文件，并自动引入打包输出的所有资源（JS/CSS）</span><br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>运行指令: webpack</li></ol><h2 id="3-4-打包图片资源"><a href="#3-4-打包图片资源" class="headerlink" title="3.4 打包图片资源"></a>3.4 打包图片资源</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/Xu6qSEtve5VHT2K.png#height=459&id=wv1DP&originHeight=199&originWidth=143&originalType=binary&ratio=1&status=done&style=none&width=329.9971466064453"></p><ol start="2"><li>下载安装 loader 包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev html-loader url-loader file-loader<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.less$/</span>,<br>        <span class="hljs-comment">// 要使用多个loader处理用use</span><br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;less-loader&#x27;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 问题：默认处理不了html中img图片</span><br>        <span class="hljs-comment">// 处理图片资源</span><br>        test: <span class="hljs-regexp">/\.(jpg|png|gif)$/</span>,<br>        <span class="hljs-comment">// 使用一个loader</span><br>        <span class="hljs-comment">// 下载 url-loader file-loader</span><br>        loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        options: &#123;<br>          <span class="hljs-comment">// 图片大小小于8kb，就会被base64处理</span><br>          <span class="hljs-comment">// 优点: 减少请求数量（减轻服务器压力）</span><br>          <span class="hljs-comment">// 缺点：图片体积会更大（文件请求速度更慢）</span><br>          limit: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>          <span class="hljs-comment">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs</span><br>          <span class="hljs-comment">// 解析时会出问题：[object Module]</span><br>          <span class="hljs-comment">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span><br>          esModule: <span class="hljs-literal">false</span>,<br>          <span class="hljs-comment">// 给图片进行重命名</span><br>          <span class="hljs-comment">// [hash:10]取图片的hash的前10位</span><br>          <span class="hljs-comment">// [ext]取文件原来扩展名</span><br>          name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        test: <span class="hljs-regexp">/\.html$/</span>,<br>        <span class="hljs-comment">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span><br>        loader: <span class="hljs-string">&#x27;html-loader&#x27;</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>运行指令: webpack</li></ol><h2 id="3-5-打包其他资源"><a href="#3-5-打包其他资源" class="headerlink" title="3.5 打包其他资源"></a>3.5 打包其他资源</h2><ol><li> 创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/RVPse9AhLBgjboZ.png#height=407&id=YzoFw&originHeight=221&originWidth=158&originalType=binary&ratio=1&status=done&style=none&width=290.9971466064453"></p><ol start="2"><li> 修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>],<br>      &#125;,<br>      <span class="hljs-comment">// 打包其他资源(除了html/js/css资源以外的资源)</span><br>      &#123;<br>        <span class="hljs-comment">// 排除css/js/html资源</span><br>        exclude: <span class="hljs-regexp">/\.(css|js|html|less)$/</span>,<br>        loader: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        options: &#123;<br>          name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>运行指令: webpack</li></ol><h2 id="3-6-devserver"><a href="#3-6-devserver" class="headerlink" title="3.6 devserver"></a>3.6 devserver</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/lCb9GPcnq4amRyM.png#height=352&id=t1AzV&originHeight=220&originWidth=155&originalType=binary&ratio=1&status=done&style=none&width=247.991455078125"></p><ol start="2"><li>下载 webpack-dev-server 文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm i webpack-dev-server -D<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>],<br>      &#125;,<br>      <span class="hljs-comment">// 打包其他资源(除了html/js/css资源以外的资源)</span><br>      &#123;<br>        <span class="hljs-comment">// 排除css/js/html资源</span><br>        exclude: <span class="hljs-regexp">/\.(css|js|html|less)$/</span>,<br>        loader: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        options: &#123;<br>          name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br><br>  <span class="hljs-comment">// 开发服务器 devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器~~）</span><br>  <span class="hljs-comment">// 特点：只会在内存中编译打包，不会有任何输出</span><br>  <span class="hljs-comment">// 启动devServer指令为：npx webpack server</span><br>  devServer: &#123;<br>    <span class="hljs-comment">// 项目构建后路径</span><br>    contentBase: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>    <span class="hljs-comment">// 启动gzip压缩</span><br>    compress: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 端口号</span><br>    port: <span class="hljs-number">3000</span>,<br>    <span class="hljs-comment">// 自动打开浏览器</span><br>    open: <span class="hljs-literal">true</span>,<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>运行指令: npx webpack server</li></ol><h2 id="3-7-开发环境配置"><a href="#3-7-开发环境配置" class="headerlink" title="3.7 开发环境配置"></a>3.7 开发环境配置</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/ldPriMN1TOyFjvE.png#height=365&id=yJF4H&originHeight=180&originWidth=160&originalType=binary&ratio=1&status=done&style=none&width=324"></p><ol start="2"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  开发环境配置：能让代码运行</span><br><span class="hljs-comment">    运行项目指令：</span><br><span class="hljs-comment">      webpack 会将打包结果输出出去</span><br><span class="hljs-comment">      npx webpack server 只会在内存中编译打包，没有输出</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      <span class="hljs-comment">// loader的配置</span><br>      &#123;<br>        <span class="hljs-comment">// 处理less资源</span><br>        test: <span class="hljs-regexp">/\.less$/</span>,<br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;less-loader&#x27;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 处理css资源</span><br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>],<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 处理图片资源</span><br>        test: <span class="hljs-regexp">/\.(jpg|png|gif)$/</span>,<br>        loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        options: &#123;<br>          limit: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>          name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>          <span class="hljs-comment">// 关闭es6模块化</span><br>          esModule: <span class="hljs-literal">false</span>,<br>          outputPath: <span class="hljs-string">&#x27;imgs&#x27;</span>,<br>        &#125;,<br>      &#125;,<br><br>      &#123;<br>        <span class="hljs-comment">// 处理html中img资源</span><br>        test: <span class="hljs-regexp">/\.html$/</span>,<br>        loader: <span class="hljs-string">&#x27;html-loader&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-comment">// 处理其他资源</span><br>        exclude: <span class="hljs-regexp">/\.(html|js|css|less|jpg|png|gif)/</span>,<br>        loader: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        options: &#123;<br>          name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>          outputPath: <span class="hljs-string">&#x27;media&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-comment">// plugins的配置</span><br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>  devServer: &#123;<br>    contentBase: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>    compress: <span class="hljs-literal">true</span>,<br>    port: <span class="hljs-number">3000</span>,<br>    open: <span class="hljs-literal">true</span>,<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h1 id="第-4-章：webpack-生产环境的基本配置"><a href="#第-4-章：webpack-生产环境的基本配置" class="headerlink" title="第 4 章：webpack 生产环境的基本配置"></a>第 4 章：webpack 生产环境的基本配置</h1><h2 id="4-1-提取-css-成单独文件"><a href="#4-1-提取-css-成单独文件" class="headerlink" title="4.1 提取 css 成单独文件"></a>4.1 提取 css 成单独文件</h2><ol><li> 新建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/OzDMtmf6R9n8Zi4.png#height=261&id=EPWVT&originHeight=133&originWidth=146&originalType=binary&ratio=1&status=done&style=none&width=285.9943084716797"></p><ol start="2"><li> 下载插件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev mini-css-extract-plugin<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<br>          <span class="hljs-comment">// 创建style标签，将样式放入</span><br>          <span class="hljs-comment">// &#x27;style-loader&#x27;,</span><br>          <span class="hljs-comment">// 这个loader取代style-loader。作用：提取js中的css成单独文件</span><br>          MiniCssExtractPlugin.loader,<br>          <span class="hljs-comment">// 将css文件整合到js文件中</span><br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin(&#123;<br>      <span class="hljs-comment">// 对输出的css文件进行重命名</span><br>      filename: <span class="hljs-string">&#x27;css/built.css&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>4 .运行指令: webpack<br>​</p><h2 id="4-2-css-兼容性处理"><a href="#4-2-css-兼容性处理" class="headerlink" title="4.2 css 兼容性处理"></a>4.2 css 兼容性处理</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/op3TaN2XdWw5YkC.png#height=236&id=QaSnc&originHeight=134&originWidth=160&originalType=binary&ratio=1&status=done&style=none&width=282"></p><ol start="2"><li>下载 loader 如果 postcss-loader 使用最新版本会报错，降到 3.0.0 就行了</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev postcss-loader@<span class="hljs-number">3.0</span><span class="hljs-number">.0</span> postcss-preset-env<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 设置nodejs环境变量</span><br><span class="hljs-comment">// process.env.NODE_ENV = &#x27;development&#x27;;</span><br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<br>          MiniCssExtractPlugin.loader,<br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>          <span class="hljs-comment">/*</span><br><span class="hljs-comment">            css兼容性处理：postcss --&gt; postcss-loader postcss-preset-env</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            帮postcss找到package.json中browserslist里面的配置，通过配置加载指定的css兼容性样式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            &quot;browserslist&quot;: &#123;</span><br><span class="hljs-comment">              // 开发环境 --&gt; 设置node环境变量：process.env.NODE_ENV = development</span><br><span class="hljs-comment">              &quot;development&quot;: [</span><br><span class="hljs-comment">                &quot;last 1 chrome version&quot;,</span><br><span class="hljs-comment">                &quot;last 1 firefox version&quot;,</span><br><span class="hljs-comment">                &quot;last 1 safari version&quot;</span><br><span class="hljs-comment">              ],</span><br><span class="hljs-comment">              // 生产环境：默认是看生产环境</span><br><span class="hljs-comment">              &quot;production&quot;: [</span><br><span class="hljs-comment">                &quot;&gt;0.2%&quot;,</span><br><span class="hljs-comment">                &quot;not dead&quot;,</span><br><span class="hljs-comment">                &quot;not op_mini all&quot;</span><br><span class="hljs-comment">              ]</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">          */</span><br>          <span class="hljs-comment">// 使用loader的默认配置</span><br>          <span class="hljs-comment">// &#x27;postcss-loader&#x27;,</span><br>          <span class="hljs-comment">// 修改loader的配置</span><br>          &#123;<br>            loader: <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>            options: &#123;<br>              ident: <span class="hljs-string">&#x27;postcss&#x27;</span>,<br>              plugins: <span class="hljs-function">() =&gt;</span> [<br>                <span class="hljs-comment">// postcss的插件</span><br>                <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-preset-env&#x27;</span>)(),<br>              ],<br>            &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin(&#123;<br>      filename: <span class="hljs-string">&#x27;css/built.css&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>修改 package.json</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;browserslist&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;development&quot;</span>: [<br>    <span class="hljs-string">&quot;last 1 chrome version&quot;</span>,<br>    <span class="hljs-string">&quot;last 1 firefox version&quot;</span>,<br>    <span class="hljs-string">&quot;last 1 safari version&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;production&quot;</span>: [<br>    <span class="hljs-string">&quot;&gt;0.2%&quot;</span>,<br>    <span class="hljs-string">&quot;not dead&quot;</span>,<br>    <span class="hljs-string">&quot;not op_mini all&quot;</span><br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="5"><li><p>运行指令: webpack</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>4.3 压缩 css</p></li><li><p>创建文件</p></li></ol><p><img src="https://i.loli.net/2021/07/02/lPULjhvIVq1MywF.png#height=241&id=GqGq9&originHeight=126&originWidth=160&originalType=binary&ratio=1&status=done&style=none&width=306"></p><ol start="2"><li> 下载安装包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev optimize-css-assets-webpack-plugin<br></code></pre></div></td></tr></table></figure><p>官方改用另一种，具体配置看官网<a href="https://www.npmjs.com/package/css-minimizer-webpack-plugin">https://www.npmjs.com/package/css-minimizer-webpack-plugin</a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install css-minimizer-webpack-plugin --save-dev<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 设置nodejs环境变量</span><br><span class="hljs-comment">// process.env.NODE_ENV = &#x27;development&#x27;;</span><br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [<br>          MiniCssExtractPlugin.loader,<br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>          &#123;<br>            loader: <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>            options: &#123;<br>              ident: <span class="hljs-string">&#x27;postcss&#x27;</span>,<br>              plugins: <span class="hljs-function">() =&gt;</span> [<br>                <span class="hljs-comment">// postcss的插件</span><br>                <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-preset-env&#x27;</span>)(),<br>              ],<br>            &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin(&#123;<br>      filename: <span class="hljs-string">&#x27;css/built.css&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-comment">// 压缩css</span><br>    <span class="hljs-keyword">new</span> OptimizeCssAssetsWebpackPlugin(),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>运行指令: webpack</li></ol><h2 id="4-4-js-语法检查"><a href="#4-4-js-语法检查" class="headerlink" title="4.4 js 语法检查"></a>4.4 js 语法检查</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/ZzPrOquT3QCWbKg.png#height=197&id=zr3dw&originHeight=110&originWidth=160&originalType=binary&ratio=1&status=done&style=none&width=286"></p><ol start="2"><li>下载安装包 airbnb-base 官网<a href="https://www.npmjs.com/package/eslint-config-airbnb-base">https://www.npmjs.com/package/eslint-config-airbnb-base</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev eslint-loader eslint eslint-config-airbnb-base eslint-plugin-<span class="hljs-keyword">import</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        语法检查： eslint-loader  eslint</span><br><span class="hljs-comment">          注意：只检查自己写的源代码，第三方的库是不用检查的</span><br><span class="hljs-comment">          设置检查规则：</span><br><span class="hljs-comment">            package.json中eslintConfig中设置~</span><br><span class="hljs-comment">              &quot;eslintConfig&quot;: &#123;</span><br><span class="hljs-comment">                &quot;extends&quot;: &quot;airbnb-base&quot;</span><br><span class="hljs-comment">              &#125;</span><br><span class="hljs-comment">            airbnb --&gt; eslint-config-airbnb-base  eslint-plugin-import eslint</span><br><span class="hljs-comment">      */</span><br>      &#123;<br>        test: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        loader: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>        options: &#123;<br>          <span class="hljs-comment">// 自动修复eslint的错误</span><br>          fix: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>如果配置每行结尾都报红色警告，将编译器尾行序列 CRLF 换成 LF(我用的 vscode 在编译器右下角可以切换)</p><ol start="4"><li>配置 package.json</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;eslintConfig&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;extends&quot;</span>: <span class="hljs-string">&quot;airbnb-base&quot;</span>,<br>  <span class="hljs-string">&quot;env&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;browser&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="5"><li>运行指令: webpack</li></ol><h2 id="4-5-js-兼容性处理"><a href="#4-5-js-兼容性处理" class="headerlink" title="4.5 js 兼容性处理"></a>4.5 js 兼容性处理</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/lmIBURaWuSjXyTE.png#height=321&id=eVoCW&originHeight=172&originWidth=145&originalType=binary&ratio=1&status=done&style=none&width=271"></p><ol start="2"><li>下载安装包</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install --save-dev babel-loader @babel/core @babel/preset-env @babel/polyfill core-js<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        js兼容性处理：babel-loader @babel/core</span><br><span class="hljs-comment">          1. 基本js兼容性处理 --&gt; @babel/preset-env</span><br><span class="hljs-comment">            问题：只能转换基本语法，如promise高级语法不能转换</span><br><span class="hljs-comment">          2. 全部js兼容性处理 --&gt; @babel/polyfill</span><br><span class="hljs-comment">            问题：我只要解决部分兼容性问题，但是将所有兼容性代码全部引入，体积太大了~</span><br><span class="hljs-comment">          3. 需要做兼容性处理的就做：按需加载  --&gt; core-js</span><br><span class="hljs-comment">      */</span><br>      &#123;<br>        test: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        loader: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>        options: &#123;<br>          <span class="hljs-comment">// 预设：指示babel做怎么样的兼容性处理</span><br>          presets: [<br>            [<br>              <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,<br>              &#123;<br>                <span class="hljs-comment">// 按需加载</span><br>                useBuiltIns: <span class="hljs-string">&#x27;usage&#x27;</span>,<br>                <span class="hljs-comment">// 指定core-js版本</span><br>                corejs: &#123;<br>                  version: <span class="hljs-number">3</span>,<br>                &#125;,<br>                <span class="hljs-comment">// 指定兼容性做到哪个版本浏览器</span><br>                targets: &#123;<br>                  chrome: <span class="hljs-string">&#x27;60&#x27;</span>,<br>                  firefox: <span class="hljs-string">&#x27;60&#x27;</span>,<br>                  ie: <span class="hljs-string">&#x27;9&#x27;</span>,<br>                  safari: <span class="hljs-string">&#x27;10&#x27;</span>,<br>                  edge: <span class="hljs-string">&#x27;17&#x27;</span>,<br>                &#125;,<br>              &#125;,<br>            ],<br>          ],<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="4"><li>运行指令: webpack</li></ol><h2 id="4-6-js-压缩"><a href="#4-6-js-压缩" class="headerlink" title="4.6 js 压缩"></a>4.6 js 压缩</h2><ol><li> 创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/BhOAbwStlcXnuR2.png#height=208&id=Pe4rh&originHeight=110&originWidth=152&originalType=binary&ratio=1&status=done&style=none&width=287.98863220214844"></p><ol start="2"><li> 修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>    &#125;),<br>  ],<br>  <span class="hljs-comment">// 生产环境下会自动压缩js代码</span><br>  mode: <span class="hljs-string">&#x27;production&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li> 运行指令: webpack</li></ol><h2 id="4-7-HTML-压缩"><a href="#4-7-HTML-压缩" class="headerlink" title="4.7 HTML 压缩"></a>4.7 HTML 压缩</h2><ol><li> 创建文件</li></ol><p><img src="https://www.yuque.com/api/filetransfer/images?url=https://i.loli.net/2021/07/02/BhOAbwStlcXnuR2.png&sign=3f93d1f31ace3fc97d0f7563476e55baa257b7848cbe26b668e90bd88709ecc6#from=url&height=182&id=blnxV&margin=%5Bobject%20Object%5D&originHeight=110&originWidth=152&originalType=binary&ratio=2&status=done&style=none&width=250.98863220214844"></p><ol start="2"><li> 修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>      <span class="hljs-comment">// 压缩html代码</span><br>      minify: &#123;<br>        <span class="hljs-comment">// 移除空格</span><br>        collapseWhitespace: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// 移除注释</span><br>        removeComments: <span class="hljs-literal">true</span>,<br>      &#125;,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;production&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li> 运行指令:webpack</li></ol><h2 id="4-8-生产环境配置"><a href="#4-8-生产环境配置" class="headerlink" title="4.8 生产环境配置"></a>4.8 生产环境配置</h2><ol><li>创建文件</li></ol><p><img src="https://i.loli.net/2021/07/02/ozGdqYuhPfBIrLN.png#height=105&id=bJnWX&originHeight=55&originWidth=144&originalType=binary&ratio=1&status=done&style=none&width=274.99147033691406"></p><ol start="2"><li>修改配置文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; resolve &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mini-css-extract-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">// 定义nodejs环境变量：决定使用browserslist的哪个环境</span><br>process.env.NODE_ENV = <span class="hljs-string">&#x27;production&#x27;</span>;<br><br><span class="hljs-comment">// 复用loader</span><br><span class="hljs-keyword">const</span> commonCssLoader = [<br>  MiniCssExtractPlugin.loader,<br>  <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>  &#123;<br>    <span class="hljs-comment">// 还需要在package.json中定义browserslist</span><br>    loader: <span class="hljs-string">&#x27;postcss-loader&#x27;</span>,<br>    options: &#123;<br>      ident: <span class="hljs-string">&#x27;postcss&#x27;</span>,<br>      <span class="hljs-comment">// eslint-disable-next-line global-require</span><br>      plugins: <span class="hljs-function">() =&gt;</span> [<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;postcss-preset-env&#x27;</span>)()],<br>    &#125;,<br>  &#125;,<br>];<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&#x27;./src/js/index.js&#x27;</span>,<br>  output: &#123;<br>    filename: <span class="hljs-string">&#x27;js/built.js&#x27;</span>,<br>    path: resolve(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        use: [...commonCssLoader],<br>      &#125;,<br>      &#123;<br>        test: <span class="hljs-regexp">/\.less$/</span>,<br>        use: [...commonCssLoader, <span class="hljs-string">&#x27;less-loader&#x27;</span>],<br>      &#125;,<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">        正常来讲，一个文件只能被一个loader处理。</span><br><span class="hljs-comment">        当一个文件要被多个loader处理，那么一定要指定loader执行的先后顺序：</span><br><span class="hljs-comment">          先执行eslint 在执行babel</span><br><span class="hljs-comment">      */</span><br>      &#123;<br>        <span class="hljs-comment">// 在package.json中eslintConfig --&gt; airbnb</span><br>        test: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-comment">// 优先执行</span><br>        enforce: <span class="hljs-string">&#x27;pre&#x27;</span>,<br>        loader: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>        options: &#123;<br>          fix: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        test: <span class="hljs-regexp">/\.js$/</span>,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>        loader: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br>        options: &#123;<br>          presets: [<br>            [<br>              <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span>,<br>              &#123;<br>                useBuiltIns: <span class="hljs-string">&#x27;usage&#x27;</span>,<br>                corejs: &#123; <span class="hljs-attr">version</span>: <span class="hljs-number">3</span> &#125;,<br>                targets: &#123;<br>                  chrome: <span class="hljs-string">&#x27;60&#x27;</span>,<br>                  firefox: <span class="hljs-string">&#x27;50&#x27;</span>,<br>                &#125;,<br>              &#125;,<br>            ],<br>          ],<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        test: <span class="hljs-regexp">/\.(jpg|png|gif)/</span>,<br>        loader: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        options: &#123;<br>          limit: <span class="hljs-number">8</span> * <span class="hljs-number">1024</span>,<br>          name: <span class="hljs-string">&#x27;[hash:10].[ext]&#x27;</span>,<br>          outputPath: <span class="hljs-string">&#x27;imgs&#x27;</span>,<br>          esModule: <span class="hljs-literal">false</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        test: <span class="hljs-regexp">/\.html$/</span>,<br>        loader: <span class="hljs-string">&#x27;html-loader&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        exclude: <span class="hljs-regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,<br>        loader: <span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>        options: &#123;<br>          outputPath: <span class="hljs-string">&#x27;media&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin(&#123;<br>      filename: <span class="hljs-string">&#x27;css/built.css&#x27;</span>,<br>    &#125;),<br>    <span class="hljs-keyword">new</span> OptimizeCssAssetsWebpackPlugin(),<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>,<br>      minify: &#123;<br>        collapseWhitespace: <span class="hljs-literal">true</span>,<br>        removeComments: <span class="hljs-literal">true</span>,<br>      &#125;,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&#x27;production&#x27;</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>运行指令: webpack</li></ol>]]></content>
    
    
    <categories>
      
      <category>Webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Webpack5.0</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vuex</title>
    <link href="/2021/06/30/Vuex/"/>
    <url>/2021/06/30/Vuex/</url>
    
    <content type="html"><![CDATA[<p>vuex 是一个专门为 vue.js 设计的集中式状态管理架构。状态？我把它理解为在 data 中的属性需要共享给其他 vue 组件使用的部分，就叫做状态。简单的说就是 data 中需要共用的属性。比如：我们有几个页面要显示用户名称和用户等级，或者显示用户的地理位置。如果我们不把这些属性设置为状态，那每个页面遇到后，都会到服务器进行查找计算，返回后再显示。在中大型项目中会有很多共用的数据，所以尤大神给我们提供了 vuex。</p><h1 id="初出茅庐-来个小-Demo"><a href="#初出茅庐-来个小-Demo" class="headerlink" title="初出茅庐 来个小 Demo"></a>初出茅庐 来个小 Demo</h1><h2 id="引入-vuex"><a href="#引入-vuex" class="headerlink" title="引入 vuex"></a>引入 vuex</h2><p>1.利用 npm 包管理工具，进行安装 vuex。<br>项目初始化用的<a href="https://github.com/13982720426/vue-cli">vue-cli</a>克隆下来，然后在控制命令行中输入下边的命令就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm  install vuex --save<br></code></pre></div></td></tr></table></figure><p>需要注意的是这里一定要加上 –save，因为你这个包我们在生产环境中是要使用的。还有项目名字不要和 vuex 一样会冲突 2.新建一个 vuex 文件夹（这个不是必须的），并在文件夹下新建 store.js 文件，文件中引入我们的 vue 和 vuex</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>3.使用我们 vuex，引入之后用 Vue.use 进行引用。<br>Vue.use(Vuex);<br>通过这三步的操作，vuex 就算引用成功了，接下来我们就可以尽情的玩耍了。</p><h2 id="入门小-Demo："><a href="#入门小-Demo：" class="headerlink" title="入门小 Demo："></a>入门小 Demo：</h2><p>我们这个小案例先声明一个 state 的 count 状态，在页面中使用显示这个 count，然后可以利用按钮进行加减， 1.现在我们 store.js 文件里增加一个常量对象。store.js 文件就是我们在引入 vuex 时的那个文件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> state = &#123;<br>  count: <span class="hljs-number">1</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>2.用 export default 封装代码，让外部可以引用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>  state,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>3.新建一个 vue 的模板，位置在 components 文件夹下，名字叫 count.vue。在模板中我们引入我们刚建的 store.js 文件，并在模板中用$store.state.count 输出 count 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;<br>        &lt;hr/&gt;<br>        &lt;h3&gt;&#123;&#123;$store.state.count&#125;&#125;&lt;/h3&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/vuex/store&#x27;</span><br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span>&#123;<br>                msg:<span class="hljs-string">&#x27;Hello Vuex&#x27;</span>,<br><br>            &#125;<br>        &#125;,<br>        store<br><br>    &#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>4.在 store.js 文件中加入两个改变 state 的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mutations = &#123;<br>  <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">state</span>)</span> &#123;<br>    state.count++;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">reduce</span>(<span class="hljs-params">state</span>)</span> &#123;<br>    state.count--;<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>这里的 mutations 是固定的写法，意思是改变的，只知道我们要改变 state 的数值的方法，必须写在 mutations 里就可以了。 5.在 count.vue 模板中加入两个按钮，并调用 mutations 中的方法。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div&gt;<br>    &lt;button @click=<span class="hljs-string">&quot;$store.commit(&#x27;add&#x27;)&quot;</span>&gt;+&lt;/button&gt;<br>    &lt;button @click=<span class="hljs-string">&quot;$store.commit(&#x27;reduce&#x27;)&quot;</span>&gt;-&lt;/button&gt;<br>&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p>这样进行预览就可以实现对 vuex 中的 count 进行加减了。<br>​</p><h1 id="state-访问状态对象"><a href="#state-访问状态对象" class="headerlink" title="state 访问状态对象"></a>state 访问状态对象</h1><p>在第 1 节我们已经写了一个 const state ，这个就是我们说的访问状态对象，它就是我们 SPA（单页应用程序）中的共享值。今天我们主要学习状态对象赋值给内部对象，也就是把 stroe.js 中的值，赋值给我们模板里 data 中的值。我们有三种赋值方式，我们一个一个来学习一下。</p><h2 id="一、通过-computed-的计算属性直接赋值"><a href="#一、通过-computed-的计算属性直接赋值" class="headerlink" title="一、通过 computed 的计算属性直接赋值"></a>一、通过 computed 的计算属性直接赋值</h2><p>computed 属性可以在输出前，对 data 中的值进行改变，我们就利用这种特性把 store.js 中的 state 值赋值给我们模板中的 data 值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    <span class="hljs-function"><span class="hljs-title">count</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.count;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里需要注意的是 return this.$store.state.count这一句，一定要写this，要不你会找不到$store 的。这种写法很好理解，但是写起来是比较麻烦的，那我们来看看第二种写法。</p><h2 id="二、通过-mapState-的对象来赋值"><a href="#二、通过-mapState-的对象来赋值" class="headerlink" title="二、通过 mapState 的对象来赋值"></a>二、通过 mapState 的对象来赋值</h2><p>我们首先要用 import 引入 mapState。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>然后还在 computed 计算属性里写如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed: mapState(&#123;<br>  count: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.count,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这里我们使用 ES6 的箭头函数来给 count 赋值。</p><h2 id="三、通过-mapState-的数组来赋值"><a href="#三、通过-mapState-的数组来赋值" class="headerlink" title="三、通过 mapState 的数组来赋值"></a>三、通过 mapState 的数组来赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed: mapState([<span class="hljs-string">&#x27;count&#x27;</span>]);<br></code></pre></div></td></tr></table></figure><p>这个算是最简单的写法了，在实际项目开发当中也经常这样使用。<br>这就是三种赋值方式，是不是很简单，虽然简单，但是在实际项目中经常使用，一定要自己动手练习两遍啊。<br>​</p><h1 id="Mutations-修改状态"><a href="#Mutations-修改状态" class="headerlink" title="Mutations 修改状态"></a>Mutations 修改状态</h1><h2 id="store-commit"><a href="#store-commit" class="headerlink" title="$store.commit( )"></a>$store.commit( )</h2><p>Vuex 提供了 commit 方法来修改状态，我们粘贴出第一节课的代码内容，简单回顾一下，我们在 button 上的修改方法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;$store.commit(&#x27;add&#x27;)&quot;</span>&gt;+&lt;/button&gt;<br>&lt;button @click=<span class="hljs-string">&quot;$store.commit(&#x27;reduce&#x27;)&quot;</span>&gt;-&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p>store.js 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mutations = &#123;<br>  <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">state</span>)</span> &#123;<br>    state.count++;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">reduce</span>(<span class="hljs-params">state</span>)</span> &#123;<br>    state.count--;<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="传值："><a href="#传值：" class="headerlink" title="传值："></a>传值：</h2><p>这只是一个最简单的修改状态的操作，在实际项目中我们常常需要在修改状态时传值。比如上边的例子，是我们每次只加 1，而现在我们要通过所传的值进行相加。其实我们只需要在 Mutations 里再加上一个参数，并在 commit 的时候传递就就可以了。我们来看具体代码：<br>现在 store.js 文件里给 add 方法加上一个参数 n。添加的地方我已经标黄了。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mutations = &#123;<br>  <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">state, n</span>)</span> &#123;<br>    state.count += n;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">reduce</span>(<span class="hljs-params">state</span>)</span> &#123;<br>    state.count--;<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>在 Count.vue 里修改按钮的 commit( )方法传递的参数，我们传递 10，意思就是每次加 10.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>   &lt;button @click=<span class="hljs-string">&quot;$store.commit(&#x27;add&#x27;,10)&quot;</span>&gt;+&lt;/button&gt;<br>   &lt;button @click=<span class="hljs-string">&quot;$store.commit(&#x27;reduce&#x27;)&quot;</span>&gt;-&lt;/button&gt;<br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p>这样两个简单的修改我们就完成了传值，我们可以在浏览器中实验一下了。</p><h2 id="模板获取-Mutations-方法"><a href="#模板获取-Mutations-方法" class="headerlink" title="模板获取 Mutations 方法"></a>模板获取 Mutations 方法</h2><p>实际开发中我们也不喜欢看到$store.commit( )这样的方法出现，我们希望跟调用模板里的方法一样调用。<br>例如：@click=”reduce” 就和没引用 vuex 插件一样。<br>要达到这种写法，只需要简单的两部就可以了： 1.在模板 count.vue 里用 import 引入我们的 mapMutations：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState, mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>2.在模板的<script>标签里添加 methods 属性，并加入 mapMutations</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">methods: mapMutations([<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-string">&#x27;reduce&#x27;</span>]);<br></code></pre></div></td></tr></table></figure><p>过上边两部，我们已经可以在模板中直接使用我们的 reduce 或者 add 方法了，就像下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;reduce&quot;</span>&gt;-&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><h1 id="getters-计算过滤操作"><a href="#getters-计算过滤操作" class="headerlink" title="getters 计算过滤操作"></a>getters 计算过滤操作</h1><p>getters 从表面是获得的意思，可以把他看作在获取数据之前进行的一种再编辑,相当于对数据的一个过滤和加工。你可以把它看作 store.js 的计算属性。</p><h2 id="getters-基本用法："><a href="#getters-基本用法：" class="headerlink" title="getters 基本用法："></a>getters 基本用法：</h2><p>比如我们现在要对 store.js 文件中的 count 进行一个计算属性的操作，就是在它输出前，给它加上 100.<br>我们首先要在 store.js 里用 const 声明我们的 getters 属性。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> getters = &#123;<br>  count: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">state</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> (state.count += <span class="hljs-number">100</span>);<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>写好了 gettters 之后，我们还需要在 Vuex.Store()里引入，由于之前我们已经引入了 state 盒 mutations，所以引入里有三个引入属性。代码如下，</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>  state,<br>  mutations,<br>  getters,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>在 store.js 里的配置算是完成了，我们需要到模板页对 computed 进行配置。在 vue 的构造器里边只能有一个 computed 属性，如果你写多个，只有最后一个 computed 属性可用，所以要对 computed 属性进行一个改造。改造时我们使用 ES6 中的展开运算符”…”。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    ...mapState([<span class="hljs-string">&quot;count&quot;</span>]),<br>    <span class="hljs-function"><span class="hljs-title">count</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.getters.count;<br>    &#125;<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>需要注意的是，你写了这个配置后，在每次 count 的值发生变化的时候，都会进行加 100 的操作。</p><h2 id="用-mapGetters-简化模板写法："><a href="#用-mapGetters-简化模板写法：" class="headerlink" title="用 mapGetters 简化模板写法："></a>用 mapGetters 简化模板写法：</h2><p>我们都知道 state 和 mutations 都有 map 的引用方法把我们模板中的编码进行简化，我们的 getters 也是有的，我们来看一下代码。<br>首先用 import 引入我们的`mapGetters</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState, mapMutations, mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>在 computed 属性中加入 mapGetters</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">...mapGetters([<span class="hljs-string">&quot;count&quot;</span>])<br></code></pre></div></td></tr></table></figure><p>相信大家已经会了 getters 的用法</p><h1 id="actions-异步修改状态"><a href="#actions-异步修改状态" class="headerlink" title="actions 异步修改状态"></a>actions 异步修改状态</h1><p>actions 和之前讲的 Mutations 功能基本一样，不同点是，actions 是异步的改变 state 状态，而 Mutations 是同步改变状态。​<br><strong>在 store.js 中声明 actions</strong> actions 是可以调用 Mutations 里的方法的，我们还是继续在上节课的代码基础上进行学习，在 actions 里调用 add 和 reduce 两个方法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> actions = &#123;<br>  <span class="hljs-function"><span class="hljs-title">addAction</span>(<span class="hljs-params">context</span>)</span> &#123;<br>    context.commit(<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-number">10</span>);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">reduceAction</span>(<span class="hljs-params">&#123; commit &#125;</span>)</span> &#123;<br>    commit(<span class="hljs-string">&#x27;reduce&#x27;</span>);<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>在 actions 里写了两个方法 addAction 和 reduceAction，在方法体里，我们都用 commit 调用了 Mutations 里边的方法。细心的小伙伴会发现这两个方法传递的参数也不一样。</p><ul><li>context：上下文对象，这里你可以理解称 store 本身。</li><li>{commit}：直接把 commit 对象传递过来，可以让方法体逻辑和代码更清晰明了。</li></ul><h2 id="模板中的使用"><a href="#模板中的使用" class="headerlink" title="模板中的使用"></a>模板中的使用</h2><p>我们需要在 count.vue 模板中编写代码，让 actions 生效。我们先复制两个以前有的按钮，并改成我们的 actions 里的方法名，分别是：addAction 和 reduceAction。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>  &lt;button @click=<span class="hljs-string">&quot;addAction&quot;</span>&gt;+&lt;/button&gt;<br>  &lt;button @click=<span class="hljs-string">&quot;reduceAction&quot;</span>&gt;-&lt;/button&gt;<br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p>改造一下我们的 methods 方法，首先还是用扩展运算符把 mapMutations 和 mapActions 加入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">methods:&#123;<br>    ...mapMutations([<br>        <span class="hljs-string">&#x27;add&#x27;</span>,<span class="hljs-string">&#x27;reduce&#x27;</span><br>    ]),<br>    ...mapActions([<span class="hljs-string">&#x27;addAction&#x27;</span>,<span class="hljs-string">&#x27;reduceAction&#x27;</span>])<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>你还要记得用 import 把我们的 mapActions 引入才可以使用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState, mapMutations, mapGetters, mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h2 id="增加异步检验"><a href="#增加异步检验" class="headerlink" title="增加异步检验"></a>增加异步检验</h2><p>我们现在看的效果和我们用 Mutations 作的一模一样，肯定有的小伙伴会好奇，那 actions 有什么用，我们为了演示 actions 的异步功能，我们增加一个计时器（setTimeOut）延迟执行。在 addAction 里使用 setTimeOut 进行延迟执行。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">addAction</span>(<span class="hljs-params">context</span>)</span> &#123;<br>  context.commit(<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-number">10</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    context.commit(<span class="hljs-string">&quot;reduce&quot;</span>);<br>  &#125;, <span class="hljs-number">3000</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我比reduce先执行了&quot;</span>);<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>我们可以看到在控制台先打印出了‘我比 reduce 提前执行’这句话。</p><h1 id="module-模块组"><a href="#module-模块组" class="headerlink" title="module 模块组"></a>module 模块组</h1><p>随着项目的复杂性增加，我们共享的状态越来越多，这时候我们就需要把我们状态的各种操作进行一个分组，分组后再进行按组编写。那今天我们就学习一下 module：状态管理器的模块组操作。</p><h2 id="声明模块组："><a href="#声明模块组：" class="headerlink" title="声明模块组："></a>声明模块组：</h2><p>在 vuex/store.js 中声明模块组，我们还是用我们的 const 常量的方法声明模块组。代码如下：​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  state,<br>  mutations,<br>  getters,<br>  actions,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>声明好后，我们需要修改原来 Vuex.Stroe 里的值：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>  modules: &#123; <span class="hljs-attr">a</span>: moduleA &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><h2 id="在模板中使用"><a href="#在模板中使用" class="headerlink" title="在模板中使用"></a>在模板中使用</h2><p>现在我们要在模板中使用 count 状态，要用插值的形式写入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h3&gt;&#123;&#123;$store.state.a.count&#125;&#125;&lt;/h3&gt;<br></code></pre></div></td></tr></table></figure><p>如果想用简单的方法引入，还是要在我们的计算属性中 rutrun 我们的状态,，并且在用到插值的写法<code>&lt;h3&gt;&#123;&#123;count&#125;&#125;&lt;/h3&gt;</code>写法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    <span class="hljs-function"><span class="hljs-title">count</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.a.count;<br>    &#125;<br>&#125;,<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue-router</title>
    <link href="/2021/06/27/vue-router/"/>
    <url>/2021/06/27/vue-router/</url>
    
    <content type="html"><![CDATA[<p>简介： 由于 Vue 在开发时对路由支持的不足，后来官方补充了 vue-router 插件，它在 Vue 的生态环境中非常重要，在实际开发中只要编写一个页面就会操作 vue-router。要学习 vue-router 就要先知道这里的路由是什么？这里的路由并不是指我们平时所说的硬件路由器，这里的路由就是 SPA（单页应用）的路径管理器。再通俗的说，vue-router 就是我们 WebApp 的链接路径管理系统。<br>为什么我们不能像原来一样直接用<a></a>标签编写链接哪？因为我们用 Vue 作的都是单页应用，就相当于只有一个主的 index.html 页面，所以你写的<a></a>标签是不起作用的，你必须使用 vue-router 来进行管理。</p><h1 id="Vue-router-入门"><a href="#Vue-router-入门" class="headerlink" title="Vue-router 入门"></a>Vue-router 入门</h1><p>在安装路由之前需要 vue-cli 初始化，这里是我的 vue-cli 初始化地址<a href="https://github.com/13982720426/vue-cli">https://github.com/13982720426/vue-cli</a></p><h2 id="安装-vue-router"><a href="#安装-vue-router" class="headerlink" title="安装 vue-router"></a>安装 vue-router</h2><p>vue-router 是一个插件包，所以我们还是需要用 npm 来进行安装的。打开命令行工具，进入你的项目目录，输入下面命令。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install vue-router --save-dev<br></code></pre></div></td></tr></table></figure><p>如果你安装很慢，也可以用 cnpm 进行安装，如果你在使用 vue-cli 中已经选择安装了 vue-router，那这里不需要重复安装了。<br><strong>解读 router/index.js 文件</strong><br>我们用 vue-cli 生产了我们的项目结构，你可以在 src/router/index.js 文件，这个文件就是路由的核心文件，我们先解读一下它。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>; <span class="hljs-comment">//引入Vue</span><br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>; <span class="hljs-comment">//引入vue-router</span><br><span class="hljs-keyword">import</span> Hello <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hello&#x27;</span>; <span class="hljs-comment">//引入根目录下的Hello.vue组件</span><br><br>Vue.use(Router); <span class="hljs-comment">//Vue全局使用Router</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  routes: [<br>    <span class="hljs-comment">//配置路由，这里是个数组</span><br>    &#123;<br>      <span class="hljs-comment">//每一个链接都是一个对象</span><br>      path: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-comment">//链接路径</span><br>      name: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-comment">//路由名称，</span><br>      component: Hello, <span class="hljs-comment">//对应的组件模板</span><br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>上边的代码中已经对每行都进行了注释，其实在这个路由文件里只配置了一个功能，就是在进入项目时，显示 Hello.vue 里边的内容代码。<br>** 增加一个 Hi 的路由和页面 **<br>对路由的核心文件熟悉后，我们试着增加一个路由配置，我们希望在地址栏输入 <a href="http://localhost:8080/#/hi">http://localhost:8080/#/hi</a> 的时候出现一个新的页面<br>​</p><p>看到了效果，我们看一下具体的操作步骤：</p><ul><li>在 src/components 目录下，新建 Hi.vue 文件。</li><li>编写文件内容，和我们之前讲过的一样，文件要包括三个部分<template><script>和<style>。文件很简单，只是打印一句话。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;hi&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;Hi&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><ul><li>引入 Hi 组件：我们在 router/index.js 文件的上边引入 Hi 组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Hi <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hi&#x27;</span>;<br></code></pre></div></td></tr></table></figure><ul><li>增加路由配置：在 router/index.js 文件的 routes[]数组中，新增加一个对象，代码如下。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>path:<span class="hljs-string">&#x27;/hi&#x27;</span>,<br>name:<span class="hljs-string">&#x27;Hi&#x27;</span>,<br>component:Hi<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>通过上面的配置已经可以增加一个新的页面了。是不是觉的自己的 Vue 功力一下子就提升了一个档次。为了方便小伙伴查看，贴出现在的路由配置文件:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>; <span class="hljs-comment">//引入Vue</span><br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>; <span class="hljs-comment">//引入vue-router</span><br><span class="hljs-keyword">import</span> Hello <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hello&#x27;</span>; <span class="hljs-comment">//引入根目录下的Hello.vue组件</span><br><span class="hljs-keyword">import</span> Hi <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hi&#x27;</span>;<br><br>Vue.use(Router); <span class="hljs-comment">//Vue全局使用Router</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  routes: [<br>    <span class="hljs-comment">//配置路由，这里是个数组</span><br>    &#123;<br>      <span class="hljs-comment">//每一个链接都是一个对象</span><br>      path: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-comment">//链接路径</span><br>      name: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-comment">//路由名称，</span><br>      component: Hello, <span class="hljs-comment">//对应的组件模板</span><br>    &#125;,<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/hi&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;Hi&#x27;</span>,<br>      component: Hi,<br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><h2 id="router-link-制作导航"><a href="#router-link-制作导航" class="headerlink" title="router-link 制作导航"></a>router-link 制作导航</h2><p>现在通过在地址栏改变字符串地址，已经可以实现页面内容的变化了。这并不满足需求，我们需要的是在页面上有个像样的导航链接，我们只要点击就可以实现页面内容的变化。制作链接需要<router-link>标签，我们先来看一下它的语法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-link to=<span class="hljs-string">&quot;/&quot;</span>&gt;[显示字段]&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><ul><li>to：是我们的导航路径，要填写的是你在 router/index.js 文件里配置的 path 值，如果要导航到默认首页，只需要写成 to=”/” ，</li><li>[显示字段] ：就是我们要显示给用户的导航名称，比如首页 新闻页。</li></ul><p>明白了 router-link 的基本语法，我们在 src/App.vue 文件中的 template 里加入下面代码，实现导航。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>  导航 ：&lt;router-link to=<span class="hljs-string">&quot;/&quot;</span>&gt;首页&lt;/router-link&gt;<br>  &lt;router-link to=<span class="hljs-string">&quot;/hi&quot;</span>&gt;Hi页面&lt;/router-link&gt;<br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p>现在我们访问页面，发现已经多出了导航。<br>总结：这节课我们在 vue-cli 的构建下对 vue-router 有了一个基本的了解，学会了 vue-router 的核心文件的基本结构，学会了如何添加一个新的模板页面，还学会了用<router-link>标签设置导航。在这里我必须要再强调一遍，路由是 Vue 中最重点的内容，你必须完全掌握学会。<br>​</p><h1 id="vue-router-配置子路由"><a href="#vue-router-配置子路由" class="headerlink" title="vue-router 配置子路由"></a>vue-router 配置子路由</h1><p>初步了解 Vue-router 的初步知识，也学会了基本的跳转，那我们学习一下子菜单的路由方式，也叫子路由。子路由的情况一般用在一个页面有他的基础模版，然后它下面的页面都隶属于这个模版，只是部分改变样式。我们接着第一节课的实例，在 Hi 页面的下面新建两个子页面，分别是 “Hi 页面 1” 和 “Hi 页面 2”，来实现子路由。</p><h2 id="一、改造-App-vue-的导航代码"><a href="#一、改造-App-vue-的导航代码" class="headerlink" title="一、改造 App.vue 的导航代码"></a>一、改造 App.vue 的导航代码</h2><p>我们需要先改造 app.vue 的导航代码，来实现基本的导航功能。我们用<router-link>标签增加了两个新的导航链接。<br><strong>App.vue 代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>  导航 ：&lt;router-link to=<span class="hljs-string">&quot;/&quot;</span>&gt;首页&lt;<span class="hljs-regexp">/router-link&gt; |&lt;router-link to=&quot;/</span>hi<span class="hljs-string">&quot;&gt;Hi页面&lt;/router-link&gt; |</span><br><span class="hljs-string">  &lt;router-link to=&quot;</span>/hi/hi1<span class="hljs-string">&quot;&gt;-Hi页面1&lt;/router-link&gt; |&lt;router-link to=&quot;</span>/hi/hi2<span class="hljs-string">&quot;&gt;-Hi页面2&lt;/router-link&gt;</span><br><span class="hljs-string">&lt;/p&gt;</span><br></code></pre></div></td></tr></table></figure><p>这时候我们再访问主页的时候导航栏就发生了变化。多出了两个自导航：Hi 页面 1 和 Hi 页面 2</p><h2 id="二、改写-components-Hi-vue-页面"><a href="#二、改写-components-Hi-vue-页面" class="headerlink" title="二、改写 components/Hi.vue 页面"></a>二、改写 components/Hi.vue 页面</h2><p>把 Hi.vue 改成一个通用的模板，加入<router-view>标签，给子模板提供插入位置。“Hi 页面 1” 和 “Hi 页面 2” 都相当于“Hi 页面”的子页面，有点想继承关系。我们在“Hi 页面”里加入<router-view>标签。<br><strong>components/Hi.vue,就是第 5 行的代码，其他代码不变</strong>​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br><br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;hi&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;Hi&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h2 id="三、在-components-目录下新建两个组件模板-Hi1-vue-和-Hi2-vue"><a href="#三、在-components-目录下新建两个组件模板-Hi1-vue-和-Hi2-vue" class="headerlink" title="三、在 components 目录下新建两个组件模板 Hi1.vue 和 Hi2.vue"></a>三、在 components 目录下新建两个组件模板 Hi1.vue 和 Hi2.vue</h2><p>新建的模板和 Hi.vue 没有太多的差别，知识改变了 data 中 message 的值，也就是输出的结果不太一样了。<br><strong>Hi1.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;hi&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;Hi, I am Hi1!&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><p><strong>Hi2.vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;hi&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;Hi, I am Hi2&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><h2 id="四、修改-router-index-js-代码"><a href="#四、修改-router-index-js-代码" class="headerlink" title="四、修改 router/index.js 代码"></a>四、修改 router/index.js 代码</h2><p>我们现在导航有了，母模板和子模板也有了，只要改变我们的路由配置文件就可以了。子路由的写法是在原有的路由配置下加入 children 字段。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">children: [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: xxx &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;xx&#x27;</span>, <span class="hljs-attr">component</span>: xxx &#125;,<br>];<br></code></pre></div></td></tr></table></figure><p>children 字段后边跟的是个数组，数组里和其他配置路由基本相同，需要配置 path 和 component。具体看一下这个子路由的配置写法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><span class="hljs-keyword">import</span> Hello <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hello&#x27;</span>;<br><span class="hljs-keyword">import</span> Hi <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hi&#x27;</span>;<br><span class="hljs-keyword">import</span> Hi1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hi1&#x27;</span>;<br><span class="hljs-keyword">import</span> Hi2 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hi2&#x27;</span>;<br><br>Vue.use(Router);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>      component: Hello,<br>    &#125;,<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/hi&#x27;</span>,<br>      component: Hi,<br>      children: [<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: Hi &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;hi1&#x27;</span>, <span class="hljs-attr">component</span>: Hi1 &#125;,<br>        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;hi2&#x27;</span>, <span class="hljs-attr">component</span>: Hi2 &#125;,<br>      ],<br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>需要注意的是，在配置路由文件前，需要先用 import 引入 Hi1 和 Hi2。<br>总结： 这节课学的内容在路由配置里经常用到，比如我们作一个购物模块，购物模块里有很多相同的元素，我们就会利用这种子路由的形式，先定一个父页面，然后再修改子页面。希望这节课对你有帮助，其实子路由的步骤还是有些繁琐的，所以希望你们多练习几遍，能够完全掌握。</p><h1 id="vue-router-如何参数传递"><a href="#vue-router-如何参数传递" class="headerlink" title="vue-router 如何参数传递"></a>vue-router 如何参数传递</h1><p>开发中，参数的传递是个最基本的业务需求。通过 URL 地址来传递参数是一个形式，我们就看看 vue-router 为我们提供了那些传递参数的功能。我们先想象一个基本需求，就是在我们点击导航菜单时，跳转页面上能显示出当前页面的路径，来告诉用户你想在所看的页面位置（类似于面包屑导航）。</p><h2 id="一、用-name-传递参数"><a href="#一、用-name-传递参数" class="headerlink" title="一、用 name 传递参数"></a>一、用 name 传递参数</h2><p>两步完成用 name 传值并显示在模板里：</p><ol><li>在路由文件 src/router/index.js 里配置 name 属性。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">routes: [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>    component: Hello,<br>  &#125;,<br>];<br></code></pre></div></td></tr></table></figure><ol start="2"><li>模板里(src/App.vue)用$route.name 的形势接收，比如直接在模板中显示：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;&#123;&#123; $route.name&#125;&#125;&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h2 id="二、通过-标签中的-to-传参"><a href="#二、通过-标签中的-to-传参" class="headerlink" title="二、通过 标签中的 to 传参"></a>二、通过<router-link> 标签中的 to 传参</h2><p>也许你也会觉的上边的传参很不正规，也不方便，其实我们多数传参是不用 name 进行传参的，我们用<router-link>标签中的 to 属性进行传参，需要您注意的是这里的 to 要进行一个绑定，写成<code>:to</code>。<br>先来看一下这种传参方法的基本语法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-link :to=<span class="hljs-string">&quot;&#123;name:xxx,params:&#123;key:value&#125;&#125;&quot;</span>&gt;valueString&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><p>这里的 to 前边是带冒号的，然后后边跟的是一个对象形势的字符串.</p><ul><li>name：就是我们在路由 reouter 配置文件中起的 name 值。**(name 一定要一致！)**</li><li>params：就是我们要传的参数，它也是对象形势，在对象里可以传递多个值。</li></ul><p>了解基本的语法后，我们改造一下我们的 src/App.vue 里的<router-link>标签,我们把 hi1 页面的<router-link>进行修改。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-link :to=<span class="hljs-string">&quot;&#123;name:&#x27;hi1&#x27;,params:&#123;username:&#x27;jsp&#x27;,id:&#x27;888&#x27;&#125;&#125;&quot;</span>&gt;Hi1&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><p>把 src/reouter/index.js 文件里给 hi1 配置的路由起个 name,就叫 hi1. <strong>(name 的值一定要和<router-link>的 name 一样！)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;hi1&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hi1&quot;</span>, <span class="hljs-attr">component</span>: Hi1 &#125;,<br></code></pre></div></td></tr></table></figure><p>最后在模板里(src/components/Hi1.vue)用$route.params.username 进行接收.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h2&gt;&#123;&#123;msg&#125;&#125;--&#123;&#123;$route.params.username&#125;&#125;--&#123;&#123;$route.params.id&#125;&#125;&lt;/h2&gt;<br></code></pre></div></td></tr></table></figure><p><em>总结：</em>今天我们学习了两种传参的方法，一般会使用第二种方法。我们通过学习也知道了 name 的用途，一种作用是传参，一种作用是在传参时起到名称作用。传参的操作在实际开发中是基本的需求，我们一定要掌握好啊。<br>​</p><h1 id="单页面多路由区域操作"><a href="#单页面多路由区域操作" class="headerlink" title="单页面多路由区域操作"></a>单页面多路由区域操作</h1><p>实际需求是这样的，在一个页面里我们有 2 个以上<router-view>区域，我们通过配置路由的 js 文件，来操作这些区域的内容。例如我们在 src/App.vue 里加上两个<router-view>标签。打开了 src 目录下的 App.vue 文件，在<router-view>下面新写了两行<router-view>标签,并加入了些 CSS 样式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-view &gt;&lt;/router-view&gt;<br> &lt;router-view name=<span class="hljs-string">&quot;left&quot;</span> style=<span class="hljs-string">&quot;float:left;width:50%;background-color:#ccc;height:200px;&quot;</span>&gt;&lt;/router-view&gt;<br> &lt;router-view name=<span class="hljs-string">&quot;right&quot;</span> style=<span class="hljs-string">&quot;float:right;width:50%;background-color:#c0c;height:200px;&quot;</span>&gt;&lt;/router-view&gt;<br><br></code></pre></div></td></tr></table></figure><p>现在的页面中有了三个<router-view>标签，也就是说我们需要在路由里配置这三个区域，配置主要是在<code>**components**</code>字段里进行。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,<br>      components: &#123; HelloWorld, <span class="hljs-attr">left</span>: Hi1, <span class="hljs-attr">right</span>: Hi2 &#125;,<br>    &#125;,<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/hi&#x27;</span>,<br>      components: &#123; HelloWorld, <span class="hljs-attr">left</span>: Hi2, <span class="hljs-attr">right</span>: Hi1 &#125;,<br>    &#125;,<br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//   path: &quot;/hi&quot;,</span><br>    <span class="hljs-comment">//   component: Hi,</span><br>    <span class="hljs-comment">//   children: [</span><br>    <span class="hljs-comment">//     &#123; path: &quot;/&quot;, name: &quot;HelloWorld/Hi&quot;, component: Hi &#125;,</span><br>    <span class="hljs-comment">//     &#123; path: &quot;hi1&quot;, name: &quot;hi1&quot;, component: Hi1 &#125;,</span><br>    <span class="hljs-comment">//     &#123; path: &quot;hi2&quot;, name: &quot;Hi2&quot;, component: Hi2 &#125;</span><br>    <span class="hljs-comment">//   ]</span><br>    <span class="hljs-comment">// &#125;</span><br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>上边的代码我们编写了两个路径，一个是默认的‘/’，另一个是’/hi’.在两个路径下的 components 里面，我们对三个区域都定义了显示内容。​</p><h1 id="vue-router-利用-url-传递参数"><a href="#vue-router-利用-url-传递参数" class="headerlink" title="vue-router 利用 url 传递参数"></a>vue-router 利用 url 传递参数</h1><p>因为我们以前在前后端没有分开开发的时候，经常这样做。在实际开发也是有很多用 URL 传值的需求，比如我们在新闻列表中有很多新闻标题整齐的排列，我们需要点击每个新闻标题打开不同的新闻内容，这时在跳转路由时跟上新闻编号就十分实用。</p><h2 id="冒号的形式传递参数"><a href="#冒号的形式传递参数" class="headerlink" title=":冒号的形式传递参数"></a>:冒号的形式传递参数</h2><p>我们可以在理由配置文件里以:冒号的形式传递参数，这就是对参数的绑定。</p><ul><li>在配置文件里以冒号的形式设置参数。我们在/src/router/index.js 文件里配置路由。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    path:<span class="hljs-string">&#x27;/params/:newsId/:newsTitle&#x27;</span>,<br>     component:Params<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们需要传递参数是新闻 ID（newsId）和新闻标题（newsTitle）.所以我们在路由配置文件里制定了这两个值。</p><ul><li>在 src/components 目录下建立我们 params.vue 组件，也可以说是页面。我们在页面里输出了 url 传递的的新闻 ID 和新闻标题。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt;<br>        &lt;p&gt;新闻ID：&#123;&#123; $route.params.newsId&#125;&#125;&lt;/p&gt;<br>        &lt;p&gt;新闻标题：&#123;&#123; $route.params.newsTitle&#125;&#125;&lt;/p&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;params&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;params page&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><ul><li>在 App.vue 文件里加入我们的<router-view>标签。这时候我们可以直接利用 url 传值了。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-link to=<span class="hljs-string">&quot;/params/198/jsp&quot;</span>&gt;params&lt;/router-link&gt; |<br></code></pre></div></td></tr></table></figure><p>我们已经实现了以 url 方式进行传值，这在实际开发中经常使用，必须完全了解</p><h2 id="正则表达式在-URL-传值中的应用"><a href="#正则表达式在-URL-传值中的应用" class="headerlink" title="正则表达式在 URL 传值中的应用"></a>正则表达式在 URL 传值中的应用</h2><p>上边的例子，我们传递了新闻编号，现在需求升级了，我们希望我们传递的新闻 ID 只能是数字的形式，这时候我们就需要在传递时有个基本的类型判断，vue 是支持正则的。<br>加入正则需要在路由配置文件里（/src/router/index.js）以圆括号的形式加入。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">path:<span class="hljs-string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span>,<br></code></pre></div></td></tr></table></figure><p>加入了正则，我们再传递数字之外的其他参数，params.vue 组件就没有办法接收到。<br>​</p><h1 id="vue-router-的重定向-redirect"><a href="#vue-router-的重定向-redirect" class="headerlink" title="vue-router 的重定向-redirect"></a>vue-router 的重定向-redirect</h1><p>开发中有时候我们虽然设置的路径不一致，但是我们希望跳转到同一个页面，或者说是打开同一个组件。这时候我们就用到了路由的重新定向 redirect 参数。</p><h2 id="redirect-基本重定向"><a href="#redirect-基本重定向" class="headerlink" title="redirect 基本重定向"></a>redirect 基本重定向</h2><p>我们只要在路由配置文件中（/src/router/index.js）把原来的 component 换成 redirect 参数就可以了。我们来看一个简单的配置。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      component: Hello,<br>    &#125;,<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span>,<br>      component: Params,<br>    &#125;,<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/goback&#x27;</span>,<br>      redirect: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这里我们设置了 goback 路由，但是它并没有配置任何 component（组件），而是直接 redirect 到 path:’/’下了，这就是一个简单的重新定向。</p><h2 id="重定向时传递参数"><a href="#重定向时传递参数" class="headerlink" title="重定向时传递参数"></a>重定向时传递参数</h2><p>我们已经学会了通过 url 来传递参数，那我们重定向时如果也需要传递参数怎么办？其实 vue 也已经为我们设置好了，我们只需要在 ridirect 后边的参数里复制重定向路径的 path 参数就可以了。可能你看的有点晕，我们来看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  path:<span class="hljs-string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span>,<br>  component:Params<br>&#125;,&#123;<br>  path:<span class="hljs-string">&#x27;/goParams/:newsId(\\d+)/:newsTitle&#x27;</span>,<br>  redirect:<span class="hljs-string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>已经有了一个 params 路由配置，我们在设置一个 goParams 的路由重定向，并传递了参数。这时候我们的路由参数就可以传递给 params.vue 组件了。参数接收方法和正常的路由接收方法一样。</p><h1 id="alias-别名的使用"><a href="#alias-别名的使用" class="headerlink" title="alias 别名的使用"></a>alias 别名的使用</h1><p>上节学习了路由的重定向，我相信大家已经可以熟练使用 redirect 进行重定向了。使用 alias 别名的形式，我们也可以实现类似重定向的效果。 1.首先我们在路由配置文件里（/src/router/index.js），起一个别名，jsp</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    path: <span class="hljs-string">&#x27;/hi1&#x27;</span>,<br>    component: Hi1,<br>    alias:<span class="hljs-string">&#x27;/jsp&#x27;</span><br> &#125;<br></code></pre></div></td></tr></table></figure><p>2.配置我们的<router-link>，起过别名之后，可以直接使用<router-link>标签里的 to 属性，进行重新定向。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-link &lt; to=<span class="hljs-string">&quot;/jspang&quot;</span>&gt;jspang&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><h2 id="redirect-和-alias-的区别"><a href="#redirect-和-alias-的区别" class="headerlink" title="redirect 和 alias 的区别"></a>redirect 和 alias 的区别</h2><ul><li>redirect：仔细观察 URL，redirect 是直接改变了 url 的值，把 url 变成了真实的 path 路径。</li><li>alias：URL 路径没有别改变，这种情况更友好，让用户知道自己访问的路径，只是改变了<router-view>中的内容。</li></ul><p><strong>填个小坑：</strong><br>别名请不要用在 path 为’/’中，如下代码的别名是不起作用的。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>  component: Hello,<br>  alias:<span class="hljs-string">&#x27;/home&#x27;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>在实际项目中我们遇到了这样的坑，开始以为是自己的代码写的有问题，找了两个小时作用。后来发现不是代码问题，只是 vue 不支持这样使用。我们犯过错误，踩过了坑，希望大家就不要踩了。</p><h1 id="路由的过渡动画"><a href="#路由的过渡动画" class="headerlink" title="路由的过渡动画"></a>路由的过渡动画</h1><p>在开发中有一种需求叫高端、大气、上档次。所以作为一个大前端有责任让你的程序开起来更酷炫。可以在页面切换时我们加入一些动画效果，提升我们程序的动效设计。这节课我们就学习一下路由的过渡动画效果制作。</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a><transition>标签</h2><p>想让路由有过渡动画，需要在<router-view>标签的外部添加<transition>标签，标签还需要一个 name 属性。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;transition name=<span class="hljs-string">&quot;fade&quot;</span>&gt;<br>  &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/transition&gt;<br></code></pre></div></td></tr></table></figure><p>我们在/src/App.vue 文件里添加了<transition>标签，并给标签起了一个名字叫 fade。</p><h2 id="css-过渡类名："><a href="#css-过渡类名：" class="headerlink" title="css 过渡类名："></a>css 过渡类名：</h2><p>组件过渡过程中，会有四个 CSS 类名进行切换，这四个类名与 transition 的 name 属性有关，比如 name=”fade”,会有如下四个 CSS 类名：</p><ol><li>fade-enter:进入过渡的开始状态，元素被插入时生效，只应用一帧后立刻删除。</li><li>fade-enter-active:进入过渡的结束状态，元素被插入时就生效，在过渡过程完成后移除。</li><li>fade-leave:离开过渡的开始状态，元素被删除时触发，只应用一帧后立刻删除。</li><li>fade-leave-active:离开过渡的结束状态，元素被删除时生效，离开过渡完成后被删除。</li></ol><p>从上面四个类名可以看出，fade-enter-active 和 fade-leave-active 在整个进入或离开过程中都有效，所以 CSS 的 transition 属性在这两个类下进行设置。<br>那我们就在 App.vue 页面里加入四种 CSS 样式效果，并利用 CSS3 的 transition 属性控制动画的具体效果。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.fade-enter &#123;<br>  opacity:<span class="hljs-number">0</span>;<br>&#125;<br>.fade-leave&#123;<br>  opacity:<span class="hljs-number">1</span>;<br>&#125;<br>.fade-enter-active&#123;<br>  transition:opacity .5s;<br>&#125;<br>.fade-leave-active&#123;<br>  opacity:<span class="hljs-number">0</span>;<br>  transition:opacity .5s;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上边的代码设置了改变透明度的动画过渡效果，但是默认的 mode 模式 in-out 模式，这并不是我们想要的。下面我们学一下 mode 模式。</p><h2 id="过渡模式-mode："><a href="#过渡模式-mode：" class="headerlink" title="过渡模式 mode："></a>过渡模式 mode：</h2><ul><li>in-out:新元素先进入过渡，完成之后当前元素过渡离开。</li><li>out-in:当前元素先进行过渡离开，离开完成后新元素过渡进入。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;transition name=<span class="hljs-string">&quot;fade&quot;</span> mode=<span class="hljs-string">&quot;out-in&quot;</span>&gt;<br>  &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/transition&gt;<br></code></pre></div></td></tr></table></figure><h1 id="mode-的设置和-404-页面的处理"><a href="#mode-的设置和-404-页面的处理" class="headerlink" title="mode 的设置和 404 页面的处理"></a>mode 的设置和 404 页面的处理</h1><p>在学习过渡效果的时候，我们学了 mode 的设置，但是在路由的属性中还有一个 mode。另一个 mode 模式和 404 页面的设置。</p><h2 id="mode-的两个值"><a href="#mode-的两个值" class="headerlink" title="mode 的两个值"></a>mode 的两个值</h2><ol><li>historty:当你使用 history 模式时，URL 就像正常的 url，例如 <a href="http://jsapng.com/lms/%EF%BC%8C%E4%B9%9F%E5%A5%BD%E7%9C%8B%EF%BC%81">http://jsapng.com/lms/，也好看！</a></li><li>hash:默认’hash’值，但是 hash 看起来就像无意义的字符排列，不太好看也不符合我们一般的网址浏览习惯。</li></ol><p>具体的效果我在视频中会有所掩饰，不理解的小伙伴可以到视频中进行查看。</p><h2 id="404-页面的设置："><a href="#404-页面的设置：" class="headerlink" title="404 页面的设置："></a>404 页面的设置：</h2><p>用户会经常输错页面，当用户输错页面时，我们希望给他一个友好的提示，为此美工都会设计一个漂亮的页面，这个页面就是我们常说的 404 页面。vue-router 也为我们提供了这样的机制. 1.设置我们的路由配置文件（/src/router/index.js）：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>   path:<span class="hljs-string">&#x27;*&#x27;</span>,<br>   component:<span class="hljs-built_in">Error</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里的 path:’ * ‘就是找不到页面时的配置，component 是我们新建的一个 Error.vue 的文件。 2.新建 404 页面：<br>在/src/components/文件夹下新建一个 Error.vue 的文件。简单输入一些有关错误页面的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;Error:404&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>3.我们在用<router-link>瞎写一个标签的路径。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;router-link to=<span class="hljs-string">&quot;/error&quot;</span>&gt;error&lt;/router-link&gt;<br></code></pre></div></td></tr></table></figure><p>预览一下我们现在的结果，就已经实现 404 页面的效果。</p><h1 id="路由中的钩子"><a href="#路由中的钩子" class="headerlink" title="路由中的钩子"></a>路由中的钩子</h1><p>我们知道一个组件从进入到销毁有很多的钩子函数，同样在路由中也设置了钩子函数。路由的钩子选项可以写在路由配置文件中，也可以写在我们的组件模板中。</p><h2 id="路由配置文件中的钩子函数"><a href="#路由配置文件中的钩子函数" class="headerlink" title="路由配置文件中的钩子函数"></a>路由配置文件中的钩子函数</h2><p>我们可以直接在路由配置文件（/src/router/index.js）中写钩子函数。但是在路由文件中我们只能写一个 beforeEnter,就是在进入此路由配置时。先来看一段具体的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>      path:<span class="hljs-string">&#x27;/params/:newsId(\\d+)/:newsTitle&#x27;</span>,<br>      component:Params,<br>      beforeEnter:<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我进入了params模板&#x27;</span>);<br>        <span class="hljs-built_in">console</span>.log(to);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">from</span>);<br>        next();<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>我们在 params 路由里配置了 bdforeEnter 得钩子函数，函数我们采用了 ES6 的箭头函数，需要传递三个参数。我们并在箭头函数中打印了 to 和 from 函数。具体打印内容可以在控制台查看 object。</p><h3 id="三个参数："><a href="#三个参数：" class="headerlink" title="三个参数："></a>三个参数：</h3><ol><li>to:路由将要跳转的路径信息，信息是包含在对像里边的。</li><li>from:路径跳转前的路径信息，也是一个对象的形式。</li><li>next:路由的控制参数，常用的有 next(true)和 next(false)。</li></ol><h2 id="写在模板中的钩子函数"><a href="#写在模板中的钩子函数" class="headerlink" title="写在模板中的钩子函数"></a>写在模板中的钩子函数</h2><p>在配置文件中的钩子函数，只有一个钩子-beforeEnter，如果我们写在模板中就可以有两个钩子函数可以使用：</p><ul><li>beforeRouteEnter：在路由进入前的钩子函数。</li><li>beforeRouteLeave：在路由离开前的钩子函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;params&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;params page&#x27;</span><br>    &#125;<br>  &#125;,<br>  beforeRouteEnter:<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;准备进入路由模板&quot;</span>);<br>    next();<br>  &#125;,<br>  beforeRouteLeave: <span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;准备离开路由模板&quot;</span>);<br>    next();<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>这是我们写在 params.vue 模板里的路由钩子函数。它可以监控到路由的进入和路由的离开，也可以轻易的读出 to 和 from 的值。</p><h1 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h1><p>如果在业务逻辑代码中需要跳转页面我们如何操作？这就是我们要说的编程式导航，顾名思义，就是在业务逻辑代码中实现导航。</p><h2 id="this-router-go-1-和-this-router-go-1"><a href="#this-router-go-1-和-this-router-go-1" class="headerlink" title="this.$router.go(-1) 和 this.$router.go(1)"></a>this.$router.go(-1) 和 this.$router.go(1)</h2><p>这两个编程式导航的意思是后退和前进，功能跟我们浏览器上的后退和前进按钮一样，这在业务逻辑中经常用到。比如条件不满足时，我们需要后退。<br>router.go(-1)代表着后退，我们可以让我们的导航进行后退，并且我们的地址栏也是有所变化的。 1.我们先在 app.vue 文件里加入一个按钮，按钮并绑定一个 goback( )方法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;goback&quot;</span>&gt;后退&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p>2.在我们的 script 模块中写入 goback()方法，并使用 this.$router.go(-1),进行后退操作。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;app&#x27;</span>,<br>  methods:&#123;<br>    <span class="hljs-function"><span class="hljs-title">goback</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">this</span>.$router.go(-<span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>打开浏览器进行预览，这时我们的后退按钮就可以向以前的网页一样后退了。<br>router.go(1):代表着前进，用法和后退一样，我在这里就不重复码字了（码字辛苦希望大家理解）。<br>this.$router.push(‘/xxx ‘)<br>这个编程式导航都作用就是跳转，比如我们判断用户名和密码正确时，需要跳转到用户中心页面或者首页，都用到这个编程的方法来操作路由。<br>我们设置一个按钮，点击按钮后回到站点首页。 1.先编写一个按钮，在按钮上绑定 goHome( )方法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;goHome&quot;</span>&gt;回到首页&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p>2.在<script>模块里加入 goHome 方法，并用 this.$router.push(‘/’)导航到首页</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;app&#x27;</span>,<br>  methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">goback</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.$router.go(-<span class="hljs-number">1</span>);<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">goHome</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue-router</tag>
      
      <tag>路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-cli2.0脚手架</title>
    <link href="/2021/06/27/vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <url>/2021/06/27/vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p>Vue-cli 是 vue 官方出品的快速构建单页应用的脚手架，如果你是初次尝试 Vue，我不建议使用，推荐你老老实实用普通引入 javascript 文件的方式进行学习，这里牵扯的东西很多，有 webpack，npm，nodejs，babel 等等，很容易产生从入门就放弃的思想。</p><h1 id="Vue-cli，开始吧骚年"><a href="#Vue-cli，开始吧骚年" class="headerlink" title="Vue-cli，开始吧骚年"></a>Vue-cli，开始吧骚年</h1><h2 id="一、安装-vue-cli"><a href="#一、安装-vue-cli" class="headerlink" title="一、安装 vue-cli"></a>一、安装 vue-cli</h2><p>安装 vue-cli 的前提是你已经安装了 npm，安装 npm 你可以直接下载 node 的安装包进行安装。你可以在命令行工具里输入 npm -v 检测你是否安装了 npm 和版本情况。出现版本号说明你已经安装了 npm 和 node，我这里的 npm 版本为 3.10.10。如果该命令不可以使用，需要安装 node 软件包，根据你的系统版本选择下载安装就可以了。<br>下载地址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a><br>npm 没有问题，接下来我们可以用 npm 命令安装 vue-cli 了，在命令行输入下面的命令：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm install vue-cli -g<br></code></pre></div></td></tr></table></figure><ul><li>-g :代表全局安装。如果你安装时报错，一般是网络问题，你可以尝试用 cnpm 来进行安装。安装完成后，可以用 vue</li><li>-V 来进行查看 vue-cli 的版本号。注意这里的 V 是大写的。我这里版本号是 2.8.1.</li></ul><p>如果 vue -V 的命令管用了，说明已经顺利的把 vue-cli 安装到我们的计算机里了。</p><h2 id="二、初始化项目"><a href="#二、初始化项目" class="headerlink" title="二、初始化项目"></a>二、初始化项目</h2><p>可以参考官方新版安装教程<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a><br>​</p><h3 id="旧版本"><a href="#旧版本" class="headerlink" title="旧版本"></a>旧版本</h3><p>以下是拉取 2.x 模板 (旧版本)<br>我们用 vue init 命令来初始化项目，具体看一下这条命令的使用方法。<br><code>vue init &lt;template-name&gt; &lt;project-name&gt;</code><br>init：表示我要用 vue-cli 来初始化项目<br><template-name>：表示模板名称，vue-cli 官方为我们提供了 5 种模板，</p><ul><li>webpack-一个全面的 webpack+vue-loader 的模板，功能包括热加载，linting,检测和 CSS 扩展。</li><li>webpack-simple-一个简单 webpack+vue-loader 的模板，不包含其他功能，让你快速的搭建 vue 的开发环境。</li><li>browserify-一个全面的 Browserify+vueify 的模板，功能包括热加载，linting,单元检测。</li><li>browserify-simple-一个简单 Browserify+vueify 的模板，不包含其他功能，让你快速的搭建 vue 的开发环境。</li></ul><p>-simple-一个最简单的单页应用模板。<br><project-name>：标识项目名称，这个你可以根据自己的项目来起名字。<br>在实际开发中，一般我们都会使用 webpack 这个模板，那我们这里也安装这个模板，在命令行输入以下命令：<br><strong>建议用新版本或者离线模式</strong>，直接使用<code>vue init webpack</code>可能会报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vue init webpack vuecliTest<br></code></pre></div></td></tr></table></figure><p>输入命令后，会询问我们几个简单的选项，我们根据自己的需要进行填写就可以了。</p><ul><li>Project name :项目名称 ，如果不需要更改直接回车就可以了。注意：这里不能使用大写，所以我把名称改成了 vueclitest</li><li>Project description:项目描述，默认为 A Vue.js project,直接回车，不用编写。</li><li>Author：作者，如果你有配置 git 的作者，他会读取。</li><li>Install vue-router? 是否安装 vue 的路由插件，我们这里需要安装，所以选择 Y</li><li>Use ESLint to lint your code? 是否用 ESLint 来限制你的代码错误和风格。我们这里不需要输入 n，如果你是大型团队开发，最好是进行配置。</li><li>setup unit tests with Karma + Mocha? 是否需要安装单元测试工具 Karma+Mocha，我们这里不需要，所以输入 n。</li><li>Setup e2e tests with Nightwatch?是否安装 e2e 来进行用户行为模拟测试，我们这里不需要，所以输入 n。</li></ul><h3 id="离线模式-解决-vue-init-webpack-报错"><a href="#离线模式-解决-vue-init-webpack-报错" class="headerlink" title="离线模式(解决 vue init webpack 报错)"></a>离线模式(解决 vue init webpack 报错)</h3><p>解决 vue init webpack 报错，直接使用<code>vue init webpack test </code>会报错，错误信息如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vue-cli · Failed to download repo vuejs-templates/webpack: connect ETIMEDOUT xxx:<span class="hljs-number">443</span><br></code></pre></div></td></tr></table></figure><p>通过 vue-cli 工具命令 vue init webpack vuedemo 创建 vue 项目的时候报错，提示连接超时，应该是下载某个 package 的时候，需要翻墙，导致出现连接超时<br>[</p><p>](<a href="https://github.com/vuejs-templates/webpack">https://github.com/vuejs-templates/webpack</a>)<br>解决办法是改为离线创建，我们需要下载 github 仓库中的 vue-templates/webpack，然后解压到本地。下载地址为：<a href="https://github.com/vuejs-templates/webpack">https://github.com/vuejs-templates/webpack</a>，下载之后，解压到本地用户目录下创建.vue-templates 文件夹<br>​</p><p>下载之后的压缩包为 webpack-develop.zip，我们解压之后，需要更改目录名为 webpack。用户目录下的目录为.vue-templates，注意文件夹名称前面的点(.)。<br>以我的为例将 webpack 文件放到 C:\Users\jackhoo.vue-templates 下<br>​</p><p>这样，我们再进行 vue init webpack vuedemo 命令的时候，需要带上参数–offline 表示离线初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vue init webpack vuedemo --offline<br></code></pre></div></td></tr></table></figure><p>输入命令后，会询问我们几个简单的选项，我们根据自己的需要进行填写就可以了。</p><ul><li>Project name :项目名称 ，如果不需要更改直接回车就可以了。注意：这里不能使用大写，所以我把名称改成了 vuedemo</li><li>Project description:项目描述，默认为 A Vue.js project,直接回车，不用编写。</li><li>Author：作者，如果你有配置 git 的作者，他会读取。</li><li>Install vue-router? 是否安装 vue 的路由插件，我们这里需要安装，所以选择 Y</li><li>Use ESLint to lint your code? 是否用 ESLint 来限制你的代码错误和风格。我们这里不需要输入 n，如果你是大型团队开发，最好是进行配置。</li><li>setup unit tests with Karma + Mocha? 是否需要安装单元测试工具 Karma+Mocha，我们这里不需要，所以输入 n。</li><li>Setup e2e tests with Nightwatch?是否安装 e2e 来进行用户行为模拟测试，我们这里不需要，所以输入 n。</li><li>Should we run <code>npm install</code> for you after the project has been created? (recommended) npm</li></ul><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">   vue-cli · Generated <span class="hljs-string">&quot;vuedemo&quot;</span>.<br><br><br># Installing project dependencies ...<br># ========================<br></code></pre></div></td></tr></table></figure><p>命令行出现上面的文字，说明我们已经初始化好了第一步。</p><ol><li>cd vuedemo 进入我们的 vue 项目目录。</li><li>npm run dev 开发模式下运行我们的程序。给我们自动构建了开发用的服务器环境和在浏览器中打开，并实时监视我们的代码更改，即时呈现给我们。</li></ol><p>最后运行就成功了。<br>​</p><h1 id="Vue-cli-项目结构讲解"><a href="#Vue-cli-项目结构讲解" class="headerlink" title="Vue-cli 项目结构讲解"></a>Vue-cli 项目结构讲解</h1><p>vue-cli 脚手架工具就是为我们搭建了开发所需要的环境，为我们省去了很多精力。有必要对这个环境进行熟悉，我们就从项目的结构讲起。<br>Ps：由于版本实时更新和你选择安装的不同（这里列出的是模板为 webpack 的目录结构），所以你看到的有可能和下边的有所差别。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.<br>|-- build                            <span class="hljs-comment">// 项目构建(webpack)相关代码</span><br>|   |-- build.js                     <span class="hljs-comment">// 生产环境构建代码</span><br>|   |-- check-version.js             <span class="hljs-comment">// 检查node、npm等版本</span><br>|   |-- dev-client.js                <span class="hljs-comment">// 热重载相关</span><br>|   |-- dev-server.js                <span class="hljs-comment">// 构建本地服务器</span><br>|   |-- utils.js                     <span class="hljs-comment">// 构建工具相关</span><br>|   |-- webpack.base.conf.js         <span class="hljs-comment">// webpack基础配置</span><br>|   |-- webpack.dev.conf.js          <span class="hljs-comment">// webpack开发环境配置</span><br>|   |-- webpack.prod.conf.js         <span class="hljs-comment">// webpack生产环境配置</span><br>|-- config                           <span class="hljs-comment">// 项目开发环境配置</span><br>|   |-- dev.env.js                   <span class="hljs-comment">// 开发环境变量</span><br>|   |-- index.js                     <span class="hljs-comment">// 项目一些配置变量</span><br>|   |-- prod.env.js                  <span class="hljs-comment">// 生产环境变量</span><br>|   |-- test.env.js                  <span class="hljs-comment">// 测试环境变量</span><br>|-- src                              <span class="hljs-comment">// 源码目录</span><br>|   |-- components                     <span class="hljs-comment">// vue公共组件</span><br>|   |-- store                          <span class="hljs-comment">// vuex的状态管理</span><br>|   |-- App.vue                        <span class="hljs-comment">// 页面入口文件</span><br>|   |-- main.js                        <span class="hljs-comment">// 程序入口文件，加载各种公共组件</span><br>|-- <span class="hljs-keyword">static</span>                           <span class="hljs-comment">// 静态文件，比如一些图片，json数据等</span><br>|   |-- data                           <span class="hljs-comment">// 群聊分析得到的数据用于数据可视化</span><br>|-- .babelrc                         <span class="hljs-comment">// ES6语法编译配置</span><br>|-- .editorconfig                    <span class="hljs-comment">// 定义代码格式</span><br>|-- .gitignore                       <span class="hljs-comment">// git上传需要忽略的文件格式</span><br>|-- README.md                        <span class="hljs-comment">// 项目说明</span><br>|-- favicon.ico<br>|-- index.html                       <span class="hljs-comment">// 入口页面</span><br>|-- package.json                     <span class="hljs-comment">// 项目基本信息</span><br>.<br></code></pre></div></td></tr></table></figure><h2 id="重要文件讲解："><a href="#重要文件讲解：" class="headerlink" title="重要文件讲解："></a>重要文件讲解：</h2><p>package.json package.json 文件是项目根目录下的一个文件，定义该项目开发所需要的各种模块以及一些项目配置信息（如项目名称、版本、描述、作者等）。<br>package.json 里的 scripts 字段，这个字段定义了你可以用 npm 运行的命令。在开发环境下，在命令行工具中运行 npm run dev 就相当于执行 node build/dev-server.js .也就是开启了一个 node 写的开发行建议服务器。由此可以看出 script 字段是用来指定 npm 相关命令的缩写。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;node build/dev-server.js&quot;</span>,<br>   <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;node build/build.js&quot;</span><br> &#125;,<br></code></pre></div></td></tr></table></figure><p>dependencies 字段和 devDependencies 字段</p><ul><li>dependencies 字段指项目运行时所依赖的模块；</li><li>devDependencies 字段指定了项目开发时所依赖的模块；</li></ul><p>在命令行中运行 npm install 命令，会自动安装 dependencies 和 devDempendencies 字段中的模块。package.json 还有很多相关配置，如果你想全面了解，可以专门去百度学习一下。</p><h2 id="webpack-配置相关"><a href="#webpack-配置相关" class="headerlink" title="webpack 配置相关"></a>webpack 配置相关</h2><p>我们在上面说了运行 npm run dev 就相当于执行了 node build/dev-server.js,说明这个文件相当重要，先来熟悉一下它。 我贴出代码并给出重要的解释。<br><code>dev-server.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 检查 Node 和 npm 版本</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./check-versions&#x27;</span>)();<br><br><span class="hljs-comment">// 获取 config/index.js 的默认配置</span><br><span class="hljs-keyword">var</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../config&#x27;</span>);<br><br><span class="hljs-comment">// 如果 Node 的环境无法判断当前是 dev / product 环境</span><br><span class="hljs-comment">// 使用 config.dev.env.NODE_ENV 作为当前的环境</span><br><br><span class="hljs-keyword">if</span> (!process.env.NODE_ENV) process.env.NODE_ENV = <span class="hljs-built_in">JSON</span>.parse(config.dev.env.NODE_ENV);<br><br><span class="hljs-comment">// 使用 NodeJS 自带的文件路径工具</span><br><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-comment">// 使用 express</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><br><span class="hljs-comment">// 使用 webpack</span><br><span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><br><span class="hljs-comment">// 一个可以强制打开浏览器并跳转到指定 url 的插件</span><br><span class="hljs-keyword">var</span> opn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;opn&#x27;</span>);<br><br><span class="hljs-comment">// 使用 proxyTable</span><br><span class="hljs-keyword">var</span> proxyMiddleware = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>);<br><br><span class="hljs-comment">// 使用 dev 环境的 webpack 配置</span><br><span class="hljs-keyword">var</span> webpackConfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.dev.conf&#x27;</span>);<br><br><span class="hljs-comment">// default port where dev server listens for incoming traffic</span><br><br><span class="hljs-comment">// 如果没有指定运行端口，使用 config.dev.port 作为运行端口</span><br><span class="hljs-keyword">var</span> port = process.env.PORT || config.dev.port;<br><br><span class="hljs-comment">// Define HTTP proxies to your custom API backend</span><br><span class="hljs-comment">// https://github.com/chimurai/http-proxy-middleware</span><br><br><span class="hljs-comment">// 使用 config.dev.proxyTable 的配置作为 proxyTable 的代理配置</span><br><span class="hljs-keyword">var</span> proxyTable = config.dev.proxyTable;<br><br><span class="hljs-comment">// 使用 express 启动一个服务</span><br><span class="hljs-keyword">var</span> app = express();<br><br><span class="hljs-comment">// 启动 webpack 进行编译</span><br><span class="hljs-keyword">var</span> compiler = webpack(webpackConfig);<br><br><span class="hljs-comment">// 启动 webpack-dev-middleware，将 编译后的文件暂存到内存中</span><br><span class="hljs-keyword">var</span> devMiddleware = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-dev-middleware&#x27;</span>)(compiler, &#123;<br>  publicPath: webpackConfig.output.publicPath,<br>  stats: &#123;<br>    colors: <span class="hljs-literal">true</span>,<br>    chunks: <span class="hljs-literal">false</span>,<br>  &#125;,<br>&#125;);<br><br><span class="hljs-comment">// 启动 webpack-hot-middleware，也就是我们常说的 Hot-reload</span><br><span class="hljs-keyword">var</span> hotMiddleware = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-hot-middleware&#x27;</span>)(compiler);<br><span class="hljs-comment">// force page reload when html-webpack-plugin template changes</span><br>compiler.plugin(<span class="hljs-string">&#x27;compilation&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">compilation</span>) </span>&#123;<br>  compilation.plugin(<span class="hljs-string">&#x27;html-webpack-plugin-after-emit&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data, cb</span>) </span>&#123;<br>    hotMiddleware.publish(&#123; <span class="hljs-attr">action</span>: <span class="hljs-string">&#x27;reload&#x27;</span> &#125;);<br>    cb();<br>  &#125;);<br>&#125;);<br><br><span class="hljs-comment">// proxy api requests</span><br><span class="hljs-comment">// 将 proxyTable 中的请求配置挂在到启动的 express 服务上</span><br><span class="hljs-built_in">Object</span>.keys(proxyTable).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> options = proxyTable[context];<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>    options = &#123; <span class="hljs-attr">target</span>: options &#125;;<br>  &#125;<br>  app.use(proxyMiddleware(context, options));<br>&#125;);<br><br><span class="hljs-comment">// handle fallback for HTML5 history API</span><br><span class="hljs-comment">// 使用 connect-history-api-fallback 匹配资源，如果不匹配就可以重定向到指定地址</span><br>app.use(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;connect-history-api-fallback&#x27;</span>)());<br><br><span class="hljs-comment">// serve webpack bundle output</span><br><span class="hljs-comment">// 将暂存到内存中的 webpack 编译后的文件挂在到 express 服务上</span><br>app.use(devMiddleware);<br><br><span class="hljs-comment">// enable hot-reload and state-preserving</span><br><span class="hljs-comment">// compilation error display</span><br><span class="hljs-comment">// 将 Hot-reload 挂在到 express 服务上</span><br>app.use(hotMiddleware);<br><br><span class="hljs-comment">// serve pure static assets</span><br><span class="hljs-comment">// 拼接 static 文件夹的静态资源路径</span><br><span class="hljs-keyword">var</span> staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory);<br><span class="hljs-comment">// 为静态资源提供响应服务</span><br>app.use(staticPath, express.static(<span class="hljs-string">&#x27;./static&#x27;</span>));<br><br><span class="hljs-comment">// 让我们这个 express 服务监听 port 的请求，并且将此服务作为 dev-server.js 的接口暴露</span><br><span class="hljs-built_in">module</span>.exports = app.listen(port, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">var</span> uri = <span class="hljs-string">&#x27;http://localhost:&#x27;</span> + port;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Listening at &#x27;</span> + uri + <span class="hljs-string">&#x27;\n&#x27;</span>);<br><br>  <span class="hljs-comment">// when env is testing, don&#x27;t need open it</span><br>  <span class="hljs-comment">// 如果不是测试环境，自动打开浏览器并跳到我们的开发地址</span><br>  <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;testing&#x27;</span>) &#123;<br>    opn(uri);<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p><code>webpack.base.confg.js</code> webpack 的基础配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">...<br>...<br><span class="hljs-built_in">module</span>.export = &#123;<br>    <span class="hljs-comment">// 编译入口文件</span><br>    entry: &#123;&#125;,<br>    <span class="hljs-comment">// 编译输出路径</span><br>    output: &#123;&#125;,<br>    <span class="hljs-comment">// 一些解决方案配置</span><br>    resolve: &#123;&#125;,<br>    resolveLoader: &#123;&#125;,<br>    <span class="hljs-built_in">module</span>: &#123;<br>        <span class="hljs-comment">// 各种不同类型文件加载器配置</span><br>        loaders: &#123;<br>        ...<br>        ...<br>        <span class="hljs-comment">// js文件用babel转码</span><br>        &#123;<br>            test: <span class="hljs-regexp">/\.js$/</span>,<br>            loader: <span class="hljs-string">&#x27;babel&#x27;</span>,<br>            include: projectRoot,<br>            <span class="hljs-comment">// 哪些文件不需要转码</span><br>            exclude: <span class="hljs-regexp">/node_modules/</span><br>        &#125;,<br>        ...<br>        ...<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// vue文件一些相关配置</span><br>    vue: &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>.babelrc</code><br>Babel 解释器的配置文件，存放在根目录下。Babel 是一个转码器，项目里需要用它将 ES6 代码转为 ES5 代码。如果你想了解更多，可以查看 babel 的知识。​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-comment">//设定转码规则</span><br>  <span class="hljs-string">&quot;presets&quot;</span>: [<br>    [<span class="hljs-string">&quot;env&quot;</span>, &#123; <span class="hljs-string">&quot;modules&quot;</span>: <span class="hljs-literal">false</span> &#125;],<br>    <span class="hljs-string">&quot;stage-2&quot;</span><br>  ],<br>  <span class="hljs-comment">//转码用的插件</span><br>  <span class="hljs-string">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;transform-runtime&quot;</span>],<br>  <span class="hljs-string">&quot;comments&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">//对BABEL_ENV或者NODE_ENV指定的不同的环境变量，进行不同的编译操作</span><br>  <span class="hljs-string">&quot;env&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;stage-2&quot;</span>],<br>      <span class="hljs-string">&quot;plugins&quot;</span>: [ <span class="hljs-string">&quot;istanbul&quot;</span> ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>.editorconfig</code><br>该文件定义项目的编码规范，编译器的行为会与.editorconfig 文件中定义的一致，并且其优先级比编译器自身的设置要高，这在多人合作开发项目时十分有用而且必要。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">root = <span class="hljs-literal">true</span><br><br>[*]    <span class="hljs-comment">// 对所有文件应用下面的规则</span><br>charset = utf-<span class="hljs-number">8</span>                    <span class="hljs-comment">// 编码规则用utf-8</span><br>indent_style = space               <span class="hljs-comment">// 缩进用空格</span><br>indent_size = <span class="hljs-number">2</span>                    <span class="hljs-comment">// 缩进数量为2个空格</span><br>end_of_line = lf                   <span class="hljs-comment">// 换行符格式</span><br>insert_final_newline = <span class="hljs-literal">true</span>        <span class="hljs-comment">// 是否在文件的最后插入一个空行</span><br>trim_trailing_whitespace = <span class="hljs-literal">true</span>    <span class="hljs-comment">// 是否删除行尾的空格</span><br></code></pre></div></td></tr></table></figure><h1 id="解读-Vue-cli-的模板"><a href="#解读-Vue-cli-的模板" class="headerlink" title="解读 Vue-cli 的模板"></a>解读 Vue-cli 的模板</h1><p>我们主要了解一下 Vue-cli 的模板操作，包括增加模板，修改模板，以及一个常规模板的基本结构。</p><h2 id="一、npm-run-build-命令"><a href="#一、npm-run-build-命令" class="headerlink" title="一、npm run build 命令"></a>一、npm run build 命令</h2><p>如何把写好的 Vue 网页放到服务器上，主要的命令就是要用到 npm run build 命令。我们在命令行中输入 npm run build 命令后，vue-cli 会自动进行项目发布打包。你在 package.json 文件的 scripts 字段中可以看出，你执行的 npm run build 命令就相对执行的 node build/build.js 。<br>package.json 的 scripts 字段：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;node build/dev-server.js&quot;</span>,<br>   <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;node build/build.js&quot;</span><br> &#125;,<br></code></pre></div></td></tr></table></figure><p>在执行完 npm run build 命令后，在你的项目根目录生成了 dist 文件夹，这个文件夹里边就是我们要传到服务器上的文件。<br>dist 文件夹下目录包括：</p><ul><li>index.html 主页文件:因为我们开发的是单页 web 应用，所以说一般只有一个 html 文件。</li><li>static 静态资源文件夹：里边 js、CSS 和一些图片。</li></ul><h2 id="二、main-js-文件解读"><a href="#二、main-js-文件解读" class="headerlink" title="二、main.js 文件解读"></a>二、main.js 文件解读</h2><p>main.js 是整个项目的入口文件,在 src 文件夹下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>;<br><br>Vue.config.productionTip = <span class="hljs-literal">false</span>; <span class="hljs-comment">//生产环境提示，这里设置成了false</span><br><br><span class="hljs-comment">/* eslint-disable no-new */</span><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  router,<br>  template: <span class="hljs-string">&#x27;&lt;App/&gt;&#x27;</span>,<br>  components: &#123; App &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>通过代码可以看出这里引进了 App 的组件和的模板，它是通过 import App from ‘./App’这句代码引入的。 我们找到 App.vue 文件，打开查看。</p><h2 id="三、App-vue-文件"><a href="#三、App-vue-文件" class="headerlink" title="三、App.vue 文件:"></a>三、App.vue 文件:</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;img src=<span class="hljs-string">&quot;./assets/logo.png&quot;</span>&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;app&#x27;</span><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: <span class="hljs-string">&#x27;Avenir&#x27;</span>, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  text-align: center;<br>  color: #2c3e50;<br>  margin-top: 60px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><p>app.vue 文件我们可以分成三部分解读，</p><ul><li><p><template></template>标签包裹的内容：这是模板的 HTMLDom 结构，里边引入了一张图片和<router-view></router-view>标签，<router-view>标签说明使用了路由机制。我们会在以后专门拿出一篇文章讲 Vue-router。</p></li><li><script></script>标签包括的js内容：你可以在这里些一些页面的动态效果和Vue的逻辑代码。</li><li><style></style>标签包裹的css内容：这里就是你平时写的CSS样式，对页面样子进行装饰用的，需要特别说明的是你可以用<style scoped></style>来声明这些css样式只在本模板中起作用。</li></ul><h2 id="四、router-index-js-路由文件"><a href="#四、router-index-js-路由文件" class="headerlink" title="四、router/index.js 路由文件"></a>四、router/index.js 路由文件</h2><p>引文在 app.vue 中我们看到了路由文件，虽然 router 的内容比较多，但是我们先简单的看一下</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><span class="hljs-keyword">import</span> Hello <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hello&#x27;</span>;<br><br>Vue.use(Router);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>      component: Hello,<br>    &#125;,<br>  ],<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>我们可以看到 import Hello from ‘@/components/Hello’这句话， 文件引入了/components/Hello.vue 文件。这个文件里就配置了一个路由，就是当我们访问网站时给我们显示 Hello.vue 的内容。</p><h2 id="五、HelloWorld-vue-文件解读："><a href="#五、HelloWorld-vue-文件解读：" class="headerlink" title="五、HelloWorld.vue 文件解读："></a>五、HelloWorld.vue 文件解读：</h2><p>。也是分为<template><script><style>三个部分，以后我们大部分的工作都是写这些.vue 结尾的文件。现在我们可以试着改一些内容，然后预览一下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;<br>    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;<br>    &lt;h2&gt;Essential Links&lt;/h2&gt;<br>    &lt;ul&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://vuejs.org&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>Core Docs<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://forum.vuejs.org&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>Forum<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://gitter.im/vuejs/vue&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>Gitter Chat<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://twitter.com/vuejs&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>Twitter<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;br&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://vuejs-templates.github.io/webpack/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>Docs for This Template<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;h2&gt;Ecosystem&lt;/h2&gt;<br>    &lt;ul&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://router.vuejs.org/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>vue-router<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://vuex.vuejs.org/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>vuex<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://vue-loader.vuejs.org/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>vue-loader<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>      &lt;li&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/vuejs/awesome-vue&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>awesome-vue<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>&lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      msg: <span class="hljs-string">&#x27;Welcome to Your Vue.js App&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;!-- Add <span class="hljs-string">&quot;scoped&quot;</span> attribute to limit CSS to <span class="hljs-built_in">this</span> component only --&gt;<br>&lt;style scoped&gt;<br>h1, h2 &#123;<br>  font-weight: normal;<br>&#125;<br><br>ul &#123;<br>  list-style-type: none;<br>  padding: <span class="hljs-number">0</span>;<br>&#125;<br><br>li &#123;<br>  display: inline-block;<br>  margin: <span class="hljs-number">0</span> 10px;<br>&#125;<br><br>a &#123;<br>  color: #42b983;<br>&#125;<br>&lt;/style&gt;<br></code></pre></div></td></tr></table></figure><p>总结： 这个教程只是带着你大概浏览和重点讲解了 vue-cli 的知识，如果你想完全弄明白 vue-cli，我建议最好是有调理的阅读所有代码，这对你以后成为 vue 实际项目 的开发很有帮助。如果你是一个初学者，了解这些已经足够向下学习了。这篇教程结束后，我们会学习 vue-router 的知识，vue-router 是一个重点学习任务</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue-cli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决vue init webpack报错</title>
    <link href="/2021/06/27/%E8%A7%A3%E5%86%B3vue%20init%20webpack%E6%8A%A5%E9%94%99/"/>
    <url>/2021/06/27/%E8%A7%A3%E5%86%B3vue%20init%20webpack%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>解决 vue init webpack 报错，直接使用<code>vue init webpack test </code>会报错，错误信息如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vue-cli · Failed to download repo vuejs-templates/webpack: connect ETIMEDOUT xxx:<span class="hljs-number">443</span><br></code></pre></div></td></tr></table></figure><p>通过 vue-cli 工具命令 vue init webpack vuedemo 创建 vue 项目的时候报错，提示连接超时，应该是下载某个 package 的时候，需要翻墙，导致出现连接超时<br>[</p><p>](<a href="https://github.com/vuejs-templates/webpack">https://github.com/vuejs-templates/webpack</a>)<br>解决办法是改为离线创建，我们需要下载 github 仓库中的 vue-templates/webpack，然后解压到本地。下载地址为：<a href="https://github.com/vuejs-templates/webpack">https://github.com/vuejs-templates/webpack</a>，下载之后，解压到本地用户目录下创建.vue-templates 文件夹<br>​</p><p>下载之后的压缩包为 webpack-develop.zip，我们解压之后，需要更改目录名为 webpack。用户目录下的目录为.vue-templates，注意文件夹名称前面的点(.)。<br>以我的为例将 webpack 文件放到 C:\Users\jackhoo.vue-templates 下<br>​</p><p>这样，我们再进行 vue init webpack vuedemo 命令的时候，需要带上参数–offline 表示离线初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vue init webpack vuedemo --offline<br></code></pre></div></td></tr></table></figure><p>输入命令后，会询问我们几个简单的选项，我们根据自己的需要进行填写就可以了。</p><ul><li>Project name :项目名称 ，如果不需要更改直接回车就可以了。注意：这里不能使用大写，所以我把名称改成了 vuedemo</li><li>Project description:项目描述，默认为 A Vue.js project,直接回车，不用编写。</li><li>Author：作者，如果你有配置 git 的作者，他会读取。</li><li>Install vue-router? 是否安装 vue 的路由插件，我们这里需要安装，所以选择 Y</li><li>Use ESLint to lint your code? 是否用 ESLint 来限制你的代码错误和风格。我们这里不需要输入 n，如果你是大型团队开发，最好是进行配置。</li><li>setup unit tests with Karma + Mocha? 是否需要安装单元测试工具 Karma+Mocha，我们这里不需要，所以输入 n。</li><li>Setup e2e tests with Nightwatch?是否安装 e2e 来进行用户行为模拟测试，我们这里不需要，所以输入 n。</li><li>Should we run <code>npm install</code> for you after the project has been created? (recommended) npm</li></ul><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">   vue-cli · Generated <span class="hljs-string">&quot;vuedemo&quot;</span>.<br><br><br># Installing project dependencies ...<br># ========================<br></code></pre></div></td></tr></table></figure><p>命令行出现上面的文字，说明我们已经初始化好了第一步。</p><ol><li>cd vuedemo 进入我们的 vue 项目目录。</li><li>npm run dev 开发模式下运行我们的程序。给我们自动构建了开发用的服务器环境和在浏览器中打开，并实时监视我们的代码更改，即时呈现给我们。</li></ol><p>最后运行就成功了。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue中watch的详解</title>
    <link href="/2021/06/25/Vue%E4%B8%ADwatch%E7%9A%84%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/06/25/Vue%E4%B8%ADwatch%E7%9A%84%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Watch-概述"><a href="#Watch-概述" class="headerlink" title="Watch 概述"></a>Watch 概述</h1><p>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。</p><h2 id="简单的监听"><a href="#简单的监听" class="headerlink" title="简单的监听"></a>简单的监听</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;num&quot;</span>&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>            num: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;,<br>        watch: &#123;<br>            <span class="hljs-function"><span class="hljs-title">num</span>(<span class="hljs-params">newVal, oldVal</span>)</span> &#123;<br>            <span class="hljs-comment">// 监听 num 属性的数据变化</span><br>    <span class="hljs-comment">// 作用 : 只要 num 的值发生变化,这个方法就会被调用</span><br>    <span class="hljs-comment">// 第一个参数 : 新值</span><br>    <span class="hljs-comment">// 第二个参数 : 旧值,之前的值</span><br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;oldVal:&#x27;</span>,oldVal)<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;newVal:&#x27;</span>,newVal)<br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h2 id="immediate（立即处理-进入页面就触发）"><a href="#immediate（立即处理-进入页面就触发）" class="headerlink" title="immediate（立即处理 进入页面就触发）"></a>immediate（立即处理 进入页面就触发）</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;num&quot;</span>&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>            num: <span class="hljs-number">1</span><br>        &#125;,<br>        watch: &#123;<br>            num: &#123;<br>            <span class="hljs-comment">// 数据发生变化就会调用这个函数</span><br>                <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newVal, oldVal</span>)</span> &#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;oldVal:&#x27;</span>, oldVal)<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;newVal:&#x27;</span>, newVal)<br>                &#125;,<br>                <span class="hljs-comment">// 立即处理 进入页面就触发</span><br>                immediate: <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h2 id="deep（深度监听）"><a href="#deep（深度监听）" class="headerlink" title="deep（深度监听）"></a>deep（深度监听）</h2><p>对象和数组都是引用类型，引用类型变量存的是地址，地址没有变，所以不会触发 watch。这时我们需要进行深度监听，就需要加上一个属性 deep，值为 true</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;body&gt;<br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;更改名字&quot;</span> @click=<span class="hljs-string">&quot;change&quot;</span>&gt;<br>&lt;/div&gt;<br>&lt;script src=<span class="hljs-string">&quot;vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>            food: &#123;<br>                id: <span class="hljs-number">1</span>,<br>                name: <span class="hljs-string">&#x27;冰激凌&#x27;</span><br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>            <span class="hljs-function"><span class="hljs-title">change</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-built_in">this</span>.food.name = <span class="hljs-string">&#x27;棒棒糖&#x27;</span><br>            &#125;<br>        &#125;,<br>        watch: &#123;<br>        <span class="hljs-comment">// 第一种方式：监听整个对象，每个属性值的变化都会执行handler</span><br>        <span class="hljs-comment">// 注意：属性值发生变化后，handler执行后获取的 newVal 值和 oldVal 值是一样的</span><br>            food: &#123;<br>                <span class="hljs-comment">// 每个属性值发生变化就会调用这个函数</span><br>                <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newVal, oldVal</span>)</span> &#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;oldVal:&#x27;</span>, oldVal)<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;newVal:&#x27;</span>, newVal)<br>                &#125;,<br>                <span class="hljs-comment">// 立即处理 进入页面就触发</span><br>                immediate: <span class="hljs-literal">true</span>,<br>                <span class="hljs-comment">// 深度监听 属性的变化</span><br>                deep: <span class="hljs-literal">true</span><br>            &#125;,<br>            <span class="hljs-comment">// 第二种方式：监听对象的某个属性，被监听的属性值发生变化就会执行函数</span><br>            <span class="hljs-comment">// 函数执行后，获取的 newVal 值和 oldVal 值不一样</span><br>            <span class="hljs-string">&#x27;food.name&#x27;</span>(newVal, oldVal) &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;oldVal:&#x27;</span>, oldVal)   <span class="hljs-comment">// 冰激凌</span><br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;newVal:&#x27;</span>, newVal)   <span class="hljs-comment">// 棒棒糖</span><br>            &#125;<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h1 id="Watch-和-computed-的区别"><a href="#Watch-和-computed-的区别" class="headerlink" title="Watch 和 computed 的区别"></a>Watch 和 computed 的区别</h1><h2 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h2><p>watch 用于观察和监听页面上的 vue 实例，当你需要在数据变化响应时，执行异步操作，或高性能消耗的操作，那么 watch 为最佳选择<br>​</p><p>1、watch 是监听器，可以监听某一个数据，然后执行相应的操作；<br>2、不支持缓存，数据变直接会触发相应的操作；<br>3、监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；<br>4、支持异步操作；</p><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>可以关联多个实时计算的对象，当这些对象中的其中一个改变时都会触发这个属性<br>     具有缓存能力，所以只有当数据再次改变时才会重新渲染，否则就会直接拿取缓存中的数据。<br>​</p><p>1、computed 是计算属性，也就是依赖某个值或者 props 通过计算得来得数据；<br>2、 computed 的值是在 getter 执行之后进行缓存的，只有在它依赖的数据发生变化，会重新调用 getter 来计算；<br>3、 不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化；<br>​</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>什么时候用 computed 什么时候用 watch 比较合适？<br>当多个属性影响一个属性的时候，建议用 computed，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">fullName</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-built_in">this</span>.secondName<br>&#125;<br></code></pre></div></td></tr></table></figure><p>fullName 是由 firstName 和 secondName 影响的，这种情况就适合 computed；<br>当一个值发生变化之后，会引起一系列的操作，这种情况就适合用 watch；</p><p>[</p><p>](<a href="https://blog.csdn.net/fu983531588/article/details/89454446">https://blog.csdn.net/fu983531588/article/details/89454446</a>)</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>watch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue2.0学习笔记</title>
    <link href="/2021/06/16/Vue2-0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/06/16/Vue2-0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="下载-Vue2-0-的两个版本："><a href="#下载-Vue2-0-的两个版本：" class="headerlink" title="下载 Vue2.0 的两个版本："></a>下载 Vue2.0 的两个版本：</h2><p><a href="https://cn.vuejs.org/v2/guide/installation.html">Vue</a>官方网站：<br>​</p><ul><li>开发版本：包含完整的警告和调试模式</li><li>生产版本：删除了警告，进行了压缩</li></ul><h2 id="项目结构搭建"><a href="#项目结构搭建" class="headerlink" title="项目结构搭建"></a>项目结构搭建</h2><p>1.在根目录创建文件夹 assets 文件夹，并将 css 和 js 文件夹放入其中，然后将下载的两个 vue..js 和 vue.min.js 放到下 js 文件夹下 2.在根目录下创建实例文件夹 example，其中放入第一个实例文件 helloworld.html 3.根目录下创建入口文件 index.html<br><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue.js实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Vue2.0实例<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./example/helloworld.html&quot;</span>&gt;</span>Hello World 实例<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>4.生成 package.json 配置文件<br>用 npm 进行初始化<br><code>npm init</code><br>根据提示写入 package name:项目名，version 版本号 ，description 描述，entry point 入口文件，author 作者等等</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">This utility will walk you through creating a package.json file.<br>It only covers the most common items, and tries to guess sensible defaults.<br><br>See <span class="hljs-string">`npm help init`</span> <span class="hljs-keyword">for</span> definitive documentation on these fields<br>and exactly what they <span class="hljs-keyword">do</span>.<br><br>Use <span class="hljs-string">`npm install &lt;pkg&gt;`</span> afterwards to install a package and<br>save it <span class="hljs-keyword">as</span> a dependency <span class="hljs-keyword">in</span> the package.json file.<br><br>Press ^C at any time to quit.<br>package name: (vue2<span class="hljs-number">.0</span>) vue2<span class="hljs-number">.0</span><br>version: (<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>)<br>description: Vue demo<br>entry point: (index.js)<br>test command:<br>git repository:<br>keywords:<br>author: jackhoo<br>license: (ISC)<br>About to write to E:\web\vue\VUE2<span class="hljs-number">.0</span>\package.json:<br><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;vue2.0&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;Vue demo&quot;</span>,<br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-string">&quot;directories&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;example&quot;</span>: <span class="hljs-string">&quot;example&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;jackhoo&quot;</span>,<br>  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span><br><br><br>Is <span class="hljs-built_in">this</span> OK? (yes)<br></code></pre></div></td></tr></table></figure><p>5.live-server 使用<br>用 npm 进行全局安装<br><code>npm install live-server -g</code><br>在项目目录中打开<br><code>live-server</code><br>在 example\helloworld.html 编写第一个 HelloWorld 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;HelloWord&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;HelloWorld&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          message: <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="v-if-amp-v-else-amp-v-show"><a href="#v-if-amp-v-else-amp-v-show" class="headerlink" title="v-if &amp; v-else &amp; v-show"></a>v-if &amp; v-else &amp; v-show</h2><h3 id="1-v-if-的使用："><a href="#1-v-if-的使用：" class="headerlink" title="1.v-if 的使用："></a>1.v-if 的使用：</h3><p>v-if:是 vue 的一个内部指令，指令用在我们的 html 中。<br>v-if 用来判断是否加载 html 的 DOM，比如我们模拟一个用户登录状态，在用户登录后现实用户名称。</p><p>在 index.html 文件中新增一行代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/v-if.html&quot;</span>&gt;v-<span class="hljs-keyword">if</span>&amp;v-<span class="hljs-keyword">else</span>&amp;v-show&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>新建文件 example\v-if.html 关键代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;isLogin&quot;</span>&gt;你好&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p><code>v-if.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;v-<span class="hljs-keyword">if</span> &amp; v-show &amp; v-<span class="hljs-keyword">else</span>&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;v-<span class="hljs-keyword">if</span> 判断是否加载&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;div v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;isLogin&quot;</span>&gt;你好：JSPang&lt;/div&gt;<br>        &lt;div v-<span class="hljs-keyword">else</span>&gt;请登录后操作&lt;/div&gt;<br><br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>               isLogin:<span class="hljs-literal">false</span><br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>这里我们在 vue 的 data 里定义了 isLogin 的值，当它为 true 时，网页就会显示：你好，如果为 false 时，就显示请登录后操作。</p><h3 id="2-v-show-的使用："><a href="#2-v-show-的使用：" class="headerlink" title="2.v-show 的使用："></a>2.v-show 的使用：</h3><p>调整 css 中 display 属性，DOM 已经加载，只是 CSS 控制没有显示出来。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div v-show=<span class="hljs-string">&quot;isLogin&quot;</span>&gt;你好&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><h4 id="v-if-和-v-show-的区别："><a href="#v-if-和-v-show-的区别：" class="headerlink" title="v-if 和 v-show 的区别："></a>v-if 和 v-show 的区别：</h4><p>v-if： 判断是否加载，可以减轻服务器的压力，在需要时加载。<br>v-show：调整 css dispaly 属性，可以使客户端操作更加流畅。<br>​</p><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><h3 id="v-for-指令-：解决模板循环问题"><a href="#v-for-指令-：解决模板循环问题" class="headerlink" title="v-for 指令 ：解决模板循环问题"></a>v-for 指令 ：解决模板循环问题</h3><p>v-for 指令是循环渲染一组 data 中的数组，v-for 指令需要以 item in items 形式的特殊语法，items 是源数据数组并且 item 是数组元素迭代的别名。</p><h3 id="一、基本用法：模板写法"><a href="#一、基本用法：模板写法" class="headerlink" title="一、基本用法：模板写法"></a>一、基本用法：模板写法</h3><p>在<code>index.html</code>中添加</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/v-for.html&quot;</span>&gt;v-<span class="hljs-keyword">for</span> 实例&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中新建<code>v-for.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in items&quot;</span>&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>js 写法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    items: [<span class="hljs-number">20</span>, <span class="hljs-number">23</span>, <span class="hljs-number">18</span>, <span class="hljs-number">65</span>, <span class="hljs-number">32</span>, <span class="hljs-number">19</span>, <span class="hljs-number">54</span>, <span class="hljs-number">56</span>, <span class="hljs-number">41</span>],<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;V-<span class="hljs-keyword">for</span> 案例&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;v-<span class="hljs-keyword">for</span>指令用法&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>       &lt;ul&gt;<br>           &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in items&quot;</span>&gt;<br>                &#123;&#123;item&#125;&#125;<br>           &lt;/li&gt;<br>       &lt;/ul&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                items:[<span class="hljs-number">20</span>,<span class="hljs-number">23</span>,<span class="hljs-number">18</span>,<span class="hljs-number">65</span>,<span class="hljs-number">32</span>,<span class="hljs-number">19</span>,<span class="hljs-number">54</span>,<span class="hljs-number">56</span>,<span class="hljs-number">41</span>]<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>这是一个最基础的循环，先在 js 里定义了 items 数组，然后在模板中用 v-for 循环出来，需要注意的是，你需要那个 html 标签循环，v-for 就写在那个上边。</p><h3 id="二、排序"><a href="#二、排序" class="headerlink" title="二、排序"></a>二、排序</h3><p>我们已经顺利的输出了我们定义的数组，但是我需要在输出之前给数组排个序，那我们就用到了 Vue 的 computed:属性。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    sortItems:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.sort();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们在 computed 里新声明了一个对象 sortItems，如果不重新声明会污染原来的数据源，这是 Vue 不允许的，所以你要重新声明一个对象。</p><p>如果一切顺利的话，你已经看到了结果，但是这个小程序还是有个小 Bug 的，现在我把数组修改成这样。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">items: [<span class="hljs-number">20</span>, <span class="hljs-number">23</span>, <span class="hljs-number">18</span>, <span class="hljs-number">65</span>, <span class="hljs-number">32</span>, <span class="hljs-number">19</span>, <span class="hljs-number">5</span>, <span class="hljs-number">56</span>, <span class="hljs-number">41</span>];<br></code></pre></div></td></tr></table></figure><p>我们把其中的 54 修改成了 5，我们再看一下结果，发现排序结果并不是我们想要的。</p><p>我们可以自己编写一个方法 sortNumber，然后传给我们的 sort 函数解决这个 Bug。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortNumber</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a - b;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>用法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    sortItems:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.sort(sortNumber);<br>    &#125;<br> &#125;<br></code></pre></div></td></tr></table></figure><p>经过一番折腾，我们终于实现了真正的数字排序，这是在工作中非常常用的，一定要学好，记住。</p><h3 id="三、对象循环输出"><a href="#三、对象循环输出" class="headerlink" title="三、对象循环输出"></a>三、对象循环输出</h3><p>我们上边循环的都是数组，那我们来看一个对象类型的循环是如何输出的。</p><p>我们先定义个数组，数组里边是对象数据</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">students: [<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jspang&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">32</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Panda&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;PanPaN&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;,<br>  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;King&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">45</span> &#125;,<br>];<br></code></pre></div></td></tr></table></figure><p>在模板中输出</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ul&gt;<br>   &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;student in students&quot;</span>&gt;<br>       &#123;&#123;student.name&#125;&#125; - &#123;&#123;student.age&#125;&#125;<br>   &lt;/li&gt;<br>&lt;/ul&gt;<br></code></pre></div></td></tr></table></figure><p>加入索引序号：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//数组对象方法排序:</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortByKey</span>(<span class="hljs-params">array, key</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> array.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> x = a[key];<br>    <span class="hljs-keyword">var</span> y = b[key];<br>    <span class="hljs-keyword">return</span> x &lt; y ? -<span class="hljs-number">1</span> : x &gt; y ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>  &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>有了数组的排序方法，在 computed 中进行调用排序</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">sortStudent:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-keyword">return</span> sortByKey(<span class="hljs-built_in">this</span>.students,<span class="hljs-string">&#x27;age&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意：vue 低版本中 data 里面的 items 和 computed 里面可以一样，但是高版本，是不允许相同名称。有很多小伙伴踩到了这个坑，这里提醒学习的小伙伴，根据自己版本的不同，请修改代码。<br><code>v-for.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;v-<span class="hljs-keyword">for</span>&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;v-<span class="hljs-keyword">for</span>&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;ul&gt;<br>        &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in sortItems&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;<br>      &lt;/ul&gt;<br>      &lt;ul&gt;<br>        &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(student,index) in students&quot;</span>&gt;<br>          &#123;&#123;index+<span class="hljs-number">1</span>&#125;&#125;: &#123;&#123;student.name&#125;&#125; -- &#123;&#123;student.age&#125;&#125;<br>        &lt;/li&gt;<br>      &lt;/ul&gt;<br>    &lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          items: [<span class="hljs-number">20</span>, <span class="hljs-number">23</span>, <span class="hljs-number">7</span>, <span class="hljs-number">18</span>, <span class="hljs-number">65</span>, <span class="hljs-number">32</span>, <span class="hljs-number">19</span>, <span class="hljs-number">54</span>, <span class="hljs-number">56</span>, <span class="hljs-number">41</span>],<br>          students: [<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jspang&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">32</span> &#125;,<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Panda&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span> &#125;,<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;PanPaN&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;,<br>            &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;King&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">45</span> &#125;,<br>          ],<br>        &#125;,<br>        computed: &#123;<br>          sortItems: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.sort(sortNumber);<br>          &#125;,<br><br>          sortStudent: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> sortByKey(<span class="hljs-built_in">this</span>.students, <span class="hljs-string">&#x27;age&#x27;</span>);<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortNumber</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> a - b;<br>      &#125;<br>      <span class="hljs-comment">//数组对象方法排序:</span><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortByKey</span>(<span class="hljs-params">array, key</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> array.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>          <span class="hljs-keyword">var</span> x = a[key];<br>          <span class="hljs-keyword">var</span> y = b[key];<br>          <span class="hljs-keyword">return</span> x &lt; y ? -<span class="hljs-number">1</span> : x &gt; y ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        &#125;);<br>      &#125;<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="v-text-amp-v-html"><a href="#v-text-amp-v-html" class="headerlink" title="v-text &amp; v-html"></a>v-text &amp; v-html</h2><p>我们已经会在 html 中输出 data 中的值了，我们已经用的是,这种情况是有弊端的，就是当我们网速很慢或者 javascript 出错时，会暴露我们的。Vue 给我们提供的 v-text,就是解决这个问题的。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/v-text.html&quot;</span>&gt;v-text &amp; v-html 实例&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中新建 v-text.html<br>关键代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;<span class="hljs-regexp">/span&gt;=&lt;span v-text=&quot;message&quot;&gt;&lt;/</span>span&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br></code></pre></div></td></tr></table></figure><p>如果在 javascript 中写有 html 标签，用 v-text 是输出不出来的，这时候我们就需要用 v-html 标签了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;span v-html=<span class="hljs-string">&quot;msgHtml&quot;</span>&gt;&lt;/span&gt;<br></code></pre></div></td></tr></table></figure><p>双大括号会将数据解释为纯文本，而非 HTML。为了输出真正的 HTML，你就需要使用 v-html 指令。 需要注意的是：在生产环境中动态渲染 HTML 是非常危险的，因为容易导致 XSS 攻击。所以只能在可信的内容上使用 v-html，永远不要在用户提交和可操作的网页上使用。 完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;v-text &amp; v-html 案例&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;v-text &amp; v-html 案例&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;span&gt;&#123;&#123; message &#125;&#125;&lt;<span class="hljs-regexp">/span&gt;=&lt;span v-text=&quot;message&quot;&gt;&lt;/</span>span&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br>        &lt;span v-html=<span class="hljs-string">&quot;msgHtml&quot;</span>&gt;&lt;/span&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&#x27;hello Vue!&#x27;</span>,<br>                msgHtml:<span class="hljs-string">&#x27;&lt;h2&gt;hello Vue!&lt;/h2&gt;&#x27;</span><br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h2 id="v-on：绑定事件监听器"><a href="#v-on：绑定事件监听器" class="headerlink" title="v-on：绑定事件监听器"></a>v-on：绑定事件监听器</h2><p>v-on 就是监听事件，可以用 v-on 指令监听 DOM 事件来触发一些 javascript 代码。</p><h4 id="一、使用绑定事件监听器，编写一个加分减分的程序。"><a href="#一、使用绑定事件监听器，编写一个加分减分的程序。" class="headerlink" title="一、使用绑定事件监听器，编写一个加分减分的程序。"></a>一、使用绑定事件监听器，编写一个加分减分的程序。</h4><p>在 index.html 中添加</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/v-on.html&quot;</span>&gt;v-on 实例&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中新建 v-on.html<br>我们的 v-on 还有一种简单的写法，就是用@代替。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;jianfen&quot;</span>&gt;减分&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p>我们除了绑定 click 之外，我们还可以绑定其它事件，比如键盘回车事件 v-on:keyup.enter,现在我们增加一个输入框，然后绑定回车事件，回车后把文本框里的值加到我们的 count 上。 绑定事件写法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model=<span class="hljs-string">&quot;secondCount&quot;</span>&gt;<br></code></pre></div></td></tr></table></figure><p>javascript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">onEnter:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-built_in">this</span>.count=<span class="hljs-built_in">this</span>.count+<span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">this</span>.secondCount);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>因为文本框的数字会默认转变成字符串，所以我们需要用 parseInt()函数进行整数转换。</p><p>你也可以根据键值表来定义键盘事件：<br><code>v-on.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;v-on事件监听器&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;v-on 事件监听器&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      本场比赛得分： &#123;&#123;count&#125;&#125;<br><br><br>      &lt;button v-on:click=<span class="hljs-string">&quot;jiafen&quot;</span>&gt;加分&lt;/button&gt;<br>      &lt;button @click=<span class="hljs-string">&quot;jianfen&quot;</span>&gt;减分&lt;/button&gt;<br>      &lt;hr /&gt;<br>      &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model=<span class="hljs-string">&quot;secondCount&quot;</span> /&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          count: <span class="hljs-number">1</span>,<br>          secondCount: <span class="hljs-number">1</span>,<br>        &#125;,<br>        methods: &#123;<br>          jiafen: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.count++;<br>          &#125;,<br>          jianfen: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.count--;<br>          &#125;,<br>          onEnter: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.count = <span class="hljs-built_in">this</span>.count + <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">this</span>.secondCount);<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="v-model-指令"><a href="#v-model-指令" class="headerlink" title="v-model 指令"></a>v-model 指令</h2><p>v-model 指令，我理解为绑定数据源。就是把数据绑定在特定的表单元素上，可以很容易的实现双向数据绑定。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/v-model.html&quot;</span>&gt;v-model 实例&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中新建 v-model.html</p><h3 id="一、我们来看一个最简单的双向数据绑定代码："><a href="#一、我们来看一个最简单的双向数据绑定代码：" class="headerlink" title="一、我们来看一个最简单的双向数据绑定代码："></a>一、我们来看一个最简单的双向数据绑定代码：</h3><p>html 文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    &lt;p&gt;原始文本信息：&#123;&#123;message&#125;&#125;&lt;/p&gt;<br>    &lt;h3&gt;文本框&lt;/h3&gt;<br>    &lt;p&gt;v-model:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p>javascript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    message: <span class="hljs-string">&#x27;hello Vue!&#x27;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="二、修饰符"><a href="#二、修饰符" class="headerlink" title="二、修饰符"></a>二、修饰符</h3><ul><li>.lazy：取代 imput 监听 change 事件。</li><li>.number：输入字符串转为数字。</li><li>.trim：输入去掉首尾空格。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h3&gt;文本框&lt;/h3&gt;<br>&lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">&quot;onEnter&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> /&gt;</span></span>&lt;/p&gt;<br><br>&lt;p&gt;<br>  v-model：<br>  &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>&lt;/p&gt;<br>&lt;p&gt;<br>  v-model.lazy：<br>  &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model.lazy=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>&lt;/p&gt;<br>&lt;p&gt;<br>  v-model.number：<br>  &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model.number=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>&lt;/p&gt;<br>&lt;p&gt;<br>  v-model.trim：<br>  &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model.trim=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h3 id="三、文本区域加入数据绑定"><a href="#三、文本区域加入数据绑定" class="headerlink" title="三、文本区域加入数据绑定"></a>三、文本区域加入数据绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;textarea  &lt; cols=<span class="hljs-string">&quot;30&quot;</span> rows=<span class="hljs-string">&quot;10&quot;</span> v-model=<span class="hljs-string">&quot;message&quot;</span>&gt;&lt;/textarea&gt;<br></code></pre></div></td></tr></table></figure><h3 id="四、多选按钮绑定一个值"><a href="#四、多选按钮绑定一个值" class="headerlink" title="四、多选按钮绑定一个值"></a>四、多选按钮绑定一个值</h3><p><strong>注意</strong><code>**v-model**</code><strong>绑定的值要在</strong><code>**data：&#123;&#125;**</code><strong>中声明</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h3&gt;多选按钮绑定一个值&lt;/h3&gt;<br>&lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;isTrue&quot;</span> v-model=<span class="hljs-string">&quot;isTrue&quot;</span>&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&#x27;isTrue&#x27;</span>&gt;&#123;&#123;isTrue&#125;&#125;&lt;/label&gt;<br></code></pre></div></td></tr></table></figure><h3 id="五、多选绑定一个数组"><a href="#五、多选绑定一个数组" class="headerlink" title="五、多选绑定一个数组"></a>五、多选绑定一个数组</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h3&gt;多选绑定一个数组&lt;/h3&gt;<br>       &lt;p&gt;<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;JSPang&quot;</span> value=<span class="hljs-string">&quot;JSPang&quot;</span> v-model=<span class="hljs-string">&quot;web_Names&quot;</span>&gt;<br>            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;JSPang&quot;</span>&gt;JSPang&lt;<span class="hljs-regexp">/label&gt;&lt;br/</span>&gt;<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;Panda&quot;</span> value=<span class="hljs-string">&quot;Panda&quot;</span> v-model=<span class="hljs-string">&quot;web_Names&quot;</span>&gt;<br>            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;JSPang&quot;</span>&gt;Panda&lt;<span class="hljs-regexp">/label&gt;&lt;br/</span>&gt;<br>            &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;PanPan&quot;</span> value=<span class="hljs-string">&quot;PanPan&quot;</span> v-model=<span class="hljs-string">&quot;web_Names&quot;</span>&gt;<br>            &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;JSPang&quot;</span>&gt;PanPan&lt;/label&gt;<br>            &lt;p&gt;&#123;&#123;web_Names&#125;&#125;&lt;/p&gt;<br>       &lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h3 id="六、单选按钮绑定数据"><a href="#六、单选按钮绑定数据" class="headerlink" title="六、单选按钮绑定数据"></a>六、单选按钮绑定数据</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;h3&gt;单选按钮绑定&lt;/h3&gt;<br>&lt;input type=<span class="hljs-string">&quot;radio&quot;</span> id=<span class="hljs-string">&quot;one&quot;</span> value=<span class="hljs-string">&quot;男&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span>&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;男&lt;/label&gt;<br>&lt;input type=<span class="hljs-string">&quot;radio&quot;</span> id=<span class="hljs-string">&quot;two&quot;</span> value=<span class="hljs-string">&quot;女&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span>&gt;<br>&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;女&lt;/label&gt;<br>&lt;p&gt;&#123;&#123;sex&#125;&#125;&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p><code>v-model.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;v-model 数据源绑定&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;v-model 数据原绑定&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;p&gt;原始文本数据：&#123;&#123;message&#125;&#125;&lt;/p&gt;<br>      &lt;hr /&gt;<br>      &lt;h3&gt;文本框&lt;/h3&gt;<br>      &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-on:keyup.enter</span>=<span class="hljs-string">&quot;onEnter&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> /&gt;</span></span>&lt;/p&gt;<br><br>      &lt;p&gt;<br>        v-model：<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>      &lt;/p&gt;<br>      &lt;p&gt;<br>        v-model.lazy：<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model.lazy=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>      &lt;/p&gt;<br>      &lt;p&gt;<br>        v-model.number：<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model.number=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>      &lt;/p&gt;<br>      &lt;p&gt;<br>        v-model.trim：<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-on:keyup.enter=<span class="hljs-string">&quot;onEnter&quot;</span> v-model.trim=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br>      &lt;/p&gt;<br>      &lt;hr /&gt;<br>      &lt;h3&gt;文本域&lt;/h3&gt;<br>      &lt;textarea cols=<span class="hljs-string">&quot;30&quot;</span> rows=<span class="hljs-string">&quot;10&quot;</span>&gt;&lt;/textarea&gt;<br>      &lt;hr /&gt;<br>      &lt;h3&gt;多选框绑定一个值&lt;/h3&gt;<br>      &lt;p&gt;<br>        &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;isTrue&quot;</span> v-model=<span class="hljs-string">&quot;isTrue&quot;</span> /&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;isTrue&quot;</span>&gt;&#123;&#123;isTrue&#125;&#125;&lt;/label&gt;<br>      &lt;/p&gt;<br>      &lt;h3&gt;多选框绑定数组&lt;/h3&gt;<br>      &lt;p&gt;<br>        &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;jack1&quot;</span> value=<span class="hljs-string">&quot;jack1&quot;</span> v-model=<span class="hljs-string">&quot;web_names&quot;</span> /&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;isTrue&quot;</span>&gt;jack1&lt;/label&gt;<br>        &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;jack2&quot;</span> value=<span class="hljs-string">&quot;jack2&quot;</span> v-model=<span class="hljs-string">&quot;web_names&quot;</span> /&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;isTrue&quot;</span>&gt;jack2&lt;/label&gt;<br>        &lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;jack3&quot;</span> value=<span class="hljs-string">&quot;jack3&quot;</span> v-model=<span class="hljs-string">&quot;web_names&quot;</span> /&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;isTrue&quot;</span>&gt;jack3&lt;/label&gt;<br>      &lt;/p&gt;<br>      &lt;p&gt;&#123;&#123;web_names&#125;&#125;&lt;/p&gt;<br>      &lt;hr /&gt;<br>      &lt;h3&gt;单选框绑定数组&lt;/h3&gt;<br>      &lt;p&gt;<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> id=<span class="hljs-string">&quot;one&quot;</span> value=<span class="hljs-string">&quot;男&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span> /&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;&lt;/label&gt;<br>        &lt;input type=<span class="hljs-string">&quot;radio&quot;</span> id=<span class="hljs-string">&quot;two&quot;</span> value=<span class="hljs-string">&quot;女&quot;</span> v-model=<span class="hljs-string">&quot;sex&quot;</span> /&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;&lt;/label&gt;<br>        &lt;p&gt;你选择的性别是：&#123;&#123;sex&#125;&#125;&lt;/p&gt;<br>      &lt;/p&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          message: <span class="hljs-string">&#x27;hello world&#x27;</span>,<br>          isTrue: <span class="hljs-literal">true</span>,<br>          web_names: [],<br>          sex: <span class="hljs-string">&#x27;男&#x27;</span>,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="v-bind：指令"><a href="#v-bind：指令" class="headerlink" title="v-bind：指令"></a>v-bind：指令</h2><p>v-bind 是处理 HTML 中的标签属性的，就是一个标签，我们绑定上的 src 进行动态赋值。<br>在 index.html 中添加</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/v-bind.html&quot;</span>&gt;v-bind 案例&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中新建 v-bind.html<br>html 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;img v-bind:src=<span class="hljs-string">&quot;imgSrc&quot;</span> width=<span class="hljs-string">&quot;200px&quot;</span> /&gt;<br></code></pre></div></td></tr></table></figure><p>在 html 中我们用 v-bind:src=”imgSrc”的动态绑定了 src 的值，这个值是在 vue 构造器里的 data 属性中找到的。<br>js 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    imgSrc: <span class="hljs-string">&#x27;./1.jpeg&#x27;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>我们在 data 对象在中增加了 imgSrc 属性来供 html 调用。</p><h3 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind 缩写"></a>v-bind 缩写</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!-- 完整语法 --&gt;<br>&lt;a v-bind:href=<span class="hljs-string">&quot;url&quot;</span>&gt;&lt;/a&gt;<br>&lt;!-- 缩写 --&gt;<br>&lt;a :href=<span class="hljs-string">&quot;url&quot;</span>&gt;&lt;/a&gt;<br></code></pre></div></td></tr></table></figure><h3 id="绑定-CSS-样式"><a href="#绑定-CSS-样式" class="headerlink" title="绑定 CSS 样式"></a>绑定 CSS 样式</h3><p>在工作中我们经常使用 v-bind 来绑定 css 样式：<br>在绑定 CSS 样式是，绑定的值必须在 vue 中的 data 属性中进行声明。</p><h4 id="1、直接绑定-class-样式"><a href="#1、直接绑定-class-样式" class="headerlink" title="1、直接绑定 class 样式"></a>1、直接绑定 class 样式</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;className&quot;</span>&gt;<span class="hljs-number">1</span>、绑定classA&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><h4 id="2、绑定-classA-并进行判断，在-isOK-为-true-时显示样式，在-isOk-为-false-时不显示样式。"><a href="#2、绑定-classA-并进行判断，在-isOK-为-true-时显示样式，在-isOk-为-false-时不显示样式。" class="headerlink" title="2、绑定 classA 并进行判断，在 isOK 为 true 时显示样式，在 isOk 为 false 时不显示样式。"></a>2、绑定 classA 并进行判断，在 isOK 为 true 时显示样式，在 isOk 为 false 时不显示样式。</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;&#123;classA:isOk&#125;&quot;</span>&gt;<span class="hljs-number">2</span>、绑定<span class="hljs-class"><span class="hljs-keyword">class</span>中的判断&lt;/<span class="hljs-title">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="3、绑定-class-中的数组"><a href="#3、绑定-class-中的数组" class="headerlink" title="3、绑定 class 中的数组"></a>3、绑定 class 中的数组</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;[classA,classB]&quot;</span>&gt;<span class="hljs-number">3</span>、绑定<span class="hljs-class"><span class="hljs-keyword">class</span>中的数组&lt;/<span class="hljs-title">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="4、绑定-class-中使用三元表达式判断"><a href="#4、绑定-class-中使用三元表达式判断" class="headerlink" title="4、绑定 class 中使用三元表达式判断"></a>4、绑定 class 中使用三元表达式判断</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;isOk?classA:classB&quot;</span>&gt;<span class="hljs-number">4</span>、绑定<span class="hljs-class"><span class="hljs-keyword">class</span>中的三元表达式判断&lt;/<span class="hljs-title">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="5、绑定-style"><a href="#5、绑定-style" class="headerlink" title="5、绑定 style"></a>5、绑定 style</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div :style=<span class="hljs-string">&quot;&#123;color:red,fontSize:font&#125;&quot;</span>&gt;<span class="hljs-number">5</span>、绑定style&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><h4 id="6、用对象绑定-style-样式"><a href="#6、用对象绑定-style-样式" class="headerlink" title="6、用对象绑定 style 样式"></a>6、用对象绑定 style 样式</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div :style=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;<span class="hljs-number">6</span>、用对象绑定style样式&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p><code>v-bind.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;v-bind案例&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;v-bind案例&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;img v-bind:src=<span class="hljs-string">&quot;imgSrc&quot;</span> width=<span class="hljs-string">&quot;200px&quot;</span> /&gt;<br><br><br>      &lt;a :href=<span class="hljs-string">&quot;jspang&quot;</span> target=<span class="hljs-string">&quot;_blank&quot;</span>&gt;技术胖&lt;/a&gt;<br>      &lt;hr /&gt;<br>      &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;className&quot;</span>&gt;<span class="hljs-number">1</span>、绑定classA&lt;/div&gt;<br>      &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;&#123;classA:isOk&#125;&quot;</span>&gt;<span class="hljs-number">2</span>、绑定<span class="hljs-class"><span class="hljs-keyword">class</span>中的判断&lt;/<span class="hljs-title">div</span>&gt;</span><br>      &lt;div :class=&quot;[classA,classB]&quot;&gt;3、绑定class中的数组&lt;/div&gt;<br>      &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;isOk?classA:classB&quot;</span>&gt;<span class="hljs-number">4</span>、绑定<span class="hljs-class"><span class="hljs-keyword">class</span>中的三元表达式判断&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">      &lt;<span class="hljs-title">hr</span> /&gt;</span><br><span class="hljs-class">      &lt;<span class="hljs-title">input</span> <span class="hljs-title">type</span></span>=<span class="hljs-string">&quot;checkbox&quot;</span> id=<span class="hljs-string">&quot;isTrue&quot;</span> v-model=<span class="hljs-string">&quot;isOk&quot;</span> /&gt;<br>      &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;isTrue&quot;</span>&gt;isOk=&#123;&#123;isOk&#125;&#125;&lt;/label&gt;<br>      &lt;hr /&gt;<br>      &lt;div :style=<span class="hljs-string">&quot;&#123;color:red,fontSize:font&#125;&quot;</span>&gt;<span class="hljs-number">5</span>、绑定style&lt;/div&gt;<br>      &lt;div :style=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;<span class="hljs-number">6</span>、用对象绑定style样式&lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;style&gt;<br>      .classA &#123;<br>        color: red;<br>      &#125;<br>      .classB &#123;<br>        font-size: <span class="hljs-number">150</span>%;<br>      &#125;<br>    &lt;/style&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          imgSrc: <span class="hljs-string">&#x27;./1.jpeg&#x27;</span>,<br>          jspang: <span class="hljs-string">&#x27;http://jspang.com&#x27;</span>,<br>          className: <span class="hljs-string">&#x27;classA&#x27;</span>,<br>          isOk: <span class="hljs-literal">false</span>,<br>          classA: <span class="hljs-string">&#x27;classA&#x27;</span>,<br>          classB: <span class="hljs-string">&#x27;classB&#x27;</span>,<br>          red: <span class="hljs-string">&#x27;red&#x27;</span>,<br>          font: <span class="hljs-string">&#x27;30px&#x27;</span>,<br>          styleObject: &#123;<br>            fontSize: <span class="hljs-string">&#x27;24px&#x27;</span>,<br>            color: <span class="hljs-string">&#x27;green&#x27;</span>,<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="其他内部指令-v-pre-amp-v-cloak-amp-v-once"><a href="#其他内部指令-v-pre-amp-v-cloak-amp-v-once" class="headerlink" title="其他内部指令(v-pre &amp; v-cloak &amp; v-once)"></a>其他内部指令(v-pre &amp; v-cloak &amp; v-once)</h2><p>在 index.html 中添加</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/other.html&quot;</span>&gt;v-bind 案例&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中新建 other.html</p><h3 id="v-pre-指令"><a href="#v-pre-指令" class="headerlink" title="v-pre 指令"></a>v-pre 指令</h3><p>在模板中跳过 vue 的编译，直接输出原始值。就是在标签中加入 v-pre 就不会输出 vue 中的 data 值了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div v-pre&gt;&#123;&#123; message &#125;&#125;--原样输出不渲染&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p>这时并不会输出我们的 message 值，而是直接在网页中显示</p><h3 id="v-cloak-指令"><a href="#v-cloak-指令" class="headerlink" title="v-cloak 指令"></a>v-cloak 指令</h3><p>在 vue 渲染完指定的整个 DOM 后才进行显示。它必须和 CSS 样式一起使用，</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">[v-cloak] &#123;   <span class="hljs-attr">display</span>: none; &#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">div v-cloak&gt;   &#123;&#123; message &#125;&#125; &lt;/div&gt;<br></code></pre></div></td></tr></table></figure><h2 id="v-once-指令"><a href="#v-once-指令" class="headerlink" title="v-once 指令"></a>v-once 指令</h2><p>在第一次 DOM 时进行渲染，渲染完成后视为静态内容，跳出以后的渲染过程。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div v-once&gt;第一次绑定的值：&#123;&#123;message&#125;&#125;&lt;/div&gt;<br>&lt;div&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><p><code>other.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;v-pre &amp; v-cloak &amp;v-once 案例&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;v-pre &amp; v-cloak &amp;v-once 案例&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;div v-pre&gt;&#123;&#123;message&#125;&#125;--原样输出不渲染&lt;/div&gt;<br>      &lt;div v-cloak&gt;渲染完成才显示&lt;/div&gt;<br>      &lt;div v-once&gt;&#123;&#123;message&#125;&#125;--只渲染一次&lt;/div&gt;<br>      &lt;div&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> /&gt;</span></span>&lt;/div&gt;<br>      &lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;style&gt;<br>      [v-cloak] &#123;<br>        display: none;<br>      &#125;<br>    &lt;/style&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          message: <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h1 id="全局-API"><a href="#全局-API" class="headerlink" title="全局 API"></a>全局 API</h1><h2 id="Vue-directive-自定义指令"><a href="#Vue-directive-自定义指令" class="headerlink" title="Vue.directive 自定义指令"></a>Vue.directive 自定义指令</h2><h3 id="一、什么是全局-API？"><a href="#一、什么是全局-API？" class="headerlink" title="一、什么是全局 API？"></a>一、什么是全局 API？</h3><p>全局 API 并不在构造器里，而是先声明全局变量或者直接在 Vue 上定义一些新功能，Vue 内置了一些全局 API，比如我们今天要学习的指令 Vue.directive。说的简单些就是，在构造器外部用 Vue 提供给我们的 API 函数来定义新的功能。</p><h3 id="二、Vue-directive-自定义指令"><a href="#二、Vue-directive-自定义指令" class="headerlink" title="二、Vue.directive 自定义指令"></a>二、Vue.directive 自定义指令</h3><p>我们也可以定义一些属于自己的指令，比如我们要定义一个 v-jspang 的指令，作用就是让文字变成绿色。在自定义指令前我们写一个小功能，在页面上有一个数字为 10，数字的下面有一个按钮，我们每点击一次按钮后，数字加 1.<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/vue.directive.html&quot;</span>&gt;directive 自定义指令&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 vue.directive.html 文件<br>我们这里使用 Vue.directive( );</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Vue.directive(<span class="hljs-string">&#x27;jspang&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding, vnode</span>) </span>&#123;<br>  el.style = <span class="hljs-string">&#x27;color:&#x27;</span> + binding.value;<br>&#125;);<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    num: <span class="hljs-number">10</span>,<br>    color: <span class="hljs-string">&#x27;red&#x27;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>可以看到数字已经变成了红色，说明自定义指令起到了作用。可能您看这个代码还是有些不明白的，比如传入的三个参数到底是什么。</p><h3 id="三、自定义指令中传递的三个参数"><a href="#三、自定义指令中传递的三个参数" class="headerlink" title="三、自定义指令中传递的三个参数"></a>三、自定义指令中传递的三个参数</h3><ul><li>el: 指令所绑定的元素，可以用来直接操作 DOM。</li><li>binding: 一个对象，包含指令的很多信息。</li><li>vnode: Vue 编译生成的虚拟节点。</li></ul><h3 id="四、自定义指令的生命周期"><a href="#四、自定义指令的生命周期" class="headerlink" title="四、自定义指令的生命周期"></a>四、自定义指令的生命周期</h3><p>自定义指令有五个生命周期（也叫钩子函数），分别是 <code>bind</code>,<code>inserted</code>,<code>update</code>,<code>componentUpdated</code>,<code>unbind</code></p><ol><li>bind:只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个绑定时执行一次的初始化动作。</li><li>inserted:被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li>update:被绑定于元素所在的模板更新时调用，而无论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新。</li><li>componentUpdated:被绑定元素所在模板完成一次更新周期时调用。</li><li>unbind:只调用一次，指令与元素解绑时调用。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">bind:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//被绑定</span><br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1 - bind&#x27;</span>);<br>&#125;,<br>inserted:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//绑定到节点</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2 - inserted&#x27;</span>);<br>&#125;,<br>update:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//组件更新</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3 - update&#x27;</span>);<br>&#125;,<br>componentUpdated:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//组件更新完成</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;4 - componentUpdated&#x27;</span>);<br>&#125;,<br>unbind:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//解绑</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;5- unbind&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>vue.directive.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;vue.directive 自定义指令&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;vue.directive 自定义指令&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;div v-jspang=<span class="hljs-string">&quot;color&quot;</span>&gt;&#123;&#123;num&#125;&#125;&lt;/div&gt;<br>      &lt;p&gt;<br>        &lt;button @click=<span class="hljs-string">&quot;add&quot;</span>&gt;ADD&lt;/button&gt;<br>      &lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;p&gt;<br>      &lt;button onclick=<span class="hljs-string">&quot;unbind()&quot;</span>&gt;解绑&lt;/button&gt;<br>    &lt;/p&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-comment">// Vue.directive(&#x27;jspang&#x27;, function (el, binding) &#123;</span><br>      <span class="hljs-comment">//   console.log(el);</span><br>      <span class="hljs-comment">//   console.log(binding);</span><br>      <span class="hljs-comment">//   el.style = &#x27;color:&#x27; + binding.value;</span><br>      <span class="hljs-comment">// &#125;);</span><br><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unbind</span>(<span class="hljs-params"></span>) </span>&#123;<br>        app.$destroy();<br>      &#125;<br>      Vue.directive(<span class="hljs-string">&#x27;jspang&#x27;</span>, &#123;<br>        bind: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) </span>&#123;<br>          <span class="hljs-comment">//被绑定</span><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1 - bind&#x27;</span>);<br>          el.style = <span class="hljs-string">&#x27;color:&#x27;</span> + binding.value;<br>        &#125;,<br>        inserted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">//绑定到节点</span><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2 - inserted&#x27;</span>);<br>        &#125;,<br>        update: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">//组件更新</span><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3 - update&#x27;</span>);<br>        &#125;,<br>        componentUpdated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">//组件更新完成</span><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;4 - componentUpdated&#x27;</span>);<br>        &#125;,<br>        unbind: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">//解绑</span><br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;5 - unbind&#x27;</span>);<br>        &#125;,<br>      &#125;);<br><br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          num: <span class="hljs-number">10</span>,<br>          color: <span class="hljs-string">&#x27;red&#x27;</span>,<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.num++;<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Vue-extend-构造器的延伸"><a href="#Vue-extend-构造器的延伸" class="headerlink" title="Vue.extend 构造器的延伸"></a>Vue.extend 构造器的延伸</h2><h3 id="一、什么是-Vue-extend"><a href="#一、什么是-Vue-extend" class="headerlink" title="一、什么是 Vue.extend"></a>一、什么是 Vue.extend</h3><p>Vue.extend 返回的是一个“扩展实例构造器”,也就是预设了部分选项的 Vue 实例构造器。经常服务于 Vue.component 用来生成组件，可以简单理解为当在模板中遇到该组件名称作为标签的自定义元素时，会自动调用“扩展实例构造器”来生产组件实例，并挂载到自定义元素上。<br>由于我们还没有学习 Vue 的自定义组件，所以我们先看跟组件无关的用途。</p><h3 id="二、自定义无参数标签"><a href="#二、自定义无参数标签" class="headerlink" title="二、自定义无参数标签"></a>二、自定义无参数标签</h3><p>我们想象一个需求，需求是这样的，要在博客页面多处显示作者的网名，并在网名上直接有链接地址。我们希望在 html 中只需要写<author></author>，这和自定义组件很像，但是他没有传递任何参数，只是个静态标签。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/vue.extend.html&quot;</span>&gt;directive 自定义指令&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 vue.extend.html 文件<br>我们的 Vue.extend 该登场了，我们先用它来编写一个扩展实例构造器。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> authorExtend = Vue.extend(&#123;<br>  template: <span class="hljs-string">&quot;&lt;p&gt;&lt;a :href=&#x27;authorUrl&#x27;&gt;&#123;&#123;authorName&#125;&#125;&lt;/a&gt;&lt;/p&gt;&quot;</span>,<br>  data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      authorName: <span class="hljs-string">&#x27;JSPang&#x27;</span>,<br>      authorUrl: <span class="hljs-string">&#x27;http://www.jspang.com&#x27;</span>,<br>    &#125;;<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这时 html 中的标签还是不起作用的，因为扩展实例构造器是需要挂载的，我们再进行一次挂载。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> authorExtend().$mount(<span class="hljs-string">&#x27;author&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>这时我们在 html 写<author><author>就是管用的。</p><h3 id="三、挂载到普通标签上"><a href="#三、挂载到普通标签上" class="headerlink" title="三、挂载到普通标签上"></a>三、挂载到普通标签上</h3><p>还可以通过 HTML 标签上的 id 或者 class 来生成扩展实例构造器，Vue.extend 里的代码是一样的，只是在挂载的时候，我们用类似 jquery 的选择器的方法，来进行挂载就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> authorExtend().$mount(<span class="hljs-string">&#x27;#author&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p><code>vue.extend.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;vue.extend 扩展实例构造器&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;vue.extend 扩展实例构造器&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;author&quot;</span>&gt;&lt;/div&gt;<br>    &lt;author&gt;&lt;/author&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> authorExtend = Vue.extend(&#123;<br>        template: <span class="hljs-string">&quot;&lt;p&gt;&lt;a :href=&#x27;authorURL&#x27;&gt;&#123;&#123;authorName&#125;&#125;&lt;/a&gt;&lt;/p&gt;&quot;</span>,<br>        data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-keyword">return</span> &#123;<br>            authorName: <span class="hljs-string">&#x27;JSP&#x27;</span>,<br>            authorURL: <span class="hljs-string">&#x27;http://jspang.com&#x27;</span>,<br>          &#125;;<br>        &#125;,<br>      &#125;);<br>      <span class="hljs-keyword">new</span> authorExtend().$mount(<span class="hljs-string">&#x27;#author&#x27;</span>);<br>      <span class="hljs-keyword">new</span> authorExtend().$mount(<span class="hljs-string">&#x27;author&#x27;</span>);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Vue-set-全局操作"><a href="#Vue-set-全局操作" class="headerlink" title="Vue.set 全局操作"></a>Vue.set 全局操作</h2><p>Vue.set 的作用就是在构造器外部操作构造器内部的数据、属性或者方法。比如在 vue 构造器内部定义了一个 count 为 1 的数据，我们在构造器外部定义了一个方法，要每次点击按钮给值加 1.就需要用到 Vue.set。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/vue.set.html&quot;</span>&gt;vue.set 全局操作&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 vue.set.html 文件</p><h3 id="一、引用构造器外部数据："><a href="#一、引用构造器外部数据：" class="headerlink" title="一、引用构造器外部数据："></a>一、引用构造器外部数据：</h3><p>什么是外部数据，就是不在 Vue 构造器里里的 data 处声明，而是在构造器外部声明，然后在 data 处引用就可以了。外部数据的加入让程序更加灵活，我们可以在外部获取任何想要的数据形式，然后让 data 引用。 看一个简单的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//在构造器外部声明数据</span><br><span class="hljs-keyword">var</span> outData = &#123;<br>  count: <span class="hljs-number">1</span>,<br>  goodName: <span class="hljs-string">&#x27;car&#x27;</span>,<br>&#125;;<br><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-comment">//引用外部数据</span><br>  data: outData,<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="二、在外部改变数据的三种方法："><a href="#二、在外部改变数据的三种方法：" class="headerlink" title="二、在外部改变数据的三种方法："></a>二、在外部改变数据的三种方法：</h3><h4 id="1、用-Vue-set-改变"><a href="#1、用-Vue-set-改变" class="headerlink" title="1、用 Vue.set 改变"></a>1、用 Vue.set 改变</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br>  Vue.set(outData, <span class="hljs-string">&#x27;count&#x27;</span>, <span class="hljs-number">4</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2、用-Vue-对象的方法添加"><a href="#2、用-Vue-对象的方法添加" class="headerlink" title="2、用 Vue 对象的方法添加"></a>2、用 Vue 对象的方法添加</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.count++;<br></code></pre></div></td></tr></table></figure><h4 id="3、直接操作外部数据"><a href="#3、直接操作外部数据" class="headerlink" title="3、直接操作外部数据"></a>3、直接操作外部数据</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">outData.count++;<br></code></pre></div></td></tr></table></figure><p>其实这三种方式都可以操作外部的数据，Vue 也给我们增加了一种操作外部数据的方法。</p><h3 id="三、为什么要有-Vue-set-的存在"><a href="#三、为什么要有-Vue-set-的存在" class="headerlink" title="三、为什么要有 Vue.set 的存在?"></a>三、为什么要有 Vue.set 的存在?</h3><p>由于 Javascript 的限制，Vue 不能自动检测以下变动的数组。</p><ul><li>当你利用索引直接设置一个项时，vue 不会为我们自动更新。</li><li>当你修改数组的长度时，vue 不会为我们自动更新。</li></ul><p>看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;Vue.set 全局操作&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Vue.set 全局操作&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;ul&gt;<br>            &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot; aa in arr&quot;</span>&gt;&#123;&#123;aa&#125;&#125;&lt;/li&gt;<br>        &lt;/ul&gt;<br><br>    &lt;/div&gt;<br>    &lt;button onclick=<span class="hljs-string">&quot;add()&quot;</span>&gt;外部添加&lt;/button&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我已经执行了&quot;</span>);<br>           app.arr[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;ddd&#x27;</span>;<br>           <span class="hljs-comment">//Vue.set(app.arr,1,&#x27;ddd&#x27;);</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> outData=&#123;<br>            arr:[<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>,<span class="hljs-string">&#x27;ccc&#x27;</span>]<br>        &#125;;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:outData<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>这时我们的界面是不会自动跟新数组的，我们需要用 Vue.set(app.arr,1,’ddd’)来设置改变，vue 才会给我们自动更新，这就是 Vue.set 存在的意义。<br><code>vue.set.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;vue.set 全局操作&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;vue.set 全局操作&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &#123;&#123;count&#125;&#125;<br>      &lt;ul&gt;<br>        &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;item in arr&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;<br>      &lt;/ul&gt;<br>    &lt;/div&gt;<br>    &lt;p&gt;<br>      &lt;button onclick=<span class="hljs-string">&quot;add()&quot;</span>&gt;add&lt;/button&gt;<br>    &lt;/p&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// Vue.set(outData, &#x27;count&#x27;, 2);</span><br>        <span class="hljs-comment">// app.count++;</span><br>        <span class="hljs-comment">// outData.count++;</span><br>        <span class="hljs-comment">// app.arr[1] = &#x27;ddd&#x27;;</span><br>        Vue.set(app.arr, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;dd&#x27;</span>);<br>      &#125;<br>    &lt;/script&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> outData = &#123;<br>        count: <span class="hljs-number">1</span>,<br>        <span class="hljs-comment">// goods: &#x27;car&#x27;,</span><br>        arr: [<span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-string">&#x27;bbb&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>],<br>      &#125;;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: outData,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Vue-的生命周期（钩子函数）"><a href="#Vue-的生命周期（钩子函数）" class="headerlink" title="Vue 的生命周期（钩子函数）"></a>Vue 的生命周期（钩子函数）</h2><p>Vue 一共有 10 个生命周期函数，我们可以利用这些函数在 vue 的每个阶段都进行操作数据或者改变内容。<br><img src="https://cdn.nlark.com/yuque/0/2021/webp/2625525/1624535255563-0b9afb13-7b80-46c9-ac1b-a788b43b64b8.webp#clientId=u62934013-fb22-4&from=paste&id=uf81c8418&margin=%5Bobject%20Object%5D&originHeight=3039&originWidth=1200&originalType=url&ratio=2&status=done&style=none&taskId=ud189f2be-2116-48bb-a847-dc1d986d5c3"><br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/vue.lifeCycle.html&quot;</span>&gt;vue的生命周期&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 vue.lifeCycle.html 文件<br><code>vue.lifeCycle.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;vue.lifeCycle 生命周期&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;vue.lifeCycle 生命周期&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &#123;&#123;count&#125;&#125;<br>      &lt;p&gt;<br>        &lt;button @click=<span class="hljs-string">&quot;add&quot;</span>&gt;add&lt;/button&gt;<br>      &lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;button onclick=<span class="hljs-string">&quot;app.$destroy()&quot;</span>&gt;销毁&lt;/button&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          count: <span class="hljs-number">1</span>,<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.count++;<br>          &#125;,<br>        &#125;,<br>        beforeCreate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1-beforeCreate 初始化之前&#x27;</span>);<br>        &#125;,<br>        created: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2-created 创建完成&#x27;</span>);<br>        &#125;,<br>        beforeMount: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;3-beforeMount 挂载之前&#x27;</span>);<br>        &#125;,<br>        mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;4-mounted 被挂载之后&#x27;</span>);<br>        &#125;,<br>        beforeUpdate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;5-beforeUpdate 数据更新前&#x27;</span>);<br>        &#125;,<br>        updated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;6-updated 被更新后&#x27;</span>);<br>        &#125;,<br>        activated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;7-activated&#x27;</span>);<br>        &#125;,<br>        deactivated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;8-deactivated&#x27;</span>);<br>        &#125;,<br>        beforeDestroy: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;9-beforeDestroy 销毁之前&#x27;</span>);<br>        &#125;,<br>        destroyed: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;10-destroyed 销毁之后&#x27;</span>);<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Tempate-制作模板"><a href="#Tempate-制作模板" class="headerlink" title="Tempate 制作模板"></a>Tempate 制作模板</h2><p>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/template.html&quot;</span>&gt;template制作模板&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 template.html 文件<br>​</p><h3 id="一、直接写在选项里的模板"><a href="#一、直接写在选项里的模板" class="headerlink" title="一、直接写在选项里的模板"></a>一、直接写在选项里的模板</h3><p>直接在构造器里的 template 选项后边编写。这种写法比较直观，但是如果模板 html 代码太多，不建议这么写。<br>javascript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    message: <span class="hljs-string">&#x27;hello Vue!&#x27;</span>,<br>  &#125;,<br>  template: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;h1 style=&quot;color:red&quot;&gt;我是选项模板&lt;/h1&gt;</span><br><span class="hljs-string">     `</span>,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这里需要注意的是模板的标识不是单引号和双引号，而是，就是 Tab 上面的键。</p><h3 id="二、写在-template-标签里的模板"><a href="#二、写在-template-标签里的模板" class="headerlink" title="二、写在 template 标签里的模板"></a>二、写在 template 标签里的模板</h3><p>这种写法更像是在写 HTML 代码，就算不会写 Vue 的人，也可以制作页面。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template id=<span class="hljs-string">&quot;demo2&quot;</span>&gt;<br>          &lt;h2 style=<span class="hljs-string">&quot;color:red&quot;</span>&gt;我是template标签模板&lt;/h2&gt;<br> &lt;/template&gt;<br><br> &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>     <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>         el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>         data:&#123;<br>             message:<span class="hljs-string">&#x27;hello Vue!&#x27;</span><br>         &#125;,<br>         template:<span class="hljs-string">&#x27;#demo2&#x27;</span><br>     &#125;)<br> &lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h3 id="三、写在-script-标签里的模板"><a href="#三、写在-script-标签里的模板" class="headerlink" title="三、写在 script 标签里的模板"></a>三、写在 script 标签里的模板</h3><p>这种写模板的方法，可以让模板文件从外部引入。<br>&lt;</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;x-template&quot;</span> id=<span class="hljs-string">&quot;demo3&quot;</span>&gt;<br>        &lt;h2 style=<span class="hljs-string">&quot;color:red&quot;</span>&gt;我是script标签模板&lt;/h2&gt;<br>    &lt;/script&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&#x27;hello Vue!&#x27;</span><br>            &#125;,<br>            template:<span class="hljs-string">&#x27;#demo3&#x27;</span><br>        &#125;)<br>    &lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>我们学习了 Template 的三种写法，以后学习到 vue-cli 的时候还会学到一种 xxx.vue 的写法。<br><code>template.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;Template三种写法&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;Template三种写法&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;<br><br>    &lt;template id=<span class="hljs-string">&quot;dd2&quot;</span>&gt;<br>      &lt;h2 style=<span class="hljs-string">&quot;color: red&quot;</span>&gt;我是Template标签模板&lt;/h2&gt;<br>    &lt;/template&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;x-template&quot;</span> id=<span class="hljs-string">&quot;dd3&quot;</span>&gt;<br>      &lt;h2 style=<span class="hljs-string">&quot;color: red&quot;</span>&gt;script标签模板&lt;/h2&gt;<br>    &lt;/script&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          message: <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>        &#125;,<br>        template: <span class="hljs-string">&#x27;#dd3&#x27;</span>,<br>        <span class="hljs-comment">// template: `&lt;h2 style=&#x27;color:red&#x27;&gt;我是选项模板&lt;/h2&gt;`,</span><br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Component-初识组件"><a href="#Component-初识组件" class="headerlink" title="Component 初识组件"></a>Component 初识组件</h2><p>component 组件是 Vue 学习的重点、重点、重点，重要的事情说三遍。所以你必须学好 Vue component。其实组件就是制作自定义的标签，这些标签在 HTML 中是没有的。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/component-1.html&quot;</span>&gt;component-<span class="hljs-number">1</span>组件&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 component-1.html 文件<br>​</p><h3 id="一、全局化注册组件"><a href="#一、全局化注册组件" class="headerlink" title="一、全局化注册组件"></a>一、全局化注册组件</h3><p>全局化就是在构造器的外部用 Vue.component 来注册，我们注册现在就注册一个的组件来体验一下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;component-<span class="hljs-number">1</span>&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;component-<span class="hljs-number">1</span>&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;jspang&gt;&lt;/jspang&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-comment">//注册全局组件</span><br>        Vue.component(<span class="hljs-string">&#x27;jspang&#x27;</span>,&#123;<br>            template:<span class="hljs-string">`&lt;div style=&quot;color:red;&quot;&gt;全局化注册的jspang标签&lt;/div&gt;`</span><br>        &#125;)<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>我们在 javascript 里注册了一个组件，在 HTML 中调用了他。这就是最简单的一个组件的编写方法，并且它可以放到多个构造器的作用域里。</p><h3 id="二、局部注册组件局部"><a href="#二、局部注册组件局部" class="headerlink" title="二、局部注册组件局部"></a>二、局部注册组件局部</h3><p>局部注册组件局部注册组件和全局注册组件是向对应的，局部注册的组件只能在组件注册的作用域里进行使用，其他作用域使用无效。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;component-<span class="hljs-number">1</span>&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;component-<span class="hljs-number">1</span>&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;panda&gt;&lt;/panda&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            components:&#123;<br>                <span class="hljs-string">&quot;panda&quot;</span>:&#123;<br>                    template:<span class="hljs-string">`&lt;div style=&quot;color:red;&quot;&gt;局部注册的panda标签&lt;/div&gt;`</span><br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>从代码中你可以看出局部注册其实就是写在构造器里，但是你需要注意的是，构造器里的 components 是加 s 的，而全局注册是不加 s 的。</p><h3 id="三、组件和指令的区别"><a href="#三、组件和指令的区别" class="headerlink" title="三、组件和指令的区别"></a>三、组件和指令的区别</h3><p>组件注册的是一个标签，而指令注册的是已有标签里的一个属性。在实际开发中我们还是用组件比较多，指令用的比较少。因为指令看起来封装的没那么好，这只是个人观点。<br><code>component.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;component-<span class="hljs-number">1</span>&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;component-<span class="hljs-number">1</span>&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;jspang&gt;&lt;/jspang&gt;<br>      &lt;panda&gt;&lt;/panda&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      Vue.component(<span class="hljs-string">&#x27;jspang&#x27;</span>, &#123;<br>        template: <span class="hljs-string">`&lt;div style=&#x27;color:red&#x27;&gt;我是全局的jspang组件&lt;/div&gt;`</span>,<br>      &#125;);<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        components: &#123;<br>          panda: &#123;<br>            template: <span class="hljs-string">`&lt;div style=&#x27;color:green&#x27;&gt;我是局部的panda组件&lt;/div&gt;`</span>,<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Component-组件-props-属性设置"><a href="#Component-组件-props-属性设置" class="headerlink" title="Component 组件 props 属性设置"></a>Component 组件 props 属性设置</h2><p>props 选项就是设置和获取标签上的属性值的，例如我们有一个自定义的组件,这时我们想给他加个标签属性写成 意思就是熊猫来自中国，当然这里的 China 可以换成任何值。定义属性的选项是 props。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/component-2.html&quot;</span>&gt;component-<span class="hljs-number">2</span>组件props属性设置&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 component-2.html 文件</p><h3 id="一、定义属性并获取属性值"><a href="#一、定义属性并获取属性值" class="headerlink" title="一、定义属性并获取属性值"></a>一、定义属性并获取属性值</h3><p>定义属性我们需要用 props 选项，加上数组形式的属性名称，例如：props:[‘here’]。在组件的模板里读出属性值只需要用插值的形式，例如.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;component-<span class="hljs-number">2</span>&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;component-<span class="hljs-number">2</span>&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;panda here=<span class="hljs-string">&quot;China&quot;</span>&gt;&lt;/panda&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            components:&#123;<br>                <span class="hljs-string">&quot;panda&quot;</span>:&#123;<br>                    template:<span class="hljs-string">`&lt;div style=&quot;color:red;&quot;&gt;Panda from &#123;&#123; here &#125;&#125;.&lt;/div&gt;`</span>,<br>                    props:[<span class="hljs-string">&#x27;here&#x27;</span>]<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>上面的代码定义了 panda 的组件，并用 props 设置了 here 的属性值，在 here 属性值里传递了 China 给组件。 最后输出的结果是红色字体的 Panda from China.</p><h3 id="二、属性中带’-‘的处理方式"><a href="#二、属性中带’-‘的处理方式" class="headerlink" title="二、属性中带’-‘的处理方式"></a>二、属性中带’-‘的处理方式</h3><p>我们在写属性时经常会加入’-‘来进行分词，比如：，那这时我们在 props 里如果写成 props:[‘form-here’]是错误的，我们必须用小驼峰式写法 props:[‘formHere’]。<br>html 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;panda <span class="hljs-keyword">from</span>-here=<span class="hljs-string">&quot;China&quot;</span>&gt;&lt;/panda&gt;<br></code></pre></div></td></tr></table></figure><p>javascript 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  components: &#123;<br>    panda: &#123;<br>      template: <span class="hljs-string">`&lt;div style=&quot;color:red;&quot;&gt;Panda from &#123;&#123; here &#125;&#125;.&lt;/div&gt;`</span>,<br>      props: [<span class="hljs-string">&#x27;fromHere&#x27;</span>],<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>PS：因为这里有坑，所以还是少用-为好</p><h3 id="三、在构造器里向组件中传值"><a href="#三、在构造器里向组件中传值" class="headerlink" title="三、在构造器里向组件中传值"></a>三、在构造器里向组件中传值</h3><p>把构造器中 data 的值传递给组件，我们只要进行绑定就可以了。就是我们第一季学的 v-bind:xxx.<br>我们直接看代码:<br>html 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;panda v-bind:here=<span class="hljs-string">&quot;message&quot;</span>&gt;&lt;/panda&gt;<br></code></pre></div></td></tr></table></figure><p>javascript 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  data: &#123;<br>    message: <span class="hljs-string">&#x27;SiChuan&#x27;</span>,<br>  &#125;,<br>  components: &#123;<br>    panda: &#123;<br>      template: <span class="hljs-string">`&lt;div style=&quot;color:red;&quot;&gt;Panda from &#123;&#123; here &#125;&#125;.&lt;/div&gt;`</span>,<br>      props: [<span class="hljs-string">&#x27;here&#x27;</span>],<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p><code>component-2.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;component-<span class="hljs-number">2</span>组件props属性设置&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;component-2props属性设置&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;panda :here=<span class="hljs-string">&quot;message&quot;</span>&gt;&lt;/panda&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          message: <span class="hljs-string">&#x27;China&#x27;</span>,<br>        &#125;,<br>        components: &#123;<br>          panda: &#123;<br>            template: <span class="hljs-string">`&lt;div style=&#x27;color:green&#x27;&gt;Panda from &#123;&#123;here&#125;&#125;&lt;/div&gt;`</span>,<br>            props: [<span class="hljs-string">&#x27;here&#x27;</span>],<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Component-父子组件关系"><a href="#Component-父子组件关系" class="headerlink" title="Component 父子组件关系"></a>Component 父子组件关系</h2><p>在实际开发中我们经常会遇到在一个自定义组件中要使用其他自定义组件，这就需要一个父子组件关系。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/component-3.html&quot;</span>&gt;component-<span class="hljs-number">3</span>父子组件关系&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 component-3.html 文件</p><h3 id="一、构造器外部写局部注册组件"><a href="#一、构造器外部写局部注册组件" class="headerlink" title="一、构造器外部写局部注册组件"></a>一、构造器外部写局部注册组件</h3><p>上面我们都把局部组件的编写放到了构造器内部，如果组件代码量很大，会影响构造器的可读性，造成拖拉和错误。<br>我们把组件编写的代码放到构造器外部或者说单独文件。<br>我们需要先声明一个对象,对象里就是组件的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> jspang = &#123;<br>  template: <span class="hljs-string">`&lt;div&gt;Panda from China!&lt;/div&gt;`</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>声明好对象后在构造器里引用就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">components:&#123;<br>    <span class="hljs-string">&quot;jspang&quot;</span>:jspang<br>&#125;<br></code></pre></div></td></tr></table></figure><p>html 中引用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;jspang&gt;&lt;/jspang&gt;<br></code></pre></div></td></tr></table></figure><h3 id="二、父子组件的嵌套"><a href="#二、父子组件的嵌套" class="headerlink" title="二、父子组件的嵌套"></a>二、父子组件的嵌套</h3><p>我们先声明一个父组件，比如叫 jspang，然后里边我们加入一个 city 组件，我们来看这样的代码如何写。<br><code>component-3.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;component-<span class="hljs-number">3</span>父子组件关系&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;component-<span class="hljs-number">3</span>父子组件关系&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;panda&gt;&lt;/panda&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> city = &#123;<br>        template: <span class="hljs-string">`&lt;div style=&quot;color:green&quot;&gt;siChuan of China&lt;/div&gt;`</span>,<br>      &#125;;<br>      <span class="hljs-keyword">var</span> pandaComponent = &#123;<br>        template: <span class="hljs-string">`&lt;div&gt;</span><br><span class="hljs-string">          &lt;p&gt;Panda from China&lt;/p&gt;</span><br><span class="hljs-string">          &lt;city&gt;&lt;/city&gt;</span><br><span class="hljs-string">          &lt;/div&gt;`</span>,<br>        components: &#123;<br>          city: city,<br>        &#125;,<br>      &#125;;<br><br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        components: &#123;<br>          panda: pandaComponent,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Component-标签"><a href="#Component-标签" class="headerlink" title="Component 标签"></a>Component 标签</h2><p>标签是 Vue 框架自定义的标签，它的用途就是可以动态绑定我们的组件，根据数据的不同更换不同的组件。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/component-4.html&quot;</span>&gt;component-<span class="hljs-number">4</span>标签&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 component-4.html 文件</p><p>1.我们先在构造器外部定义三个不同的组件，分别是 componentA,componentB 和 componentC.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> componentA = &#123;<br>  template: <span class="hljs-string">`&lt;div&gt;I&#x27;m componentA&lt;/div&gt;`</span>,<br>&#125;;<br><span class="hljs-keyword">var</span> componentB = &#123;<br>  template: <span class="hljs-string">`&lt;div&gt;I&#x27;m componentB&lt;/div&gt;`</span>,<br>&#125;;<br><span class="hljs-keyword">var</span> componentC = &#123;<br>  template: <span class="hljs-string">`&lt;div&gt;I&#x27;m componentC&lt;/div&gt;`</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>2.我们在构造器的 components 选项里加入这三个组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">components:&#123;<br>    <span class="hljs-string">&quot;componentA&quot;</span>:componentA,<br>    <span class="hljs-string">&quot;componentB&quot;</span>:componentB,<br>    <span class="hljs-string">&quot;componentC&quot;</span>:componentC,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3.我们在 html 里插入 component 标签，并绑定 who 数据，根据 who 的值不同，调用不同的组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;component v-bind:is=<span class="hljs-string">&quot;who&quot;</span>&gt;&lt;/component&gt;<br></code></pre></div></td></tr></table></figure><p>这就是我们的组件标签的基本用法。<br>我们提高一下，给页面加个按钮，每点以下更换一个组件。<br><code>component-4.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;component-<span class="hljs-number">4</span>标签&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;component-<span class="hljs-number">4</span>标签&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;component v-bind:is=<span class="hljs-string">&quot;who&quot;</span>&gt;&lt;/component&gt;<br>      &lt;button @click=<span class="hljs-string">&quot;changeComponent&quot;</span>&gt;changeComponent&lt;/button&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> componentA = &#123;<br>        template: <span class="hljs-string">&#x27;&lt;div style=&quot;color:red&quot;&gt;I’m componentA&lt;/div&gt;&#x27;</span>,<br>      &#125;;<br>      <span class="hljs-keyword">var</span> componentB = &#123;<br>        template: <span class="hljs-string">&#x27;&lt;div style=&quot;color:green&quot;&gt;I’m componentB&lt;/div&gt;&#x27;</span>,<br>      &#125;;<br>      <span class="hljs-keyword">var</span> componentC = &#123;<br>        template: <span class="hljs-string">&#x27;&lt;div style=&quot;color:pink&quot;&gt;I’m componentC&lt;/div&gt;&#x27;</span>,<br>      &#125;;<br>    &lt;/script&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          who: componentB,<br>        &#125;,<br>        components: &#123;<br>          componentA: componentA,<br>          componentB: componentB,<br>          componentC: componentC,<br>        &#125;,<br>        methods: &#123;<br>          changeComponent: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.who === <span class="hljs-string">&#x27;componentA&#x27;</span>) &#123;<br>              <span class="hljs-built_in">this</span>.who = <span class="hljs-string">&#x27;componentB&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.who == <span class="hljs-string">&#x27;componentB&#x27;</span>) &#123;<br>              <span class="hljs-built_in">this</span>.who = <span class="hljs-string">&#x27;componentC&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-built_in">this</span>.who = <span class="hljs-string">&#x27;componentA&#x27;</span>;<br>            &#125;<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h1 id="构造器里的选项"><a href="#构造器里的选项" class="headerlink" title="构造器里的选项"></a>构造器里的选项</h1><h2 id="propsData-Option-全局扩展的数据传递"><a href="#propsData-Option-全局扩展的数据传递" class="headerlink" title="propsData Option 全局扩展的数据传递"></a>propsData Option 全局扩展的数据传递</h2><p>propsData 不是和属性有关，他用在全局扩展时进行传递数据。先回顾一下全局扩展的知识，作一个的扩展标签出来。实际我们并比推荐用全局扩展的方式作自定义标签，我们学了组件，完全可以使用组件来做，这里只是为了演示 propsData 的用法。<br>​</p><p>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/propsData.html&quot;</span>&gt;propsData Option&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 propsData.html 文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;PropsData Option Demo&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;PropsData Option Demo&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;header&gt;&lt;/header&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>       <span class="hljs-keyword">var</span>  header_a = Vue.extend(&#123;<br>           template:<span class="hljs-string">`&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;`</span>,<br>           data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>               <span class="hljs-keyword">return</span> &#123;<br>                   message:<span class="hljs-string">&#x27;Hello,I am Header&#x27;</span><br>               &#125;<br>           &#125;<br>       &#125;);<br>       <span class="hljs-keyword">new</span> header_a().$mount(<span class="hljs-string">&#x27;header&#x27;</span>);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>扩展标签已经做好了，这时我们要在挂载时传递一个数字过去，我们就用到了 propsData。 我们用 propsData 三步解决传值： 1.在全局扩展里加入 props 进行接收。propsData:{a:1} 2.传递时用 propsData 进行传递。props:[‘a’] 3.用插值的形式写入模板。 完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> header_a = Vue.extend(&#123;<br>  template: <span class="hljs-string">`&lt;p&gt;&#123;&#123;message&#125;&#125;-&#123;&#123;a&#125;&#125;&lt;/p&gt;`</span>,<br>  data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      message: <span class="hljs-string">&#x27;Hello,I am Header&#x27;</span>,<br>    &#125;;<br>  &#125;,<br>  props: [<span class="hljs-string">&#x27;a&#x27;</span>],<br>&#125;);<br><span class="hljs-keyword">new</span> header_a(&#123; <span class="hljs-attr">propsData</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125; &#125;).$mount(<span class="hljs-string">&#x27;header&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>总结：propsData 在实际开发中我们使用的并不多，我们在后边会学到 Vuex 的应用，他的作用就是在单页应用中保持状态和数据的。</p><h2 id="computed-Option-计算选项"><a href="#computed-Option-计算选项" class="headerlink" title="computed Option 计算选项"></a>computed Option 计算选项</h2><p>computed 的作用主要是对原数据进行改造输出。改造输出：包括格式的编辑，大小写转换，顺序重排，添加符号……。<br>​</p><p>1、computed 是计算属性，也就是依赖某个值或者 props 通过计算得来得数据；<br>2、 computed 的值是在 getter 执行之后进行缓存的，只有在它依赖的数据发生变化，会重新调用 getter 来计算；<br>3、 不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化<br>​</p><p>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/computed.html&quot;</span>&gt;computed Option&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 computed 加.html 文件</p><h3 id="一、格式化输出结果："><a href="#一、格式化输出结果：" class="headerlink" title="一、格式化输出结果："></a>一、格式化输出结果：</h3><p>我们先来做个读出价格的例子：我们读书的原始数据是 price:100 但是我们输出给用户的样子是（￥ 100 元）。 主要的 javascript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    newPrice:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.price=<span class="hljs-string">&#x27;￥&#x27;</span> + <span class="hljs-built_in">this</span>.price + <span class="hljs-string">&#x27;元&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>全部代码:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;Computed Option 计算选项&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Computed Option 计算选项&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123;newPrice&#125;&#125;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                price:<span class="hljs-number">100</span><br>            &#125;,<br>            computed:&#123;<br>                newPrice:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.price=<span class="hljs-string">&#x27;￥&#x27;</span> + <span class="hljs-built_in">this</span>.price + <span class="hljs-string">&#x27;元&#x27;</span>;<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>现在输出的结果就是：￥ 100 元。</p><h3 id="二、用计算属性反转数组"><a href="#二、用计算属性反转数组" class="headerlink" title="二、用计算属性反转数组"></a>二、用计算属性反转数组</h3><p>例如：我们得到了一个新闻列表的数组，它的顺序是安装新闻时间的顺序正序排列的，也就是早反生的新闻排在前面。这是反人类的，我们需要给他反转。这时我们就可以用到我们的计算属性了。<br>没有排序的新闻列表，是安装日期正序排列的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> newsList = [<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;香港或就“装甲车被扣”事件追责 起诉涉事运输公司&#x27;</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2017/3/10&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;日本第二大准航母服役 外媒：针对中国潜艇&#x27;</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2017/3/12&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;中国北方将有明显雨雪降温天气 南方阴雨持续&#x27;</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2017/3/13&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;起底“最短命副市长”：不到40天落马，全家被查&#x27;</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2017/3/23&#x27;</span> &#125;,<br>];<br></code></pre></div></td></tr></table></figure><p>我们希望输出的结果：</p><ul><li>起底“最短命副市长”：不到 40 天落马，全家被查-2017/3/23</li><li>中国北方将有明显雨雪降温天气 南方阴雨持续-2017/3/13</li><li>日本第二大准航母服役 外媒：针对中国潜艇-2017/3/12</li><li>香港或就“装甲车被扣”事件追责 起诉涉事运输公司-2017/3/10</li></ul><p>我们的在 computed 里的 javascript 代码：我们用 js 原生方法给数组作了反转。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">computed:&#123;<br>    reverseNews:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.newsList.reverse();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>总结：computed 属性是非常有用，在输出数据前可以轻松的改变数据。所以说这节课的代码必须要多敲几遍，加深印象</p><h2 id="Methods-Option-方法选项"><a href="#Methods-Option-方法选项" class="headerlink" title="Methods Option 方法选项"></a>Methods Option 方法选项</h2><p>在以前的学习中，已经大量的使用了构造器里的 methods 选项，但是并没有仔细和系统的讲解过<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/methods.html&quot;</span>&gt;methods Option&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 methods.html 文件<br>我们还是复习一下最简单的使用方法，一个数字，每点击一下按钮加 1.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;methods Option&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;methods Option&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123; a &#125;&#125;<br>        &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                a:<span class="hljs-number">1</span><br>            &#125;,<br>            methods:&#123;<br>                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-built_in">this</span>.a++<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h3 id="一、methods-中参数的传递"><a href="#一、methods-中参数的传递" class="headerlink" title="一、methods 中参数的传递"></a>一、methods 中参数的传递</h3><p>使用方法和正常的 javascript 传递参数的方法一样，分为两部：</p><ul><li>在 methods 的方法中进行声明，比如我们给 add 方法加上一个 num 参数，就要写出<code>add:function(num)&#123;&#125;.</code></li><li>调用方法时直接传递，比如我们要传递 2 这个参数，我们在 button 上就直接可以写。<code>&lt;button @click=”add(2)”&gt;&lt;/button&gt;</code>​</li></ul><p>现在知道了加参数的方法，看一段完整的代码，代码中给 add 添加了 num 参数，并在按钮上调用传递了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;methods Option&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;methods Option&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123; a &#125;&#125;<br>        &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add(2)&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                a:<span class="hljs-number">1</span><br>            &#125;,<br>            methods:&#123;<br>                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(num!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<span class="hljs-built_in">this</span>.a+=num&#125;<br>                    <span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">this</span>.a++&#125;<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>这时，再点击按钮是每次加 2 个数字。</p><h3 id="二、methods-中的-event-参数"><a href="#二、methods-中的-event-参数" class="headerlink" title="二、methods 中的$event 参数"></a>二、methods 中的$event 参数</h3><p>传递的$event 参数都是关于你点击鼠标的一些事件和属性。我们先看看传递的方法。<br>传递：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button @click=”add(<span class="hljs-number">2</span>,$event)”&gt;add&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p>我们这时候可以打印一下，看看 event 到底是个怎样的对象。你会发现，它包含了大部分鼠标事件的属性。</p><h3 id="三、native-给组件绑定构造器里的原生事件。"><a href="#三、native-给组件绑定构造器里的原生事件。" class="headerlink" title="三、native 给组件绑定构造器里的原生事件。"></a>三、native 给组件绑定构造器里的原生事件。</h3><p>在实际开发中经常需要把某个按钮封装成组件，然后反复使用，如何让组件调用构造器里的方法，而不是组件里的方法。就需要用到我们的<code>.native</code>修饰器了。<br>现在我们把我们的 add 按钮封装成组件：<br>声明 btn 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = &#123;<br>  template: <span class="hljs-string">`&lt;button&gt;组件Add&lt;/button&gt;`</span>,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>在构造器里声明：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">components:&#123;<br>    <span class="hljs-string">&quot;btn&quot;</span>:btn<br> &#125;<br></code></pre></div></td></tr></table></figure><p>用.native 修饰器来调用构造器里的 add 方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">btn</span> @<span class="hljs-attr">click.native</span>=<span class="hljs-string">&quot;add(3)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">btn</span>&gt;</span></span>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><h3 id="四、作用域外部调用构造器里的方法"><a href="#四、作用域外部调用构造器里的方法" class="headerlink" title="四、作用域外部调用构造器里的方法"></a>四、作用域外部调用构造器里的方法</h3><p>这种不经常使用，如果你出现了这种情况，说明你的代码组织不够好。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button onclick=<span class="hljs-string">&quot;app.add(4)&quot;</span>&gt;外部调用构造器里的方法&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p><code>methods.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;methods Option&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;methods Option&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &#123;&#123;a&#125;&#125;<br>      &lt;p&gt;<br>        &lt;button @click=<span class="hljs-string">&quot;add(2)&quot;</span>&gt;add&lt;/button&gt;<br>      &lt;/p&gt;<br>      &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">btn</span> @<span class="hljs-attr">click.native</span>=<span class="hljs-string">&quot;add(2)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">btn</span>&gt;</span></span>&lt;/p&gt;<br>      &lt;p&gt;<br>        &lt;button onclick=<span class="hljs-string">&quot;app.add(2)&quot;</span>&gt;外部ADD&lt;/button&gt;<br>      &lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> btn = &#123;<br>        template: <span class="hljs-string">`&lt;button&gt;组件ADD&lt;/button&gt;`</span>,<br>      &#125;;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          a: <span class="hljs-number">1</span>,<br>        &#125;,<br>        components: &#123;<br>          btn: btn,<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (num != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>              <span class="hljs-built_in">this</span>.a += num;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-built_in">this</span>.a++;<br>            &#125;<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="Watch-选项-监控数据"><a href="#Watch-选项-监控数据" class="headerlink" title="Watch 选项 监控数据"></a>Watch 选项 监控数据</h2><p>数据变化的监控经常使用，我们可以先来看一个简单的数据变化监控的例子。例如天气预报的穿衣指数，它主要是根据温度来进行提示的，当然还有其它的，咱们就不考虑了。<br>1、watch 是监听器，可以监听某一个数据，然后执行相应的操作；<br>2、不支持缓存，数据变直接会触发相应的操作；<br>3、监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；<br>4、支持异步操作；<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/watch.html&quot;</span>&gt;watch Option&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 watch.html 文件</p><h3 id="一、看一个监控变化的案例"><a href="#一、看一个监控变化的案例" class="headerlink" title="一、看一个监控变化的案例"></a>一、看一个监控变化的案例</h3><p>温度大于 26 度时，我们建议穿 T 恤短袖，温度小于 26 度大于 0 度时，我们建议穿夹克长裙，温度小于 0 度时我们建议穿棉衣羽绒服。<br>先来模拟一个温度变化的情况：我们使用按钮来加减温度。<br><code>wacth.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;watch option&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;watch option&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &lt;p&gt;今日温度：&#123;&#123;temperature&#125;&#125;°C&lt;/p&gt;<br>      &lt;p&gt;穿衣建议：&#123;&#123;suggestion&#125;&#125;&lt;/p&gt;<br>      &lt;p&gt;<br>        &lt;button @click=<span class="hljs-string">&quot;add&quot;</span>&gt;添加温度&lt;/button&gt;<br>        &lt;button @click=<span class="hljs-string">&quot;reduce&quot;</span>&gt;减少温度&lt;/button&gt;<br>      &lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> suggestion = [<span class="hljs-string">&#x27;T恤短袖&#x27;</span>, <span class="hljs-string">&#x27;夹克长裙&#x27;</span>, <span class="hljs-string">&#x27;棉衣羽绒服&#x27;</span>];<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          temperature: <span class="hljs-number">14</span>,<br>          suggestion: <span class="hljs-string">&#x27;夹克长裙&#x27;</span>,<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.temperature += <span class="hljs-number">5</span>;<br>          &#125;,<br>          reduce: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.temperature -= <span class="hljs-number">5</span>;<br>          &#125;,<br>        &#125;,<br>        watch: &#123;<br>          temperature: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal, oldVal</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (newVla &gt;= <span class="hljs-number">26</span>) &#123;<br>              <span class="hljs-built_in">this</span>.suggestion = suggestion[<span class="hljs-number">0</span>];<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newVal &lt; <span class="hljs-number">26</span> &amp;&amp; newVal &gt; <span class="hljs-number">0</span>) &#123;<br>              <span class="hljs-built_in">this</span>.suggestion = suggestion[<span class="hljs-number">1</span>];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-built_in">this</span>.suggestion = suggestion[<span class="hljs-number">2</span>];<br>            &#125;<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>      <span class="hljs-comment">// app.$watch(&#x27;temprtature&#x27;, function (newVal, oldVal) &#123;</span><br>      <span class="hljs-comment">//   if (newVla &gt;= 26) &#123;</span><br>      <span class="hljs-comment">//     this.suggestion = suggestion[0];</span><br>      <span class="hljs-comment">//   &#125; else if (newVal &lt; 26 &amp;&amp; newVal &gt; 0) &#123;</span><br>      <span class="hljs-comment">//     this.suggestion = suggestion[1];</span><br>      <span class="hljs-comment">//   &#125; else &#123;</span><br>      <span class="hljs-comment">//     this.suggestion = suggestion[2];</span><br>      <span class="hljs-comment">//   &#125;</span><br>      <span class="hljs-comment">// &#125;);</span><br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h3 id="二、用实例属性写-watch-监控"><a href="#二、用实例属性写-watch-监控" class="headerlink" title="二、用实例属性写 watch 监控"></a>二、用实例属性写 watch 监控</h3><p>有些时候我们会用实例属性的形式来写 watch 监控。也就是把我们 watch 卸载构造器的外部，这样的好处就是降低我们程序的耦合度，使程序变的灵活。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.$watch(<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;);<br></code></pre></div></td></tr></table></figure><p>还是上边的案例我们改成实例方法的模式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.$watch(<span class="hljs-string">&#x27;temperature&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal, oldVal</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (newVal &gt;= <span class="hljs-number">26</span>) &#123;<br>    <span class="hljs-built_in">this</span>.suggestion = suggestion[<span class="hljs-number">0</span>];<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newVal &lt; <span class="hljs-number">26</span> &amp;&amp; newVal &gt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">this</span>.suggestion = suggestion[<span class="hljs-number">1</span>];<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">this</span>.suggestion = suggestion[<span class="hljs-number">2</span>];<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>效果和上面是一样的。</p><h2 id="Mixins-混入选项操作"><a href="#Mixins-混入选项操作" class="headerlink" title="Mixins 混入选项操作"></a>Mixins 混入选项操作</h2><p>Mixins 一般有两种用途：</p><ol><li>在你已经写好了构造器后，需要增加方法或者临时的活动时使用的方法，这时用混入会减少源代码的污染。</li><li>很多地方都会用到的公用方法，用混入的方法可以减少代码量，实现代码重用。</li></ol><p>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/mixins.html&quot;</span>&gt;mixins Option&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 mixins.html 文件</p><h3 id="一、Mixins-的基本用法"><a href="#一、Mixins-的基本用法" class="headerlink" title="一、Mixins 的基本用法"></a>一、Mixins 的基本用法</h3><p>我们现在有个数字点击递增的程序，假设已经完成了，这时我们希望每次数据变化时都能够在控制台打印出提示：“数据发生变化”.<br>代码实现过程:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;Mixins Option Demo&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Mixins Option Demo&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;p&gt;num:&#123;&#123; num &#125;&#125;&lt;/p&gt;<br>        &lt;P&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>增加数量<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/P&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-comment">//额外临时加入时，用于显示日志</span><br>        <span class="hljs-keyword">var</span> addLog=&#123;<br>            updated:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;数据放生变化,变化成&quot;</span>+<span class="hljs-built_in">this</span>.num+<span class="hljs-string">&quot;.&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                num:<span class="hljs-number">1</span><br>            &#125;,<br>            methods:&#123;<br>                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-built_in">this</span>.num++;<br>                &#125;<br>            &#125;,<br>            mixins:[addLog]<span class="hljs-comment">//混入</span><br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h3 id="二、mixins-的调用顺序"><a href="#二、mixins-的调用顺序" class="headerlink" title="二、mixins 的调用顺序"></a>二、mixins 的调用顺序</h3><p>从执行的先后顺序来说，都是<strong>混入的先执行</strong>，然后<strong>构造器里的再执行</strong>，需要注意的是，这并不是方法的覆盖，而是被执行了两边。<br>在上边的代码的构造器里我们也加入了 updated 的钩子函数：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">updated:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;构造器里的updated方法。&quot;</span>)<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>这时控制台输出的顺序是：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">mixins数据放生变化,变化成<span class="hljs-number">2.</span><br>构造器里的updated方法。<br></code></pre></div></td></tr></table></figure><p>PS：当混入方法和构造器的方法重名时，混入的方法无法展现，也就是不起作用。</p><h3 id="三、全局-API-混入方式"><a href="#三、全局-API-混入方式" class="headerlink" title="三、全局 API 混入方式"></a>三、全局 API 混入方式</h3><p>我们也可以定义全局的混入，这样在需要这段代码的地方直接引入 js，就可以拥有这个功能了。我们来看一下全局混入的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Vue.mixin(&#123;<br>  updated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是全局被混入的&#x27;</span>);<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>PS：全局混入的执行顺序要前于混入和构造器里的方法。<br><code>mixins.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;mixins Option&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;mixins Option&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &#123;&#123;num&#125;&#125;<br>      &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> addConsole = &#123;<br>        updated: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数据发生了变化，变成了&#x27;</span> + <span class="hljs-built_in">this</span>.num);<br>        &#125;,<br>      &#125;;<br>      Vue.mixin(&#123;<br>        <span class="hljs-function"><span class="hljs-title">updated</span>(<span class="hljs-params"></span>)</span> &#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是全局的混入&#x27;</span>);<br>        &#125;,<br>      &#125;);<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          num: <span class="hljs-number">1</span>,<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.num++;<br>          &#125;,<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">updated</span>(<span class="hljs-params"></span>)</span> &#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是原生的updata&#x27;</span>);<br>        &#125;,<br>        mixins: [addConsole],<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h2 id="Extends-Option-扩展选项"><a href="#Extends-Option-扩展选项" class="headerlink" title="Extends Option 扩展选项"></a>Extends Option 扩展选项</h2><p>通过外部增加对象的形式，对构造器进行扩展，和混入非常的类似。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/extends.html&quot;</span>&gt;<span class="hljs-keyword">extends</span> Option&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 extends.html 文件</p><h3 id="一、extends-我们来看一个扩展的实例。"><a href="#一、extends-我们来看一个扩展的实例。" class="headerlink" title="一、extends 我们来看一个扩展的实例。"></a>一、extends 我们来看一个扩展的实例。</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;Extends Optin Demo&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Extends Optin Demo&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>        &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> bbb=&#123;<br>            created:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我是被扩展出来的&quot;</span>);<br>            &#125;,<br>            methods:&#123;<br>                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是被扩展出来的方法！&#x27;</span>);<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&#x27;hello Vue!&#x27;</span><br>            &#125;,<br>            methods:&#123;<br>                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是原生方法&#x27;</span>);<br>                &#125;<br>            &#125;,<br>            <span class="hljs-keyword">extends</span>:bbb<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h3 id="二、delimiters-选项"><a href="#二、delimiters-选项" class="headerlink" title="二、delimiters 选项"></a>二、delimiters 选项</h3><p>delimiters 的作用是改变我们插值的符号。Vue 默认的插值是双大括号<code>&#123;&#123; &#125;&#125;</code>。但有时我们会有需求更改这个插值的形式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">delimiters: [<span class="hljs-string">&#x27;$&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>];<br></code></pre></div></td></tr></table></figure><p>现在我们的插值形式就变成了<code>$&#123;&#125;</code>。</p><h1 id="实例和内置组件"><a href="#实例和内置组件" class="headerlink" title="实例和内置组件"></a>实例和内置组件</h1><p>实例就是在构造器外部操作构造器内部的属性选项或者方法，就叫做实例？实例的作用就是给原生的或者其他 javascript 框架一个融合的接口或者说是机会，让 Vue 和其他框架一起使用。</p><h2 id="实例入门-实例属性"><a href="#实例入门-实例属性" class="headerlink" title="实例入门-实例属性"></a>实例入门-实例属性</h2><h3 id="一、Vue-和-Jquery-js-一起使用"><a href="#一、Vue-和-Jquery-js-一起使用" class="headerlink" title="一、Vue 和 Jquery.js 一起使用"></a>一、Vue 和 Jquery.js 一起使用</h3><p>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/example01.html&quot;</span>&gt;example methods&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 example01.html 文件</p><h4 id="1、下载并引入-jquery-框架"><a href="#1、下载并引入-jquery-框架" class="headerlink" title="1、下载并引入 jquery 框架"></a>1、下载并引入 jquery 框架</h4><p>下载可以去官网进行下载，我这里使用的版本是 3.1.1，下载好后在需要的页面引入就可以了。当然你还有很多其它的方法引入 jquery，只要可以顺利引入就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script &lt; type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>试着作一个案例，在 DOM 被挂载后修改里边的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;Early Examples Demo&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Early Examples Demo&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;<br>            el:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data:&#123;<br>                message:<span class="hljs-string">&#x27;hello Vue!&#x27;</span><br>            &#125;,<br>            <span class="hljs-comment">//在Vue中使用jQuery</span><br>            mounted:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                $(<span class="hljs-string">&#x27;#app&#x27;</span>).html(<span class="hljs-string">&#x27;我是jQuery!&#x27;</span>);<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>现在页面显示是：我是 jQuery，而不是 hello Vue 了。</p><h3 id="二、实例调用自定义方法"><a href="#二、实例调用自定义方法" class="headerlink" title="二、实例调用自定义方法"></a>二、实例调用自定义方法</h3><p>在 Vue 的构造器里我们写一个 add 方法，然后我们用实例的方法调用它。<br>构造器里的 add 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">methods:&#123;<br>    add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;调用了Add方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>实例调用：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.add();<br></code></pre></div></td></tr></table></figure><p>PS：我们有可能把 app.add()的括号忘记或省略，这时候我们得到的就是方法的字符串，但是并没有执行，所以必须要加上括号。<br>作业：利用 console.log 把 app 打印出来，看看里边到底包含了哪些属性和方法。因为里边的属性很多，这里只是简单的介绍。<br><code>example01.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;example methods Demo&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;example methods Demo&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          message: <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>          $(<span class="hljs-string">&#x27;#app&#x27;</span>).html(<span class="hljs-string">&#x27;我是jQuery&#x27;</span>);<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;调用了构造器内部的ADD方法&#x27;</span>);<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>      app.add();<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/example02.html&quot;</span>&gt;example02 methods&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 example02.html 文件</p><h3 id="一、-mount-方法"><a href="#一、-mount-方法" class="headerlink" title="一、$mount 方法"></a>一、$mount 方法</h3><p>$mount方法是用来挂载我们的扩展的，我们先来复习一下扩展的写法。<br>这里我们作了jspang的扩展，然后用$mount 的方法把 jspang 挂载到 DOM 上，我们也生成了一个 Vue 的实例，直接看代码。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;title&gt;Examples Method Demo&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Examples Method Demo&lt;/h1&gt;<br>    &lt;hr&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &#123;&#123;message&#125;&#125;<br>    &lt;/div&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> jspang = Vue.extend(&#123;<br>          template:<span class="hljs-string">`&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;`</span>,<br>          data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>              <span class="hljs-keyword">return</span> &#123;<br>                  message:<span class="hljs-string">&#x27;Hello ,I am JSPang&#x27;</span><br>              &#125;<br>          &#125;<br>      &#125;)<br>      <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> jspang().$mount(<span class="hljs-string">&quot;#app&quot;</span>)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h3 id="二、-destroy-卸载方法"><a href="#二、-destroy-卸载方法" class="headerlink" title="二、$destroy() 卸载方法"></a>二、$destroy() 卸载方法</h3><p>用$destroy()进行卸载。<br>我写了一个 button 按钮，点击后卸载整个挂载。<br>html：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;p&gt;<br>  &lt;button onclick=<span class="hljs-string">&quot;destroy()&quot;</span>&gt;卸载&lt;/button&gt;<br>&lt;/p&gt;<br></code></pre></div></td></tr></table></figure><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span>(<span class="hljs-params"></span>) </span>&#123;<br>  vm.$destroy();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>PS:$destroy()后边必须要有括号，没有括号是无用的。<br>​</p><h3 id="三、-forceUpdate-更新方法"><a href="#三、-forceUpdate-更新方法" class="headerlink" title="三、$forceUpdate() 更新方法"></a>三、$forceUpdate() 更新方法</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">vm.$forceUpdate();<br></code></pre></div></td></tr></table></figure><h3 id="四、-nextTick-数据修改方法"><a href="#四、-nextTick-数据修改方法" class="headerlink" title="四、$nextTick() 数据修改方法"></a>四、$nextTick() 数据修改方法</h3><p>当 Vue 构造器里的 data 值被修改完成后会调用这个方法，也相当于一个钩子函数吧，和构造器里的 updated 生命周期很像。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tick</span>(<span class="hljs-params"></span>) </span>&#123;<br>  vm.message = <span class="hljs-string">&#x27;update message info &#x27;</span>;<br>  vm.$nextTick(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;message更新完后我被调用了&#x27;</span>);<br>  &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="安装-Vue-的控制台调试工具。"><a href="#安装-Vue-的控制台调试工具。" class="headerlink" title="安装 Vue 的控制台调试工具。"></a>安装 Vue 的控制台调试工具。</h3><p>每个人的安装方法不同。</p><h2 id="实例事件"><a href="#实例事件" class="headerlink" title="实例事件"></a>实例事件</h2><p>实例事件就是在构造器外部写一个调用构造器内部的方法。这样写的好处是可以通过这种写法在构造器外部调用构造器内部的数据。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/example03.html&quot;</span>&gt;example03 methods&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 example03.html 文件<br>我们还是写一个点击按钮，持续加 1 的例子。</p><h3 id="一、-on-在构造器外部添加事件。"><a href="#一、-on-在构造器外部添加事件。" class="headerlink" title="一、$on 在构造器外部添加事件。"></a>一、$on 在构造器外部添加事件。</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.$on(<span class="hljs-string">&#x27;reduce&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;执行了reduce()&#x27;</span>);<br>  <span class="hljs-built_in">this</span>.num--;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>$on接收两个参数，第一个参数是调用时的事件名称，第二个参数是一个匿名方法。<br>如果按钮在作用域外部，可以利用$emit 来执行。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//外部调用内部事件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduce</span>(<span class="hljs-params"></span>) </span>&#123;<br>  app.$emit(<span class="hljs-string">&#x27;reduce&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="二、-once-执行一次的事件"><a href="#二、-once-执行一次的事件" class="headerlink" title="二、$once 执行一次的事件"></a>二、$once 执行一次的事件</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.$once(<span class="hljs-string">&#x27;reduceOnce&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;只执行一次的方法&#x27;</span>);<br>  <span class="hljs-built_in">this</span>.num--;<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="三、-off-关闭事件"><a href="#三、-off-关闭事件" class="headerlink" title="三、$off 关闭事件"></a>三、$off 关闭事件</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//关闭事件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">off</span>(<span class="hljs-params"></span>) </span>&#123;<br>  app.$off(<span class="hljs-string">&#x27;reduce&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>example03.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;<br>    &lt;title&gt;example03 methods Demo&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;example03 methods Demo&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      &#123;&#123;num&#125;&#125;<br>      &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;reduce()&quot;</span>&gt;</span>reduce<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;reduceOnce()&quot;</span>&gt;</span>reduceOnce<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br>    &lt;p&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;off()&quot;</span>&gt;</span>off<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>&lt;/p&gt;<br><br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>      <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>        el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>        data: &#123;<br>          num: <span class="hljs-number">1</span>,<br>        &#125;,<br>        methods: &#123;<br>          add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.num++;<br>          &#125;,<br>        &#125;,<br>      &#125;);<br>      app.$on(<span class="hljs-string">&#x27;reduce&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;执行了reduce方法&#x27;</span>);<br>        <span class="hljs-built_in">this</span>.num--;<br>      &#125;);<br>      app.$once(<span class="hljs-string">&#x27;reduceOnce&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;只执行一次的方法&#x27;</span>);<br>        <span class="hljs-built_in">this</span>.num--;<br>      &#125;);<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduce</span>(<span class="hljs-params"></span>) </span>&#123;<br>        app.$emit(<span class="hljs-string">&#x27;reduce&#x27;</span>);<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduceOnce</span>(<span class="hljs-params"></span>) </span>&#123;<br>        app.$emit(<span class="hljs-string">&#x27;reduceOnce&#x27;</span>);<br>      &#125;<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">off</span>(<span class="hljs-params"></span>) </span>&#123;<br>        app.$emit(<span class="hljs-string">&#x27;reduce&#x27;</span>);<br>      &#125;<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="内置组件-slot-讲解"><a href="#内置组件-slot-讲解" class="headerlink" title="内置组件 -slot 讲解"></a>内置组件 -slot 讲解</h2><p>slot 是标签的内容扩展，也就是说你用 slot 就可以在自定义组件时传递给组件内容，组件接收内容并输出。<br>在 index.html 中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;li&gt;<br>  &lt;a href=<span class="hljs-string">&quot;./example/slot.html&quot;</span>&gt;slot&lt;/a&gt;<br>&lt;/li&gt;<br></code></pre></div></td></tr></table></figure><p>在 example 中添加 slot.html 文件<br>先来定义一个的组件，这个组件用来显示博主的一些信息。<br>我们在 Vue 构造器里的 data 中给出了信息，信息如下：（博客地址，网名，使用技能）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">data:&#123;<br>    jspangData:&#123;<br>        bolgUrl:<span class="hljs-string">&#x27;http://jspang.com&#x27;</span>,<br>        netName:<span class="hljs-string">&#x27;技术胖&#x27;</span>,<br>        skill:<span class="hljs-string">&#x27;Web前端&#x27;</span><br>    &#125;<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>我们用<template></template>标签的方式定义了组件：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template id=<span class="hljs-string">&quot;tmp&quot;</span>&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;博客地址：&lt;/p&gt;<br>    &lt;p&gt;网名：&lt;/p&gt;<br>    &lt;p&gt;技术类型：&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></div></td></tr></table></figure><p>我们现在就可以用 slot 功能让组件接收传递过来的值，并在模板中接收显示。</p><h3 id="slot-的使用需要两步："><a href="#slot-的使用需要两步：" class="headerlink" title="slot 的使用需要两步："></a>slot 的使用需要两步：</h3><h4 id="1、在-HTML-的组件中用-slot-属性传递值。"><a href="#1、在-HTML-的组件中用-slot-属性传递值。" class="headerlink" title="1、在 HTML 的组件中用 slot 属性传递值。"></a>1、在 HTML 的组件中用 slot 属性传递值。</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;jspang&gt;<br>    &lt;span slot=<span class="hljs-string">&quot;bolgUrl&quot;</span>&gt;&#123;&#123;jspangData.bolgUrl&#125;&#125;&lt;/span&gt;<br>    &lt;span slot=<span class="hljs-string">&quot;netName&quot;</span>&gt;&#123;&#123;jspangData.netName&#125;&#125;&lt;/span&gt;<br>    &lt;span slot=<span class="hljs-string">&quot;skill&quot;</span>&gt;&#123;&#123;jspangData.skill&#125;&#125;&lt;/span&gt;<br>&lt;/jspang&gt;<br></code></pre></div></td></tr></table></figure><h4 id="2、在组件模板中用标签接收值。"><a href="#2、在组件模板中用标签接收值。" class="headerlink" title="2、在组件模板中用标签接收值。"></a>2、在组件模板中用标签接收值。</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;template id=<span class="hljs-string">&quot;tmp&quot;</span>&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;<br>      博客地址：&lt;slot name=<span class="hljs-string">&quot;bolgUrl&quot;</span>&gt;&lt;/slot&gt;<br>    &lt;/p&gt;<br>    &lt;p&gt;<br>      网名：&lt;slot name=<span class="hljs-string">&quot;netName&quot;</span>&gt;&lt;/slot&gt;<br>    &lt;/p&gt;<br>    &lt;p&gt;<br>      技术类型：&lt;slot name=<span class="hljs-string">&quot;skill&quot;</span>&gt;&lt;/slot&gt;<br>    &lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></div></td></tr></table></figure><p><code>slot.html</code></p><figure class="highlight handlebars"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Slot content extend Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../assets/js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Slot content extend Demo<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">jsp</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;blogUrl&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">jspData.blogUrl</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;netName&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">jspData.netName</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;skill&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">jspData.skill</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">jsp</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tep&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">          博客地址：</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;blogUrl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">          网名：</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;netName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">          技术类型：</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;skill&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="xml">      var jsp = &#123;</span><br><span class="xml">        template: &#x27;#tep&#x27;,</span><br><span class="xml">      &#125;;</span><br><span class="xml">      var app = new Vue(&#123;</span><br><span class="xml">        el: &#x27;#app&#x27;,</span><br><span class="xml">        data: &#123;</span><br><span class="xml">          jspData: &#123; blogUrl: &#x27;http://jspang.com&#x27;, netName: &#x27;jsp&#x27;, skill: &#x27;web前端&#x27; &#125;,</span><br><span class="xml">        &#125;,</span><br><span class="xml">        components: &#123;</span><br><span class="xml">          jsp: jsp,</span><br><span class="xml">        &#125;,</span><br><span class="xml">      &#125;);</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue2.0</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪吃蛇项目笔记</title>
    <link href="/2021/06/07/%E8%B4%AA%E5%90%83%E8%9B%87%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/06/07/%E8%B4%AA%E5%90%83%E8%9B%87%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="初始配置文件"><a href="#初始配置文件" class="headerlink" title="初始配置文件"></a>初始配置文件</h2><p>在根目录下，添加初始配置文件<strong>package.json，tsconfig.json，webpack.config.js</strong><br><strong>package.json</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;part3&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br>    <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;webpack serve --open chrome.exe&quot;</span>,<br>    <span class="hljs-attr">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack --mode development&quot;</span>,<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --mode production&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;keywords&quot;</span>: [],<br>  <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>,<br>  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;clean-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^4.0.0-alpha.0&quot;</span>,<br>    <span class="hljs-attr">&quot;html-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^5.3.1&quot;</span>,<br>    <span class="hljs-attr">&quot;ts-loader&quot;</span>: <span class="hljs-string">&quot;^9.2.2&quot;</span>,<br>    <span class="hljs-attr">&quot;typescript&quot;</span>: <span class="hljs-string">&quot;^4.3.2&quot;</span>,<br>    <span class="hljs-attr">&quot;webpack&quot;</span>: <span class="hljs-string">&quot;^5.38.1&quot;</span>,<br>    <span class="hljs-attr">&quot;webpack-cli&quot;</span>: <span class="hljs-string">&quot;^4.7.0&quot;</span>,<br>    <span class="hljs-attr">&quot;webpack-dev-server&quot;</span>: <span class="hljs-string">&quot;^3.11.2&quot;</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>tsconfig.json</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>    <span class="hljs-attr">&quot;module&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>    <span class="hljs-attr">&quot;strict&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;noEmitOnError&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>webpack.config.js</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">const path = require(&#x27;path&#x27;)<br><span class="hljs-comment">// 引入html插件</span><br>const HTMLWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)<br><span class="hljs-comment">// 引入clean插件</span><br>const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;)<br><br><span class="hljs-comment">// webpack中的所有的配置信息都应该写在module.exports中</span><br>module.exports = &#123;<br>  <span class="hljs-comment">// 指定入口文件</span><br>  entry: &#x27;./src/index.ts&#x27;,<br>  <span class="hljs-comment">// 指定打包文件所在目录</span><br>  output: &#123;<br>    <span class="hljs-comment">// 指定打包文件的目录</span><br>    path: path.resolve(__dirname, &#x27;dist&#x27;),<br>    <span class="hljs-comment">// 打包后文件的文件</span><br>    filename: &#x27;bundle.js&#x27;,<br><br>    <span class="hljs-comment">// 告诉webpack不使用箭头</span><br>    <span class="hljs-comment">// 默认打包后是一个立即执行的箭头函数，在IE 11中也是无法执行的！</span><br>    <span class="hljs-comment">// 加上下面的配置，可以在webpack打包时，最外层不再是箭头函数</span><br>    <span class="hljs-comment">// webpack新版本已经不想兼容IE了！233</span><br>    environment: &#123;<br>      arrowFunction: false,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-comment">// 指定webpack打包时要使用模块</span><br>  module: &#123;<br>    <span class="hljs-comment">// 指定要加载的规则</span><br>    rules: [<br>      &#123;<br>        <span class="hljs-comment">// test指定的是规则生效的文件</span><br>        test: /\.ts$/,<br>        <span class="hljs-comment">// 要使用的loader</span><br>        <span class="hljs-comment">// Webpack在加载时是&quot;从后向前&quot;加载！</span><br>        use: [<br>          <span class="hljs-comment">// 配置babel</span><br>          &#123;<br>            <span class="hljs-comment">// 指定加载器</span><br>            loader: &#x27;babel-loader&#x27;,<br>            <span class="hljs-comment">// 设置babel</span><br>            options: &#123;<br>              <span class="hljs-comment">// 设置预定义的环境</span><br>              presets: [<br>                [<br>                  <span class="hljs-comment">// 指定环境的插件</span><br>                  &#x27;@babel/preset-env&#x27;,<br>                  <span class="hljs-comment">// 配置信息</span><br>                  &#123;<br>                    <span class="hljs-comment">// 要兼容的目标浏览器</span><br>                    targets: &#123;<br>                      chrome: &#x27;58&#x27;,<br>                      ie: &#x27;11&#x27;,<br>                    &#125;,<br>                    <span class="hljs-comment">// 指定corejs的版本</span><br>                    <span class="hljs-comment">// package.json中的版本为3.8.1</span><br>                    corejs: &#x27;3&#x27;,<br>                    <span class="hljs-comment">// 使用corejs的方式，&quot;usage&quot; 表示按需加载</span><br>                    useBuiltIns: &#x27;usage&#x27;,<br>                  &#125;,<br>                ],<br>              ],<br>            &#125;,<br>          &#125;,<br>          &#x27;ts-loader&#x27;,<br>        ],<br>        <span class="hljs-comment">// 要排除的文件</span><br>        exclude: /node-modules/,<br>      &#125;,<br>    ],<br>  &#125;,<br><br>  <span class="hljs-comment">// 配置Webpack插件</span><br>  plugins: [<br>    new CleanWebpackPlugin(),<br>    new HTMLWebpackPlugin(&#123;<br>      <span class="hljs-comment">// title: &quot;这是一个自定义的title&quot;</span><br>      template: &#x27;./src/index.html&#x27;,<br>    &#125;),<br>  ],<br>  <span class="hljs-comment">// 用来设置引用模块</span><br>  resolve: &#123;<br>    extensions: [&#x27;.ts&#x27;, &#x27;.js&#x27;],<br>  &#125;,<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="安装-node-modules-依赖"><a href="#安装-node-modules-依赖" class="headerlink" title="安装 node_modules 依赖"></a>安装 node_modules 依赖</h3><p><code>npm i</code><br>​</p><h3 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a>更新依赖</h3><p><code>npm install -D babel-loader @babel/core @babel/preset-env webpack </code></p><p>在根目录新建 src 文件夹，src 下新建 index.html 文件和 index.ts 文件<br><strong>index.html</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;<br>    &lt;title&gt;贪吃蛇&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h3 id="打包运行项目"><a href="#打包运行项目" class="headerlink" title="打包运行项目"></a>打包运行项目</h3><p><code>npm run build</code></p><h3 id="安装-less-依赖"><a href="#安装-less-依赖" class="headerlink" title="安装 less 依赖"></a>安装 less 依赖</h3><p><code>npm i -D less less-loader css-loader style-loader</code></p><h4 id="配置-less-文件"><a href="#配置-less-文件" class="headerlink" title="配置 less 文件"></a>配置 less 文件</h4><p>在 webpack.config.js 中设置 less 文件的处理</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">...<br><br><span class="hljs-comment">// 指定webpack打包时要使用模块</span><br>  module: &#123;<br>    <span class="hljs-comment">// 指定要加载的规则</span><br>    rules: [<br>      &#123;<br>        <span class="hljs-comment">// test指定的是规则生效的文件</span><br>        test: /\.ts$/,<br>        <span class="hljs-comment">// 要使用的loader</span><br>        <span class="hljs-comment">// Webpack在加载时是&quot;从后向前&quot;加载！</span><br>        use: [<br>          <span class="hljs-comment">// 配置babel</span><br>          &#123;<br>            <span class="hljs-comment">// 指定加载器</span><br>            loader: &#x27;babel-loader&#x27;,<br>            <span class="hljs-comment">// 设置babel</span><br>            options: &#123;<br>              <span class="hljs-comment">// 设置预定义的环境</span><br>              presets: [<br>                [<br>                  <span class="hljs-comment">// 指定环境的插件</span><br>                  &#x27;@babel/preset-env&#x27;,<br>                  <span class="hljs-comment">// 配置信息</span><br>                  &#123;<br>                    <span class="hljs-comment">// 要兼容的目标浏览器</span><br>                    targets: &#123;<br>                      chrome: &#x27;58&#x27;,<br>                      ie: &#x27;11&#x27;,<br>                    &#125;,<br>                    <span class="hljs-comment">// 指定corejs的版本</span><br>                    <span class="hljs-comment">// package.json中的版本为3.8.1</span><br>                    corejs: &#x27;3&#x27;,<br>                    <span class="hljs-comment">// 使用corejs的方式，&quot;usage&quot; 表示按需加载</span><br>                    useBuiltIns: &#x27;usage&#x27;,<br>                  &#125;,<br>                ],<br>              ],<br>            &#125;,<br>          &#125;,<br>          &#x27;ts-loader&#x27;,<br>        ],<br>        <span class="hljs-comment">// 要排除的文件</span><br>        exclude: /node-modules/,<br>      &#125;,<br>      <span class="hljs-comment">//设置less文件的处理</span><br>      &#123;<br>        test: /\.less$/,<br>        use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;, &#x27;less-loader&#x27;],<br>      &#125;,<br>    ],<br>  &#125;,<br>...<br></code></pre></div></td></tr></table></figure><p>其中关键代码，use 中的文件执行先后顺序是从后往前执行</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">//设置less文件的处理</span><br>&#123;<br>  test: /\.less$/,<br>  use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;, &#x27;less-loader&#x27;],<br>&#125;,<br></code></pre></div></td></tr></table></figure><h4 id="测试-less-文件"><a href="#测试-less-文件" class="headerlink" title="测试 less 文件"></a>测试 less 文件</h4><p>在 src 文件夹下新建 style 文件，并在其中新建 index.less 文件<br>简单设置样式</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">body &#123;<br>  background-color: aquamarine;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在 src\index.ts 中引入样式文件</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import &#x27;./style/index.less&#x27;<br>console.log(123)<br><br></code></pre></div></td></tr></table></figure><p>先<code>npm run duild</code>在打包生成的 dist 文件夹中，点击 ndex.html 文件进行运行，网页有样式生效，则说明 less 文件运行成功<br>​</p><h3 id="安装-css-兼容插件"><a href="#安装-css-兼容插件" class="headerlink" title="安装 css 兼容插件"></a>安装 css 兼容插件</h3><p><code>npm i -D postcss postcss-loader postcss-preset-env</code><br>​</p><h4 id="配置-postcss"><a href="#配置-postcss" class="headerlink" title="配置 postcss"></a>配置 postcss</h4><p>在 webpack.config.js 添加 postcss 配置</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">...<br>use: [<br>              &quot;style-loader&quot;,<br>              &quot;css-loader&quot;,<br><br>              <span class="hljs-comment">// 引入postcss</span><br>              <span class="hljs-comment">// 类似于babel，把css语法转换兼容旧版浏览器的语法</span><br>              &#123;<br>                  loader: &quot;postcss-loader&quot;,<br>                  options: &#123;<br>                      postcssOptions: &#123;<br>                          plugins: [<br>                              [<br>                                  <span class="hljs-comment">// 浏览器兼容插件</span><br>                                  <span class="hljs-string">&quot;postcss-preset-env&quot;</span>,<br>                                  &#123;<br>                                      <span class="hljs-comment">// 每个浏览器最新两个版本</span><br>                                      browsers: &#x27;last 2 versions&#x27;<br>                                  &#125;<br>                              ]<br>                          ]<br>                      &#125;<br>                  &#125;<br>              &#125;,<br>              <span class="hljs-string">&quot;less-loader&quot;</span><br>          ]<br>...<br></code></pre></div></td></tr></table></figure><h4 id="测试-css-兼容"><a href="#测试-css-兼容" class="headerlink" title="测试 css 兼容"></a>测试 css 兼容</h4><p>在 src\style\index.less 中添加<code>display: flex;</code>布局</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">body &#123;<br>  background-color: aquamarine;<br>  display: flex;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>先<code>npm run duild</code>，在在打包的文件夹 dist 中找到 bundle.js，查看<code>display</code>属性值是否添加了前缀，有则 css 兼容成功<br>​</p><h1 id="项目界面"><a href="#项目界面" class="headerlink" title="项目界面"></a>项目界面</h1><p><strong>每次调试都要进入进入开发环境</strong><br><code>npm start</code><br>​<br>​## 基本页面</p><p>在 src\index.html 中</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;<br>    &lt;title&gt;贪吃蛇&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;!-- 创建游戏主容器 --&gt;<br>    &lt;div id=&quot;main&quot;&gt;<br>      &lt;!-- 设置游戏舞台 --&gt;<br>      &lt;div id=&quot;stage&quot;&gt;<br>        &lt;!-- 设置蛇 --&gt;<br>        &lt;div id=&quot;snake&quot;&gt;<br>          &lt;!-- snake内部的div 表示蛇的各部分 --&gt;<br>          &lt;div&gt;&lt;/div&gt;<br>        &lt;/div&gt;<br>        &lt;!-- 设置食物 --&gt;<br>        &lt;div id=&quot;food&quot;&gt;<br>          &lt;!-- 添加是个小div，设置食物样式 --&gt;<br>          &lt;div&gt;&lt;/div&gt;<br>          &lt;div&gt;&lt;/div&gt;<br>          &lt;div&gt;&lt;/div&gt;<br>          &lt;div&gt;&lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br><br>      &lt;!-- 游戏积分牌 --&gt;<br>      &lt;div id=&quot;score-panel&quot;&gt;<br>        &lt;div&gt;<br>          SCORE:<br>          &lt;span id=&quot;score&quot;&gt;0&lt;/span&gt;<br>        &lt;/div&gt;<br>        &lt;div&gt;<br>          level:<br>          &lt;span id=&quot;level&quot;&gt;1&lt;/span&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h2 id="基本样式"><a href="#基本样式" class="headerlink" title="基本样式"></a>基本样式</h2><p>在 src\style\index.less 中</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// 设置变量</span><br>@bg-color: #b7d4a8;<br><br><span class="hljs-comment">// 清除默认样式</span><br>* &#123;<br>  margin: 0;<br>  padding: 0;<br>  <span class="hljs-comment">// 改变盒子模型的计算方式</span><br>  box-sizing: border-box;<br>&#125;<br><br>body &#123;<br>  font: bold 20px &#x27;Courier&#x27;;<br>&#125;<br><br><span class="hljs-comment">//设置主窗口的样式</span><br>#main &#123;<br>  width: 360px;<br>  height: 420px;<br>  <span class="hljs-comment">//设置背景</span><br>  background-color: @bg-color;<br>  <span class="hljs-comment">//设置居中</span><br>  margin: 100px auto;<br>  border: 10px solid black;<br>  <span class="hljs-comment">//设置圆角</span><br>  border-radius: 40px;<br>  <span class="hljs-comment">// 开启弹性盒模型</span><br>  display: flex;<br>  <span class="hljs-comment">//设置主轴方向</span><br>  flex-flow: column;<br>  <span class="hljs-comment">//设置侧轴对齐方式</span><br>  align-items: center;<br>  <span class="hljs-comment">// 设置主轴对齐方式</span><br>  justify-content: space-around;<br>  <span class="hljs-comment">//游戏舞台</span><br>  #stage &#123;<br>    width: 304px;<br>    height: 304px;<br>    border: 2px solid black;<br>    position: relative;<br>    <span class="hljs-comment">// 开启相对定位</span><br>    position: relative;<br><br>    <span class="hljs-comment">//设置蛇的样式</span><br>    #snake &#123;<br>      &amp; &gt; div &#123;<br>        width: 10px;<br>        height: 10px;<br>        background-color: #000;<br>        border: 1px solid @bg-color;<br>        <span class="hljs-comment">// 开启绝对定位</span><br>        position: absolute;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 设置食物</span><br>    #food &#123;<br>      width: 10px;<br>      height: 10px;<br>      <span class="hljs-comment">// 开启绝对定位</span><br>      position: absolute;<br>      <span class="hljs-comment">// 开启弹性盒模型</span><br>      display: flex;<br>      <span class="hljs-comment">// 设置横轴位主轴，wrap表示会自动换行</span><br>      flex-flow: row wrap;<br>      <span class="hljs-comment">// 设置主轴和侧轴的空白空间分配到元素之间</span><br>      justify-content: space-between;<br>      align-content: space-between;<br><br>      left: 40px;<br>      top: 100px;<br>      <span class="hljs-comment">// transform: rotate(45deg);</span><br><br>      &amp; &gt; div &#123;<br>        width: 4px;<br>        height: 4px;<br>        background-color: black;<br>        <span class="hljs-comment">//使div旋转45度</span><br>        transform: rotate(45deg);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 记分牌</span><br>  #score-panel &#123;<br>    width: 300px;<br>    display: flex;<br>    <span class="hljs-comment">//设置主轴对齐方式</span><br>    justify-content: space-between;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="IE-兼容"><a href="#IE-兼容" class="headerlink" title="IE 兼容"></a>IE 兼容</h2><p>IE 自己都已经放弃了！！！<br>​</p><p>在 webpack.config.js 中，IE10 不兼容箭头函数写法，给<code>environment</code>添加<code>const: false,</code><br>IE9 不兼容<code>flex</code>布局，IE10 一下可以用其他方式布局，</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">environment: &#123;<br>  arrowFunction: false,<br>  const: false,<br>&#125;,<br></code></pre></div></td></tr></table></figure><h1 id="逻辑功能"><a href="#逻辑功能" class="headerlink" title="逻辑功能"></a>逻辑功能</h1><h2 id="Food-类"><a href="#Food-类" class="headerlink" title="Food 类"></a>Food 类</h2><p>在 src\index.ts 中，添加食物类。先获取 food 元素，定义食物的 X、Y 坐标，并生成符合规定的随机坐标</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import &#x27;./style/index.less&#x27;<br><br><span class="hljs-comment">//定义食物类</span><br>class Food &#123;<br>  <span class="hljs-comment">// 定义一个属性表示食物所对应的元素</span><br>  private element: HTMLElement<br><br>  constructor() &#123;<br>    <span class="hljs-comment">// 获取页面中的food元素并将其赋值给element</span><br>    <span class="hljs-comment">// 末尾加上叹号，表示id为food的元素必定存在（非空）</span><br>    this.element = document.getElementById(&#x27;food&#x27;)!<br>  &#125;<br><br>  <span class="hljs-comment">// 定义一个获取食物X轴坐标的方法</span><br>  get X() &#123;<br>    return this.element.offsetLeft<br>  &#125;<br><br>  <span class="hljs-comment">// 定义一个获取食物Y轴坐标的方法</span><br>  get Y() &#123;<br>    return this.element.offsetTop<br>  &#125;<br><br>  <span class="hljs-comment">// 修改食物的位置</span><br>  change() &#123;<br>    <span class="hljs-comment">// 生成一个随机的位置</span><br>    <span class="hljs-comment">// 食物的位置最小，最大290，并且是整数10</span><br>    <span class="hljs-comment">// 蛇移动一次就是一格，一格的大小就是10，所以就要求食物的坐标必须是整10</span><br>    let left = Math.round(Math.random() * 29) * 10<br>    let top = Math.round(Math.random() * 29) * 10<br><br>    this.element.style.left = left + &#x27;px&#x27;<br>    this.element.style.top = top + &#x27;px&#x27;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试代码</span><br><span class="hljs-comment">// const food =  new Food();</span><br><span class="hljs-comment">// console.log(food.X, food.Y);</span><br><span class="hljs-comment">// food.change();</span><br><span class="hljs-comment">// console.log(food.X, food.Y);</span><br><br></code></pre></div></td></tr></table></figure><h2 id="ScorePanel-类"><a href="#ScorePanel-类" class="headerlink" title="ScorePanel 类"></a>ScorePanel 类</h2><p>在 src\moduls 中新建 ScorePanel.ts 文件，添加记分牌类</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// 定义记分牌的类</span><br>class ScorePanel &#123;<br>  <span class="hljs-comment">//score 和level用来记录分数和等级</span><br>  score = 0<br>  level = 1<br>  <span class="hljs-comment">// 分数和等级所在的元素，在构造函数中进行初始化</span><br>  scoreEle: HTMLElement<br>  levelEle: HTMLElement<br><br>  <span class="hljs-comment">//设置一个变量限制等级</span><br>  maxLevel: number<br>  <span class="hljs-comment">//设置一个变量表示多少分时升级</span><br>  upScore: number<br><br>  constructor(maxLevel: number = 10, upScore: number = 10) &#123;<br>    this.scoreEle = document.getElementById(&#x27;score&#x27;)!<br>    this.levelEle = document.getElementById(&#x27;level&#x27;)!<br>    this.maxLevel = maxLevel<br>    this.upScore = upScore<br>  &#125;<br><br>  <span class="hljs-comment">//设置一个加分的方法</span><br>  addScore() &#123;<br>    this.scoreEle.innerHTML = ++this.score + &#x27;&#x27;<br>    <span class="hljs-comment">//判断分数达到时升级</span><br>    if (this.score % this.upScore === 0) &#123;<br>      this.levelUp()<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//提升等级的方法</span><br>  levelUp() &#123;<br>    if (this.level &lt; this.maxLevel) &#123;<br>      this.levelEle.innerHTML = ++this.level + &#x27;&#x27;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 测试代码</span><br><span class="hljs-comment">// const scorePanel = new ScorePanel(200, 2)</span><br><span class="hljs-comment">// for (let i = 0; i &lt; 200; i++) &#123;</span><br><span class="hljs-comment">//   scorePanel.addScore()</span><br><span class="hljs-comment">// &#125;</span><br><br>export default ScorePanel<br><br></code></pre></div></td></tr></table></figure><p>在 src\index.ts 中调用 ScorePanel 类</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import &#x27;./style/index.less&#x27;<br><br>import Food from &#x27;./moduls/Food&#x27;<br>import ScorePanel from &#x27;./moduls/ScorePanel&#x27;<br><br>const food = new Food()<br>console.log(food.X, food.Y)<br>food.change()<br>console.log(food.X, food.Y)<br><br>const scorePanel = new ScorePanel(200, 2)<br>for (let i = 0; i &lt; 200; i++) &#123;<br>  scorePanel.addScore()<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="Snake-类"><a href="#Snake-类" class="headerlink" title="Snake 类"></a>Snake 类</h2><h3 id="初步添加-Snake-类"><a href="#初步添加-Snake-类" class="headerlink" title="初步添加 Snake 类"></a>初步添加 Snake 类</h3><p>在 src\moduls 中新建一个 Snake.ts 文件，初步添加 Snake 类，之后再添加其他功能</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">class Snake &#123;<br>  <span class="hljs-comment">//表示蛇头的元素</span><br>  head: HTMLElement<br><br>  <span class="hljs-comment">// 蛇的身体(包括蛇头)</span><br>  bodies: HTMLCollection<br>  <span class="hljs-comment">//获取蛇的容器</span><br>  element: HTMLElement<br><br>  constructor() &#123;<br>    this.head = document.querySelector(&#x27;#snake &gt; div&#x27;) as HTMLElement<br>    this.element = document.getElementById(&#x27;snake&#x27;)!<br>    this.bodies = this.element.getElementsByTagName(&#x27;div&#x27;)<br>  &#125;<br>  <span class="hljs-comment">//获取蛇的坐标(蛇头坐标)</span><br>  get X() &#123;<br>    return this.head.offsetLeft<br>  &#125;<br><br>  <span class="hljs-comment">// 获取蛇的Y轴坐标</span><br>  get Y() &#123;<br>    return this.head.offsetHeight<br>  &#125;<br><br>  <span class="hljs-comment">// 设置蛇头的坐标</span><br>  set X(value: number) &#123;<br>    this.head.style.left = value + &#x27;px&#x27;<br>  &#125;<br>  set Y(value: number) &#123;<br>    this.head.style.top = value + &#x27;px&#x27;<br>  &#125;<br><br>  <span class="hljs-comment">// 蛇增加身体的方法</span><br>  addBody() &#123;<br>    <span class="hljs-comment">//向element中添加一个div</span><br>    this.element.insertAdjacentHTML(&#x27;beforeend&#x27;, &#x27;&lt;div&gt;&lt;/div&gt;&#x27;)<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="GameControl-类"><a href="#GameControl-类" class="headerlink" title="GameControl 类"></a>GameControl 类</h2><h3 id="GameControl-类添加键盘事件"><a href="#GameControl-类添加键盘事件" class="headerlink" title="GameControl 类添加键盘事件"></a>GameControl 类添加键盘事件</h3><p>在 src\moduls 中添加 GameControl.ts 文件,先引入其他几个类，绑定键盘按键事件，修改方向</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import Snake from &#x27;./Snake&#x27;<br>import Food from &#x27;./Food&#x27;<br>import ScorePanel from &#x27;./ScorePanel&#x27;<br><br><span class="hljs-comment">//游戏控制器，控制其他所有类</span><br>class GameControl &#123;<br>  <span class="hljs-comment">//定义三个属性</span><br>  snake: Snake<br>  food: Food<br>  scorePanel: ScorePanel<br><br>  <span class="hljs-comment">//创建一个属性来存储蛇的移动方向（也就是按键的方向）</span><br>  direction: string = &#x27;&#x27;<br><br>  constructor() &#123;<br>    this.snake = new Snake()<br>    this.food = new Food()<br>    this.scorePanel = new ScorePanel()<br><br>    this.init()<br>  &#125;<br><br>  <span class="hljs-comment">//游戏得初始化方法，调用后游戏即开始</span><br>  init() &#123;<br>    <span class="hljs-comment">// 绑定键盘按键按下的事件</span><br>    document.addEventListener(&#x27;keydown&#x27;, this.keydownHandler.bind(this))<br>  &#125;<br>  <span class="hljs-comment">//创建一个键盘按下的响应函数</span><br>  keydownHandler(event: KeyboardEvent) &#123;<br>    <span class="hljs-comment">//需要检查event.key的值是否合法（用户是否按了正确的按键）</span><br><br>    <span class="hljs-comment">// 修改direction 属性</span><br>    this.direction = event.key<br>  &#125;<br>&#125;<br><br>export default GameControl<br><br></code></pre></div></td></tr></table></figure><p>在 src\index.ts 中添加游戏控制</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import &#x27;./style/index.less&#x27;<br><br><span class="hljs-comment">// import Food from &#x27;./moduls/Food&#x27;</span><br><span class="hljs-comment">// import ScorePanel from &#x27;./moduls/ScorePanel&#x27;</span><br><br><span class="hljs-comment">// const food = new Food()</span><br><span class="hljs-comment">// console.log(food.X, food.Y)</span><br><span class="hljs-comment">// food.change()</span><br><span class="hljs-comment">// console.log(food.X, food.Y)</span><br><br><span class="hljs-comment">// const scorePanel = new ScorePanel(200, 2)</span><br><span class="hljs-comment">// for (let i = 0; i &lt; 200; i++) &#123;</span><br><span class="hljs-comment">//   scorePanel.addScore()</span><br><span class="hljs-comment">// &#125;</span><br><br>import GameControl from &#x27;./moduls/GameControl&#x27;<br><br>const gameControl = new GameControl()<br><br><span class="hljs-comment">// setInterval(() =&gt; &#123;</span><br><span class="hljs-comment">//   console.log(gameControl.direction)</span><br><span class="hljs-comment">// &#125;, 1000)</span><br><br></code></pre></div></td></tr></table></figure><h3 id="GameControl-使蛇移动"><a href="#GameControl-使蛇移动" class="headerlink" title="GameControl 使蛇移动"></a>GameControl 使蛇移动</h3><p>在 src\moduls\GameControl.ts 中，创建蛇移动的 run 方法，获取蛇的坐标，并修改蛇的坐标，通过定时器来时时监控</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import Snake from &#x27;./Snake&#x27;<br>import Food from &#x27;./Food&#x27;<br>import ScorePanel from &#x27;./ScorePanel&#x27;<br><br><span class="hljs-comment">//游戏控制器，控制其他所有类</span><br>class GameControl &#123;<br>  <span class="hljs-comment">//定义三个属性</span><br>  snake: Snake<br>  food: Food<br>  scorePanel: ScorePanel<br><br>  <span class="hljs-comment">//创建一个属性来存储蛇的移动方向（也就是按键的方向）</span><br>  direction: string = &#x27;&#x27;<br><br>  <span class="hljs-comment">//创建一个属性来记录是否结束游戏</span><br>  isLive = true<br><br>  constructor() &#123;<br>    this.snake = new Snake()<br>    this.food = new Food()<br>    this.scorePanel = new ScorePanel()<br><br>    this.init()<br>  &#125;<br><br>  <span class="hljs-comment">//游戏得初始化方法，调用后游戏即开始</span><br>  init() &#123;<br>    <span class="hljs-comment">// 绑定键盘按键按下的事件</span><br>    document.addEventListener(&#x27;keydown&#x27;, this.keydownHandler.bind(this))<br><br>    <span class="hljs-comment">// 调用run方法，使蛇移动</span><br>    this.run()<br>  &#125;<br>  <span class="hljs-comment">//创建一个键盘按下的响应函数</span><br>  keydownHandler(event: KeyboardEvent) &#123;<br>    <span class="hljs-comment">//需要检查event.key的值是否合法（用户是否按了正确的按键）</span><br><br>    <span class="hljs-comment">// 修改direction 属性</span><br>    this.direction = event.key<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Chrome       IE</span><br><span class="hljs-comment">        ArrowUp      Up</span><br><span class="hljs-comment">        ArrowDown    Down</span><br><span class="hljs-comment">        ArrowLeft    Left</span><br><span class="hljs-comment">        ArrowRight   Right</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-comment">// 创建一个控制蛇移动的方法</span><br>  run() &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据方向（this.direction）来使蛇的位置改变</span><br><span class="hljs-comment">     *  向上  top 减少</span><br><span class="hljs-comment">     *  向下  top 增加</span><br><span class="hljs-comment">     *  向左  left  减少</span><br><span class="hljs-comment">     *  向右  left  增加</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">// 先获取蛇现在坐标</span><br>    let X = this.snake.X<br>    let Y = this.snake.Y<br><br>    <span class="hljs-comment">// 根据按键方向来修改X值和Y值</span><br>    switch (this.direction) &#123;<br>      case &#x27;ArrowUp&#x27;:<br>      case &#x27;Up&#x27;:<br>        Y -= 10<br>        break<br>      case &#x27;ArrowDown&#x27;:<br>      case &#x27;Down&#x27;:<br>        Y += 10<br>        break<br>      case &#x27;ArrowLeft&#x27;:<br>      case &#x27;Left&#x27;:<br>        X -= 10<br>        break<br>      case &#x27;ArrowRight&#x27;:<br>      case &#x27;Right&#x27;:<br>        X += 10<br>        break<br>    &#125;<br><br>    <span class="hljs-comment">//修改蛇的X和Y的值</span><br>    this.snake.X = X<br>    this.snake.Y = Y<br><br>    <span class="hljs-comment">//开启一个定时器</span><br>    this.isLive &amp;&amp; setTimeout(this.run.bind(this), 300 - (this.scorePanel.level - 1) * 30)<br>  &#125;<br>&#125;<br><br>export default GameControl<br><br></code></pre></div></td></tr></table></figure><h3 id="蛇撞墙和吃食检测"><a href="#蛇撞墙和吃食检测" class="headerlink" title="蛇撞墙和吃食检测"></a>蛇撞墙和吃食检测</h3><p>此时发现一个 bug，在 src\style\index.less 中，设置了食物初始值<code>left: 40px;</code>但是控制台打印的是 41,设置成其他数值则是正常的</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// 设置食物</span><br>  #food &#123;<br>...<br>    <span class="hljs-comment">// 初始化一个位置</span><br>    left: 40px;<br>    top: 100px;<br>...<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1623466529615-32a4170d-e4d9-434e-ab1a-269db2f463f1.png#clientId=ud86988f0-9ba7-4&from=paste&height=66&id=QNPEL&margin=%5Bobject%20Object%5D&name=image.png&originHeight=131&originWidth=776&originalType=binary&ratio=2&size=14003&status=done&style=none&taskId=u8a89de34-3d54-4d9c-8821-fede452e634&width=388" alt="image.png">，<br>导致后续检查蛇是否吃到食物无法成功判断 <code>X === this.food.X &amp;&amp; Y === this.food.Y</code><br>所以将食物初始值 left 设置成<code>left:30px</code><br>​</p><h4 id="撞墙检测"><a href="#撞墙检测" class="headerlink" title="撞墙检测"></a>撞墙检测</h4><p>在 src\moduls\Snake.ts 中，增加撞墙的判断，并抛出异常<code>throw new Error(&#39;蛇撞墙了！&#39;)</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">class Snake &#123;<br>  <span class="hljs-comment">//表示蛇头的元素</span><br>  head: HTMLElement<br><br>  <span class="hljs-comment">// 蛇的身体(包括蛇头)</span><br>  bodies: HTMLCollection<br>  <span class="hljs-comment">//获取蛇的容器</span><br>  element: HTMLElement<br><br>  constructor() &#123;<br>    this.head = document.querySelector(&#x27;#snake &gt; div&#x27;) as HTMLElement<br>    this.element = document.getElementById(&#x27;snake&#x27;)!<br>    this.bodies = this.element.getElementsByTagName(&#x27;div&#x27;)<br>  &#125;<br>  <span class="hljs-comment">//获取蛇的坐标(蛇头坐标)</span><br>  get X() &#123;<br>    return this.head.offsetLeft<br>  &#125;<br><br>  <span class="hljs-comment">// 获取蛇的Y轴坐标</span><br>  get Y() &#123;<br>    return this.head.offsetTop<br>  &#125;<br><br>  <span class="hljs-comment">// 设置蛇头的坐标</span><br>  set X(value: number) &#123;<br>    <span class="hljs-comment">//如果新值和旧值相同，则不修改</span><br>    if (this.X === value) &#123;<br>      return<br>    &#125;<br>    <span class="hljs-comment">//X的值的合法范围0-290</span><br>    if (value &lt; 0 || value &gt;= 300) &#123;<br>      <span class="hljs-comment">//进入判断说明蛇撞墙了</span><br>      throw new Error(&#x27;蛇撞墙了！&#x27;)<br>    &#125;<br>    this.head.style.left = value + &#x27;px&#x27;<br>  &#125;<br>  set Y(value: number) &#123;<br>    <span class="hljs-comment">//如果新值和旧值相同，则不修改</span><br>    if (this.Y === value) &#123;<br>      return<br>    &#125;<br>    <span class="hljs-comment">//Y的值的合法范围0-290</span><br>    if (value &lt; 0 || value &gt;= 300) &#123;<br>      <span class="hljs-comment">//进入判断说明蛇撞墙了</span><br>      throw new Error(&#x27;蛇撞墙了！&#x27;)<br>    &#125;<br>    this.head.style.top = value + &#x27;px&#x27;<br>  &#125;<br><br>  <span class="hljs-comment">// 蛇增加身体的方法</span><br>  addBody() &#123;<br>    <span class="hljs-comment">//向element中添加一个div</span><br>    this.element.insertAdjacentHTML(&#x27;beforeend&#x27;, &#x27;&lt;div&gt;&lt;/div&gt;&#x27;)<br>  &#125;<br>&#125;<br>export default Snake<br><br></code></pre></div></td></tr></table></figure><h4 id="吃食检测"><a href="#吃食检测" class="headerlink" title="吃食检测"></a>吃食检测</h4><p>在 src\moduls\GameControl.ts 中，使用<code>try &#123; &#125; catch (e) &#123; &#125;</code>处理异常操作，添加<code>checkEat</code>方法检查是否吃到食物，<br>在判断是否吃到食物时一个 bug，蛇的 X、Y 坐标超过 50 之后，个位数会加 1 就变成了 51 61 71…，解决办法是四舍五入 <code>Math.round(X / 10) * 10 === Math.round(this.food.X / 10) * 10 &amp;&amp; Math.round(Y / 10) * 10 === Math.round(this.food.Y / 10) * 10</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import Snake from &#x27;./Snake&#x27;<br>import Food from &#x27;./Food&#x27;<br>import ScorePanel from &#x27;./ScorePanel&#x27;<br><br><span class="hljs-comment">//游戏控制器，控制其他所有类</span><br>class GameControl &#123;<br>  <span class="hljs-comment">//定义三个属性</span><br>  snake: Snake<br>  food: Food<br>  scorePanel: ScorePanel<br><br>  <span class="hljs-comment">//创建一个属性来存储蛇的移动方向（也就是按键的方向）</span><br>  direction: string = &#x27;&#x27;<br><br>  <span class="hljs-comment">//创建一个属性来记录是否结束游戏</span><br>  isLive = true<br><br>  constructor() &#123;<br>    this.snake = new Snake()<br>    this.food = new Food()<br>    this.scorePanel = new ScorePanel()<br><br>    this.init()<br>  &#125;<br><br>  <span class="hljs-comment">//游戏得初始化方法，调用后游戏即开始</span><br>  init() &#123;<br>    <span class="hljs-comment">// 绑定键盘按键按下的事件</span><br>    document.addEventListener(&#x27;keydown&#x27;, this.keydownHandler.bind(this))<br><br>    <span class="hljs-comment">// 调用run方法，使蛇移动</span><br>    this.run()<br>  &#125;<br>  <span class="hljs-comment">//创建一个键盘按下的响应函数</span><br>  keydownHandler(event: KeyboardEvent) &#123;<br>    <span class="hljs-comment">//需要检查event.key的值是否合法（用户是否按了正确的按键）</span><br><br>    <span class="hljs-comment">// 修改direction 属性</span><br>    this.direction = event.key<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Chrome       IE</span><br><span class="hljs-comment">        ArrowUp      Up</span><br><span class="hljs-comment">        ArrowDown    Down</span><br><span class="hljs-comment">        ArrowLeft    Left</span><br><span class="hljs-comment">        ArrowRight   Right</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-comment">// 创建一个控制蛇移动的方法</span><br>  run() &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据方向（this.direction）来使蛇的位置改变</span><br><span class="hljs-comment">     *  向上  top 减少</span><br><span class="hljs-comment">     *  向下  top 增加</span><br><span class="hljs-comment">     *  向左  left  减少</span><br><span class="hljs-comment">     *  向右  left  增加</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">// 先获取蛇现在坐标</span><br>    let X = this.snake.X<br>    let Y = this.snake.Y<br><br>    <span class="hljs-comment">// 根据按键方向来修改X值和Y值</span><br>    switch (this.direction) &#123;<br>      case &#x27;ArrowUp&#x27;:<br>      case &#x27;Up&#x27;:<br>        Y -= 10<br>        break<br>      case &#x27;ArrowDown&#x27;:<br>      case &#x27;Down&#x27;:<br>        Y += 10<br>        break<br>      case &#x27;ArrowLeft&#x27;:<br>      case &#x27;Left&#x27;:<br>        X -= 10<br>        break<br>      case &#x27;ArrowRight&#x27;:<br>      case &#x27;Right&#x27;:<br>        X += 10<br>        break<br>    &#125;<br><br>    <span class="hljs-comment">// 检查蛇是否吃到食物</span><br>    this.checkEat(X, Y)<br><br>    <span class="hljs-comment">//修改蛇的X和Y的值</span><br>    try &#123;<br>      this.snake.X = X<br>      this.snake.Y = Y<br>    &#125; catch (e) &#123;<br>      <span class="hljs-comment">//进入到catch，说明出现了异常，游戏结束</span><br>      alert(e.message + &#x27; GAME OVER！&#x27;)<br>      <span class="hljs-comment">//将isLive设置成false</span><br>      this.isLive = false<br>    &#125;<br><br>    <span class="hljs-comment">//开启一个定时器</span><br>    this.isLive &amp;&amp; setTimeout(this.run.bind(this), 300 - (this.scorePanel.level - 1) * 30)<br>  &#125;<br>  <span class="hljs-comment">// 定义一个方法，检查蛇是否吃到食物</span><br>  checkEat(X: number, Y: number) &#123;<br>    if (<br>      <span class="hljs-comment">//此处有个bug，蛇的X、Y坐标超过50之后，个位数会加1 就变成了51 61 71...，解决办法是四舍五入</span><br>      Math.round(X / 10) * 10 === Math.round(this.food.X / 10) * 10 &amp;&amp;<br>      Math.round(Y / 10) * 10 === Math.round(this.food.Y / 10) * 10<br>    ) &#123;<br>      console.log(&#x27;吃到食物&#x27;)<br>      <span class="hljs-comment">// 食物的位置进行重置</span><br>      this.food.change()<br>      <span class="hljs-comment">//分数增加</span><br>      this.scorePanel.addScore()<br>      <span class="hljs-comment">//蛇要增加一节</span><br>      this.snake.addBody()<br>    &#125;<br>  &#125;<br>&#125;<br><br>export default GameControl<br><br></code></pre></div></td></tr></table></figure><h2 id="小蛇移动"><a href="#小蛇移动" class="headerlink" title="小蛇移动"></a>小蛇移动</h2><p>在 src\moduls\Snake.ts 中，添加<code>moveBody</code>蛇移动的方法，逻辑是将后边的身体设置成前一个身体位置，头不设置。 <code>checkHeadBody</code>检测是否撞到自己</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">class Snake &#123;<br>  <span class="hljs-comment">//表示蛇头的元素</span><br>  head: HTMLElement;<br><br>  <span class="hljs-comment">// 蛇的身体(包括蛇头)</span><br>  bodies: HTMLCollection;<br>  <span class="hljs-comment">//获取蛇的容器</span><br>  element: HTMLElement;<br><br>  constructor() &#123;<br>    this.head = document.querySelector(&#x27;#snake &gt; div&#x27;) as HTMLElement;<br>    this.element = document.getElementById(&#x27;snake&#x27;)!;<br>    this.bodies = this.element.getElementsByTagName(&#x27;div&#x27;);<br>  &#125;<br>  <span class="hljs-comment">//获取蛇的坐标(蛇头坐标)</span><br>  get X() &#123;<br>    return this.head.offsetLeft;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取蛇的Y轴坐标</span><br>  get Y() &#123;<br>    return this.head.offsetTop;<br>  &#125;<br><br>  <span class="hljs-comment">// 设置蛇头的坐标</span><br>  set X(value: number) &#123;<br>    <span class="hljs-comment">//如果新值和旧值相同，则不修改</span><br>    if (this.X === value) &#123;<br>      return;<br>    &#125;<br>    <span class="hljs-comment">//X的值的合法范围0-290</span><br>    if (value &lt; 0 || value &gt;= 300) &#123;<br>      <span class="hljs-comment">//进入判断说明蛇撞墙了</span><br>      throw new Error(&#x27;蛇撞墙了！&#x27;);<br>    &#125;<br><br>    <span class="hljs-comment">//修改X时,是修改水平坐标，蛇在左右移动，蛇不能掉头</span><br>    if (this.bodies[1] &amp;&amp; (this.bodies[1] as HTMLElement).offsetLeft === value) &#123;<br>      <span class="hljs-comment">//如果发生了掉头，让蛇反向继续移动</span><br>      if (value &gt; this.X) &#123;<br>        <span class="hljs-comment">//如果新值value大于旧X，则说明蛇正在向右走，此时发生掉头，应该使蛇继续向右移动</span><br>        value = this.X - 10;<br>      &#125; else &#123;<br>        <span class="hljs-comment">//向左走</span><br>        value = this.X + 10;<br>      &#125;<br>    &#125;<br>    this.moveBody();<br><br>    this.head.style.left = value + &#x27;px&#x27;;<br>    <span class="hljs-comment">//检查有没有撞到自己</span><br>    this.checkHeadBody();<br>  &#125;<br>  set Y(value: number) &#123;<br>    <span class="hljs-comment">//如果新值和旧值相同，则不修改</span><br>    if (this.Y === value) &#123;<br>      return;<br>    &#125;<br>    <span class="hljs-comment">//Y的值的合法范围0-290</span><br>    if (value &lt; 0 || value &gt;= 300) &#123;<br>      <span class="hljs-comment">//进入判断说明蛇撞墙了</span><br>      throw new Error(&#x27;蛇撞墙了！&#x27;);<br>    &#125;<br><br>    if (this.bodies[1] &amp;&amp; (this.bodies[1] as HTMLElement).offsetTop === value) &#123;<br>      <span class="hljs-comment">//如果发生了掉头，让蛇反向继续移动</span><br>      if (value &gt; this.Y) &#123;<br>        <span class="hljs-comment">//如果新值value大于旧X，则说明蛇正在向右走，此时发生掉头，应该使蛇继续向左移动</span><br>        value = this.Y - 10;<br>      &#125; else &#123;<br>        <span class="hljs-comment">//向左走</span><br>        value = this.Y + 10;<br>      &#125;<br>    &#125;<br><br>    this.moveBody();<br><br>    this.head.style.top = value + &#x27;px&#x27;;<br>    <span class="hljs-comment">//检查有没有撞到自己</span><br>    this.checkHeadBody();<br>  &#125;<br><br>  <span class="hljs-comment">// 蛇增加身体的方法</span><br>  addBody() &#123;<br>    <span class="hljs-comment">//向element中添加一个div</span><br>    this.element.insertAdjacentHTML(&#x27;beforeend&#x27;, &#x27;&lt;div&gt;&lt;/div&gt;&#x27;);<br>  &#125;<br>  <span class="hljs-comment">//添加一个蛇身体移动的方法</span><br>  moveBody() &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将后边的身体设置为前边身体的位置</span><br><span class="hljs-comment">     * 比如：</span><br><span class="hljs-comment">     *    第三节=&gt;第二节的位置</span><br><span class="hljs-comment">     *    第二节=&gt;蛇头的位置</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//遍历获取所有的身体</span><br>    for (let i = this.bodies.length - 1; i &gt; 0; i--) &#123;<br>      <span class="hljs-comment">//获取前边身体的值</span><br>      let X = (this.bodies[i - 1] as HTMLElement).offsetLeft;<br>      let Y = (this.bodies[i - 1] as HTMLElement).offsetTop;<br>      <span class="hljs-comment">//将值设置到当前身体上</span><br><br>      (this.bodies[i] as HTMLElement).style.left = X + &#x27;px&#x27;;<br>      (this.bodies[i] as HTMLElement).style.top = Y + &#x27;px&#x27;;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//检查有没有撞到自己</span><br>  checkHeadBody() &#123;<br>    <span class="hljs-comment">//获取所有的身体，检查是否和蛇头的坐标发生重叠</span><br>    for (let i = 1; i &lt; this.bodies.length; i++) &#123;<br>      let bd = this.bodies[i] as HTMLElement;<br>      if (this.X === bd.offsetLeft &amp;&amp; this.Y === bd.offsetTop) &#123;<br>        <span class="hljs-comment">//撞到身体，游戏结束</span><br>        throw new Error(&#x27;撞到自己了!&#x27;);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>export default Snake;<br><br></code></pre></div></td></tr></table></figure><p>最后就大功告成了！</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
      <tag>贪吃蛇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决git上传拉取 port 443问题</title>
    <link href="/2021/06/06/%E8%A7%A3%E5%86%B3git%E4%B8%8A%E4%BC%A0%E6%8B%89%E5%8F%96%20port%20443%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/06/%E8%A7%A3%E5%86%B3git%E4%B8%8A%E4%BC%A0%E6%8B%89%E5%8F%96%20port%20443%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>如果遇到类似情况，1.也许是网络问题，多试几次也，2.有可能是 https 协议无法访问。</p><figure class="highlight vhdl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vhdl">fatal: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> <span class="hljs-symbol">&#x27;https</span>://github.com/xxxxxxxx: OpenSSL SSL_connect: SSL_ERROR_SYSCALL <span class="hljs-keyword">in</span> connection <span class="hljs-keyword">to</span> github.com:<span class="hljs-number">443</span><br></code></pre></div></td></tr></table></figure><p>先排查排查网络问题，确定网络流畅(科学上网)</p><h1 id="方法-1：普通-https-协议的方法"><a href="#方法-1：普通-https-协议的方法" class="headerlink" title="方法 1：普通 https 协议的方法"></a>方法 1：普通 https 协议的方法</h1><p>通过:取消代理<br>​</p><p>先查询是否有代理<br>​</p><p><code>git config --global http.proxy</code><br><code>git config --global https.proxy</code><br>​</p><p>查询到当前设置了代理，所以我取消这个设置：<br>​</p><p><code>git config --global --unset http.proxy</code><br><code>git config --global --unset https.proxy</code><br>​</p><p>再查询，已经没有了代理，然后再 push,成功了！<br>​</p><h1 id="方法-2：SSH-协议方法"><a href="#方法-2：SSH-协议方法" class="headerlink" title="方法 2：SSH 协议方法"></a>方法 2：SSH 协议方法</h1><p>例如：在个人仓库中找到 ssh<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622983591329-ff872692-b4ec-48ce-9a43-bce2bfd785f2.png#clientId=ue73c0a22-0c69-4&from=paste&height=449&id=u003d56fd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=449&originWidth=555&originalType=binary&ratio=1&size=30780&status=done&style=none&taskId=ubf3e04e2-6fa1-4ac0-b31c-b53e260b5c0&width=555" alt="image.png"></p><p>先确定 ssh 秘钥本地和 github 已经配置好，具体方法自行百度</p><p>在仓库的.git\config 文件夹中，将 url 换成仓库的 ssh 地址<a href="mailto:&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a>:xxx/xxx.git</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">[remote <span class="hljs-string">&quot;origin&quot;</span>]<br>url = git@github.com:xxx/xxx.git<br>fetch = +refs/heads<span class="hljs-comment">/*:refs/remotes/origin/*</span><br></code></pre></div></td></tr></table></figure><p>最后完美解决<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622984017222-475ed0fb-d927-4f15-92e4-c5a88ff707e5.png#clientId=ue73c0a22-0c69-4&from=paste&height=213&id=uc597a356&margin=%5Bobject%20Object%5D&name=image.png&originHeight=213&originWidth=736&originalType=binary&ratio=1&size=26518&status=done&style=none&taskId=u7108e0ee-5cb0-4be9-afb1-dafb42a4259&width=736" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript学习笔记</title>
    <link href="/2021/06/03/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/06/03/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一-优势"><a href="#一-优势" class="headerlink" title="一. 优势"></a>一. 优势</h1><p>1.在开发过程中，发现潜在的问题 2.更友好的编辑器自动提示 3.代码语义更清晰易懂</p><h1 id="二-环境搭建"><a href="#二-环境搭建" class="headerlink" title="二.环境搭建"></a>二.环境搭建</h1><h2 id="2-1-百度-node-安装教程"><a href="#2-1-百度-node-安装教程" class="headerlink" title="2.1 百度 node 安装教程"></a>2.1 百度 node 安装教程</h2><p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a> node 官网</p><h2 id="2-2-查看版本检查是否安装"><a href="#2-2-查看版本检查是否安装" class="headerlink" title="2.2 查看版本检查是否安装"></a>2.2 查看版本检查是否安装</h2><p>命令行 <code>node -v</code> 和 <code>npm -v</code> 查看版本检查是否安装<br>​</p><h2 id="2-3-设置-vscode"><a href="#2-3-设置-vscode" class="headerlink" title="2.3 设置 vscode"></a>2.3 设置 vscode</h2><p>打开设置搜索<code>quote</code> <strong>TypeScript › Preferences: Quote Style</strong>设置成<code>single</code>单引号<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622558447332-06017e91-6c25-464d-8284-f59f33257d21.png#clientId=ud695c2c6-eec2-4&from=paste&height=457&id=u3379f69c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=457&originWidth=697&originalType=binary&ratio=1&size=38455&status=done&style=none&taskId=uebb020cb-e6b4-4163-943f-4db58d712ae&width=697" alt="image.png"><br>搜索 <code>Tab </code>设置两个缩进<br>​</p><h2 id="2-4-安装-Prettier-Code-formatter-插件"><a href="#2-4-安装-Prettier-Code-formatter-插件" class="headerlink" title="2.4 安装 Prettier - Code formatter 插件"></a>2.4 安装 Prettier - Code formatter 插件</h2><p>打开设置搜索 <code>save</code> 将<strong>Editor: Format On Save 勾选，会自动格式化代码</strong><br><strong>​</strong></p><h2 id="2-5-安装-TypeScript-依赖"><a href="#2-5-安装-TypeScript-依赖" class="headerlink" title="2.5 安装 TypeScript 依赖"></a>2.5 安装 TypeScript 依赖</h2><h3 id="2-5-1-全局安装-TypeScript-依赖包"><a href="#2-5-1-全局安装-TypeScript-依赖包" class="headerlink" title="2.5.1 全局安装 TypeScript 依赖包"></a>2.5.1 全局安装 TypeScript 依赖包</h3><p>打开控制台 输入<code> npm install typescript -g</code><br>​</p><p>检查是否安装成功 <code>tsc -v</code></p><h3 id="2-5-2-TypeScript-解决（tsc-不是内部或外部命令，也不是可运行的程序或批处理文件）问题"><a href="#2-5-2-TypeScript-解决（tsc-不是内部或外部命令，也不是可运行的程序或批处理文件）问题" class="headerlink" title="2.5.2 TypeScript- 解决（tsc 不是内部或外部命令，也不是可运行的程序或批处理文件）问题"></a>2.5.2 TypeScript- 解决（tsc 不是内部或外部命令，也不是可运行的程序或批处理文件）问题</h3><p><strong>tsc 不是内部或外部命令，也不是可运行的程序或批处理文件</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639045528-81634ca5-8ede-48b5-be0d-2761bb4d2a1e.png#clientId=ud695c2c6-eec2-4&from=paste&height=204&id=EuDKM&margin=%5Bobject%20Object%5D&originHeight=204&originWidth=661&originalType=url&ratio=1&status=done&style=none&taskId=u14c49adb-b4f8-4615-9132-4ab2d27189f&width=661"><br>​</p><h3 id="解决方法：配置环境变量"><a href="#解决方法：配置环境变量" class="headerlink" title="解决方法：配置环境变量"></a>解决方法：配置环境变量</h3><p>**我的电脑 –&gt; 右键 –&gt; 属性 –&gt; 高级系统设置 –&gt; 高级 –&gt; 环境变量 **<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639045473-8a115b39-d759-475f-8947-e40c55cbfd3f.png#clientId=ud695c2c6-eec2-4&from=paste&height=280&id=RueMe&margin=%5Bobject%20Object%5D&originHeight=280&originWidth=1119&originalType=url&ratio=1&status=done&style=none&taskId=ubb21cd27-26cb-480c-ba0a-6cac6c5f4f3&width=1119"><br>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639045476-6fba1def-9eba-402c-ac35-f1e164975307.png#clientId=ud695c2c6-eec2-4&from=paste&height=605&id=wasif&margin=%5Bobject%20Object%5D&originHeight=605&originWidth=493&originalType=url&ratio=1&status=done&style=none&taskId=u512784a7-4553-4bc5-93d0-96a24e35021&width=493"><br>​</p><p>**然后使用 npm config get prefix 查找 npm 目录 **<br>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639045491-24973088-5c17-4622-8aa7-641f22f90603.png#clientId=ud695c2c6-eec2-4&from=paste&height=90&id=wvnsp&margin=%5Bobject%20Object%5D&originHeight=90&originWidth=296&originalType=url&ratio=1&status=done&style=none&taskId=uc1aa11e5-355c-4a66-87e1-228e83985bf&width=296"><br>​</p><p><strong>在环境变量里的系统变量新建</strong><br><strong>变量名: NODE_PATH</strong><br><strong>变量值: D:\home.npm-global</strong><br>（变量值就是找到的 npm 目录路径）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639045553-45315506-6253-43e0-9330-d60a7bd8006a.png#clientId=ud695c2c6-eec2-4&from=paste&height=560&id=trMny&margin=%5Bobject%20Object%5D&originHeight=560&originWidth=457&originalType=url&ratio=1&status=done&style=none&taskId=u151ac42e-dac0-4f82-b94d-a4ea65d3916&width=457"><br>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639046075-40b4b988-5e0f-439f-9c9f-15336163ad37.png#clientId=ud695c2c6-eec2-4&from=paste&height=181&id=cVFyo&margin=%5Bobject%20Object%5D&originHeight=181&originWidth=649&originalType=url&ratio=1&status=done&style=none&taskId=u989af7c5-81eb-4be1-aa46-583ec6c4c31&width=649"><br>​</p><p><strong>如果 node 没有配置 全局和缓存这两个文件夹</strong><br>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639046127-2bcbf347-af39-41a7-9f66-015c7a8a3459.png#clientId=ud695c2c6-eec2-4&from=paste&height=263&id=QyYqm&margin=%5Bobject%20Object%5D&originHeight=263&originWidth=254&originalType=url&ratio=1&status=done&style=none&taskId=ufc46499b-4917-4a2a-8805-a7165efe491&width=254"><br><strong>变量值: 就为 nodejs 的文件路径</strong><br>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639046165-fa08f511-9cc5-4817-9738-0ca845ac3205.png#clientId=ud695c2c6-eec2-4&from=paste&height=190&id=YOTGC&margin=%5Bobject%20Object%5D&originHeight=190&originWidth=667&originalType=url&ratio=1&status=done&style=none&taskId=ubdf569be-1038-4935-bc53-0e1f58a3879&width=667"><br><strong>这里我两个都加上了，用 ; 隔开</strong><br>​</p><p>**然后找到 用户变量 和 系统变量 里的 path , 在末尾添加上 %NODE_PATH% **<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639046213-6acd5b3d-1908-4c58-932e-6007622dab23.png#clientId=ud695c2c6-eec2-4&from=paste&height=560&id=hQz1r&margin=%5Bobject%20Object%5D&originHeight=560&originWidth=457&originalType=url&ratio=1&status=done&style=none&taskId=u71f5a0a3-f145-4175-af55-607a6a786bf&width=457"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639046370-a48cb5a0-62d1-4641-9687-5e409654329b.png#clientId=ud695c2c6-eec2-4&from=paste&height=190&id=Om34m&margin=%5Bobject%20Object%5D&originHeight=190&originWidth=667&originalType=url&ratio=1&status=done&style=none&taskId=u2c6c1e19-6f47-4fbe-a9e7-e12b41acef0&width=667"><br>​</p><p><strong>配置完成后重新打开 dos 命令窗口，再次输入命令 就 ok 了</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622639046643-90a8f9b5-1bf1-4fd3-870b-20abeb37d576.png#clientId=ud695c2c6-eec2-4&from=paste&height=105&id=vhitM&margin=%5Bobject%20Object%5D&originHeight=105&originWidth=216&originalType=url&ratio=1&status=done&style=none&taskId=u87b091b1-7102-478f-807b-b709ea2cd7e&width=216"></p><h3 id="2-5-2-检查是否编译成功"><a href="#2-5-2-检查是否编译成功" class="headerlink" title="2.5.2 检查是否编译成功"></a>2.5.2 检查是否编译成功</h3><p>在文件夹下新建一个 demo.ts</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">interface Point &#123;<br>  x: number<br>  y: number<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tsDemo</span>(<span class="hljs-params">data: Point</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.sqrt(data.x ** <span class="hljs-number">2</span> + data.y ** <span class="hljs-number">2</span>)<br>&#125;<br><br>tsDemo(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">123</span> &#125;)<br><br></code></pre></div></td></tr></table></figure><p>在控制台输入 <code>tsc demo.ts</code> 编译<code>.ts</code>生成<code>.js</code>文件<br>​</p><p>如果在 ts 文件中有报错，但是符合 js，也一样可以编译成功<br>​</p><h1 id="三-TypeScript-中的基本类型"><a href="#三-TypeScript-中的基本类型" class="headerlink" title="三.TypeScript 中的基本类型"></a>三.TypeScript 中的基本类型</h1><p>TypeScript 中的基本类型：</p><h2 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h2><ul><li>类型声明是 TS 非常重要的一个特点；</li><li>通过类型声明可以指定 TS 中变量（参数、形参）的类型；</li><li>指定类型后，当为变量赋值时，TS 编译器会自动检查值是否符合类型声明，符合则赋值，否则报错；</li><li>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值；</li><li>语法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量: 类型;<br><br><span class="hljs-keyword">let</span> 变量: 类型 = 值;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">参数: 类型, 参数: 类型</span>): 类型</span>&#123;<br>    ...<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="自动类型判断"><a href="#自动类型判断" class="headerlink" title="自动类型判断"></a>自动类型判断</h2><ul><li>TS 拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS 编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li></ul><h2 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h2><table><thead><tr><th><strong>类型</strong></th><th><strong>例子</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>number</td><td>1, -33, 2.5</td><td>任意数字</td></tr><tr><td>string</td><td>‘hi’, “hi”, hi</td><td>任意字符串</td></tr><tr><td>boolean</td><td>true、false</td><td>布尔值 true 或 false</td></tr><tr><td>字面量</td><td>其本身</td><td>限制变量的值就是该字面量的值</td></tr><tr><td>any</td><td>*</td><td>任意类型</td></tr><tr><td>unknown</td><td>*</td><td>类型安全的 any</td></tr><tr><td>void</td><td>空值（undefined）</td><td>没有值（或 undefined）</td></tr><tr><td>never</td><td>没有值</td><td>不能是任何值</td></tr><tr><td>object</td><td>{name:’孙悟空’}</td><td>任意的 JS 对象</td></tr><tr><td>array</td><td>[1,2,3]</td><td>任意 JS 数组</td></tr><tr><td>tuple</td><td>[4,5]</td><td>元素，TS 新增类型，固定长度数组</td></tr><tr><td>enum</td><td>enum{A, B}</td><td>枚举，TS 中新增类型</td></tr></tbody></table><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> decimal: number = <span class="hljs-number">6</span>;<br><span class="hljs-keyword">let</span> hex: number = <span class="hljs-number">0xf00d</span>;<br><span class="hljs-keyword">let</span> binary: number = <span class="hljs-number">0b1010</span>;<br><span class="hljs-keyword">let</span> octal: number = <span class="hljs-number">0o744</span>;<br><span class="hljs-keyword">let</span> big: bigint = <span class="hljs-number">100n</span>;<br></code></pre></div></td></tr></table></figure><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> isDone: boolean = <span class="hljs-literal">false</span>;<br></code></pre></div></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> color: string = <span class="hljs-string">&#x27;blue&#x27;</span>;<br>color = <span class="hljs-string">&#x27;red&#x27;</span>;<br><br><span class="hljs-keyword">let</span> fullName: string = <span class="hljs-string">`Bob Bobbington`</span>;<br><span class="hljs-keyword">let</span> age: number = <span class="hljs-number">37</span>;<br><span class="hljs-keyword">let</span> sentence: string = <span class="hljs-string">`Hello, my name is <span class="hljs-subst">$&#123;fullName&#125;</span>.</span><br><span class="hljs-string"></span><br><span class="hljs-string">I&#x27;ll be <span class="hljs-subst">$&#123;age + <span class="hljs-number">1</span>&#125;</span> years old next month.`</span>;<br></code></pre></div></td></tr></table></figure><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><ul><li>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> color: <span class="hljs-string">&#x27;red&#x27;</span> | <span class="hljs-string">&#x27;blue&#x27;</span> | <span class="hljs-string">&#x27;black&#x27;</span>;<br><span class="hljs-keyword">let</span> num: <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span> | <span class="hljs-number">4</span> | <span class="hljs-number">5</span>;<br></code></pre></div></td></tr></table></figure><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> d: any = <span class="hljs-number">4</span>;<br>d = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>d = <span class="hljs-literal">true</span>;<br></code></pre></div></td></tr></table></figure><h3 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> notSure: unknown = <span class="hljs-number">4</span>;<br>notSure = <span class="hljs-string">&#x27;hello&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> unusable: <span class="hljs-keyword">void</span> = <span class="hljs-literal">undefined</span>;<br></code></pre></div></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">error</span>(<span class="hljs-params">message: string</span>): <span class="hljs-title">never</span> </span>&#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(message);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="object（没啥用）"><a href="#object（没啥用）" class="headerlink" title="object（没啥用）"></a>object（没啥用）</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj: object = &#123;&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> list: number[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> list: <span class="hljs-built_in">Array</span>&lt;number&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></div></td></tr></table></figure><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x: [string, number];<br>x = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">10</span>];<br></code></pre></div></td></tr></table></figure><h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">enum Color &#123;<br>  Red,<br>  Green,<br>  Blue,<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br><br>enum Color &#123;<br>  Red = <span class="hljs-number">1</span>,<br>  Green,<br>  Blue,<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br><br>enum Color &#123;<br>  Red = <span class="hljs-number">1</span>,<br>  Green = <span class="hljs-number">2</span>,<br>  Blue = <span class="hljs-number">4</span>,<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br><br></code></pre></div></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><ul><li>有些情况下，变量的类型对于我们来说是很明确，但是 TS 编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：<ul><li>第一种</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> someValue: unknown = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> strLength: number = (someValue <span class="hljs-keyword">as</span> string).length;<br><br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>  - 第二种</code></pre></div><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> someValue: unknown = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> strLength: number = (&lt;string&gt;someValue).length;<br><br></code></pre></div></td></tr></table></figure><h3 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h3><h4 id="1-类型断言方式"><a href="#1-类型断言方式" class="headerlink" title="1.类型断言方式"></a>1.类型断言方式</h4><h4 id="2-用-in-语法方式"><a href="#2-用-in-语法方式" class="headerlink" title="2.用 in 语法方式"></a>2.用 in 语法方式</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">interface Bird &#123;<br>  fly: boolean;<br>  sing: () =&gt; &#123;&#125;;<br>&#125;<br>interface Dog &#123;<br>  fly: boolean;<br>  bark: () =&gt; &#123;&#125;;<br>&#125;<br><br><span class="hljs-comment">//类型断言方式</span><br>function trainAnial(animal: Bird | Dog) &#123;<br>  if (animal.fly) &#123;<br>    (animal as Bird).sing();<br>  &#125; else &#123;<br>    (animal as Dog).bark();<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//in 语法来做保护机制</span><br>function trainAnialSecond(animal: Bird | Dog) &#123;<br>  if (&#x27;sing&#x27; in animal) &#123;<br>    animal.sing();<br>  &#125; else &#123;<br>    animal.bark();<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="3-用-typeof-语法方式"><a href="#3-用-typeof-语法方式" class="headerlink" title="3.用 typeof 语法方式"></a>3.用 typeof 语法方式</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">//typeof语法来做类型保护</span><br>function add(first: string | number, second: string | number) &#123;<br>  if (typeof first === &#x27;string&#x27; || typeof second === &#x27;string&#x27;) &#123;<br>    return `$&#123;first&#125;$&#123;second&#125;`;<br>  &#125;<br>  return first + second;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-用-instanceof-语法来做类型保护"><a href="#4-用-instanceof-语法来做类型保护" class="headerlink" title="4.用 instanceof 语法来做类型保护"></a>4.用 instanceof 语法来做类型保护</h4><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// 使用instanceof</span><br>class NumberObj &#123;<br>  count: number;<br>&#125;<br>function addSecond(first: object | NumberObj, second: object | NumberObj) &#123;<br>  if (first instanceof NumberObj &amp;&amp; second instanceof NumberObj) &#123;<br>    return first.count + second.count;<br>  &#125;<br>  return 0;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="type-ts"><a href="#type-ts" class="headerlink" title="type.ts"></a><code>type.ts</code></h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/* 1.变量类型声明和初始化 */</span><br><br><span class="hljs-keyword">let</span> a: number;<br><br><span class="hljs-comment">// a 的类型设置为了number，在以后的使用过程中a的值只能是数字</span><br>a = <span class="hljs-number">10</span>;<br>a = <span class="hljs-number">33</span>;<br><span class="hljs-comment">// a = &#x27;hello&#x27;; // 此行代码会报错，因为变量a的类型是number，不能赋值字符串</span><br><br><span class="hljs-keyword">let</span> b: string;<br>b = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-comment">// b = 123;</span><br><br><span class="hljs-comment">// 声明变量的同时直接进行赋值</span><br><span class="hljs-comment">// let c: boolean = false;</span><br><br><span class="hljs-comment">// 如果变量的声明和赋值是同时进行的，TS可以自动对变量进行类型检测</span><br><span class="hljs-keyword">let</span> c = <span class="hljs-literal">false</span>;<br>c = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">/* 2.函数声明 */</span><br><br><span class="hljs-comment">// JS中的函数是不考虑参数的类型和个数的</span><br><span class="hljs-comment">// function sum(a, b)&#123;</span><br><span class="hljs-comment">//     return a + b;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// console.log(sum(123, 456)); // 579</span><br><span class="hljs-comment">// console.log(sum(123, &quot;456&quot;)); // &quot;123456&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a: number, b: number</span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-keyword">let</span> res = sum(<span class="hljs-number">123</span>, <span class="hljs-number">345</span>);<br><span class="hljs-comment">// let res = sum(123, &#x27;456&#x27;); // 报错</span><br><br><span class="hljs-comment">/* 3.字面量声明 */</span><br><br><span class="hljs-comment">// 下面的语句相当于定义了一个a3常量；</span><br><span class="hljs-keyword">let</span> a3: <span class="hljs-number">10</span>;<br><span class="hljs-comment">// a3 = 11; // 尝试将a3赋值为11，报错；</span><br><br><span class="hljs-comment">/* 4.联合类型 */</span><br><br><span class="hljs-keyword">let</span> b4: <span class="hljs-string">&quot;male&quot;</span> | <span class="hljs-string">&quot;female&quot;</span>;<br>b4 = <span class="hljs-string">&quot;male&quot;</span>;<br>b4 = <span class="hljs-string">&quot;female&quot;</span>;<br><br><span class="hljs-keyword">let</span> c4: boolean | string;<br>c4 = <span class="hljs-literal">true</span>;<br>c4 = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><br><span class="hljs-comment">/* 5.组合类型 */</span><br><br><span class="hljs-comment">// &amp;表示同时满足的类型</span><br><span class="hljs-keyword">let</span> a5: &#123; <span class="hljs-attr">name</span>: string &#125; &amp; &#123; <span class="hljs-attr">age</span>: number &#125;;<br>a5 = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;haha&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;;<br><br><span class="hljs-comment">/* 6.其他常见基本类型(除了：number、string、bool之外) */</span><br><br><span class="hljs-comment">/* 6.1 Any */</span><br><br><span class="hljs-comment">// any 表示的是任意类型，一个变量设置类型为any后相当于：对该变量关闭了TS的类型检测！</span><br><span class="hljs-comment">// 使用TS时，强烈不建议使用any类型</span><br><span class="hljs-comment">// let d: any;</span><br><br><span class="hljs-comment">// 声明变量如果不指定类型，则TS解析器会自动判断变量的类型为any （隐式的any）</span><br><span class="hljs-keyword">let</span> a61;<br>a61 = <span class="hljs-number">10</span>;<br>a61 = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>a61 = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">/* 6.2 Unknown */</span><br><br><span class="hljs-keyword">let</span> a62: unknown;<br>a62 = <span class="hljs-number">10</span>;<br>a62 = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>a62 = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">/* 6.2.2 Unknown和Any对比 */</span><br><br><span class="hljs-keyword">let</span> s: string = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-comment">// a61的类型是any，它可以赋值给任意变量</span><br><span class="hljs-comment">// any赋值给其他变量时，TS也会同时关闭对那个赋值变量的类型检查！</span><br>s = a61;<br><br><span class="hljs-comment">// a62的类型是unknown，它不能赋值给一个确定类型！</span><br><span class="hljs-comment">// s = a62;</span><br><br><span class="hljs-comment">// 即：unknown 实际上就是一个类型安全的any</span><br><span class="hljs-comment">// unknown类型的变量，不能直接赋值给其他变量</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> a62 === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    s = a62;<br>&#125;<br><br><span class="hljs-comment">/* 6.3 void */</span><br><br><span class="hljs-comment">// void 用来表示空，主要用于函数中</span><br><span class="hljs-comment">// 以函数为例，表示没有返回值的函数：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>&#123;<br>&#125;<br><br><span class="hljs-comment">/* 6.4 undefined */</span><br><br><span class="hljs-comment">// never 表示永远不会返回结果（连undefined都没有）[较少使用]</span><br><span class="hljs-comment">// 下面的函数没有返回值（连undefined都没有），仅抛出error</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>): <span class="hljs-title">never</span> </span>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;报错了！&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">/* 6.5 object */</span><br><br><span class="hljs-comment">// object表示一个js对象类型</span><br><span class="hljs-keyword">let</span> a65: object;<br>a65 = &#123;&#125;;<br>a65 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>&#125;;<br><br><span class="hljs-comment">// &#123;&#125; 用来指定对象中可以包含哪些属性</span><br><span class="hljs-comment">// 语法：</span><br><span class="hljs-comment">//   &#123;属性名:属性值,属性名:属性值&#125;</span><br><span class="hljs-comment">// 在属性名后边加上?，表示属性是可选的</span><br><span class="hljs-keyword">let</span> b65: &#123; <span class="hljs-attr">name</span>: string, age?: number &#125;;<br>b65 = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;haha&#x27;</span>&#125;;<br>b65 = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;;<br><br><span class="hljs-comment">// [propName: string]: any 表示任意类型的属性</span><br><span class="hljs-comment">// 所以下面定义了一个必须包含name属性，其他属性随意的类型</span><br><span class="hljs-keyword">let</span> c65: &#123; <span class="hljs-attr">name</span>: string, [propName: string]: any &#125;;<br>c65 = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;猪八戒&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;;<br><br><span class="hljs-comment">/* 6.5.2 函数对象 */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*   设置函数结构的类型声明：</span><br><span class="hljs-comment">*       语法：(形参:类型, 形参:类型 ...) =&gt; 返回值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> d65: <span class="hljs-function">(<span class="hljs-params">a: number, b: number</span>) =&gt;</span> number;<br><span class="hljs-comment">// 声明了类型之后，在定义时可以不再指出类型</span><br>d65 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n1, n2</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> n1 + n2<br>&#125;<br><span class="hljs-comment">// 也可以指出类型</span><br>d65 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n1: number, n2: number</span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> n1 + n2<br>&#125;<br><br><span class="hljs-comment">// 下面的一些定义都是错误的！</span><br><span class="hljs-comment">// d65 = function (n1: string, n2: number): number &#123;</span><br><span class="hljs-comment">//     return n1 + n2</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// d65 = function (n1: number, n2: number, n3: number): number &#123;</span><br><span class="hljs-comment">//     return n1 + n2 + n3;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 但是下面这个是对的！</span><br>d65 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n1: number</span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> n1<br>&#125;<br><br><span class="hljs-comment">/* 6.6 数组 */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*   数组的类型声明：</span><br><span class="hljs-comment">*       类型[]</span><br><span class="hljs-comment">*       Array&lt;类型&gt;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 例如：string[] 表示字符串数组</span><br><span class="hljs-keyword">let</span> e66: string[];<br>e66 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><br><span class="hljs-comment">// number[] 表示数值数值</span><br><span class="hljs-keyword">let</span> f66: number[];<br><br><span class="hljs-comment">// 也可以使用下面的声明方式</span><br><span class="hljs-keyword">let</span> g66: <span class="hljs-built_in">Array</span>&lt;number&gt;;<br>g66 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-comment">/* 6.7 元组 */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*   元组，元组就是固定长度的数组</span><br><span class="hljs-comment">*       语法：[类型, 类型, 类型]</span><br><span class="hljs-comment">*   相比于数组，元组的性能更高一些</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> a67: [string, number];<br>a67 = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">123</span>];<br><br><span class="hljs-comment">/* 6.8 枚举 */</span><br><br>enum Gender &#123;<br>    Male,<br>    Female,<br>&#125;<br><br><span class="hljs-keyword">let</span> a68: &#123; <span class="hljs-attr">name</span>: string, <span class="hljs-attr">gender</span>: Gender &#125;;<br>a68 = &#123;<br>    name: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>    gender: Gender.Male<br>&#125;<br><span class="hljs-built_in">console</span>.log(a68.gender === Gender.Male);<br><br><span class="hljs-comment">/* 7.类型别名 */</span><br><br><span class="hljs-comment">// 使用关键字type</span><br>type myType = <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span> | <span class="hljs-number">4</span> | <span class="hljs-number">5</span>;<br><span class="hljs-keyword">let</span> k: myType;<br><span class="hljs-keyword">let</span> l: myType;<br><span class="hljs-keyword">let</span> m: myType;<br><br>k = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// k = 6 // error!</span><br><br><span class="hljs-comment">/* 8.类型断言 */</span><br><br><span class="hljs-comment">// 类型断言，用来帮助编译器判断变量的实际类型</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 语法：</span><br><span class="hljs-comment">*   变量 as 类型</span><br><span class="hljs-comment">*   &lt;类型&gt;变量</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-comment">// 有些情况下，变量的类型对于我们来说是很明确</span><br><span class="hljs-comment">// 但是TS编译器却并不清楚</span><br><span class="hljs-comment">// 此时，可以通过类型断言来告诉编译器变量的类型</span><br><span class="hljs-comment">// 断言有两种形式：</span><br><br><span class="hljs-comment">// 8.1：变量 as 类型</span><br><span class="hljs-keyword">let</span> someValue: unknown = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> strLength: number = (someValue <span class="hljs-keyword">as</span> string).length;<br><br><span class="hljs-comment">// 8.2：&lt;类型&gt;变量</span><br><span class="hljs-keyword">let</span> strLength2: number = (&lt;string&gt;someValue).length;<br></code></pre></div></td></tr></table></figure><h1 id="四-编译选修"><a href="#四-编译选修" class="headerlink" title="四.编译选修"></a>四.编译选修</h1><h2 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h2><p>编译文件时，使用 -w 指令后，TS 编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。<br>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">tsc xxx.ts -w<br></code></pre></div></td></tr></table></figure><h2 id="自动编译整个项目"><a href="#自动编译整个项目" class="headerlink" title="自动编译整个项目"></a>自动编译整个项目</h2><p>如果直接使用 tsc 指令，则可以自动将当前项目下的所有 ts 文件编译为 js 文件。<br><strong>但是能直接使用 tsc 命令的前提时，要先在项目根目录下创建一个 ts 的配置文件 tsconfig.json</strong><br>tsconfig.json 是一个 JSON 文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</p><h2 id="配置选项："><a href="#配置选项：" class="headerlink" title="配置选项："></a>配置选项：</h2><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><ul><li>定义希望被编译文件所在的目录</li><li>默认值：[“**/*”]</li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;include&quot;</span>:[<span class="hljs-string">&quot;src/**/*&quot;</span>, <span class="hljs-string">&quot;tests/**/*&quot;</span>]<br></code></pre></div></td></tr></table></figure><p>上述示例中，所有 src 目录和 tests 目录下的文件都会被编译</p><h3 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h3><ul><li>定义需要排除在外的目录</li><li>默认值：<code>[&quot;node_modules&quot;, &quot;bower_components&quot;, &quot;jspm_packages&quot;]</code></li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;exclude&quot;</span>: [<span class="hljs-string">&quot;./src/hello/**/*&quot;</span>]<br></code></pre></div></td></tr></table></figure><p>上述示例中，src 下 hello 目录下的文件都不会被编译</p><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><ul><li>定义被继承的配置文件</li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;extends&quot;</span>: <span class="hljs-string">&quot;./configs/base&quot;</span><br></code></pre></div></td></tr></table></figure><p>上述示例中，当前配置文件中会自动包含 config 目录下 base.json 中的所有配置信息</p><h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><ul><li>指定被编译文件的列表，<strong>只有需要编译的文件少时才会用到</strong></li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;files&quot;</span>: [<br>    <span class="hljs-string">&quot;core.ts&quot;</span>,<br>    <span class="hljs-string">&quot;sys.ts&quot;</span>,<br>    <span class="hljs-string">&quot;types.ts&quot;</span>,<br>    <span class="hljs-string">&quot;scanner.ts&quot;</span>,<br>    <span class="hljs-string">&quot;parser.ts&quot;</span>,<br>    <span class="hljs-string">&quot;utilities.ts&quot;</span>,<br>    <span class="hljs-string">&quot;binder.ts&quot;</span>,<br>    <span class="hljs-string">&quot;checker.ts&quot;</span>,<br>    <span class="hljs-string">&quot;tsc.ts&quot;</span><br>  ]<br><br></code></pre></div></td></tr></table></figure><ul><li>列表中的文件都会被 TS 编译器所编译</li></ul><h3 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h3><ul><li>编译选项是配置文件中非常重要也比较复杂的配置选项</li><li>在 compilerOptions 中包含多个子选项，用来完成对编译的配置</li></ul><p>项目选项：</p><h4 id="target"><a href="#target" class="headerlink" title="target"></a>target</h4><ul><li>设置 ts 代码编译的目标版本</li><li>可选值：<ul><li><code>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</code></li></ul></li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES6&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><ul><li>如上设置，我们所编写的 ts 代码将会被编译为 ES6 版本的 js 代码</li></ul><h4 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h4><ul><li>指定代码运行时所包含的库（宿主环境）</li><li>可选值：<ul><li><code>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ......</code></li></ul></li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES6&quot;</span>,     <span class="hljs-string">&quot;lib&quot;</span>: [<span class="hljs-string">&quot;ES6&quot;</span>, <span class="hljs-string">&quot;DOM&quot;</span>],     <span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span>,     <span class="hljs-string">&quot;outFile&quot;</span>: <span class="hljs-string">&quot;dist/aa.js&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><ul><li>设置编译后代码使用的模块化系统</li><li>可选值：<ul><li><code>CommonJS、UMD、AMD、System、ES2020、ESNext、None</code></li></ul></li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;CommonJS&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="outDir"><a href="#outDir" class="headerlink" title="outDir"></a>outDir</h4><ul><li>编译后文件的所在目录</li><li>默认情况下，编译后的 js 文件会和 ts 文件位于相同的目录，设置 outDir 后可以改变编译后文件的位置</li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>  - 设置后编译后的js文件将会生成到dist目录</code></pre></div><h4 id="outFile"><a href="#outFile" class="headerlink" title="outFile"></a>outFile</h4><ul><li>将所有的文件编译为一个 js 文件</li><li>默认会将所有的编写在全局作用域中的代码合并为一个 js 文件，如果 module 制定了 None、System 或 AMD 则会将模块一起合并到文件之中</li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;outFile&quot;</span>: <span class="hljs-string">&quot;dist/app.js&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="rootDir"><a href="#rootDir" class="headerlink" title="rootDir"></a>rootDir</h4><ul><li>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过 rootDir 可以手动指定根目录</li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;rootDir&quot;</span>: <span class="hljs-string">&quot;./src&quot;</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="allowJs"><a href="#allowJs" class="headerlink" title="allowJs"></a>allowJs</h4><ul><li>是否对 js 文件编译</li></ul><h4 id="checkJs"><a href="#checkJs" class="headerlink" title="checkJs"></a>checkJs</h4><ul><li>是否对 js 文件进行检查</li><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;     <span class="hljs-string">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span>,     <span class="hljs-string">&quot;checkJs&quot;</span>: <span class="hljs-literal">true</span> &#125;<br></code></pre></div></td></tr></table></figure><h4 id="removeComments"><a href="#removeComments" class="headerlink" title="removeComments"></a>removeComments</h4><ul><li>是否删除注释</li><li>默认值：false</li></ul><h4 id="noEmit"><a href="#noEmit" class="headerlink" title="noEmit"></a>noEmit</h4><ul><li>不对代码进行编译</li><li>默认值：false</li></ul><h4 id="sourceMap"><a href="#sourceMap" class="headerlink" title="sourceMap"></a>sourceMap</h4><ul><li>是否生成 sourceMap</li><li>默认值：false</li></ul><h4 id="严格检查"><a href="#严格检查" class="headerlink" title="严格检查"></a>严格检查</h4><ul><li>strict<ul><li>启用所有的严格检查，默认值为 true，设置后相当于开启了所有的严格检查</li></ul></li><li>alwaysStrict<ul><li>总是以严格模式对代码进行编译</li></ul></li><li>noImplicitAny<ul><li>禁止隐式的 any 类型</li></ul></li><li>noImplicitThis<ul><li>禁止类型不明确的 this</li></ul></li><li>strictBindCallApply<ul><li>严格检查 bind、call 和 apply 的参数列表</li></ul></li><li>strictFunctionTypes<ul><li>严格检查函数的类型</li></ul></li><li>strictNullChecks<ul><li>严格的空值检查</li></ul></li><li>strictPropertyInitialization<ul><li>严格检查属性是否初始化</li></ul></li></ul><h4 id="额外检查"><a href="#额外检查" class="headerlink" title="额外检查"></a>额外检查</h4><ul><li>noFallthroughCasesInSwitch<ul><li>检查 switch 语句包含正确的 break</li></ul></li><li>noImplicitReturns<ul><li>检查函数没有隐式的返回值</li></ul></li><li>noUnusedLocals<ul><li>检查未使用的局部变量</li></ul></li><li>noUnusedParameters<ul><li>检查未使用的参数</li></ul></li></ul><h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4><ul><li>allowUnreachableCode<ul><li>检查不可达代码</li><li>可选值：<ul><li>true，忽略不可达代码</li><li>false，不可达代码将引起错误</li></ul></li></ul></li><li>noEmitOnError<ul><li>有错误的情况下不进行编译</li><li>默认值：false</li></ul></li></ul><h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-comment">// 此json文件中可以写注释！</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    tsconfig.json是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译</span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    &quot;include&quot; 用来指定哪些ts文件需要被编译</span><br><span class="hljs-comment">      默认：当前路径下所有文件, **\*</span><br><span class="hljs-comment">      路径：** 表示任意目录</span><br><span class="hljs-comment">            * 表示任意文件</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-string">&quot;include&quot;</span>: [<span class="hljs-string">&quot;./src/**/*&quot;</span>],<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    &quot;exclude&quot; 不需要被编译的文件目录</span><br><span class="hljs-comment">    默认值：</span><br><span class="hljs-comment">      [&quot;node_modules&quot;, &quot;bower_components&quot;, &quot;jspm_packages&quot;, &quot;./dist&quot;]</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-string">&quot;exclude&quot;</span>: [<span class="hljs-string">&quot;./src/exclude/**/*&quot;</span>],<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    被继承的配置文件</span><br><span class="hljs-comment">    例如：&quot;extends&quot;: &quot;。/configs/base&quot;,</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-comment">//  &quot;extends&quot;: &quot;&quot;,</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    指定被编译文件的列表，只有需要编译的文件少时才会用到</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-comment">//  &quot;files&quot;: [],</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    compilerOptions 编译器的选项</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-comment">// target 用来指定ts被编译为的ES的版本</span><br>    <span class="hljs-comment">// &#x27;es3&#x27;, &#x27;es5&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;, &#x27;es2018&#x27;, ...</span><br>    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;es2015&quot;</span>,<br>    <span class="hljs-comment">// module 指定要使用的模块化的规范</span><br>    <span class="hljs-comment">// &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, ...</span><br>    <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;es2015&quot;</span>,<br>    <span class="hljs-comment">// lib用来指定项目中要使用的库</span><br>    <span class="hljs-comment">// 在node项目中可以声明用到的库，在前端中可以声明dom(浏览器中的内置库，但是在node中是不需要的！)</span><br>    <span class="hljs-comment">// 默认就是在浏览器中的运行环境！</span><br>    <span class="hljs-comment">//&#x27;es5&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es7&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;, &#x27;es2018&#x27;, &#x27;es2019&#x27;, &#x27;es2020&#x27;,</span><br>    <span class="hljs-comment">// &#x27;esnext&#x27;, &#x27;dom&#x27;, &#x27;dom.iterable&#x27;, ...</span><br>    <span class="hljs-string">&quot;lib&quot;</span>: [<span class="hljs-string">&quot;es6&quot;</span>, <span class="hljs-string">&quot;dom&quot;</span>],<br>    <span class="hljs-comment">// outDir 用来指定编译后文件所在的目录</span><br>    <span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;./dist&quot;</span>,<br>    <span class="hljs-comment">// 将代码合并为一个文件</span><br>    <span class="hljs-comment">// 设置outFile后，所有的全局作用域中的代码会合并到同一个文件中</span><br>    <span class="hljs-comment">//&quot;outFile&quot;: &quot;./dist/app.js&quot;</span><br>    <span class="hljs-comment">// 是否对js文件进行编译，默认是false</span><br>    <span class="hljs-string">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 是否检查js代码是否符合语法规范，默认是false</span><br>    <span class="hljs-string">&quot;checkJs&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 是否移除注释</span><br>    <span class="hljs-string">&quot;removeComments&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 不生成编译后的文件</span><br>    <span class="hljs-comment">// 仅用TS检查语法</span><br>    <span class="hljs-string">&quot;noEmit&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 当有错误时不生成编译后的文件</span><br>    <span class="hljs-string">&quot;noEmitOnError&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      语法检查属性</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">// 所有严格检查的总开关</span><br>    <span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 用来设置编译后的文件是否使用严格模式，默认false</span><br>    <span class="hljs-comment">// 在ES6中的模块化会自动使用严格模式，而无需在文件开头添加`&#x27;use strict&#x27;`</span><br>    <span class="hljs-string">&quot;alwaysStrict&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 不允许隐式的any类型</span><br>    <span class="hljs-string">&quot;noImplicitAny&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 不允许不明确类型的this</span><br>    <span class="hljs-string">&quot;noImplicitThis&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 严格的检查空值</span><br>    <span class="hljs-string">&quot;strictNullChecks&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="五-TypeScript-打包"><a href="#五-TypeScript-打包" class="headerlink" title="五.TypeScript 打包"></a>五.TypeScript 打包</h1><h2 id="webpack-整合"><a href="#webpack-整合" class="headerlink" title="webpack 整合"></a>webpack 整合</h2><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包；<br>TS 同样也可以结合构建工具一起使用，下边以 webpack 为例介绍一下如何结合构建工具使用 TS；<br>步骤如下：</p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>进入项目根目录，执行命令 npm init -y，创建 package.json 文件</p><h3 id="下载构建工具"><a href="#下载构建工具" class="headerlink" title="下载构建工具"></a>下载构建工具</h3><p>命令如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin<br></code></pre></div></td></tr></table></figure><p>共安装了 7 个包:</p><ul><li>webpack：构建工具 webpack</li><li>webpack-cli：webpack 的命令行工具</li><li>webpack-dev-server：webpack 的开发服务器</li><li>typescript：ts 编译器</li><li>ts-loader：ts 加载器，用于在 webpack 中编译 ts 文件</li><li>html-webpack-plugin：webpack 中 html 插件，用来自动创建 html 文件</li><li>clean-webpack-plugin：webpack 中的清除插件，每次构建都会先清除目录</li></ul><h3 id="配置-webpack"><a href="#配置-webpack" class="headerlink" title="配置 webpack"></a>配置 webpack</h3><p>根目录下创建 webpack 的配置文件 webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  optimization: &#123;<br>    minimize: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 关闭代码压缩，可选</span><br>  &#125;,<br><br>  entry: <span class="hljs-string">&#x27;./src/index.ts&#x27;</span>,<br><br>  devtool: <span class="hljs-string">&#x27;inline-source-map&#x27;</span>,<br><br>  devServer: &#123;<br>    contentBase: <span class="hljs-string">&#x27;./dist&#x27;</span>,<br>  &#125;,<br><br>  output: &#123;<br>    path: path.resolve(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    filename: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>    environment: &#123;<br>      arrowFunction: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 关闭webpack的箭头函数，可选</span><br>    &#125;,<br>  &#125;,<br><br>  resolve: &#123;<br>    extensions: [<span class="hljs-string">&#x27;.ts&#x27;</span>, <span class="hljs-string">&#x27;.js&#x27;</span>],<br>  &#125;,<br><br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        test: <span class="hljs-regexp">/\.ts$/</span>,<br>        use: &#123;<br>          loader: <span class="hljs-string">&#x27;ts-loader&#x27;</span>,<br>        &#125;,<br>        exclude: <span class="hljs-regexp">/node_modules/</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br><br>  plugins: [<br>    <span class="hljs-keyword">new</span> CleanWebpackPlugin(),<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>      title: <span class="hljs-string">&#x27;TS测试&#x27;</span>,<br>    &#125;),<br>  ],<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="配置-TS-编译选项"><a href="#配置-TS-编译选项" class="headerlink" title="配置 TS 编译选项"></a>配置 TS 编译选项</h4><p>根目录下创建 tsconfig.json，配置可以根据自己需要</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>   <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>       <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>       <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>       <span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span><br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="修改-package-json-配置"><a href="#修改-package-json-配置" class="headerlink" title="修改 package.json 配置"></a>修改 package.json 配置</h4><p>修改 package.json 添加如下配置</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>   ...<br>   <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>       <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br>       <span class="hljs-comment">//&quot;build&quot;: &quot;webpack&quot;,</span><br>       <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;webpack serve --open chrome.exe&quot;</span><br>       <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack --mode development&quot;</span>,<br>     <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --mode production&quot;</span><br>   &#125;,<br>   ...<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h4><p>在 src 下创建 ts 文件，并在并命令行执行<code>npm run build</code>对代码进行编译；<br>或者执行<code>npm start</code>来启动开发服务器；</p><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>除了 webpack，开发中还经常需要结合 babel 来对代码进行转换；<br>以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将 babel 引入到项目中；<br>虽然 TS 在编译时也支持代码转换，但是只支持简单的代码转换；<br>对于例如：Promise 等 ES6 特性，TS 无法直接转换，这时还要用到 babel 来做转换；</p><h4 id="安装依赖包："><a href="#安装依赖包：" class="headerlink" title="安装依赖包："></a>安装依赖包：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm i -D @babel/core @babel/preset-env babel-loader core-js<br></code></pre></div></td></tr></table></figure><p>共安装了 4 个包，分别是：</p><ul><li>@babel/core：babel 的核心工具</li><li>@babel/preset-env：babel 的预定义环境</li><li>@babel-loader：babel 在 webpack 中的加载器</li><li>core-js：core-js 用来使老版本的浏览器支持新版 ES 语法</li></ul><h4 id="修改-webpack-config-js-配置文件"><a href="#修改-webpack-config-js-配置文件" class="headerlink" title="修改 webpack.config.js 配置文件"></a>修改 webpack.config.js 配置文件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">...<br><span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>        &#123;<br>            test: <span class="hljs-regexp">/\.ts$/</span>,<br>            use: [<br>                &#123;<br>                    loader: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>                    options:&#123;<br>                        presets: [<br>                            [<br>                                <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>                                &#123;<br>                                    <span class="hljs-string">&quot;targets&quot;</span>:&#123;<br>                                        <span class="hljs-string">&quot;chrome&quot;</span>: <span class="hljs-string">&quot;58&quot;</span>,<br>                                        <span class="hljs-string">&quot;ie&quot;</span>: <span class="hljs-string">&quot;11&quot;</span><br>                                    &#125;,<br>                                    <span class="hljs-string">&quot;corejs&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>,<br>                                    <span class="hljs-string">&quot;useBuiltIns&quot;</span>: <span class="hljs-string">&quot;usage&quot;</span><br>                                &#125;<br>                            ]<br>                        ]<br>                    &#125;<br>                &#125;,<br>                &#123;<br>                    loader: <span class="hljs-string">&quot;ts-loader&quot;</span>,<br><br>                &#125;<br>            ],<br>            exclude: <span class="hljs-regexp">/node_modules/</span><br>        &#125;<br>    ]<br>&#125;<br>...<br></code></pre></div></td></tr></table></figure><p>如此一来，使用 ts 编译后的文件将会再次被 babel 处理；<br>使得代码可以在大部分浏览器中直接使用；<br>同时可以在配置选项的 targets 中指定要兼容的浏览器版本；<br>​</p><h1 id="六、面向对象"><a href="#六、面向对象" class="headerlink" title="六、面向对象"></a>六、面向对象</h1><p>要想面向对象，操作对象，首先便要拥有对象；<br>要创建对象，必须要先定义类，所谓的类可以理解为对象的模型；<br>程序中可以根据类创建指定类型的对象；<br>举例来说：<br>可以通过 Person 类来创建人的对象，通过 Dog 类创建狗的对象，不同的类可以用来创建不同的对象；<br>​</p><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>    属性名: 类型;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">参数: 类型</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.属性名 = 参数;<br>    &#125;<br><br>    方法名()&#123;<br>        ....<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>  name: string;<br>  age: number;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用类：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);<br>p.sayHello();<br></code></pre></div></td></tr></table></figure><h3 id="1-class-ts"><a href="#1-class-ts" class="headerlink" title="1_class.ts"></a>1_class.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用class关键字来定义一个类</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *   对象中主要包含了两个部分：</span><br><span class="hljs-comment"> *       属性</span><br><span class="hljs-comment"> *       方法</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   *   直接定义的属性是实例属性，需要通过对象的实例去访问：</span><br><span class="hljs-comment">   *       const per = new Person();</span><br><span class="hljs-comment">   *       per.name</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   *   使用static开头的属性是静态属性（类属性），可以直接通过类去访问</span><br><span class="hljs-comment">   *       Person.age</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   *   readonly开头的属性表示一个只读的属性无法修改</span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">        定义实例属性（new出实例之后才能访问的属性）</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-comment">// name: string = &#x27;孙悟空&#x27;;</span><br>  <span class="hljs-comment">// age:number = 18;</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">        定义静态属性：在属性前使用static关键字可以定义类属性（静态属性）</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-comment">// static age: number = 18;</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">        readonly开头的属性表示一个只读的属性无法修改</span><br><span class="hljs-comment">    */</span><br>  <span class="hljs-comment">// readonly name: string = &#x27;孙悟空&#x27;;</span><br><br>  name: string = <span class="hljs-string">&#x27;孙悟空&#x27;</span>;<br>  age: number = <span class="hljs-number">18</span>;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 定义方法：如果方法以static开头则方法就是类方法，可以直接通过类去调用</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 实例方法</span><br>  <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hello 大家好！&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 类方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hello 大家好！&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 创建实例 */</span><br><span class="hljs-keyword">const</span> per = <span class="hljs-keyword">new</span> Person();<br><br><span class="hljs-comment">/* 属性 */</span><br><br><span class="hljs-comment">// 访问实例属性</span><br><span class="hljs-built_in">console</span>.log(per);<br><span class="hljs-built_in">console</span>.log(per.name, per.age);<br><br><span class="hljs-comment">// 访问静态(类)属性</span><br><span class="hljs-comment">// console.log(Person.age);</span><br><br><span class="hljs-comment">// 如果是readonly类型，则无法修改</span><br><span class="hljs-comment">// 下面的代码报错</span><br><span class="hljs-comment">// per.name = &#x27;tom&#x27;;</span><br><br><span class="hljs-comment">/* 方法 */</span><br><br><span class="hljs-comment">// 访问实例方法</span><br>per.sayHello();<br><br><span class="hljs-comment">// 访问静态方法</span><br>Person.sayHello();<br></code></pre></div></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="可以使用-constructor-定义一个构造器方法；"><a href="#可以使用-constructor-定义一个构造器方法；" class="headerlink" title="可以使用 constructor 定义一个构造器方法；"></a>可以使用 constructor 定义一个构造器方法；</h3><p><strong>注 1：在 TS 中只能有一个构造器方法！</strong><br>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>  name: string;<br>  age: number;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>同时也可以直接将属性定义在构造函数中：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">public name: string, public age: number</span>)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面两种定义方法是完全相同的！</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>在类中，使用 this 表示当前对象</p><h3 id="2-constructor-ts"><a href="#2-constructor-ts" class="headerlink" title="2_constructor.ts"></a>2_constructor.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br>  name: string;<br>  age: number;<br><br>  <span class="hljs-comment">// constructor 被称为构造函数</span><br>  <span class="hljs-comment">// 构造函数会在对象创建时调用</span><br>  <span class="hljs-comment">// TS中仅能创建一个构造函数！</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>    <span class="hljs-comment">// 在实例方法中，this就表示当前当前的实例</span><br>    <span class="hljs-comment">// 在构造函数中的当前对象就是新建的那个对象</span><br>    <span class="hljs-comment">// 可以通过this向新建的对象中添加属性</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">bark</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// alert(&#x27;汪汪汪！&#x27;);</span><br>    <span class="hljs-comment">// 在方法中可以通过this来表示当前调用方法的对象</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-number">4</span>);<br><span class="hljs-keyword">const</span> dog2 = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-built_in">console</span>.log(dog);<br><span class="hljs-built_in">console</span>.log(dog2);<br><br>dog2.bark();<br></code></pre></div></td></tr></table></figure><p><strong>注 2：子类继承父类时，必须调用父类的构造方法（如果子类中也定义了构造方法）！</strong><br>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    protected num: number;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">num: number</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.num = num;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br>    protected name: string;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">num: number, name: string</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(num);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>如果在 X 类中不调用 super 将会报错！</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承时面向对象中的又一个特性<br>通过继承可以将其他类中的属性和方法引入到当前类中<br>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  name: string;<br>  age: number;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">bark</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>, <span class="hljs-number">4</span>);<br>dog.bark();<br></code></pre></div></td></tr></table></figure><p>通过继承可以在不修改类的情况下完成对类的扩展</p><h3 id="extends-ts"><a href="#extends-ts" class="headerlink" title="extends.ts"></a>extends.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 定义一个Animal类</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    name: string;<br>    age: number;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.name = name;<br>      <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;动物在叫~&#x27;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Dog extends Animal</span><br><span class="hljs-comment">   *   - 此时，Animal被称为父类，Dog被称为子类</span><br><span class="hljs-comment">   *   - 使用继承后，子类将会拥有父类所有的方法和属性</span><br><span class="hljs-comment">   *   - 通过继承可以将多个类中共有的代码写在一个父类中，</span><br><span class="hljs-comment">   *       这样只需要写一次即可让所有的子类都同时拥有父类中的属性和方法</span><br><span class="hljs-comment">   *       如果希望在子类中添加一些父类中没有的属性或方法直接加就行</span><br><span class="hljs-comment">   *   - 如果在子类中添加了和父类相同的方法，则子类方法会覆盖掉父类的方法</span><br><span class="hljs-comment">   *       这种子类覆盖掉父类方法的形式，我们称为方法重写</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 定义一个表示狗的类</span><br>  <span class="hljs-comment">// 使Dog类继承Animal类</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>在跑~~~`</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪汪汪汪！&#x27;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 定义一个表示猫的类</span><br>  <span class="hljs-comment">// 使Cat类继承Animal类</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;喵喵喵喵！&#x27;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>, <span class="hljs-number">5</span>);<br>  <span class="hljs-keyword">const</span> cat = <span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&#x27;咪咪&#x27;</span>, <span class="hljs-number">3</span>);<br>  <span class="hljs-built_in">console</span>.log(dog);<br>  dog.sayHello();<br>  dog.run();<br>  <span class="hljs-built_in">console</span>.log(cat);<br>  cat.sayHello();<br>&#125;)();<br></code></pre></div></td></tr></table></figure><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写<br>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  name: string;<br>  age: number;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`父类中的run方法！`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">bark</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>在汪汪叫！`</span>);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`子类中的run方法，会重写父类中的run方法！`</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>, <span class="hljs-number">4</span>);<br>dog.bark();<br></code></pre></div></td></tr></table></figure><p><strong>在子类中可以使用 super 来完成对父类的引用</strong></p><h3 id="super-ts"><a href="#super-ts" class="headerlink" title="super.ts"></a>super.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    name: string;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;动物在叫~&#x27;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    age: number;<br><br>    <span class="hljs-comment">// 如果在子类中写了构造函数，在子类构造函数中&quot;必须&quot;对父类的构造函数进行调用</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span> &#123;<br>      <span class="hljs-comment">// 调用父类的构造函数</span><br>      <span class="hljs-built_in">super</span>(name);<br>      <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-comment">// 在类的方法中 super就表示当前类的父类</span><br>      <span class="hljs-comment">//super.sayHello();</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪汪汪汪！&#x27;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>, <span class="hljs-number">3</span>);<br>  dog.sayHello();<br>&#125;)();<br></code></pre></div></td></tr></table></figure><h2 id="抽象类（abstract-class）"><a href="#抽象类（abstract-class）" class="headerlink" title="抽象类（abstract class）"></a>抽象类（abstract class）</h2><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>  abstract run(): <span class="hljs-keyword">void</span>;<br>  <span class="hljs-function"><span class="hljs-title">bark</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;动物在叫~&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animals</span></span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;狗在跑~&#x27;</span>);<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>使用 abstract 开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现;</p><h3 id="abstract-ts"><a href="#abstract-ts" class="headerlink" title="abstract.ts"></a>abstract.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   *   以abstract开头的类是抽象类，</span><br><span class="hljs-comment">   *       抽象类和其他类区别不大，只是不能用来创建对象</span><br><span class="hljs-comment">   *       抽象类就是专门用来被继承的类</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   *       抽象类中可以添加抽象方法</span><br><span class="hljs-comment">   */</span><br>  abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    name: string<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.name = name<br>    &#125;<br><br>    <span class="hljs-comment">// 定义一个抽象方法</span><br>    <span class="hljs-comment">// 抽象方法使用 abstract开头，没有方法体</span><br>    <span class="hljs-comment">// 抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写</span><br>    abstract sayHello(): <span class="hljs-keyword">void</span><br>  &#125;<br><br>  <span class="hljs-comment">// 下面的代码会报错</span><br>  <span class="hljs-comment">// const an = new Animal();</span><br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;汪汪汪汪！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;喵喵喵喵！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>)<br>  dog.sayHello()<br>&#125;)()<br><br></code></pre></div></td></tr></table></figure><h2 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h2><p>接口的作用类似于抽象类，不同点在于：接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法；<br>接口主要负责定义一个类的结构，接口可以去限制一个对象的接口：对象只有包含接口中定义的所有属性和方法时才能匹配接口；<br>同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性；<br>示例（检查对象类型）：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">interface Person &#123;<br>  name: string;<br>  sayHello(): <span class="hljs-keyword">void</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">per: Person</span>) </span>&#123;<br>  per.sayHello();<br>&#125;<br><br>fn(&#123;<br>  name: <span class="hljs-string">&#x27;孙悟空&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Hello, 我是 <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>  &#125;,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>示例（实现）：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">interface Person&#123;<br>   name: string;<br>   sayHello():<span class="hljs-keyword">void</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-title">implements</span> <span class="hljs-title">Person</span></span>&#123;<br>   <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">public name: string</span>)</span> &#123;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;大家好，我是&#x27;</span>+<span class="hljs-built_in">this</span>.name);<br>   &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="interface-ts"><a href="#interface-ts" class="headerlink" title="interface.ts"></a>interface.ts</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 描述一个对象的类型</span><br>  type myType = &#123;<br>    name: string,<br>    age: number,<br>  &#125;;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   *   接口用来定义一个类结构，用来定义一个类中应该包含哪些属性和方法</span><br><span class="hljs-comment">   *       同时接口也可以当成类型声明去使用</span><br><span class="hljs-comment">   */</span><br>  interface myInterface &#123;<br>    name: string;<br>    age: number;<br>  &#125;<br><br>  interface myInterface &#123;<br>    gender: string;<br>  &#125;<br><br>  <span class="hljs-comment">// const obj: myInterface = &#123;</span><br>  <span class="hljs-comment">//     name: &#x27;sss&#x27;,</span><br>  <span class="hljs-comment">//     age: 111,</span><br>  <span class="hljs-comment">//     gender: &#x27;男&#x27;</span><br>  <span class="hljs-comment">// &#125;;</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 接口可以在定义类的时候去限制类的结构，</span><br><span class="hljs-comment">   *   接口中的所有的属性都不能有实际的值</span><br><span class="hljs-comment">   *   接口只定义对象的结构，而不考虑实际值</span><br><span class="hljs-comment">   *       在接口中所有的方法都是抽象方法</span><br><span class="hljs-comment">   */</span><br>  interface myInter &#123;<br>    name: string;<br><br>    sayHello(): <span class="hljs-keyword">void</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 定义类时，可以使类去实现一个接口,</span><br><span class="hljs-comment">   *   实现接口就是使类满足接口的要求</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> <span class="hljs-title">implements</span> <span class="hljs-title">myInter</span> </span>&#123;<br>    name: string;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;大家好~~&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;)();<br></code></pre></div></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装<br>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在 TS 中可以对属性的权限进行设置</p><ul><li>静态属性（static）：<ul><li>声明为 static 的属性或方法不再属于实例，而是属于类的属性；</li></ul></li><li>只读属性（readonly）：<ul><li>如果在声明属性时添加一个 readonly，则属性便成了只读属性无法修改</li></ul></li><li>TS 中属性具有三种修饰符：<ul><li>public（默认值），可以在类、子类和对象中修改</li><li>protected ，可以在类、子类中修改</li><li>private ，可以在类中修改</li></ul></li></ul><p>示例：</p><h3 id="静态属性（static）"><a href="#静态属性（static）" class="headerlink" title="静态属性（static）"></a>静态属性（static）</h3><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用<br>静态属性（方法）使用 static 开头<br>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tools</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> PI = <span class="hljs-number">3.1415926</span>;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-params">num1: number, num2: number</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> num1 + num2;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(Tools.PI);<br><span class="hljs-built_in">console</span>.log(Tools.sum(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>));<br></code></pre></div></td></tr></table></figure><h3 id="只读属性（readonly）"><a href="#只读属性（readonly）" class="headerlink" title="只读属性（readonly）"></a>只读属性（readonly）</h3><p>如果在声明属性时添加一个 readonly，则属性便成了只读属性无法修改</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    readonly开头的属性表示一个只读的属性无法修改</span><br><span class="hljs-comment">*/</span><br>readonly name: string = <span class="hljs-string">&#x27;孙悟空&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="TS-中属性具有三种访问修饰符"><a href="#TS-中属性具有三种访问修饰符" class="headerlink" title="TS 中属性具有三种访问修饰符"></a>TS 中属性具有三种访问修饰符</h3><p>public（默认值），可以在类、子类和对象中修改</p><h4 id="public："><a href="#public：" class="headerlink" title="public："></a>public：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    public name: string; <span class="hljs-comment">// 写或什么都不写都是public</span><br>    public age: number;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">// 可以在类中修改</span><br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">//子类中可以修改</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);<br>p.name = <span class="hljs-string">&#x27;猪八戒&#x27;</span>;<span class="hljs-comment">// 可以通过对象修改</span><br><br></code></pre></div></td></tr></table></figure><p>protected ，可以在类、子类中修改</p><h4 id="protected："><a href="#protected：" class="headerlink" title="protected："></a>protected：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    protected name: string;<br>    protected age: number;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">// 可以修改</span><br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">//子类中可以修改</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);<br>p.name = <span class="hljs-string">&#x27;猪八戒&#x27;</span>;<span class="hljs-comment">// 不能修改</span><br><br></code></pre></div></td></tr></table></figure><p>private ，可以在类中修改</p><h4 id="private："><a href="#private：" class="headerlink" title="private："></a>private：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    private name: string;<br>    private age: number;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">// 可以修改</span><br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string, age: number</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.name = name; <span class="hljs-comment">//子类中不能修改</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);<br>p.name = <span class="hljs-string">&#x27;猪八戒&#x27;</span>;<span class="hljs-comment">// 不能修改</span><br><br></code></pre></div></td></tr></table></figure><h3 id="属性存取器"><a href="#属性存取器" class="headerlink" title="属性存取器"></a>属性存取器</h3><p>对于一些不希望被任意修改的属性，可以将其设置为 private<br>直接将其设置为 private 将导致无法再通过对象修改其中的属性<br>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器<br>读取属性的方法叫做 setter 方法，设置属性的方法叫做 getter 方法<br>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    private _name: string;<br><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: string</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>._name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">get</span> <span class="hljs-title">name</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._name;<br>    &#125;<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-title">name</span>(<span class="hljs-params">name: string</span>)&#123;<br>        <span class="hljs-built_in">this</span>._name = name;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>);<br><span class="hljs-comment">// 实际通过调用getter方法读取name属性</span><br><span class="hljs-built_in">console</span>.log(p1.name);<br><span class="hljs-comment">// 实际通过调用setter方法修改name属性</span><br>p1.name = <span class="hljs-string">&#x27;猪八戒&#x27;</span>;<br><br></code></pre></div></td></tr></table></figure><h2 id="泛型（Generic）"><a href="#泛型（Generic）" class="headerlink" title="泛型（Generic）"></a>泛型（Generic）</h2><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定）；<br>此时泛型便能够发挥作用；<br>举个例子：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">function test(arg: any): any&#123;<br>    return arg;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>上例中，test 函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的；<br>由于类型不确定所以参数和返回值均使用了 any，但是很明显这样做是不合适的：<br>首先使用 any 会关闭 TS 的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型；</p><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><h4 id="创建泛型函数"><a href="#创建泛型函数" class="headerlink" title="创建泛型函数"></a>创建泛型函数</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">function test&lt;T&gt;(arg: T): T&#123;<br>    return arg;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>这里的<T>就是泛型；<br>T 是我们给这个类型起的名字（不一定非叫 T），设置泛型后即可在函数中使用 T 来表示该类型；<br>所以泛型其实很好理解，就表示某个类型；<br>那么如何使用上边的函数呢？</p><h4 id="使用泛型函数"><a href="#使用泛型函数" class="headerlink" title="使用泛型函数"></a>使用泛型函数</h4><h5 id="方式一（直接使用）："><a href="#方式一（直接使用）：" class="headerlink" title="方式一（直接使用）："></a>方式一（直接使用）：</h5><p><code>test(10)</code><br>使用时可以直接传递参数使用，类型会由 TS 自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</p><h5 id="方式二（指定类型）："><a href="#方式二（指定类型）：" class="headerlink" title="方式二（指定类型）："></a>方式二（指定类型）：</h5><p><code>test&lt;number&gt;(10)</code><br>也可以在函数后手动指定泛型；</p><h4 id="函数中声明多个泛型"><a href="#函数中声明多个泛型" class="headerlink" title="函数中声明多个泛型"></a>函数中声明多个泛型</h4><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">function test&lt;T, K&gt;(a: T, b: K): K&#123;<br>  return b;<br>&#125;<br><br>test&lt;number, string&gt;(10, &quot;hello&quot;);<br><br></code></pre></div></td></tr></table></figure><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用；</p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>类中同样可以使用泛型：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">class MyClass&lt;T&gt;&#123;<br>  prop: T;<br><br>  constructor(prop: T)&#123;<br>      this.prop = prop;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h3><p>除此之外，也可以对泛型的范围进行约束</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">interface MyInter&#123;<br>  length: number;<br>&#125;<br><br>function test&lt;T extends MyInter&gt;(arg: T): number&#123;<br>  return arg.length;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>使用 T extends MyInter 表示泛型 T 必须是 MyInter 的子类，不一定非要使用接口类和抽象类同样适用；<br>​</p><h3 id="如何使用泛型作为一个具体的类型注解"><a href="#如何使用泛型作为一个具体的类型注解" class="headerlink" title="如何使用泛型作为一个具体的类型注解"></a>如何使用泛型作为一个具体的类型注解</h3><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">//如何使用泛型作为一个具体的类型注解</span><br>function hello&lt;T&gt;(params: T) &#123;<br>  return params;<br>&#125;<br>const func: &lt;T&gt;(param: T) =&gt; T = hello;<br><br></code></pre></div></td></tr></table></figure><h1 id="七、高级用法"><a href="#七、高级用法" class="headerlink" title="七、高级用法"></a>七、高级用法</h1><h2 id="命名空间-namespace"><a href="#命名空间-namespace" class="headerlink" title="命名空间 namespace"></a>命名空间 namespace</h2><p>提供一种类似模块化的编程方式，尽可能少的减少全局变量或者是把一组相关的内容封装到一起，提供统一的暴露接口</p><h3 id="同一个文件内的命名空间"><a href="#同一个文件内的命名空间" class="headerlink" title="同一个文件内的命名空间"></a>同一个文件内的命名空间</h3><p>在 demo1\src\page.ts 文件中，声明<code>namespace</code>，将三个类封装到到一起，最后暴露<code>Page</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">namespace Home &#123;<br>  class Header &#123;<br>    constructor() &#123;<br>      const elem = document.createElement(&#x27;div&#x27;);<br>      elem.innerText = &#x27;this is Header&#x27;;<br>      document.body.appendChild(elem);<br>    &#125;<br>  &#125;<br>  class Content &#123;<br>    constructor() &#123;<br>      const elem = document.createElement(&#x27;div&#x27;);<br>      elem.innerText = &#x27;this is Content&#x27;;<br>      document.body.appendChild(elem);<br>    &#125;<br>  &#125;<br>  class Footer &#123;<br>    constructor() &#123;<br>      const elem = document.createElement(&#x27;div&#x27;);<br>      elem.innerText = &#x27;this is Footer&#x27;;<br>      document.body.appendChild(elem);<br>    &#125;<br>  &#125;<br><br>  export class Page &#123;<br>    constructor() &#123;<br>      new Header();<br>      new Content();<br>      new Footer();<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在 demo1\dist\page.js 中自动生成 js 文件<br>​</p><p>在 demo1\index.html 中，调用 page.js 文件，并且调用<code>Home</code>中的<code>Page</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br><br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script src=&quot;./dist/page.js&quot;&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;script&gt;<br>      new Home.Page();<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><p>最后打开浏览器查看效果，打开控制台输入<code>Home.</code>就能找到 Page<br>​</p><h3 id="多个文件的命名空间互相调用以及子命名空间、接口调用"><a href="#多个文件的命名空间互相调用以及子命名空间、接口调用" class="headerlink" title="多个文件的命名空间互相调用以及子命名空间、接口调用"></a>多个文件的命名空间互相调用以及子命名空间、接口调用</h3><p>先删除原来的 dist 文件<br>在 demo1\tsconfig.json 文件中，更改配置文件<code>&quot;outFile&quot;: &quot;./dist/page.js&quot;</code>将生成的文件统一打包成一个文件，生成的文件不支持<code>commonjs</code>格式，修改<code>&quot;module&quot;: &quot;amd&quot; </code>，改成 amd 格式</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">...<br>&quot;module&quot;: &quot;amd&quot; /* Specify module code generation: &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es2015&#x27;, &#x27;es2020&#x27;, or &#x27;ESNext&#x27;. */,<br>    <span class="hljs-comment">// &quot;lib&quot;: [],                                   /* Specify library files to be included in the compilation. */</span><br>    <span class="hljs-comment">// &quot;allowJs&quot;: true,                             /* Allow javascript files to be compiled. */</span><br>    <span class="hljs-comment">// &quot;checkJs&quot;: true,                             /* Report errors in .js files. */</span><br>    <span class="hljs-comment">// &quot;jsx&quot;: &quot;preserve&quot;,                           /* Specify JSX code generation: &#x27;preserve&#x27;, &#x27;react-native&#x27;, &#x27;react&#x27;, &#x27;react-jsx&#x27; or &#x27;react-jsxdev&#x27;. */</span><br>    <span class="hljs-comment">// &quot;declaration&quot;: true,                         /* Generates corresponding &#x27;.d.ts&#x27; file. */</span><br>    <span class="hljs-comment">// &quot;declarationMap&quot;: true,                      /* Generates a sourcemap for each corresponding &#x27;.d.ts&#x27; file. */</span><br>    <span class="hljs-comment">// &quot;sourceMap&quot;: true,                           /* Generates corresponding &#x27;.map&#x27; file. */</span><br>    &quot;outFile&quot;: &quot;./dist/page.js&quot; /* Concatenate and emit output to single file. */,<br>    &quot;outDir&quot;: &quot;./dist&quot; /* Redirect output structure to the directory. */,<br>    &quot;rootDir&quot;: &quot;./src&quot; /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,<br> ...<br></code></pre></div></td></tr></table></figure><p>在 demo1\src\components.ts 文件中，使用命名空间并暴露原来的三个类</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">namespace Components &#123;<br>  export class Header &#123;<br>    constructor() &#123;<br>      const elem = document.createElement(&#x27;div&#x27;);<br>      elem.innerText = &#x27;this is Header&#x27;;<br>      document.body.appendChild(elem);<br>    &#125;<br>  &#125;<br>  export class Content &#123;<br>    constructor() &#123;<br>      const elem = document.createElement(&#x27;div&#x27;);<br>      elem.innerText = &#x27;this is Content&#x27;;<br>      document.body.appendChild(elem);<br>    &#125;<br>  &#125;<br>  export class Footer &#123;<br>    constructor() &#123;<br>      const elem = document.createElement(&#x27;div&#x27;);<br>      elem.innerText = &#x27;this is Footer&#x27;;<br>      document.body.appendChild(elem);<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在 demo1\src\page.ts 文件中，也使用命名空间，并通过<code>new Components.Header();</code>的方式调用<code>Components</code>的类<br>使用<code>///&lt;reference path=&quot;./components.ts&quot; /&gt;</code>，表明调用文件的关系<br><code>///&lt;reference path=&quot;&quot; /&gt;</code>是固定格式<code>///</code>不能省略</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">///&lt;reference path=&quot;./components.ts&quot; /&gt;</span><br><br>namespace Home &#123;<br>  export class Page &#123;<br>    user: Components.User = &#123;<br>      name: &#x27;dell&#x27;,<br>    &#125;;<br><br>    constructor() &#123;<br>      new Components.Header();<br>      new Components.Content();<br>      new Components.Footer();<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在浏览器控制台输入<code>Components.SubComponents.Test</code>就可以找到子命名空间</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">Components.SubComponents.Test<br>ƒ Test() &#123;<br>            &#125;<br></code></pre></div></td></tr></table></figure><h3 id="使用import导入对应的模块-ES6-语法"><a href="#使用import导入对应的模块-ES6-语法" class="headerlink" title="使用import导入对应的模块 ES6 语法"></a>使用<code>import</code>导入对应的模块 ES6 语法</h3><p>使用 es6 语法通过<code>import</code>导入模块替换<code>///&lt;reference path=&quot;./components.ts&quot; /&gt;</code>​<br>在 demo1\src\page.ts 中，用<code>import</code>以及<code>se6</code>的语法来导入模块，并暴露<code>export default class Page</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">import &#123; Header, Content, Footer &#125; from &#x27;./components&#x27;;<br><br>export default class Page &#123;<br>  constructor() &#123;<br>    new Header();<br>    new Content();<br>    new Footer();<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在 demo1\src\components.ts 中</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">export class Header &#123;<br>  constructor() &#123;<br>    const elem = document.createElement(&#x27;div&#x27;);<br>    elem.innerText = &#x27;this is Header&#x27;;<br>    document.body.appendChild(elem);<br>  &#125;<br>&#125;<br>export class Content &#123;<br>  constructor() &#123;<br>    const elem = document.createElement(&#x27;div&#x27;);<br>    elem.innerText = &#x27;this is Content&#x27;;<br>    document.body.appendChild(elem);<br>  &#125;<br>&#125;<br>export class Footer &#123;<br>  constructor() &#123;<br>    const elem = document.createElement(&#x27;div&#x27;);<br>    elem.innerText = &#x27;this is Footer&#x27;;<br>    document.body.appendChild(elem);<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在 demo1\index.html 中，通过<code>require</code>使用<code>page</code>,其中还要引入 <code> &lt;script src=&quot;[https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js&quot;&gt;&lt;/script&gt;](https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js&quot;&gt;&lt;/script&gt;)</code>,<br>否则会报错</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br><br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js&quot;&gt;&lt;/script&gt;<br>    &lt;script src=&quot;./dist/page.js&quot;&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;script&gt;<br>      require([&#x27;page&#x27;], function (page) &#123;<br>        new page.default();<br>      &#125;);<br>    &lt;/script&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><h3 id="parcel-打包"><a href="#parcel-打包" class="headerlink" title="parcel 打包"></a>parcel 打包</h3><p><code>parcel</code>官方文档<a href="https://github.com/parcel-bundler/parcel">https://github.com/parcel-bundler/parcel</a><br>将浏览器无法运行的 ts 文件编译才可以运行的 js 文件<br>在初始文件中<br>demo2\src\page.ts</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">const teacher: string = &#x27;dell&#x27;;<br>console.log(teacher);<br><br></code></pre></div></td></tr></table></figure><p>demo2\src\index.html</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>  &lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot; /&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script src=&quot;./page.ts&quot;&gt;&lt;/script&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></div></td></tr></table></figure><p>直接使用 <code>&lt;script src=&quot;./page.ts&quot;&gt;&lt;/script&gt;</code>，浏览器会报错，浏览器无法识别 ts 代码</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">Uncaught SyntaxError: Missing initializer in const declaration<br></code></pre></div></td></tr></table></figure><p>所以我们使用<code>parcel</code>，自动类型转换<br>安装 <code>npm install parcel@next -D </code><br>在 demo2\package.json 中更改 <code>&quot;test&quot;: &quot;parcel ./src/index.html&quot;</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;demo2&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;parcel ./src/index.html&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;keywords&quot;</span>: [],<br>  <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>,<br>  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;parcel&quot;</span>: <span class="hljs-string">&quot;^2.0.0-beta.3.1&quot;</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>不要再中文文件夹下运行，会运行失败的<br>最后运行 <code>npm run test</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&gt; demo2@1.0.0 test E:\demo2<br>&gt; parcel ./src/index.html<br><br>ℹ Server running at http://localhost:1234<br>√ Built in 7.52s<br><br></code></pre></div></td></tr></table></figure><p>运行成功，打开地址到浏览器即可预览</p>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何判断 0.1 + 0.2 与 0.3 相等</title>
    <link href="/2021/05/30/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%200.1%20+%200.2%20%E4%B8%8E%200.3%20%E7%9B%B8%E7%AD%89/"/>
    <url>/2021/05/30/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%200.1%20+%200.2%20%E4%B8%8E%200.3%20%E7%9B%B8%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DeviationValue</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.abs(num1 - num2) &lt; <span class="hljs-built_in">Number</span>.EPSILON<br>&#125;<br></code></pre></div></td></tr></table></figure><p>像 ECMAScript 采用的就是双精确度，也就是说，会用 64 位字节来储存一个浮点数。<br>转换为二进制在计算但是小数无限延伸，二进制截取 53 位导致精度丢失。这就是 0.1+0.2 不为 0.3 的原因 Number.EPSILON 的精度是 2^-52，所以只要丢失精度小于 Number.EPSILON 基本可以确认相等。</p><p>作为一道面试题，我觉得重要的是要讲出一点其他人一般不会答出来的深度。像这道题，可以从原理和解决方案两个地方作为答题点，最好在编一个案例。大致讲自己遇到过这个问题，于是很好奇深入研究了一下，发现是浮点数精度导致……原理怎样怎样……然后又看了业界的库的源码，然后怎样怎样解决。<br>关于原理，<a href="https://github.com/mqyqingfeng/Blog/issues/155">JavaScript 深入之浮点数精度</a>来解释，实际回答的时候，我觉得答出来</p><ol><li>非是 ECMAScript 独有</li><li>IEEE754 标准中 64 位的储存格式，比如 11 位存偏移值</li><li>其中涉及的三次精度丢失</li></ol><p>就已经 OK 了。<br>再讲解决方案，这个可以直接搜索到，各种方案都了解一下，比较一下优劣，还可以参考业界的一些库的实现，比如 math.js，不过相关的我并没有看过，后面我会研究一下。<br>如果还有精力的话，可以从加法再拓展讲讲超出安全值的数字的计算问题。<br>所以我觉得一能回答出底层实现，二能回答出多种解决方案的优劣，三能拓展讲出 bignum 的问题，就是一个非常完美的回答了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> === <span class="hljs-number">0.30000000000000004</span><br></code></pre></div></td></tr></table></figure><p>JavaScript 使用 Number 类型表示数字（整数和浮点数），遵循 IEEE 754 标准，通过 64 位来表示一个数字。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1618467913497-02dafff5-534f-4924-88d6-5c35055da92b.png#clientId=u6ac8959b-2b28-4&from=paste&height=288&id=u7dfa5716&margin=%5Bobject%20Object%5D&originHeight=288&originWidth=721&originalType=binary&size=149667&status=done&style=none&taskId=ub81cf025-31a2-4f86-8cba-01874727ab7&width=721"><br>计算机无法直接对十进制的数字进行运算，这是硬件物理特性决定的。这样运算就分成了两个部分：先按照 IEEE 754 转成相应的二进制，然后对阶运算<br>0.1 和 0.2 转换成二进制后会无限循环，但是由于 IEEE 754 尾数位数的限制，需要将后面多余的位截掉。这样在进制之间的转换过程中精度已经损失。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">0.0001100110011001100110011001100110011001100110011001101</span>(<span class="hljs-number">0.1</span>)<br><span class="hljs-number">0.001100110011001100110011001100110011001100110011001101</span>(<span class="hljs-number">0.2</span>)<br></code></pre></div></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h4 id="1-将数字转成整数，计算完成后再转小数"><a href="#1-将数字转成整数，计算完成后再转小数" class="headerlink" title="1.将数字转成整数，计算完成后再转小数"></a>1.将数字转成整数，计算完成后再转小数</h4><h4 id="2-小数点直接计算取精确小数点几位数，最后字符串再转换成浮点数"><a href="#2-小数点直接计算取精确小数点几位数，最后字符串再转换成浮点数" class="headerlink" title="2.小数点直接计算取精确小数点几位数，最后字符串再转换成浮点数"></a>2.小数点直接计算取精确小数点几位数，最后字符串再转换成浮点数</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">;(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>).toFixed(<span class="hljs-number">5</span>) <span class="hljs-comment">// &quot;0.30000&quot;结果是字符串</span><br><br><span class="hljs-built_in">parseFloat</span>((<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>).toFixed(<span class="hljs-number">5</span>)) <span class="hljs-comment">// 0.3 parseFloat() 函数可解析一个字符串，并返回一个浮点数。</span><br></code></pre></div></td></tr></table></figure><h4 id="三方库"><a href="#三方库" class="headerlink" title="三方库"></a>三方库</h4><p>Math.js<br>big.js</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECMAScript</tag>
      
      <tag>IEEE754标准</tag>
      
      <tag>双精确度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是闭包</title>
    <link href="/2021/05/30/%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85/"/>
    <url>/2021/05/30/%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>所谓闭包，就是<strong>能够访问其他函数内部变量的函数</strong>。<br>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把<strong>闭包简单理解成”定义在一个函数内部的函数”<strong>。<br>函数嵌套函数，内部函数就是闭包<br>所以，在本质上，</strong>闭包就是将函数内部和函数外部连接起来的一座桥梁。</strong><br><strong>​</strong></p><p>闭包被调用的时候，外部函数中的的变量是不会被销毁的,<br>闭包内部函数没有执行完成，外部函数不会被销毁</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outerFun</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">innerFun</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a);<br>  &#125;<br>  <span class="hljs-keyword">return</span> innerFun;<br>&#125;<br><span class="hljs-keyword">let</span> fun = outerFun();<br>fun(); <span class="hljs-comment">//10</span><br></code></pre></div></td></tr></table></figure><h3 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h3><ol><li>封装一段代码利用闭包实现模块化功能，<strong>读取/设置一个函数内部的私有变量</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-built_in">module</span> = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>,<br>    b = <span class="hljs-number">20</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sub</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> a - b;<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    add,<br>    sub,<br>  &#125;;<br>&#125;)();<br><span class="hljs-keyword">let</span> result1 = <span class="hljs-built_in">module</span>.add();<br><span class="hljs-keyword">let</span> result2 = <span class="hljs-built_in">module</span>.sub();<br><span class="hljs-built_in">console</span>.log(result1, result2); <span class="hljs-comment">//30,-10,</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>让变量的值始终保持在内存中</li></ol><p>来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> add = <span class="hljs-literal">null</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> n = <span class="hljs-number">999</span>;<br>  add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    n += <span class="hljs-number">1</span>;<br>  &#125;;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(n);<br>  &#125;<br>  <span class="hljs-keyword">return</span> f2;<br>&#125;<br><span class="hljs-keyword">var</span> result = f1();<br>result(); <span class="hljs-comment">// =&gt; 999</span><br>add();<br>result(); <span class="hljs-comment">// =&gt; 1000</span><br></code></pre></div></td></tr></table></figure><p>上面代码的执行结果，第一次为 999，第二次为 1000。这就证明了，函数 f1 中的局部变量一直保存在内存中，并没有在 f1 被调用后被清除。<br>为什么会这样呢？原因就在于 f1 是 f2 的父函数，而 f2 被赋给了一个全局变量，这导致 f2 始终在内存中，而 f2 的存在依赖于 f1，因此 f1 也始终在内存中，不会在调用结束后被垃圾回收机制（garbage collection）回收。<br>这段代码中另一个值得注意的地方，就是”add=function(){n+=1}”这一行，首先在 add 前面没有使用 var 关键字，因此 add 是一个全局变量，而不是局部变量。其次，add 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以 add 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。</p><h3 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h3><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄(IE 的 bug）。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><h4 id="闭包会造成内存泄露？"><a href="#闭包会造成内存泄露？" class="headerlink" title="闭包会造成内存泄露？"></a>闭包会造成内存泄露？</h4><p>错。<br>说这话的人根本不知道什么是内存泄露。内存泄露是指你用不到（访问不到）的变量，依然占居着内存空间，不能被再次利用起来。闭包里面的变量明明就是我们需要的变量（lives），凭什么说是内存泄露？</p><h4 id="这个谣言是如何来的？"><a href="#这个谣言是如何来的？" class="headerlink" title="这个谣言是如何来的？"></a>这个谣言是如何来的？</h4><p>因为 IE。IE 有 bug，IE 在我们使用完闭包之后，依然回收不了闭包里面引用的变量。这是 IE 的问题，不是闭包的问题。参见司徒正美的<a href="https://link.zhihu.com/?target=http://www.cnblogs.com/rubylouvre/p/3345294.html">这篇文章</a>。<br>​</p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br>​</p><h2 id="闭包有哪些坑点？"><a href="#闭包有哪些坑点？" class="headerlink" title="闭包有哪些坑点？"></a>闭包有哪些坑点？</h2><h3 id="坑点-1：-引用的变量可能发生变化"><a href="#坑点-1：-引用的变量可能发生变化" class="headerlink" title="坑点 1： 引用的变量可能发生变化"></a>坑点 1： 引用的变量可能发生变化</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> result = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    result[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.info(i);<br>    &#125;;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看样子 result 每个闭包函数对打印对应数字，1,2,3,4,…,10, 实际不是，因为每个闭包函数访问变量 i 是 outer 执行环境下的变量 i，随着循环的结束，i 已经变成 10 了，所以执行每个闭包函数，结果打印 10， 10， …, 10<br>怎么解决这个问题呢？</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> result = [];<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>； i&lt;<span class="hljs-number">10</span>; i++)&#123;<br>        result.[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   <span class="hljs-built_in">console</span>.info(num);    <span class="hljs-comment">// 此时访问的num，是上层函数执行环境的num，数组有10个函数对象，每个对象的执行环境下的number都不一样</span><br>             &#125;<br>        &#125;(i)<br>     &#125;<br>     <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="坑点-2-this-指向问题"><a href="#坑点-2-this-指向问题" class="headerlink" title="坑点 2: this 指向问题"></a>坑点 2: this 指向问题</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> object = &#123;<br>     name: <span class="hljs-string">&quot;object&quot;</span>，<br>     getName： <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>             <span class="hljs-built_in">console</span>.info(<span class="hljs-built_in">this</span>.name)<br>        &#125;<br>    &#125;<br>&#125;<br>object.getName()()    <span class="hljs-comment">// underfined</span><br><span class="hljs-comment">// 因为里面的闭包函数是在window作用域下执行的，也就是说，this指向windows</span><br></code></pre></div></td></tr></table></figure><h3 id="坑点-3：IE-中内存泄露问题"><a href="#坑点-3：IE-中内存泄露问题" class="headerlink" title="坑点 3：IE 中内存泄露问题"></a>坑点 3：IE 中内存泄露问题</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showId</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);<br>  el.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    aler(el.id); <span class="hljs-comment">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span><br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// 改成下面</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showId</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>);<br>  <span class="hljs-keyword">var</span> id = el.id;<br>  el.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    aler(id); <span class="hljs-comment">// 这样会导致闭包引用外层的el，当执行完showId后，el无法释放</span><br>  &#125;;<br>  el = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 主动释放el</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="闭包有哪些技巧？"><a href="#闭包有哪些技巧？" class="headerlink" title="闭包有哪些技巧？"></a>闭包有哪些技巧？</h2><h3 id="技巧-1：-用闭包解决递归调用问题"><a href="#技巧-1：-用闭包解决递归调用问题" class="headerlink" title="技巧 1： 用闭包解决递归调用问题"></a>技巧 1： 用闭包解决递归调用问题</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">factorial</span>(<span class="hljs-params">num</span>) </span>&#123;<br>   <span class="hljs-keyword">if</span>(num&lt;= <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>&#125;<br>   <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> num * factorial(num-<span class="hljs-number">1</span>)<br>   &#125;<br>&#125;<br><span class="hljs-keyword">var</span> anotherFactorial = factorial<br>factorial = <span class="hljs-literal">null</span><br>anotherFactorial(<span class="hljs-number">4</span>)   <span class="hljs-comment">// 报错 ，因为最好是return num* arguments.callee（num-1），arguments.callee指向当前执行函数，但是在严格模式下不能使用该属性也会报错，所以借助闭包来实现</span><br><br><br><span class="hljs-comment">// 使用闭包实现递归</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newFactorial</span> = (<span class="hljs-params"><span class="hljs-keyword">function</span> f(num)&#123;</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-keyword">if</span>(num&lt;<span class="hljs-number">1</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>&#125;</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="hljs-function"><span class="hljs-params">       <span class="hljs-keyword">return</span> num* f(num-<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-params">    &#125;</span></span><br><span class="hljs-function"><span class="hljs-params">&#125;</span>) //这样就没有问题了，实际上起作用的是闭包函数<span class="hljs-title">f</span>，而不是外面的函数<span class="hljs-title">newFactorial</span></span><br></code></pre></div></td></tr></table></figure><h3 id="技巧-2：用闭包模仿块级作用域"><a href="#技巧-2：用闭包模仿块级作用域" class="headerlink" title="技巧 2：用闭包模仿块级作用域"></a>技巧 2：用闭包模仿块级作用域</h3><p>es6 没出来之前，用 var 定义变量存在变量提升问题，eg:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  <span class="hljs-built_in">console</span>.info(i);<br>&#125;<br>alert(i)(<br>  <span class="hljs-comment">// 变量提升，弹出10</span><br><br>  <span class="hljs-comment">//为了避免i的提升可以这样做</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>      <span class="hljs-built_in">console</span>.info(i);<br>    &#125;<br>  &#125;<br>)();<br>alert(i); <span class="hljs-comment">// underfined   因为i随着闭包函数的退出，执行环境销毁，变量回收</span><br></code></pre></div></td></tr></table></figure><p>当然现在大多用 es6 的 let 和 const 定义。<br>​</p><h3 id="两个思考题"><a href="#两个思考题" class="headerlink" title="两个思考题"></a>两个思考题</h3><p>如果能理解这两个思考题，应该就算理解闭包的运行机制了。<br>思考题 1：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;The Window&#x27;</span>;<br><span class="hljs-keyword">var</span> object = &#123;<br>  name: <span class="hljs-string">&#x27;My Object&#x27;</span>,<br>  showName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;;<br>  &#125;,<br>&#125;;<br><span class="hljs-built_in">console</span>.log(object.showName()());<br></code></pre></div></td></tr></table></figure><p>思考题 2：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;The Window&#x27;</span>;<br><span class="hljs-keyword">var</span> object = &#123;<br>  name: <span class="hljs-string">&#x27;My Object&#x27;</span>,<br>  showName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> _this.name;<br>    &#125;;<br>  &#125;,<br>&#125;;<br><span class="hljs-built_in">console</span>.log(object.showName()());<br></code></pre></div></td></tr></table></figure><p>思考题答案</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">1.</span> The Window<br><span class="hljs-number">2.</span> My <span class="hljs-built_in">Object</span><br></code></pre></div></td></tr></table></figure><h3 id="关于闭包，面试必问的问题"><a href="#关于闭包，面试必问的问题" class="headerlink" title="关于闭包，面试必问的问题"></a>关于闭包，面试必问的问题</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  data[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>  &#125;;<br>&#125;<br>data[<span class="hljs-number">0</span>]();<br>data[<span class="hljs-number">1</span>]();<br>data[<span class="hljs-number">2</span>]();<br></code></pre></div></td></tr></table></figure><p>对于上面的输出结果，很显然都是 3。至于为什么都是 3，可以这样来理解：循环结束后，上面的代码等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">data[<span class="hljs-number">0</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(i);<br>&#125;;<br>data[<span class="hljs-number">1</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(i);<br>&#125;;<br>data[<span class="hljs-number">2</span>] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(i);<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>此时 i 的值已经为 3 ，所以当 data[0]、data[1]、data[2] 中任意一个执行时输出结果都为 3。<br>用闭包解决上面的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> data = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>) </span>&#123;<br>    data[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(i);<br>    &#125;;<br>  &#125;)(i);<br><br>  <span class="hljs-comment">// 或者写成下面这种形式</span><br>  <span class="hljs-comment">// data[i] = (function(i) &#123;</span><br>  <span class="hljs-comment">//   return function() &#123;</span><br>  <span class="hljs-comment">//     console.log(i);</span><br>  <span class="hljs-comment">//   &#125;;</span><br>  <span class="hljs-comment">// &#125;)(i);</span><br>&#125;<br><br>data[<span class="hljs-number">0</span>](); <span class="hljs-comment">// =&gt; 0</span><br>data[<span class="hljs-number">1</span>](); <span class="hljs-comment">// =&gt; 1</span><br>data[<span class="hljs-number">2</span>](); <span class="hljs-comment">// =&gt; 2</span><br></code></pre></div></td></tr></table></figure><p>当然更简单的方法就是使用 let。</p><h1 id="JavaScript-闭包-Web-前端工程师面试题讲解"><a href="#JavaScript-闭包-Web-前端工程师面试题讲解" class="headerlink" title="JavaScript 闭包 - Web 前端工程师面试题讲解"></a><a href="https://www.bilibili.com/video/BV1iE411q7Qd">JavaScript 闭包 - Web 前端工程师面试题讲解</a></h1>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>闭包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>var与let、const的区别</title>
    <link href="/2021/05/27/var%E4%B8%8Elet%E3%80%81const%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/05/27/var%E4%B8%8Elet%E3%80%81const%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>什么是变量提升</strong>？<br>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。<br>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。</p></blockquote><h1 id="一、var-声明变量存在变量提升，let-和-const-不存在变量提升"><a href="#一、var-声明变量存在变量提升，let-和-const-不存在变量提升" class="headerlink" title="一、var 声明变量存在变量提升，let 和 const 不存在变量提升"></a>一、var 声明变量存在变量提升，let 和 const 不存在变量提升</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// undefined  ===&gt;  a已声明还没赋值，默认得到undefined值</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">console</span>.log(b); <span class="hljs-comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(c); <span class="hljs-comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span><br><span class="hljs-keyword">const</span> c = <span class="hljs-number">10</span>;<br></code></pre></div></td></tr></table></figure><h2 id="1-const-定义的常量不可以修改，而且必须初始化。"><a href="#1-const-定义的常量不可以修改，而且必须初始化。" class="headerlink" title="1.const 定义的常量不可以修改，而且必须初始化。"></a>1.const 定义的常量不可以修改，而且必须初始化。</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> b = <span class="hljs-number">2</span>; <span class="hljs-comment">//正确</span><br><span class="hljs-comment">// const b;//错误，必须初始化</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数外const定义b：&#x27;</span> + b); <span class="hljs-comment">//有输出值</span><br><span class="hljs-comment">// b = 5;</span><br><span class="hljs-comment">// console.log(&#x27;函数外修改const定义b：&#x27; + b);//无法输出</span><br></code></pre></div></td></tr></table></figure><h2 id="2-var-定义的变量可以修改，如果不初始化会输出-undefined，不会报错。"><a href="#2-var-定义的变量可以修改，如果不初始化会输出-undefined，不会报错。" class="headerlink" title="2.var 定义的变量可以修改，如果不初始化会输出 undefined，不会报错。"></a>2.var 定义的变量可以修改，如果不初始化会输出 undefined，不会报错。</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// var a;//不会报错</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数外var定义a：&#x27;</span> + a); <span class="hljs-comment">//可以输出a=1</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>) </span>&#123;<br>  a = <span class="hljs-number">4</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数内var定义a：&#x27;</span> + a); <span class="hljs-comment">//可以输出a=4</span><br>&#125;<br>change();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数调用后var定义a为函数内部修改值：&#x27;</span> + a); <span class="hljs-comment">//可以输出a=4</span><br></code></pre></div></td></tr></table></figure><h2 id="3-let-是块级作用域，函数内部使用-let-定义后，对函数外部无影响。"><a href="#3-let-是块级作用域，函数内部使用-let-定义后，对函数外部无影响。" class="headerlink" title="3.let 是块级作用域，函数内部使用 let 定义后，对函数外部无影响。"></a>3.let 是块级作用域，函数内部使用 let 定义后，对函数外部无影响。</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> c = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数外let定义c：&#x27;</span> + c); <span class="hljs-comment">//输出c=3</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> c = <span class="hljs-number">6</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数内let定义c：&#x27;</span> + c); <span class="hljs-comment">//输出c=6</span><br>&#125;<br>change();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数调用后let定义c不受函数内部定义影响：&#x27;</span> + c); <span class="hljs-comment">//输出c=3</span><br></code></pre></div></td></tr></table></figure><p>再来看这段代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//var a</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(a + <span class="hljs-string">&#x27; now&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  &#125;<br>&#125;<br><br>fn(); <span class="hljs-comment">// a -&gt; undefined</span><br></code></pre></div></td></tr></table></figure><p>我们发现不执行的代码也会影响会执行的代码，因为 var a 会提升到 if 语句的前面</p><blockquote><p>undefined 可以翻译为不明确，not defined 可以翻译为未定义</p></blockquote><p>在 Java 中变量的分为全局变量（成员变量）或者局部变量，在方法体中定义的变量都是局部变量，否则是全局变量（即在方法体外，在类中定义的变量）<br>在 JavaScript 中，在方法体外外用 var 定义的变量其它方法可以共享，在方法中用 var 定义的变量只有该方法内生效。<br>​</p><p>var 定义变量没有块级作用域的概念，定义变量会被提升到全局和全局变量没有什么区别<br>let 定义变量有块级作用域，外部无法访问<br>建议弃用 var，多使用 let 定义变量</p><h1 id="二、let、const-都是块级局部变量"><a href="#二、let、const-都是块级局部变量" class="headerlink" title="二、let、const 都是块级局部变量"></a>二、let、const 都是块级局部变量</h1><p>let（定义变量，有块级作用域）<br>const（定义常量，不能被修改）</p><p>顾名思义，就是只在当前代码块起作用</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure><p>const 的特性和 let 完全一样，不同的只是</p><h2 id="1）const-声明时候必须赋值"><a href="#1）const-声明时候必须赋值" class="headerlink" title="1）const 声明时候必须赋值"></a>1）const 声明时候必须赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a<br></code></pre></div></td></tr></table></figure><p>编译器报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">SyntaxError</span>: Missing initializer <span class="hljs-keyword">in</span> <span class="hljs-keyword">const</span> declaration<br></code></pre></div></td></tr></table></figure><h2 id="2）const-只能进行一次赋值，即声明后不能再修改"><a href="#2）const-只能进行一次赋值，即声明后不能再修改" class="headerlink" title="2）const 只能进行一次赋值，即声明后不能再修改"></a>2）const 只能进行一次赋值，即声明后不能再修改</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a=<span class="hljs-number">1</span> a=<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>编译器报错<br><img src="https://i.loli.net/2021/07/02/yBZjWP2qQ6sM7uO.png#id=FOKTO&originHeight=148&originWidth=570&originalType=binary&ratio=1&status=done&style=none"><br>控制台报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">TypeError</span>: Assignment to constant variable.<br></code></pre></div></td></tr></table></figure><h2 id="3）const-如果声明的是复合类型数据-主要是对象和数组-，可以修改其属性"><a href="#3）const-如果声明的是复合类型数据-主要是对象和数组-，可以修改其属性" class="headerlink" title="3）const 如果声明的是复合类型数据(主要是对象和数组)，可以修改其属性"></a>3）const 如果声明的是复合类型数据(主要是对象和数组)，可以修改其属性</h2><p>const 声明一个只读的常量。一旦声明，常量的值就不能改变 。const 实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。<br>对于简单类型的数据（数值、字符串、布尔值〉而言，值就保存在变量指向的内存地址中，因此等同于常量。<br>但对于复合类型的数据（主要是对象和数组）而言，变量指向的内存地址保存的只是一个指针， const 只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，这完全不能控制 。 因此，将一个对象声明为常量时必须非常小心。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>  age: <span class="hljs-number">2</span>,<br>&#125;;<br>obj.name = <span class="hljs-string">&#x27;小红&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(obj);<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/02/TrzEbxCdo3Ncj1n.png#id=YvJnH&originHeight=216&originWidth=390&originalType=binary&ratio=1&status=done&style=none"></p><h1 id="三、同一作用域下-let-和-const-不能声明同名变量，而-var-可以"><a href="#三、同一作用域下-let-和-const-不能声明同名变量，而-var-可以" class="headerlink" title="三、同一作用域下 let 和 const 不能声明同名变量，而 var 可以"></a>三、同一作用域下 let 和 const 不能声明同名变量，而 var 可以</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><p>控制台报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Uncaught <span class="hljs-built_in">SyntaxError</span>: Identifier <span class="hljs-string">&#x27;a&#x27;</span> has already been declared<br></code></pre></div></td></tr></table></figure><h2 id="let-和-const-的区别："><a href="#let-和-const-的区别：" class="headerlink" title="let 和 const 的区别："></a>let 和 const 的区别：</h2><p><strong>相似：</strong></p><ul><li>都是块级作用域</li><li>都不能和它所在作用域内的其他变量或函数拥有相同的名称</li></ul><p><strong>区别：</strong></p><ul><li>const 声明的常量必须初始化，而 let 声明的变量不用。</li><li>const 定义常量的值不能通过再赋值修改，也不能再次声明。</li><li>而 let 定义的变量值可以修改。</li></ul><h3 id="什么时候用-let，什么时候用-const"><a href="#什么时候用-let，什么时候用-const" class="headerlink" title="什么时候用 let，什么时候用 const"></a>什么时候用 let，什么时候用 const</h3><p>定义函数、对象和不变的值用 const</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fun = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br><span class="hljs-keyword">const</span> obj = &#123;&#125;;<br><span class="hljs-keyword">const</span> PI = <span class="hljs-number">3.24</span>;<br></code></pre></div></td></tr></table></figure><p>计算或者需要修改的值用 let</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num1 = <span class="hljs-number">1</span>,<br>  num2 = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(num1 + num2);<br></code></pre></div></td></tr></table></figure><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p>简单的 Demo</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面的代码我们知道打印结果是 0, 1, 2, 3, 4，但是你们有没有想过这个变量 i 的作用域到底是什么呢？<br>有人说在这个 for 循环里呀，但是我这里想说的是这个 i 作用域是在括号()里。正常的代码是这样的：<br>​</p><p>1.首先这个变量_i 的作用域是在()里才有效的，循环体里是不能访问到_i 的 2.每次循环的时候创建一个 i 变量，将括号里的_i 赋值到变量 i 上 3.最后 i++后再将变量 i 的值赋值回_i 上<br>​</p><p>当然这个过程是很复杂的，可以用下面代码理解，但是 JS 的实现机制是很复杂的，这里想要说明的 let i 的作用域有时候并不是我们所理解的那样的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> _i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-keyword">let</span> i = _i;<br>  <span class="hljs-built_in">console</span>.log(i);<br>  <span class="hljs-comment">// i++ 先做</span><br>  _i = i;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h1><p>ES6 新增了 let 命令，用于声明变量。其用法类似于 var ，但是所声明的变量只在 let 命令所在的代码块内有效。</p><ul><li>for 循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>  <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">abc;<br>abc;<br>abc;<br></code></pre></div></td></tr></table></figure><p>正确运行以上代码将输出 3 次 abc 。这表明函数内部的变量 i 与循环变量土不在同一个作用域，而是有各自单独的作用域。<br>不存在变量提升</p><ul><li>var 命令会发生“变量提升”现象， 即变量可以在声明之前使用，值为 undefined。这种现象多少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</li><li>为了纠正这种现象， let 命令改变了语法行为，它所声明的变量一定要在声明后使用，否则便会报错 。</li></ul><p>暂时性死区</p><ul><li>暂时性死区的本质就是，只要进入当前作用域，所要使用的变量就己经存在，但是不可获取，只有等到声明变量的那一行代码出现 ， 才可以获取和使用该变量。</li></ul><p>不允许重复声明</p><ul><li>let 不允许在相同作用域内重复声明同一个变量。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>var</tag>
      
      <tag>let</tag>
      
      <tag>const</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON.stringify()与JSON.parse()的区别</title>
    <link href="/2021/05/15/JSON.stringify()%E4%B8%8EJSON.parse()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/05/15/JSON.stringify()%E4%B8%8EJSON.parse()%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、JSON-stringify-与JSON-parse-的区别"><a href="#一、JSON-stringify-与JSON-parse-的区别" class="headerlink" title="一、JSON.stringify()与JSON.parse()的区别"></a>一、JSON.stringify()与JSON.parse()的区别</h1><p>最近做项目，发现JSON.stringify()使用场景真的挺多，我们都知道<strong>JSON.stringify()的作用是将 JavaScript 对象转换为 JSON 字符串，</strong>而<strong>JSON.parse()可以将JSON字符串转为一个对象。</strong><br><strong>简单点说，它们的作用是相对的，我用JSON.stringify()将对象a变成了字符串c，那么我就可以用JSON.parse()将字符串c还原成对象a。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">JSON</span>.stringify(arr);<span class="hljs-comment">//&#x27;[1,2,3]&#x27;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">JSON</span>.stringify(arr);<span class="hljs-comment">//string</span><br><br><span class="hljs-keyword">let</span> string = <span class="hljs-string">&#x27;[1,2,3]&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(string))<span class="hljs-comment">//[1,2,3]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">JSON</span>.parse(string))<span class="hljs-comment">//object</span><br></code></pre></div></td></tr></table></figure><p>在使用<strong>JSON.parse()<strong>需要注意一点，由于此方法是将JSON字符串转换成对象，所以</strong>你的字符串必须符合JSON格式，即键值都必须使用双引号包裹</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-string">&#x27;[&quot;1&quot;,&quot;2&quot;]&#x27;</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-string">&quot;[&#x27;1&#x27;,&#x27;2&#x27;]&quot;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(a));<span class="hljs-comment">// Array [1,2]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(b));<span class="hljs-comment">// 报错</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621086076297-88d56312-1e17-40be-a6cb-57bd652f520c.png#clientId=uebe074b5-5cc7-4&from=paste&height=195&id=u31fe0495&margin=%5Bobject%20Object%5D&originHeight=195&originWidth=410&originalType=url&status=done&style=none&taskId=u362845fd-b7bb-499b-83ca-f62bcd533b3&width=410"><br>上面例子中变量b就无法转换，因为格式不符合，那么知道了这些知识点，我们能用来做什么呢？</p><h1 id="二、JSON-stringify-的几种妙用"><a href="#二、JSON-stringify-的几种妙用" class="headerlink" title="二、JSON.stringify()的几种妙用"></a>二、JSON.stringify()的几种妙用</h1><h2 id="1-判断数组是否包含某对象，或者判断对象是否相等。"><a href="#1-判断数组是否包含某对象，或者判断对象是否相等。" class="headerlink" title="1.判断数组是否包含某对象，或者判断对象是否相等。"></a>1.判断数组是否包含某对象，或者判断对象是否相等。</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//判断数组是否包含某对象</span><br><span class="hljs-keyword">let</span> data = [<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;echo&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;听风是风&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;天子笑&#x27;</span>&#125;,<br>    ],<br>    val = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;天子笑&#x27;</span>&#125;;<br><span class="hljs-built_in">JSON</span>.stringify(data).indexOf(<span class="hljs-built_in">JSON</span>.stringify(val)) !== -<span class="hljs-number">1</span>;<span class="hljs-comment">//true</span><br><br><span class="hljs-comment">//判断两数组/对象是否相等</span><br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>    b = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">JSON</span>.stringify(a) === <span class="hljs-built_in">JSON</span>.stringify(b);<span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><h2 id="2-让localStorage-sessionStorage可以存储对象。"><a href="#2-让localStorage-sessionStorage可以存储对象。" class="headerlink" title="2.让localStorage/sessionStorage可以存储对象。"></a>2.让localStorage/sessionStorage可以存储对象。</h2><p>localStorage/sessionStorage默认只能存储字符串，而实际开发中，我们往往需要存储的数据多为对象类型，那么这里我们就可以在存储时利用json.stringify()将对象转为字符串，而在取缓存时，只需配合json.parse()转回对象即可。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//存</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setLocalStorage</span>(<span class="hljs-params">key,val</span>)</span>&#123;<br>    <span class="hljs-built_in">window</span>.localStorage.setItem(key,<span class="hljs-built_in">JSON</span>.stringify(val));<br>&#125;;<br><span class="hljs-comment">//取</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLocalStorage</span>(<span class="hljs-params">key</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> val = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">window</span>.localStorage.getItem(key));<br>    <span class="hljs-keyword">return</span> val;<br>&#125;;<br><span class="hljs-comment">//测试</span><br>setLocalStorage(<span class="hljs-string">&#x27;demo&#x27;</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]);<br><span class="hljs-keyword">let</span>  a = getLocalStorage(<span class="hljs-string">&#x27;demo&#x27;</span>);<span class="hljs-comment">//[1,2,3]</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621086077695-85e57da6-da42-4218-aad3-b930f22150e8.png#clientId=uebe074b5-5cc7-4&from=paste&height=131&id=u0d154632&margin=%5Bobject%20Object%5D&originHeight=131&originWidth=480&originalType=url&status=done&style=none&taskId=u2e90027d-347b-4305-95e8-f78e62052f2&width=480"></p><h2 id="3-实现对象深拷贝"><a href="#3-实现对象深拷贝" class="headerlink" title="3.实现对象深拷贝"></a>3.实现对象深拷贝</h2><p>实际开发中，如果怕影响原数据，我们常深拷贝出一份数据做任意操作，其实使用JSON.stringify()与JSON.parse()来实现深拷贝是很不错的选择。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//深拷贝</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> _data = <span class="hljs-built_in">JSON</span>.stringify(data),<br>        dataClone = <span class="hljs-built_in">JSON</span>.parse(_data);<br>    <span class="hljs-keyword">return</span> dataClone;<br>&#125;;<br><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>    _arr = deepClone(arr);<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(arr,_arr)<span class="hljs-comment">//[2,2,3]  [1,2,3]</span><br></code></pre></div></td></tr></table></figure><h1 id="三、JSON-stringify-与toString-的区别"><a href="#三、JSON-stringify-与toString-的区别" class="headerlink" title="三、JSON.stringify()与toString()的区别"></a>三、JSON.stringify()与toString()的区别</h1><p>这两者虽然都可以将目标值转为字符串，但本质上还是有区别的，比如</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">JSON</span>.stringify(arr);<span class="hljs-comment">//&#x27;[1,2,3]&#x27;</span><br>arr.toString();<span class="hljs-comment">//1,2,3</span><br></code></pre></div></td></tr></table></figure><p>其次，JSON.stringify()的受众更多是对象，而toString()虽然可以将数组转为字符串，但并不能对{name:’天子笑’}这类对象实现你想要的操作，它的受众更多是数字。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JSON</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>antd_pro_shop_admin项目笔记</title>
    <link href="/2021/05/15/antd-pro-shop-admin%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/05/15/antd-pro-shop-admin%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、项目搭建"><a href="#一、项目搭建" class="headerlink" title="一、项目搭建"></a>一、项目搭建</h1><h2 id="1-1-安装脚手架"><a href="#1-1-安装脚手架" class="headerlink" title="1.1 安装脚手架"></a>1.1 安装脚手架</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn create umi<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620995323162-68a0b083-ece6-4b2b-8b0d-36daa8098291.png#clientId=u4de613e7-ed76-4&from=paste&height=263&id=u3ea1dff9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=263&originWidth=565&originalType=binary&size=24386&status=done&style=none&taskId=u97744768-50fe-4132-8afa-89f689a6231&width=565" alt="image.png"></p><h2 id="1-2-选择版本"><a href="#1-2-选择版本" class="headerlink" title="1.2 选择版本"></a>1.2 选择版本</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620995413718-5bc82348-871a-4de9-b66f-f3ab981a1498.png#clientId=u4de613e7-ed76-4&from=paste&height=309&id=u4b5f0a9a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=309&originWidth=558&originalType=binary&size=31989&status=done&style=none&taskId=uc07da9f4-9a9d-4fcb-8c84-6142c7b5aad&width=558" alt="image.png"></p><h2 id="1-3-安装依赖"><a href="#1-3-安装依赖" class="headerlink" title="1.3 安装依赖"></a>1.3 安装依赖</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn<br></code></pre></div></td></tr></table></figure><h2 id="1-4-启动项目"><a href="#1-4-启动项目" class="headerlink" title="1.4 启动项目"></a>1.4 启动项目</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm start<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620998686519-b310d168-8f77-4f4f-a430-5930dc03d3a7.png#clientId=u4de613e7-ed76-4&from=paste&height=272&id=u81cb4066&margin=%5Bobject%20Object%5D&name=image.png&originHeight=272&originWidth=630&originalType=binary&size=21916&status=done&style=none&taskId=u1d860442-c951-4c0e-a38f-f299987a587&width=630" alt="image.png"></p><h2 id="1-5-点击链接进入浏览器"><a href="#1-5-点击链接进入浏览器" class="headerlink" title="1.5 点击链接进入浏览器"></a>1.5 点击链接进入浏览器</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620998751638-14b8d4f9-4999-4960-b0d0-c44de6b60ede.png#clientId=u4de613e7-ed76-4&from=paste&height=978&id=udceab73e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=978&originWidth=1916&originalType=binary&size=110241&status=done&style=none&taskId=u4e2ee6a5-a808-41f2-b751-f333c11a6cd&width=1916" alt="image.png"></p><h1 id="二、初始化项目"><a href="#二、初始化项目" class="headerlink" title="二、初始化项目"></a>二、初始化项目</h1><h2 id="项目接口文档"><a href="#项目接口文档" class="headerlink" title="项目接口文档"></a>项目接口文档</h2><p><a href="https://www.showdoc.com.cn/1207745568269674?page_id=6094279351627422">https://www.showdoc.com.cn/1207745568269674?page_id=6094279351627422</a></p><h2 id="2-1-删掉多余的文件"><a href="#2-1-删掉多余的文件" class="headerlink" title="2.1 删掉多余的文件"></a>2.1 删掉多余的文件</h2><p><strong>在编译器中打开项目</strong><br>删掉\src\pages 中<code>TableList</code>文件夹，<code>Admin.jsx</code>、<code>Welcome.jsx</code>、<code>Welcome.less</code>文件<br>删掉\mock 中<code>listTableList.js</code>文件<br>删掉\config\routes.js 文件夹中，删掉对应不用的路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    component: <span class="hljs-string">&#x27;../layouts/BlankLayout&#x27;</span>,<br>    routes: [<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>        component: <span class="hljs-string">&#x27;../layouts/UserLayout&#x27;</span>,<br>        routes: [<br>          &#123;<br>            name: <span class="hljs-string">&#x27;login&#x27;</span>,<br>            path: <span class="hljs-string">&#x27;/user/login&#x27;</span>,<br>            component: <span class="hljs-string">&#x27;./User/login&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        component: <span class="hljs-string">&#x27;../layouts/SecurityLayout&#x27;</span>,<br>        routes: [<br>          &#123;<br>            path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            component: <span class="hljs-string">&#x27;../layouts/BasicLayout&#x27;</span>,<br>            routes: [<br>              &#123;<br>                path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>              &#125;,<br>              &#123;<br>                component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>              &#125;,<br>            ],<br>          &#125;,<br>          &#123;<br>            component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>  &#125;,<br>]<br></code></pre></div></td></tr></table></figure><h2 id="2-2-更改-Logo-和底部文字替换"><a href="#2-2-更改-Logo-和底部文字替换" class="headerlink" title="2.2 更改 Logo 和底部文字替换"></a>2.2 更改 Logo 和底部文字替换</h2><p>在\src\layouts\BasicLayout.jsx 文件中找到<code>defaultFooterDom</code>更改默认文字，将<code>links=&#123;null&#125;</code>设置为空，不能删掉<code>links=&#123;&#125;</code>否则会编程默认的样子</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> defaultFooterDom = (<br>  &lt;DefaultFooter copyright=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear()&#125;</span> 融职商城`</span>&#125; links=&#123;<span class="hljs-literal">null</span>&#125; /&gt;<br>)<br></code></pre></div></td></tr></table></figure><p>底部文字就更改好了<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621001473729-5a1cd8ff-7b29-4801-9053-bc651b9499a0.png#clientId=u4de613e7-ed76-4&from=paste&height=207&id=ude7af6a7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=207&originWidth=1915&originalType=binary&size=11957&status=done&style=none&taskId=u84b1c93c-25f7-437f-b3f1-823df51c5d8&width=1915" alt="image.png"><br>在\Econfig\defaultSettings.js 中更改<code>title</code>，这里的<code>title</code>是更改的网页标题和左上角文字<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621001434658-83fbb50f-5b07-405c-942d-413ee87ef3bc.png#clientId=u4de613e7-ed76-4&from=paste&height=248&id=uc379e464&margin=%5Bobject%20Object%5D&name=image.png&originHeight=248&originWidth=316&originalType=binary&size=16228&status=done&style=none&taskId=uc8c8a1c8-d9e2-45a0-ade1-e3e12e0b7de&width=316" alt="image.png"><br>在\src\assets 文件夹中提换掉 logo，并在用到的地方重新导入 logo 文件，否则会报错</p><h2 id="2-3-更改刷新时的-logo"><a href="#2-3-更改刷新时的-logo" class="headerlink" title="2.3 更改刷新时的 logo"></a>2.3 更改刷新时的 logo</h2><p>打开控制台，到网络请求，选择所有请求，快速刷新页面会发现这个图标<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621002688764-274ce7d8-ece1-47b3-bed8-a87f1e750e06.png#clientId=u4de613e7-ed76-4&from=paste&height=752&id=u8de5d96b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=752&originWidth=1878&originalType=binary&size=113643&status=done&style=none&taskId=u4e53df56-d01a-464d-94cd-044acc21097&width=1878" alt="image.png"><br>将自己的 logo.png 文件复制到\public 文件下<br>然后在\src\pages\document.ejs 中更改自己的 logo</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div<br>  style=<span class="hljs-string">&quot;</span><br><span class="hljs-string">          display: flex;</span><br><span class="hljs-string">          flex-direction: column;</span><br><span class="hljs-string">          align-items: center;</span><br><span class="hljs-string">          justify-content: center;</span><br><span class="hljs-string">          height: 100%;</span><br><span class="hljs-string">          min-height: 420px;</span><br><span class="hljs-string">        &quot;</span>&gt;<br>  &lt;img src=<span class="hljs-string">&quot;&lt;%= context.config.publicPath +&#x27;logo.png&#x27;%&gt;&quot;</span> alt=<span class="hljs-string">&quot;logo&quot;</span> width=<span class="hljs-string">&quot;256&quot;</span> /&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;page-loading-warp&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin ant-spin-lg ant-spin-spinning&quot;</span>&gt;<br>      &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot ant-spin-dot-spin&quot;</span>&gt;<br>        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot-item&quot;</span>&gt;&lt;/i&gt;<br>        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot-item&quot;</span>&gt;&lt;/i&gt;<br>        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot-item&quot;</span>&gt;&lt;/i&gt;<br>        &lt;i <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-spin-dot-item&quot;</span>&gt;&lt;/i&gt;<br>      &lt;/span&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>  &lt;div style=<span class="hljs-string">&quot;display: flex; align-items: center; justify-content: center&quot;</span>&gt;<br>    &lt;img src=<span class="hljs-string">&quot;&lt;%= context.config.publicPath +&#x27;logo.png&#x27;%&gt;&quot;</span> width=<span class="hljs-string">&quot;32&quot;</span> style=<span class="hljs-string">&quot;margin-right: 8px&quot;</span> /&gt;<br>    融职商城<br>  &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><h2 id="2-4-更改网页标题的-ico"><a href="#2-4-更改网页标题的-ico" class="headerlink" title="2.4 更改网页标题的 ico"></a>2.4 更改网页标题的 ico</h2><h3 id="2-4-1-将图片格式改成-ioc"><a href="#2-4-1-将图片格式改成-ioc" class="headerlink" title="2.4.1 将图片格式改成 ioc"></a>2.4.1 将图片格式改成 ioc</h3><ol><li>第一步我们用<strong>画图</strong>的方式打开原始图片，可以看到这里是一张 png 格式的原始图片，如下图所示：</li><li><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621004331012-681faf70-73fe-4eae-919d-b805ed024698.png#clientId=u4de613e7-ed76-4&from=paste&height=856&id=u6fcca602&margin=%5Bobject%20Object%5D&name=image.png&originHeight=856&originWidth=1520&originalType=binary&size=97261&status=done&style=none&taskId=udb509057-727f-40e9-a3f1-86c55d349a0&width=1520" alt="image.png"></li><li>第二步点击画图中文件图标，选择“另存为-&gt;BMP 图片”</li><li>第四步我们将 BMP 格式的后缀名改为 ico 格式的，弹出框之后，点击确定，可以看到已经成功更改为 ico 格式的图片，需要注意的是有时候直接改后缀名会出现图片默认是白色，点击进去时正常的，不影响程序使用</li></ol><h3 id="2-4-2-更改网页默认的-ico"><a href="#2-4-2-更改网页默认的-ico" class="headerlink" title="2.4.2 更改网页默认的 ico"></a>2.4.2 更改网页默认的 ico</h3><p>在\public 中将自己的 ico 提换掉 favicon.ico</p><h2 id="2-5-删除登录页多余的东西"><a href="#2-5-删除登录页多余的东西" class="headerlink" title="2.5 删除登录页多余的东西"></a>2.5 删除登录页多余的东西</h2><p>在\src\pages\User\login\index.jsx 文件中精简代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; LockOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Alert, Tabs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useIntl, connect, FormattedMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">const</span> LoginMessage = <span class="hljs-function">(<span class="hljs-params">&#123; content &#125;</span>) =&gt;</span> (<br>  &lt;Alert<br>    style=&#123;&#123;<br>      marginBottom: <span class="hljs-number">24</span>,<br>    &#125;&#125;<br>    message=&#123;content&#125;<br>    type=<span class="hljs-string">&quot;error&quot;</span><br>    showIcon<br>  /&gt;<br>)<br><br><span class="hljs-keyword">const</span> Login = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; userLogin = &#123;&#125;, submitting &#125; = props<br>  <span class="hljs-keyword">const</span> &#123; status, <span class="hljs-attr">type</span>: loginType &#125; = userLogin<br>  <span class="hljs-keyword">const</span> [type, setType] = useState(<span class="hljs-string">&#x27;account&#x27;</span>)<br>  <span class="hljs-keyword">const</span> intl = useIntl()<br><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; dispatch &#125; = props<br>    dispatch(&#123;<br>      type: <span class="hljs-string">&#x27;login/login&#x27;</span>,<br>      payload: &#123; ...values, type &#125;,<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=&#123;styles.main&#125;&gt;<br>      &lt;ProForm<br>        initialValues=&#123;&#123;<br>          autoLogin: <span class="hljs-literal">true</span>,<br>        &#125;&#125;<br>        submitter=&#123;&#123;<br>          render: <span class="hljs-function">(<span class="hljs-params">_, dom</span>) =&gt;</span> dom.pop(),<br>          submitButtonProps: &#123;<br>            loading: submitting,<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            style: &#123;<br>              width: <span class="hljs-string">&#x27;100%&#x27;</span>,<br>            &#125;,<br>          &#125;,<br>        &#125;&#125;<br>        onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>          handleSubmit(values)<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve()<br>        &#125;&#125;&gt;<br>        &lt;Tabs activeKey=&#123;type&#125; onChange=&#123;setType&#125;&gt;<br>          &lt;Tabs.TabPane<br>            key=<span class="hljs-string">&quot;account&quot;</span><br>            tab=&#123;intl.formatMessage(&#123;<br>              id: <span class="hljs-string">&#x27;pages.login.accountLogin.tab&#x27;</span>,<br>              defaultMessage: <span class="hljs-string">&#x27;Account password login&#x27;</span>,<br>            &#125;)&#125;<br>          /&gt;<br>        &lt;/Tabs&gt;<br><br>        &#123;status === <span class="hljs-string">&#x27;error&#x27;</span> &amp;&amp; !submitting &amp;&amp; (<br>          &lt;LoginMessage<br>            content=&#123;intl.formatMessage(&#123;<br>              id: <span class="hljs-string">&#x27;pages.login.accountLogin.errorMessage&#x27;</span>,<br>              defaultMessage: <span class="hljs-string">&#x27;Incorrect account or password（admin/ant.design)&#x27;</span>,<br>            &#125;)&#125;<br>          /&gt;<br>        )&#125;<br>        &lt;ProFormText<br>          name=<span class="hljs-string">&quot;userName&quot;</span><br>          fieldProps=&#123;&#123;<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            prefix: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UserOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.prefixIcon&#125;</span> /&gt;</span></span>,<br>          &#125;&#125;<br>          placeholder=&#123;intl.formatMessage(&#123;<br>            id: <span class="hljs-string">&#x27;pages.login.username.placeholder&#x27;</span>,<br>            defaultMessage: <span class="hljs-string">&#x27;Username: admin or user&#x27;</span>,<br>          &#125;)&#125;<br>          rules=&#123;[<br>            &#123;<br>              required: <span class="hljs-literal">true</span>,<br>              message: (<br>                &lt;FormattedMessage<br>                  id=<span class="hljs-string">&quot;pages.login.username.required&quot;</span><br>                  defaultMessage=<span class="hljs-string">&quot;Please enter user name!&quot;</span><br>                /&gt;<br>              ),<br>            &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;ProFormText.Password<br>          name=<span class="hljs-string">&quot;password&quot;</span><br>          fieldProps=&#123;&#123;<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            prefix: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">LockOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.prefixIcon&#125;</span> /&gt;</span></span>,<br>          &#125;&#125;<br>          placeholder=&#123;intl.formatMessage(&#123;<br>            id: <span class="hljs-string">&#x27;pages.login.password.placeholder&#x27;</span>,<br>            defaultMessage: <span class="hljs-string">&#x27;Password: ant.design&#x27;</span>,<br>          &#125;)&#125;<br>          rules=&#123;[<br>            &#123;<br>              required: <span class="hljs-literal">true</span>,<br>              message: (<br>                &lt;FormattedMessage<br>                  id=<span class="hljs-string">&quot;pages.login.password.required&quot;</span><br>                  defaultMessage=<span class="hljs-string">&quot;Please enter password！&quot;</span><br>                /&gt;<br>              ),<br>            &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;div<br>          style=&#123;&#123;<br>            marginBottom: <span class="hljs-number">24</span>,<br>          &#125;&#125;&gt;&lt;/div&gt;<br>      &lt;/ProForm&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<span class="hljs-function">(<span class="hljs-params">&#123; login, loading &#125;</span>) =&gt;</span> (&#123;<br>  userLogin: login,<br>  submitting: loading.effects[<span class="hljs-string">&#x27;login/login&#x27;</span>],<br>&#125;))(Login)<br></code></pre></div></td></tr></table></figure><p>在\src\layouts\UserLayout.jsx 中将默认的 logo 替换成自己的 logo</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../assets/logo.png&#x27;</span><br></code></pre></div></td></tr></table></figure><p>在 UserLayout.jsx 文件删除标签<code>FormattedMessage</code>内<code>defaultMessage=“”</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div className=&#123;styles.desc&#125;&gt;<br>  &lt;FormattedMessage id=<span class="hljs-string">&quot;pages.layouts.userLayout.title&quot;</span> /&gt;<br>&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p>在国际化\src\locales\zh-CN\pages.js 文件中修改 pages.layouts.userLayout.title 的默认文字</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;pages.layouts.userLayout.title&#x27;</span>: <span class="hljs-string">&#x27;融职商城后台管理系统&#x27;</span>,<br></code></pre></div></td></tr></table></figure><h2 id="2-6-删除首页头部多余东西"><a href="#2-6-删除首页头部多余东西" class="headerlink" title="2.6 删除首页头部多余东西"></a>2.6 删除首页头部多余东西</h2><p>在\src\components\GlobalHeader\RightContent.jsx 文件中删除搜索组件<code>HeaderSearch</code>和文档组件<code>Tooltip</code></p><h2 id="2-7-优化登录页"><a href="#2-7-优化登录页" class="headerlink" title="2.7 优化登录页"></a>2.7 优化登录页</h2><h3 id="2-7-1-优化登录页文件"><a href="#2-7-1-优化登录页文件" class="headerlink" title="2.7.1 优化登录页文件"></a>2.7.1 优化登录页文件</h3><p>将登录页移到 pages 下删除 User 文件夹，注意非必要不要随意更改 pages 下的文件夹，因为改动文件夹要配置对应路由<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621012663592-2b6e11f9-08fe-4a02-a092-8a3ef86dc96f.png#clientId=u4de613e7-ed76-4&from=paste&height=195&id=ub076cd51&margin=%5Bobject%20Object%5D&name=image.png&originHeight=195&originWidth=360&originalType=binary&size=8854&status=done&style=none&taskId=u5cbc6b9b-753b-4f7a-91b3-e8e3478b3ba&width=360" alt="image.png"></p><h3 id="2-7-2-配置登录页路由"><a href="#2-7-2-配置登录页路由" class="headerlink" title="2.7.2 配置登录页路由"></a>2.7.2 配置登录页路由</h3><p>在\config\routes.js 将原来 user 的路由修改成 login 的路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>  component: <span class="hljs-string">&#x27;../layouts/LoginLayout&#x27;</span>,<br>  routes: [<br>    &#123;<br>      name: <span class="hljs-string">&#x27;login&#x27;</span>,<br>      path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>      component: <span class="hljs-string">&#x27;./Login&#x27;</span>,<br>    &#125;,<br>  ],<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>同时修改\src\layouts 文件下 UserLayout.jsx less 文件重命名为 LginLayout 的<br>以及修改 UserLayout.jsx 中的样式导入<code>import styles from &#39;./LoginLayout.less&#39;;</code><br>在\src\layouts\SecurityLayout.jsx 中更改重定向的登录路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (!isLogin &amp;&amp; <span class="hljs-built_in">window</span>.location.pathname !== <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`/<span class="hljs-attr">login</span>?$&#123;<span class="hljs-attr">queryString</span>&#125;`&#125; /&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-8-封装网络请求"><a href="#2-8-封装网络请求" class="headerlink" title="2.8 封装网络请求"></a>2.8 封装网络请求</h2><h3 id="2-8-1-添加请求拦截器"><a href="#2-8-1-添加请求拦截器" class="headerlink" title="2.8.1 添加请求拦截器"></a>2.8.1 添加请求拦截器</h3><p><strong>具体如何找请求拦截器</strong> 1.先进入<a href="https://umijs.org/zh-CN">umijs</a>找到<strong>插件</strong>选择<strong>plugin-request</strong>进去找到<a href="https://umijs.org/zh-CN/plugins/plugin-request#request">request</a>​<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621051841217-6924f9a7-bbca-448c-a09e-34dcd7cb46c6.png#clientId=u79fc6bc8-ff2c-4&from=paste&height=148&id=u33d47bbd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=148&originWidth=1249&originalType=binary&size=18888&status=done&style=none&taskId=ue22fa43b-c8c8-4cf8-8845-0ee898b74f4&width=1249" alt="image.png"> 2.点击参考文档地址找到<a href="https://github.com/umijs/umi-request#interceptor"><strong>Interceptor</strong></a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621051557253-22301f45-88cd-4334-8321-9b60c4656053.png#clientId=u79fc6bc8-ff2c-4&from=paste&height=412&id=u87e50faa&margin=%5Bobject%20Object%5D&name=image.png&originHeight=412&originWidth=1164&originalType=binary&size=34493&status=done&style=none&taskId=u90f3f4cf-a242-46e6-9e8c-f3b4cc656ed&width=1164" alt="image.png"> 3.添加请求头<br>在\src\utils\request.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> request = extend(&#123;<br>  errorHandler,<br>  <span class="hljs-comment">// default error handling</span><br>  credentials: <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-comment">// Does the default request bring cookies</span><br>&#125;)<br><br><span class="hljs-comment">// 请求拦截器，在请求之前添加Header头</span><br>request.interceptors.request.use(<span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取token</span><br>  <span class="hljs-keyword">const</span> token = <span class="hljs-string">&#x27;hello&#x27;</span><br>  <span class="hljs-comment">// 设置Header头</span><br>  <span class="hljs-keyword">const</span> headers = &#123;<br>    Authorization: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;token&#125;</span>`</span>,<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    url,<br>    options: &#123; ...options, headers &#125;,<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request<br></code></pre></div></td></tr></table></figure><h3 id="2-8-2-封装错误信息提示"><a href="#2-8-2-封装错误信息提示" class="headerlink" title="2.8.2 封装错误信息提示"></a>2.8.2 封装错误信息提示</h3><h4 id="1-重新启动项目"><a href="#1-重新启动项目" class="headerlink" title="1.重新启动项目"></a>1.重新启动项目</h4><p><strong>通过</strong><code>**yarn dev**</code><strong>启动项目会关闭 mock，之后就能添加自己的 api</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn dev<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621055060891-822ef533-9e43-4870-984d-ffcb882ca15e.png#clientId=u79fc6bc8-ff2c-4&from=paste&height=179&id=u0891d995&margin=%5Bobject%20Object%5D&name=image.png&originHeight=179&originWidth=475&originalType=binary&size=10389&status=done&style=none&taskId=u69ae0f45-eb73-4eec-87d7-8baafb08129&width=475" alt="image.png"><br>在\package.json 可以查到相关配置</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;start:dev&quot;</span>: <span class="hljs-string">&quot;cross-env REACT_APP_ENV=dev MOCK=none UMI_ENV=dev umi dev&quot;</span>,<br></code></pre></div></td></tr></table></figure><h4 id="2-更改代理"><a href="#2-更改代理" class="headerlink" title="2.更改代理"></a>2.更改代理</h4><p>在\config\proxy.js 中将 dev 的域名改成自己的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">dev: &#123;<br>  <span class="hljs-string">&#x27;/api/&#x27;</span>: &#123;<br>    target: <span class="hljs-string">&#x27;https://api.shop.eduwork.cn/&#x27;</span>,<br>    changeOrigin: <span class="hljs-literal">true</span>,<br>    pathRewrite: &#123;<br>      <span class="hljs-string">&#x27;^&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>在\src\services\user.js 中将接口请求改成<code>request.post(&#39;/api/admin/user&#39;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryCurrent</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// return request(&#x27;/api/currentUser&#x27;);</span><br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/api/admin/user&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-修改错误提示"><a href="#3-修改错误提示" class="headerlink" title="3.修改错误提示"></a>3.修改错误提示</h4><p>在\src\utils\request.js 中，通过<code>async</code> <code>await</code>替换<code>promise</code>完成异步请求<br>async/await 场景：这是一个用同步的思维来解决异步问题的方案，当前端接口调用需要等到接口返回值以后渲染页面时</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> errorHandler = <span class="hljs-keyword">async</span> error =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; response &#125; = error<br><br>  <span class="hljs-keyword">if</span> (response &amp;&amp; response.status) &#123;<br>    <span class="hljs-keyword">let</span> errorText = codeMessage[response.status] || response.statusText<br>    <span class="hljs-keyword">const</span> &#123; status &#125; = response<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.json()<br><br>    <span class="hljs-comment">// 处理422未验证通过的情况</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">422</span>) &#123;<br>      <span class="hljs-keyword">let</span> errs = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> result.errors) &#123;<br>        errs += result.errors[key][<span class="hljs-number">0</span>]<br>      &#125;<br>      errorText += <span class="hljs-string">`[ <span class="hljs-subst">$&#123;errs&#125;</span> ]`</span><br>    &#125;<br>    <span class="hljs-comment">// 处理400的情况</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">400</span>) &#123;<br>      errorText += <span class="hljs-string">`[ <span class="hljs-subst">$&#123;result.message&#125;</span> ]`</span><br>    &#125;<br>    message.error(errorText)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!response) &#123;<br>    message.error(<span class="hljs-string">&#x27;网络发生异常，无法连接服务器&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> response<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-简化接口前缀（初始化项目可不设置）"><a href="#4-简化接口前缀（初始化项目可不设置）" class="headerlink" title="4.简化接口前缀（初始化项目可不设置）"></a>4.简化接口前缀（初始化项目可不设置）</h4><p>在\src\utils\request.js 中的 request 函数添加<code>prefix: &#39;/api&#39;</code>，则可以自动添加前缀简化接口写法<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621057857088-cae9855c-c15f-4411-b7bb-c7963663e66c.png#clientId=u79fc6bc8-ff2c-4&from=paste&height=166&id=u5a31ab0d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=166&originWidth=559&originalType=binary&size=12815&status=done&style=none&taskId=u62aabca7-6d8e-4ade-a2ec-0bf71b6863c&width=559" alt="image.png"><br>在\src\services\user.js 中，前缀则可以少写<code>/api</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryCurrent</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// return request(&#x27;/api/currentUser&#x27;);</span><br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/auth/login&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="三、登录-退出功能"><a href="#三、登录-退出功能" class="headerlink" title="三、登录/退出功能"></a>三、登录/退出功能</h1><h2 id="3-1-登录基本设置"><a href="#3-1-登录基本设置" class="headerlink" title="3.1 登录基本设置"></a>3.1 登录基本设置</h2><p>在 src\pages\Login\index.jsx 登录页简化，</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; LockOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Tabs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">const</span> Login = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; submitting &#125; = props<br><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; dispatch &#125; = props<br>    dispatch(&#123;<br>      type: <span class="hljs-string">&#x27;login/login&#x27;</span>,<br>      payload: &#123; ...values &#125;,<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=&#123;styles.main&#125;&gt;<br>      &lt;ProForm<br>        initialValues=&#123;&#123;<br>          autoLogin: <span class="hljs-literal">true</span>,<br>        &#125;&#125;<br>        submitter=&#123;&#123;<br>          render: <span class="hljs-function">(<span class="hljs-params">_, dom</span>) =&gt;</span> dom.pop(),<br>          submitButtonProps: &#123;<br>            loading: submitting,<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            style: &#123;<br>              width: <span class="hljs-string">&#x27;100%&#x27;</span>,<br>            &#125;,<br>          &#125;,<br>        &#125;&#125;<br>        onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>          handleSubmit(values)<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve()<br>        &#125;&#125;&gt;<br>        &lt;Tabs activeKey=<span class="hljs-string">&quot;account&quot;</span>&gt;<br>          &lt;Tabs.TabPane key=<span class="hljs-string">&quot;account&quot;</span> tab=<span class="hljs-string">&quot;账号密码登录&quot;</span> /&gt;<br>        &lt;/Tabs&gt;<br><br>        &lt;ProFormText<br>          name=<span class="hljs-string">&quot;email&quot;</span><br>          fieldProps=&#123;&#123;<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            prefix: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UserOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.prefixIcon&#125;</span> /&gt;</span></span>,<br>          &#125;&#125;<br>          placeholder=<span class="hljs-string">&quot;邮箱：super@a.com&quot;</span><br>          rules=&#123;[<br>            &#123;<br>              required: <span class="hljs-literal">true</span>,<br>              message: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span>,<br>            &#125;,<br>            &#123;<br>              type: <span class="hljs-string">&#x27;email&#x27;</span>,<br>              message: <span class="hljs-string">&#x27;请输入正确的邮箱格式&#x27;</span>,<br>            &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;ProFormText.Password<br>          name=<span class="hljs-string">&quot;password&quot;</span><br>          fieldProps=&#123;&#123;<br>            size: <span class="hljs-string">&#x27;large&#x27;</span>,<br>            prefix: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">LockOutlined</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.prefixIcon&#125;</span> /&gt;</span></span>,<br>          &#125;&#125;<br>          placeholder=<span class="hljs-string">&quot;密码：123123&quot;</span><br>          rules=&#123;[<br>            &#123;<br>              required: <span class="hljs-literal">true</span>,<br>              message: <span class="hljs-string">&#x27;请输入密码&#x27;</span>,<br>            &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;div<br>          style=&#123;&#123;<br>            marginBottom: <span class="hljs-number">24</span>,<br>          &#125;&#125;&gt;&lt;/div&gt;<br>      &lt;/ProForm&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<span class="hljs-function">(<span class="hljs-params">&#123; login, loading &#125;</span>) =&gt;</span> (&#123;<br>  userLogin: login,<br>  submitting: loading.effects[<span class="hljs-string">&#x27;login/login&#x27;</span>],<br>&#125;))(Login)<br></code></pre></div></td></tr></table></figure><h3 id="3-1-1-用户登录接口文档"><a href="#3-1-1-用户登录接口文档" class="headerlink" title="3.1.1 用户登录接口文档"></a>3.1.1 用户登录接口文档</h3><h5 id="接口描述"><a href="#接口描述" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>用户登录接口</li></ul><h5 id="请求-URL"><a href="#请求-URL" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/auth/login</li></ul><h5 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="Body-请求参数"><a href="#Body-请求参数" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>password</td><td>是</td><td>string</td><td>密码</td></tr></tbody></table><h5 id="返回参数"><a href="#返回参数" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>access_token</td><td>是</td><td>string</td><td>token</td></tr><tr><td>token_type</td><td>是</td><td>string</td><td>token 类型</td></tr><tr><td>expires_in</td><td>是</td><td>int</td><td>过期时间</td></tr></tbody></table><h5 id="返回示例"><a href="#返回示例" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;access_token&quot;</span>: <span class="hljs-string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9hcGkudGVzdFwvYXBpXC9hdXRoXC9sb2dpbiIsImlhdCI6MTYwNzUyMDE0MSwiZXhwIjoxNjA3NTIzNzQxLCJuYmYiOjE2MDc1MjAxNDEsImp0aSI6IktVdWFsTmxnOXYzZmlTZHEiLCJzdWIiOjMsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.BpVdvBjKEhQ2aIZBfkE-SoU2a3UeFkYCKQKh42Ncbio&quot;</span>,<br>    <span class="hljs-string">&quot;token_type&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span>,<br>    <span class="hljs-string">&quot;expires_in&quot;</span>: <span class="hljs-number">3600</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>状态码 422 参数错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;email&quot;</span>: [<br>            <span class="hljs-string">&quot;邮箱 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;password&quot;</span>: [<br>            <span class="hljs-string">&quot;密码 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-1-2-添加登录接口"><a href="#3-1-2-添加登录接口" class="headerlink" title="3.1.2 添加登录接口"></a>3.1.2 添加登录接口</h3><p>在 src\services\login.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeAccountLogin</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/auth/login&#x27;</span>, &#123;<br>    method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    data: params,<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFakeCaptcha</span>(<span class="hljs-params">mobile</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">`/api/login/captcha?mobile=<span class="hljs-subst">$&#123;mobile&#125;</span>`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="1-将token存入localStorage"><a href="#1-将token存入localStorage" class="headerlink" title="1.将token存入localStorage"></a>1.将<code>token</code>存入<code>localStorage</code></h4><p>在\src\models\login.js 判断是否登录，并跳转到首页，将<code>token</code>存入<code>localStorage</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; stringify &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;querystring&#x27;</span><br><span class="hljs-keyword">import</span> &#123; history &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> &#123; fakeAccountLogin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/login&#x27;</span><br><span class="hljs-keyword">import</span> &#123; setAuthority &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/authority&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getPageQuery &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/utils&#x27;</span><br><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><br><span class="hljs-keyword">const</span> Model = &#123;<br>  namespace: <span class="hljs-string">&#x27;login&#x27;</span>,<br>  state: &#123;&#125;,<br>  effects: &#123;<br>    *<span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">&#123; payload &#125;, &#123; call, put &#125;</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">yield</span> call(fakeAccountLogin, payload)<br>      <span class="hljs-comment">// 判断是否登陆成功</span><br>      <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">yield</span> put(&#123;<br>          type: <span class="hljs-string">&#x27;changeLoginStatus&#x27;</span>,<br>          payload: response,<br>        &#125;) <span class="hljs-comment">// Login successfully</span><br><br>        <span class="hljs-comment">// 跳转到首页</span><br>        history.replace(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        message.success(<span class="hljs-string">&#x27;🎉 🎉 🎉  登录成功！&#x27;</span>)<br>      &#125;<br>    &#125;,<br><br>    <span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123; redirect &#125; = getPageQuery() <span class="hljs-comment">// Note: There may be security issues, please note</span><br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.location.pathname !== <span class="hljs-string">&#x27;/user/login&#x27;</span> &amp;&amp; !redirect) &#123;<br>        history.replace(&#123;<br>          pathname: <span class="hljs-string">&#x27;/user/login&#x27;</span>,<br>          search: stringify(&#123;<br>            redirect: <span class="hljs-built_in">window</span>.location.href,<br>          &#125;),<br>        &#125;)<br>      &#125;<br>    &#125;,<br>  &#125;,<br>  reducers: &#123;<br>    <span class="hljs-function"><span class="hljs-title">changeLoginStatus</span>(<span class="hljs-params">state, &#123; payload &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// 将token存入localStorage</span><br>      <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;access_token&#x27;</span>, payload.access_token)<br>      <span class="hljs-keyword">return</span> &#123; ...state &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Model<br></code></pre></div></td></tr></table></figure><h4 id="2-取出token，加在Header头中"><a href="#2-取出token，加在Header头中" class="headerlink" title="2.取出token，加在Header头中"></a>2.取出<code>token</code>，加在<code>Header</code>头中</h4><p>在\src\utils\request.js 取出<code>token</code>，加在<code>Header</code>头中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/** Request 网络请求工具 更详细的 api 文档: https://github.com/umijs/umi-request */</span><br><span class="hljs-keyword">import</span> &#123; extend &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi-request&#x27;</span><br><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><br><span class="hljs-keyword">const</span> codeMessage = &#123;<br>  <span class="hljs-number">200</span>: <span class="hljs-string">&#x27;服务器成功返回请求的数据。&#x27;</span>,<br>  <span class="hljs-number">201</span>: <span class="hljs-string">&#x27;新建数据成功。&#x27;</span>,<br>  <span class="hljs-number">202</span>: <span class="hljs-string">&#x27;一个请求已经进入后台排队（异步任务）。&#x27;</span>,<br>  <span class="hljs-number">204</span>: <span class="hljs-string">&#x27;处理成功。&#x27;</span>,<br>  <span class="hljs-number">400</span>: <span class="hljs-string">&#x27;发出的请求有错误，服务器没有进行新建或修改数据的操作。&#x27;</span>,<br>  <span class="hljs-number">401</span>: <span class="hljs-string">&#x27;用户没有权限（令牌、用户名、密码错误）。&#x27;</span>,<br>  <span class="hljs-number">403</span>: <span class="hljs-string">&#x27;用户得到授权，但是访问是被禁止的。&#x27;</span>,<br>  <span class="hljs-number">404</span>: <span class="hljs-string">&#x27;发出的请求针对的是不存在的记录，服务器没有进行操作。&#x27;</span>,<br>  <span class="hljs-number">406</span>: <span class="hljs-string">&#x27;请求的格式不可得。&#x27;</span>,<br>  <span class="hljs-number">410</span>: <span class="hljs-string">&#x27;请求的资源被永久删除，且不会再得到的。&#x27;</span>,<br>  <span class="hljs-number">422</span>: <span class="hljs-string">&#x27;当创建一个对象时，发生一个验证错误。&#x27;</span>,<br>  <span class="hljs-number">500</span>: <span class="hljs-string">&#x27;服务器发生错误，请检查服务器。&#x27;</span>,<br>  <span class="hljs-number">502</span>: <span class="hljs-string">&#x27;网关错误。&#x27;</span>,<br>  <span class="hljs-number">503</span>: <span class="hljs-string">&#x27;服务不可用，服务器暂时过载或维护。&#x27;</span>,<br>  <span class="hljs-number">504</span>: <span class="hljs-string">&#x27;网关超时。&#x27;</span>,<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@zh</span>-CN 异常处理程序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@en</span>-US Exception handler</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> errorHandler = <span class="hljs-keyword">async</span> error =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; response &#125; = error<br><br>  <span class="hljs-keyword">if</span> (response &amp;&amp; response.status) &#123;<br>    <span class="hljs-keyword">let</span> errorText = codeMessage[response.status] || response.statusText<br>    <span class="hljs-keyword">const</span> &#123; status &#125; = response<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.json()<br>    <span class="hljs-comment">// 处理422未验证通过的情况</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">422</span>) &#123;<br>      <span class="hljs-keyword">let</span> errs = <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> result.errors) &#123;<br>        errs += result.errors[key][<span class="hljs-number">0</span>]<br>      &#125;<br>      errorText += <span class="hljs-string">`[ <span class="hljs-subst">$&#123;errs&#125;</span> ]`</span><br>    &#125;<br>    <span class="hljs-comment">// 处理400的情况</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">400</span>) &#123;<br>      errorText += <span class="hljs-string">`[ <span class="hljs-subst">$&#123;result.message&#125;</span> ]`</span><br>    &#125;<br>    message.error(errorText)<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!response) &#123;<br>    message.error(<span class="hljs-string">&#x27;网络发生异常，无法连接服务器&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> response<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@en</span>-US Configure the default parameters for request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@zh</span>-CN 配置request请求时的默认参数</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> request = extend(&#123;<br>  errorHandler,<br>  <span class="hljs-comment">// default error handling</span><br>  credentials: <span class="hljs-string">&#x27;include&#x27;</span>, <span class="hljs-comment">// Does the default request bring cookies</span><br>  prefix: <span class="hljs-string">&#x27;/api&#x27;</span>,<br>&#125;)<br><br><span class="hljs-comment">// 请求拦截器，在请求之前添加Header头</span><br>request.interceptors.request.use(<span class="hljs-function">(<span class="hljs-params">url, options</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 获取token</span><br>  <span class="hljs-keyword">const</span> token = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;access_token&#x27;</span>) || <span class="hljs-string">&#x27; &#x27;</span><br>  <span class="hljs-comment">// 设置Header头</span><br>  <span class="hljs-keyword">const</span> headers = &#123;<br>    Authorization: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;token&#125;</span>`</span>,<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    url,<br>    options: &#123; ...options, headers &#125;,<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request<br></code></pre></div></td></tr></table></figure><h2 id="3-2-获取用户信息"><a href="#3-2-获取用户信息" class="headerlink" title="3.2 获取用户信息"></a>3.2 获取用户信息</h2><h3 id="3-2-1-登录信息接口文档"><a href="#3-2-1-登录信息接口文档" class="headerlink" title="3.2.1 登录信息接口文档"></a>3.2.1 登录信息接口文档</h3><h5 id="接口描述-1"><a href="#接口描述-1" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>登录信息</li></ul><h5 id="请求-URL-1"><a href="#请求-URL-1" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/user</li></ul><h5 id="请求方式-1"><a href="#请求方式-1" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="返回参数-1"><a href="#返回参数-1" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>主键</td></tr><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>phone</td><td>是</td><td>string</td><td>手机号</td></tr><tr><td>avatar</td><td>是</td><td>string</td><td>头像</td></tr><tr><td>avatar_url</td><td>是</td><td>string</td><td>头像地址</td></tr><tr><td>is_locked</td><td>是</td><td>int</td><td>是否锁定： 0 正常 1 锁定</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>创建时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>更新时间</td></tr></tbody></table><h5 id="返回示例-1"><a href="#返回示例-1" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;super@a.com&quot;</span>,<br>    <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T02:58:08.000000Z&quot;</span>,<br>    <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T04:32:27.000000Z&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-2-添加获取用户登录信息接口"><a href="#3-2-2-添加获取用户登录信息接口" class="headerlink" title="3.2.2 添加获取用户登录信息接口"></a>3.2.2 添加获取用户登录信息接口</h3><p>在\src\services\user.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/api/users&#x27;</span>)<br>&#125;<br><span class="hljs-comment">// 获取当前登录用户信息</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryCurrent</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/user&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryNotices</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/api/notices&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-3-将用户信息存入localstorage"><a href="#3-2-3-将用户信息存入localstorage" class="headerlink" title="3.2.3 将用户信息存入localstorage"></a>3.2.3 将用户信息存入<code>localstorage</code></h3><p>在\src\models\user.js 中判断<code>localstorage</code>是否有用户信息，没有则请求，再将用户信息存入<code>localstorage</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; queryCurrent, query <span class="hljs-keyword">as</span> queryUsers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> UserModel = &#123;<br>  namespace: <span class="hljs-string">&#x27;user&#x27;</span>,<br>  state: &#123;<br>    currentUser: &#123;&#125;,<br>  &#125;,<br>  effects: &#123;<br>    *<span class="hljs-function"><span class="hljs-title">fetch</span>(<span class="hljs-params">_, &#123; call, put &#125;</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">yield</span> call(queryUsers)<br>      <span class="hljs-keyword">yield</span> put(&#123;<br>        type: <span class="hljs-string">&#x27;save&#x27;</span>,<br>        payload: response,<br>      &#125;)<br>    &#125;,<br><br>    <span class="hljs-comment">// 获取用户信息</span><br>    *<span class="hljs-function"><span class="hljs-title">fetchCurrent</span>(<span class="hljs-params">_, &#123; call, put &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// 查看localstorage是否有用户信息，没有再去请求</span><br>      <span class="hljs-keyword">let</span> userInfo = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>))<br>      <span class="hljs-keyword">if</span> (!userInfo) &#123;<br>        userInfo = <span class="hljs-keyword">yield</span> call(queryCurrent)<br>        <span class="hljs-comment">//修复BUG：有时候userInfo返回的是useCache=false被误存入localStorage，错误的userInfo导致页面一直刷新</span><br>        <span class="hljs-keyword">if</span> (userInfo.useCache !== <span class="hljs-literal">false</span>) <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>, <span class="hljs-built_in">JSON</span>.stringify(userInfo))<br>      &#125;<br><br>      <span class="hljs-keyword">yield</span> put(&#123;<br>        type: <span class="hljs-string">&#x27;saveCurrentUser&#x27;</span>,<br>        payload: userInfo,<br>      &#125;)<br>    &#125;,<br>  &#125;,<br>  reducers: &#123;<br>    <span class="hljs-function"><span class="hljs-title">saveCurrentUser</span>(<span class="hljs-params">state, action</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123; ...state, <span class="hljs-attr">currentUser</span>: action.payload || &#123;&#125; &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> UserModel<br></code></pre></div></td></tr></table></figure><h4 id="1-判断用户是否登录"><a href="#1-判断用户是否登录" class="headerlink" title="1.判断用户是否登录"></a>1.判断用户是否登录</h4><p>在\src\layouts\SecurityLayout.jsx 中精简代码，判断用户是否登录<br>//关键代码 <code>const isLogin = currentUser &amp;&amp; currentUser.id;</code>因为后台返回的用户<code>id</code>是<code>id</code>不是<code>userId</code></p><h5 id="返回示例-2"><a href="#返回示例-2" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;super@a.com&quot;</span>,<br>    <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T02:58:08.000000Z&quot;</span>,<br>    <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T04:32:27.000000Z&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageLoading &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Redirect, connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> &#123; stringify &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;querystring&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityLayout</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    isReady: <span class="hljs-literal">false</span>,<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      isReady: <span class="hljs-literal">true</span>,<br>    &#125;)<br>    <span class="hljs-keyword">const</span> &#123; dispatch &#125; = <span class="hljs-built_in">this</span>.props<br><br>    <span class="hljs-keyword">if</span> (dispatch) &#123;<br>      dispatch(&#123;<br>        type: <span class="hljs-string">&#x27;user/fetchCurrent&#x27;</span>,<br>      &#125;)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; isReady &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> &#123; children, loading, currentUser &#125; = <span class="hljs-built_in">this</span>.props <span class="hljs-comment">// You can replace it to your authentication rule (such as check token exists)</span><br>    <span class="hljs-comment">// You can replace it with your own login authentication rules (such as judging whether the token exists)</span><br><br>    <span class="hljs-keyword">const</span> isLogin = currentUser &amp;&amp; currentUser.id<br>    <span class="hljs-keyword">const</span> queryString = stringify(&#123;<br>      redirect: <span class="hljs-built_in">window</span>.location.href,<br>    &#125;)<br><br>    <span class="hljs-keyword">if</span> ((!isLogin &amp;&amp; loading) || !isReady) &#123;<br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PageLoading</span> /&gt;</span></span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!isLogin &amp;&amp; <span class="hljs-built_in">window</span>.location.pathname !== <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`/<span class="hljs-attr">login</span>?$&#123;<span class="hljs-attr">queryString</span>&#125;`&#125; /&gt;</span></span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> children<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<span class="hljs-function">(<span class="hljs-params">&#123; user, loading &#125;</span>) =&gt;</span> (&#123;<br>  currentUser: user.currentUser,<br>  loading: loading.models.user,<br>&#125;))(SecurityLayout)<br></code></pre></div></td></tr></table></figure><h3 id="3-2-4-修改管理员头像"><a href="#3-2-4-修改管理员头像" class="headerlink" title="3.2.4 修改管理员头像"></a>3.2.4 修改管理员头像</h3><p>在\src\components\GlobalHeader\AvatarDropdown.jsx 修改管理员头像，将<code>currentUser.avatar</code>更改为<code>currentUser.avatar_url</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Avatar size=<span class="hljs-string">&quot;small&quot;</span> className=&#123;styles.avatar&#125; src=&#123;currentUser.avatar_url&#125; alt=<span class="hljs-string">&quot;avatar&quot;</span> /&gt;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-5-优化登录，判断登录之后重定向到首页"><a href="#3-2-5-优化登录，判断登录之后重定向到首页" class="headerlink" title="3.2.5 优化登录，判断登录之后重定向到首页"></a>3.2.5 优化登录，判断登录之后重定向到首页</h3><p>在\src\pages\Login\index.jsx 中 优化登录，判断登录之后重定向到首页<br>导入<code>useEffect</code>和<code>history</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect, history &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br></code></pre></div></td></tr></table></figure><p>加入<code>useEffect</code>代替生命周期函数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 判断如果已经登录过，直接去首页</span><br>  <span class="hljs-keyword">const</span> userInfo = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>)<br>  <span class="hljs-keyword">if</span> (userInfo) history.replace(<span class="hljs-string">&#x27;/&#x27;</span>)<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><h3 id="3-2-6-登录-bug"><a href="#3-2-6-登录-bug" class="headerlink" title="3.2.6 登录 bug"></a>3.2.6 登录 bug</h3><p>在在\src\models\user.js 中 将用户数据存入<code>localStorage</code>时，有时候<code>userInfo</code>返回的是<code>useCache=false</code>被误存入<code>localStorage</code>，错误的<code>userInfo</code>导致页面一直刷新</p><h4 id="1-解决"><a href="#1-解决" class="headerlink" title="1.解决"></a>1.解决</h4><p>在接口请求获取<code>userInfo</code>之后判断是否为正确的数据，是才存入<code>localStorage</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (!userInfo) &#123;<br>  userInfo = <span class="hljs-keyword">yield</span> call(queryCurrent);<br>  <span class="hljs-comment">//修复BUG：有时候userInfo返回的是useCache=false被误存入localStorage，错误的userInfo导致页面一直刷新</span><br>  <span class="hljs-keyword">if</span> (userInfo.useCache !== <span class="hljs-literal">false</span>) <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>, <span class="hljs-built_in">JSON</span>.stringify(userInfo));<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-3-退出"><a href="#3-3-退出" class="headerlink" title="3.3 退出"></a>3.3 退出</h2><h3 id="3-3-1-退出接口文档"><a href="#3-3-1-退出接口文档" class="headerlink" title="3.3.1 退出接口文档"></a>3.3.1 退出接口文档</h3><h5 id="接口描述-2"><a href="#接口描述-2" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>退出登录</li></ul><h5 id="请求-URL-2"><a href="#请求-URL-2" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/auth/logout</li></ul><h5 id="请求方式-2"><a href="#请求方式-2" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="请求头部-1"><a href="#请求头部-1" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="返回示例-3"><a href="#返回示例-3" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 请求成功</li></ul><h3 id="3-3-2-添加退出接口"><a href="#3-3-2-添加退出接口" class="headerlink" title="3.3.2 添加退出接口"></a>3.3.2 添加退出接口</h3><p>在\src\services\login.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logout</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/auth/logout&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-3-添加退出方法"><a href="#3-3-3-添加退出方法" class="headerlink" title="3.3.3 添加退出方法"></a>3.3.3 添加退出方法</h3><p>在\src\models\login.js 中导入<code>logout</code>并添加退出方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; history &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span><br><span class="hljs-keyword">import</span> &#123; fakeAccountLogin, logout &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/login&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><br><span class="hljs-keyword">const</span> Model = &#123;<br>  namespace: <span class="hljs-string">&#x27;login&#x27;</span>,<br>  state: &#123;&#125;,<br>  effects: &#123;<br>    *<span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">&#123; payload &#125;, &#123; call, put &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// loading</span><br>      <span class="hljs-keyword">const</span> load = message.loading(<span class="hljs-string">&#x27;登录中...&#x27;</span>)<br><br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">yield</span> call(fakeAccountLogin, payload)<br>      <span class="hljs-comment">// 判断是否登陆成功</span><br>      <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">yield</span> put(&#123;<br>          type: <span class="hljs-string">&#x27;changeLoginStatus&#x27;</span>,<br>          payload: response,<br>        &#125;) <span class="hljs-comment">// Login successfully</span><br><br>        <span class="hljs-comment">// 跳转到首页</span><br>        history.replace(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        message.success(<span class="hljs-string">&#x27;🎉 🎉 🎉  登录成功！&#x27;</span>)<br>      &#125;<br>      load()<br>    &#125;,<br><br>    *<span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params">_, &#123; call &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// loading</span><br>      <span class="hljs-keyword">const</span> load = message.loading(<span class="hljs-string">&#x27;退出中...&#x27;</span>)<br><br>      <span class="hljs-comment">// 请求Api，退出登录</span><br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">yield</span> call(logout)<br><br>      <span class="hljs-comment">// 判断是否成功退出</span><br>      <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-comment">// 删除本地存储的token和userInfo</span><br>        <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;access_token&#x27;</span>)<br>        <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>)<br>        <span class="hljs-comment">// 重定向到登录页</span><br>        history.replace(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>        message.success(<span class="hljs-string">&#x27;🎉 🎉 🎉  退出成功！&#x27;</span>)<br>      &#125;<br>      load()<br>    &#125;,<br>  &#125;,<br>  reducers: &#123;<br>    <span class="hljs-function"><span class="hljs-title">changeLoginStatus</span>(<span class="hljs-params">state, &#123; payload &#125;</span>)</span> &#123;<br>      <span class="hljs-comment">// 将token存入localStorage</span><br>      <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;access_token&#x27;</span>, payload.access_token)<br>      <span class="hljs-keyword">return</span> &#123; ...state &#125;<br>    &#125;,<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Model<br></code></pre></div></td></tr></table></figure><h1 id="四、首页统计"><a href="#四、首页统计" class="headerlink" title="四、首页统计"></a>四、首页统计</h1><h2 id="4-1-新建统计面板文件"><a href="#4-1-新建统计面板文件" class="headerlink" title="4.1 新建统计面板文件"></a>4.1 新建统计面板文件</h2><p>在 src\pages 文件夹下创建一个文件夹和文件 DashBoard\index.jsx<br>因为只有一个接口请求，而且不需要获取共享数据，就直接在文件里写请求，可以不用<code>models</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Statistic, Card, Row, Col &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ArrowUpOutlined, ArrowDownOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; fetchDashboard &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/dashboard&#x27;</span><br><br><span class="hljs-keyword">const</span> DashBoard = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 定义组件状态，状态改变，重新渲染组件</span><br>  <span class="hljs-keyword">const</span> [data, setData] = useState(&#123;&#125;)<br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，获取统计数据</span><br>    <span class="hljs-keyword">const</span> resData = <span class="hljs-keyword">await</span> fetchDashboard()<br>    <span class="hljs-comment">// 得到数据之后更新组件状态</span><br>    setData(resData)<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;Row gutter=&#123;<span class="hljs-number">16</span>&#125;&gt;<br>        &lt;Col span=&#123;<span class="hljs-number">8</span>&#125;&gt;<br>          &lt;Card&gt;<br>            &lt;Statistic<br>              title=<span class="hljs-string">&quot;用户数量&quot;</span><br>              value=&#123;data.users_count&#125;<br>              precision=&#123;<span class="hljs-number">0</span>&#125;<br>              valueStyle=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#3f8600&#x27;</span> &#125;&#125;<br>              prefix=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ArrowUpOutlined</span> /&gt;</span></span>&#125;<br>            /&gt;<br>          &lt;/Card&gt;<br>        &lt;/Col&gt;<br>        &lt;Col span=&#123;<span class="hljs-number">8</span>&#125;&gt;<br>          &lt;Card&gt;<br>            &lt;Statistic<br>              title=<span class="hljs-string">&quot;订单数量&quot;</span><br>              value=&#123;data.goods_count&#125;<br>              precision=&#123;<span class="hljs-number">0</span>&#125;<br>              valueStyle=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#cf1322&#x27;</span> &#125;&#125;<br>              prefix=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ArrowDownOutlined</span> /&gt;</span></span>&#125;<br>            /&gt;<br>          &lt;/Card&gt;<br>        &lt;/Col&gt;<br>        &lt;Col span=&#123;<span class="hljs-number">8</span>&#125;&gt;<br>          &lt;Card&gt;<br>            &lt;Statistic<br>              title=<span class="hljs-string">&quot;商品数量&quot;</span><br>              value=&#123;data.order_count&#125;<br>              precision=&#123;<span class="hljs-number">0</span>&#125;<br>              valueStyle=&#123;&#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#234abc&#x27;</span> &#125;&#125;<br>              prefix=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ArrowDownOutlined</span> /&gt;</span></span>&#125;<br>            /&gt;<br>          &lt;/Card&gt;<br>        &lt;/Col&gt;<br>      &lt;/Row&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> DashBoard<br></code></pre></div></td></tr></table></figure><h2 id="4-2-添加统计面板路由"><a href="#4-2-添加统计面板路由" class="headerlink" title="4.2 添加统计面板路由"></a>4.2 添加统计面板路由</h2><p>在 config\routes.js 中添加统计面板路由</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    component: <span class="hljs-string">&#x27;../layouts/BlankLayout&#x27;</span>,<br>    routes: [<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>        component: <span class="hljs-string">&#x27;../layouts/LoginLayout&#x27;</span>,<br>        routes: [<br>          &#123;<br>            name: <span class="hljs-string">&#x27;login&#x27;</span>,<br>            path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>            component: <span class="hljs-string">&#x27;./Login&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>      &#123;<br>        path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        component: <span class="hljs-string">&#x27;../layouts/SecurityLayout&#x27;</span>,<br>        routes: [<br>          &#123;<br>            path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>            component: <span class="hljs-string">&#x27;../layouts/BasicLayout&#x27;</span>,<br>            routes: [<br>              &#123;<br>                path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>                redirect: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,<br>              &#125;,<br>              &#123;<br>                name: <span class="hljs-string">&#x27;dashboard&#x27;</span>,<br>                path: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,<br>                icon: <span class="hljs-string">&#x27;PieChartOutlined&#x27;</span>,<br>                component: <span class="hljs-string">&#x27;@/pages/DashBoard&#x27;</span>,<br>              &#125;,<br><br>              &#123;<br>                component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>              &#125;,<br>            ],<br>          &#125;,<br>          &#123;<br>            component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    component: <span class="hljs-string">&#x27;./404&#x27;</span>,<br>  &#125;,<br>]<br></code></pre></div></td></tr></table></figure><h2 id="4-3-统计面板接口文档"><a href="#4-3-统计面板接口文档" class="headerlink" title="4.3 统计面板接口文档"></a>4.3 统计面板接口文档</h2><h5 id="接口描述-3"><a href="#接口描述-3" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>首页统计</li></ul><h5 id="请求-URL-3"><a href="#请求-URL-3" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/index</li></ul><h5 id="请求方式-3"><a href="#请求方式-3" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="返回参数-2"><a href="#返回参数-2" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>users_count</td><td>是</td><td>int</td><td>用户数量</td></tr><tr><td>goods_count</td><td>是</td><td>int</td><td>商品数量</td></tr><tr><td>order_count</td><td>是</td><td>int</td><td>订单数据</td></tr></tbody></table><h5 id="返回示例-4"><a href="#返回示例-4" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;users_count&quot;</span>: <span class="hljs-number">7</span>,<br>    <span class="hljs-string">&quot;goods_count&quot;</span>: <span class="hljs-number">237</span>,<br>    <span class="hljs-string">&quot;order_count&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-4-添加统计面板接口"><a href="#4-4-添加统计面板接口" class="headerlink" title="4.4 添加统计面板接口"></a>4.4 添加统计面板接口</h2><p>在 src\services\dashboard.js 添加统计面板接口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取统计面板数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fetchDashboard</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/index&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="五、用户列表"><a href="#五、用户列表" class="headerlink" title="五、用户列表"></a>五、用户列表</h1><h2 id="5-1-用户基本列表"><a href="#5-1-用户基本列表" class="headerlink" title="5.1 用户基本列表"></a>5.1 用户基本列表</h2><h3 id="5-1-1-用户列表接口文档"><a href="#5-1-1-用户列表接口文档" class="headerlink" title="5.1.1 用户列表接口文档"></a>5.1.1 用户列表接口文档</h3><h5 id="接口描述-4"><a href="#接口描述-4" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>用户列表</li></ul><h5 id="请求-URL-4"><a href="#请求-URL-4" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users</li></ul><h5 id="请求方式-4"><a href="#请求方式-4" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-2"><a href="#请求头部-2" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Query-请求参数"><a href="#Query-请求参数" class="headerlink" title="Query 请求参数"></a>Query 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>current</td><td>否</td><td>int</td><td>分页-当前页</td></tr><tr><td>name</td><td>否</td><td>string</td><td>姓名模糊搜索</td></tr><tr><td>email</td><td>否</td><td>string</td><td>邮箱匹配搜索</td></tr><tr><td>phone</td><td>否</td><td>string</td><td>手机号匹配搜索</td></tr></tbody></table><h5 id="返回参数-3"><a href="#返回参数-3" class="headerlink" title="返回参数"></a>返回参数</h5><p><strong>data</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>主键</td></tr><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>phone</td><td>是</td><td>string</td><td>手机号</td></tr><tr><td>avatar</td><td>是</td><td>string</td><td>头像</td></tr><tr><td>avatar_url</td><td>是</td><td>string</td><td>头像地址</td></tr><tr><td>is_locked</td><td>是</td><td>int</td><td>是否锁定： 0 正常 1 锁定</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>创建时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>更新时间</td></tr></tbody></table><p><strong>meta.pagination</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>total</td><td>是</td><td>int</td><td>数据总数</td></tr><tr><td>count</td><td>是</td><td>int</td><td>当前页数据</td></tr><tr><td>per_page</td><td>是</td><td>int</td><td>每页显示条数</td></tr><tr><td>current_page</td><td>是</td><td>int</td><td>当前页页码</td></tr><tr><td>total_pages</td><td>是</td><td>int</td><td>总页数</td></tr><tr><td>links.previous</td><td>是</td><td>string</td><td>上一页链接</td></tr><tr><td>links.next</td><td>是</td><td>string</td><td>下一页链接</td></tr></tbody></table><h5 id="返回示例-5"><a href="#返回示例-5" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;data&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>            <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;super@a.com&quot;</span>,<br>            <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T02:58:08.000000Z&quot;</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-24T06:40:44.000000Z&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;xx&quot;</span>,<br>            <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;12311@qq.com&quot;</span>,<br>            <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-24T03:47:48.000000Z&quot;</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-24T06:44:43.000000Z&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-string">&quot;meta&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;pagination&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;per_page&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;current_page&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;total_pages&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-string">&quot;links&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;previous&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-string">&quot;next&quot;</span>: <span class="hljs-string">&quot;http://shopapi.mamp/api/admin/users?page=2&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-1-2-添加用户列表接口"><a href="#5-1-2-添加用户列表接口" class="headerlink" title="5.1.2 添加用户列表接口"></a>5.1.2 添加用户列表接口</h3><p>在 src\services\user.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取当前登录用户信息</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryCurrent</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/user&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 获取用户列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUsers</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/users&#x27;</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-1-3-创建基本的用户列表"><a href="#5-1-3-创建基本的用户列表" class="headerlink" title="5.1.3 创建基本的用户列表"></a>5.1.3 创建基本的用户列表</h3><p><a href="https://procomponents.ant.design/components/table">ProTable</a>参考文档<br>在\src\pages\User\index.jsx 中新建用户列表文件和文件，创建基本的 table，根据接口文档写需要的字段</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Avatar, Switch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getUsers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;avatar_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatar_url&#125;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;32&#125;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>&#125; /&gt;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否禁用&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_locked&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;启用&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;禁用&quot;</span><br>          defaultChecked=&#123;record.is_locked === <span class="hljs-number">0</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;&#125;&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-comment">// 获取用户列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getUsers(params)<br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button key=<span class="hljs-string">&quot;button&quot;</span> icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125; type=<span class="hljs-string">&quot;primary&quot;</span>&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h2 id="5-2-禁用和启用"><a href="#5-2-禁用和启用" class="headerlink" title="5.2 禁用和启用"></a>5.2 禁用和启用</h2><h3 id="5-2-1-禁启和启用接口文档"><a href="#5-2-1-禁启和启用接口文档" class="headerlink" title="5.2.1 禁启和启用接口文档"></a>5.2.1 禁启和启用接口文档</h3><h5 id="接口描述-5"><a href="#接口描述-5" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>禁用和启用</li></ul><h5 id="请求-URL-5"><a href="#请求-URL-5" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users/{user}/lock</li></ul><h5 id="请求方式-5"><a href="#请求方式-5" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PATCH</li></ul><h5 id="请求头部-3"><a href="#请求头部-3" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数"><a href="#RESET-参数" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>user</td><td>是</td><td>int</td><td>用户 id</td></tr></tbody></table><h5 id="返回示例-6"><a href="#返回示例-6" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 请求成功</li></ul><h3 id="5-2-2-添加禁用和启用接口"><a href="#5-2-2-添加禁用和启用接口" class="headerlink" title="5.2.2 添加禁用和启用接口"></a>5.2.2 添加禁用和启用接口</h3><p>在\src\services\user.js 中添加禁启用接口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 禁用和启用</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;用户id&#125;</span> <span class="hljs-variable">uid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lockUser</span>(<span class="hljs-params">uid</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/users/<span class="hljs-subst">$&#123;uid&#125;</span>/lock`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-2-3-添加和启用方法"><a href="#5-2-3-添加和启用方法" class="headerlink" title="5.2.3 添加和启用方法"></a>5.2.3 添加和启用方法</h3><p>在\src\pages\User\index.jsx 中，先导入<code>lockUser</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; getUsers, lockUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br></code></pre></div></td></tr></table></figure><p>创建禁启用函数接收用户 id，因为成功后后端返回值是空，所以<code>response.status===undefined</code>判断为空则操作成功</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 禁启用</span><br><span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>  <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>    message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    message.error(<span class="hljs-string">&#x27;操作失败！&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后在<code>columns</code>列表中，找到禁启用字段，使用禁启用函数，同时传出<code>record.id</code>用户 id</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    title:<span class="hljs-string">&quot;是否禁用&quot;</span>,<br>    dataIndex:<span class="hljs-string">&quot;is_locked&quot;</span>,<br>    hideInSearch:<span class="hljs-literal">true</span>,<br>    render:<span class="hljs-function">(<span class="hljs-params">_,record</span>)=&gt;</span> <span class="xml">&lt;Switch</span><br><span class="xml">        checkedChildren=&quot;启用&quot;</span><br><span class="xml">        unCheckedChildren=&quot;禁用&quot;</span><br><span class="xml">        defaultChecked=&#123;record.is_locked === 0&#125;</span><br><span class="xml">        onChange=&#123;()=&gt;&#123;heandleLockUser(record.id)&#125;&#125;</span><br><span class="xml">    /&gt;</span><br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="5-3-添加用户"><a href="#5-3-添加用户" class="headerlink" title="5.3 添加用户"></a>5.3 添加用户</h2><p><a href="https://ant.design/components/modal-cn/">Modal</a>对话框文档 <a href="https://procomponents.ant.design/components/form#%E8%A1%A8%E5%8D%95%E8%81%94%E5%8A%A8">ProForm</a>高级表单文档</p><h3 id="5-3-1-添加用户接口文档"><a href="#5-3-1-添加用户接口文档" class="headerlink" title="5.3.1 添加用户接口文档"></a>5.3.1 添加用户接口文档</h3><h5 id="接口描述-6"><a href="#接口描述-6" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>添加用户</li></ul><p><em>注意： 后台 Api 做了 RBAC 权限验证， 新创建的用户无法登陆， 必须为新创建的用户分配响应的角色或权限才可以</em><br><em>注意： 权限管理暂未开放 Api</em></p><h5 id="请求-URL-6"><a href="#请求-URL-6" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users</li></ul><h5 id="请求方式-6"><a href="#请求方式-6" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="请求头部-4"><a href="#请求头部-4" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Body-请求参数-1"><a href="#Body-请求参数-1" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>password</td><td>是</td><td>string</td><td>密码</td></tr></tbody></table><h5 id="返回示例-7"><a href="#返回示例-7" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 201 创建成功</li><li>状态码 422 参数错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: [<br>            <span class="hljs-string">&quot;昵称 不能为空&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;email&quot;</span>: [<br>            <span class="hljs-string">&quot;邮箱 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;password&quot;</span>: [<br>            <span class="hljs-string">&quot;密码 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-3-2-添加添加用户接口"><a href="#5-3-2-添加添加用户接口" class="headerlink" title="5.3.2 添加添加用户接口"></a>5.3.2 添加添加用户接口</h3><p>在\src\services\user.js 中<br>这里添加用户接口和获取用户列表是同一个接口<code>/admin/users</code>，但是他们的请求方式不一样，添加用户接口用<code>post</code>，而获取用户列表接口是用默认的<code>get</code>方式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addUser</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/users&#x27;</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-3-3-封装添加用户模态框"><a href="#5-3-3-封装添加用户模态框" class="headerlink" title="5.3.3 封装添加用户模态框"></a>5.3.3 封装添加用户模态框</h3><h4 id="1-封装添加用户模态框组件Create"><a href="#1-封装添加用户模态框组件Create" class="headerlink" title="1.封装添加用户模态框组件Create"></a>1.封装添加用户模态框组件<code>Create</code></h4><p>在\src\pages\User 文件夹下新建公共文件夹和<code>Create.jsx</code>文件 \src\pages\User\components\Create.jsx<br><code>Create</code>组件在父组件中使用，并用<code>props</code>接收父组件传的方法和实例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> Create = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef &#125; = props<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加用户</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;表单数据&#125;</span> <span class="hljs-variable">values</span></span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> createUser = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，添加用户</span><br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> addUser(values)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;添加成功！&#x27;</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=<span class="hljs-string">&quot;添加用户&quot;</span><br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &lt;ProForm<br>        onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>          createUser(values)<br>        &#125;&#125;&gt;<br>        &lt;ProFormText<br>          name=<span class="hljs-string">&quot;name&quot;</span><br>          label=<span class="hljs-string">&quot;昵称&quot;</span><br>          placeholder=<span class="hljs-string">&quot;请输入昵称&quot;</span><br>          rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入昵称&#x27;</span> &#125;]&#125;<br>        /&gt;<br>        &lt;ProFormText<br>          name=<span class="hljs-string">&quot;email&quot;</span><br>          label=<span class="hljs-string">&quot;邮箱&quot;</span><br>          placeholder=<span class="hljs-string">&quot;请输入邮箱&quot;</span><br>          rules=&#123;[<br>            &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span> &#125;,<br>            &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span> &#125;,<br>          ]&#125;<br>        /&gt;<br>        &lt;ProFormText.Password<br>          name=<span class="hljs-string">&quot;password&quot;</span><br>          label=<span class="hljs-string">&quot;密码&quot;</span><br>          placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span><br>          rules=&#123;[<br>            &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入密码&#x27;</span> &#125;,<br>            &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;密码最小6位&#x27;</span> &#125;,<br>          ]&#125;<br>        /&gt;<br>      &lt;/ProForm&gt;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Create<br></code></pre></div></td></tr></table></figure><h4 id="2-调用封装的Create组件"><a href="#2-调用封装的Create组件" class="headerlink" title="2.调用封装的Create组件"></a>2.调用封装的<code>Create</code>组件</h4><p>这里是使用<code>Create</code>组件，并且将方法和实例传给子组件，在父组件里只做简单的显示关闭操作，不做过多的逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Create isModalVisible=&#123;isModalVisible&#125; isShowModal=&#123;isShowModal&#125; actionRef=&#123;actionRef&#125; /&gt;<br></code></pre></div></td></tr></table></figure><p>在\src\pages\User\index.jsx，在父组件中导入<code>import Create from &#39;./components/Create&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Avatar, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getUsers, lockUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> Create <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Create&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取用户列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getUsers(params)<br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 禁启用</span><br>  <span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function"><span class="hljs-params">show</span> =&gt;</span> &#123;<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;avatar_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatar_url&#125;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;32&#125;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>&#125; /&gt;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否禁用&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_locked&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;启用&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;禁用&quot;</span><br>          defaultChecked=&#123;record.is_locked === <span class="hljs-number">0</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br>      &lt;Create isModalVisible=&#123;isModalVisible&#125; isShowModal=&#123;isShowModal&#125; actionRef=&#123;actionRef&#125; /&gt;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h2 id="5-4-编辑用户"><a href="#5-4-编辑用户" class="headerlink" title="5.4 编辑用户"></a>5.4 编辑用户</h2><h3 id="5-4-1-更新用户信息和用户详情接口文档"><a href="#5-4-1-更新用户信息和用户详情接口文档" class="headerlink" title="5.4.1 更新用户信息和用户详情接口文档"></a>5.4.1 更新用户信息和用户详情接口文档</h3><h5 id="接口描述-7"><a href="#接口描述-7" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>更新用户信息</li></ul><h5 id="请求-URL-7"><a href="#请求-URL-7" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users/{users}</li></ul><h5 id="请求方式-7"><a href="#请求方式-7" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PUT</li></ul><h5 id="REST-请求参数"><a href="#REST-请求参数" class="headerlink" title="REST 请求参数"></a>REST 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>users</td><td>是</td><td>int</td><td>用户 id</td></tr></tbody></table><h5 id="Body-请求参数-2"><a href="#Body-请求参数-2" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr></tbody></table><h5 id="返回示例-8"><a href="#返回示例-8" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 201 创建成功</li><li>状态码 422 参数错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: [<br>            <span class="hljs-string">&quot;昵称 不能为空&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;email&quot;</span>: [<br>            <span class="hljs-string">&quot;邮箱 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;password&quot;</span>: [<br>            <span class="hljs-string">&quot;密码 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接口描述-8"><a href="#接口描述-8" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>用户详情</li></ul><h5 id="请求-URL-8"><a href="#请求-URL-8" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/users/{user}</li></ul><h5 id="请求方式-8"><a href="#请求方式-8" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-5"><a href="#请求头部-5" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数-1"><a href="#RESET-参数-1" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>user</td><td>是</td><td>string</td><td>用户 id</td></tr></tbody></table><h5 id="返回参数-4"><a href="#返回参数-4" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>主键</td></tr><tr><td>name</td><td>是</td><td>string</td><td>昵称</td></tr><tr><td>email</td><td>是</td><td>string</td><td>邮箱</td></tr><tr><td>phone</td><td>是</td><td>string</td><td>手机号</td></tr><tr><td>avatar</td><td>是</td><td>string</td><td>头像</td></tr><tr><td>avatar_url</td><td>是</td><td>string</td><td>头像地址</td></tr><tr><td>is_locked</td><td>是</td><td>int</td><td>是否锁定： 0 正常 1 锁定</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>创建时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>更新时间</td></tr></tbody></table><h5 id="返回示例-9"><a href="#返回示例-9" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;super@a.com&quot;</span>,<br>    <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&quot;avatar_url&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;is_locked&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T02:58:08.000000Z&quot;</span>,<br>    <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-22T04:32:27.000000Z&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-4-2-添加更新用户信息和用户详情接口"><a href="#5-4-2-添加更新用户信息和用户详情接口" class="headerlink" title="5.4.2 添加更新用户信息和用户详情接口"></a>5.4.2 添加更新用户信息和用户详情接口</h3><p>在\src\services\user.js 中添加更新用户和用户详情接口，虽然这两个接口请求是同一个，但是他们的传参方式和参数是不一样的。<br><code>updateUser</code>是<code>put</code>方法，用于更新数据，需要传编辑的用户 id 和修改的参数，<br><code>showUser</code>是<code>get</code>方法，用于设置编辑栏上的默认值，只需要传编辑用户 id，后端返回改用户具体参数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateUser</span>(<span class="hljs-params">editId, params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.put(<span class="hljs-string">`/admin/users/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>, &#123; params &#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">editId</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showUser</span>(<span class="hljs-params">editId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">`/admin/users/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-4-3-封装编辑用户模态框"><a href="#5-4-3-封装编辑用户模态框" class="headerlink" title="5.4.3 封装编辑用户模态框"></a>5.4.3 封装编辑用户模态框</h3><h4 id="1-封装编辑模态框组件-Edit"><a href="#1-封装编辑模态框组件-Edit" class="headerlink" title="1.封装编辑模态框组件 Edit"></a>1.封装编辑模态框组件 Edit</h4><p>在\src\pages\User\components 文件夹下创建编辑用户组件<code>Edit.jsx</code>，先导入接口请求方法<code>import &#123; showUser, updateUser &#125; from &#39;@/services/user&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> Edit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加用户</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;表单数据&#125;</span> <span class="hljs-variable">values</span></span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> editUser = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，更新用户</span><br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;更新成功！&#x27;</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=<span class="hljs-string">&quot;编辑用户&quot;</span><br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;initialValues === <span class="hljs-literal">undefined</span> ? (<br>        &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>      ) : (<br>        &lt;ProForm<br>          initialValues=&#123;initialValues&#125;<br>          onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>            editUser(values)<br>          &#125;&#125;&gt;<br>          &lt;ProFormText<br>            name=<span class="hljs-string">&quot;name&quot;</span><br>            label=<span class="hljs-string">&quot;昵称&quot;</span><br>            placeholder=<span class="hljs-string">&quot;请输入昵称&quot;</span><br>            rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入昵称&#x27;</span> &#125;]&#125;<br>          /&gt;<br>          &lt;ProFormText<br>            name=<span class="hljs-string">&quot;email&quot;</span><br>            label=<span class="hljs-string">&quot;邮箱&quot;</span><br>            placeholder=<span class="hljs-string">&quot;请输入邮箱&quot;</span><br>            rules=&#123;[<br>              &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span> &#125;,<br>              &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span> &#125;,<br>            ]&#125;<br>          /&gt;<br>        &lt;/ProForm&gt;<br>      )&#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Edit<br></code></pre></div></td></tr></table></figure><p>其中加入了<code>antd</code>的骨架框，原因是页面渲染比接口请求快，在获取用户详情之前页面就渲染完了，导致编辑栏上没有得到该被编辑用户的数据，加入骨架框起到缓冲作用。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1621443253764-18ae7b8e-90db-433d-8917-67c3ad549ba2.png#clientId=u76ffcb00-d6fc-4&from=paste&height=292&id=fwwDs&margin=%5Bobject%20Object%5D&name=image.png&originHeight=292&originWidth=527&originalType=binary&size=15903&status=done&style=none&taskId=ub7c5cca0-015f-4df4-991d-46b3a3aed8a&width=527" alt="image.png"><br>同时给骨架框和编辑表单添加了三元运算符，避免两个同时被渲染，判断接口请求接收到用户详情之后骨架框消失，编辑表单出现。一下是主要代码</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br><br>useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 发送请求，获取用户详情</span><br>  <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>    setinitialValues(&#123;<br>      name: response.name,<br>      email: response.email,<br>    &#125;)<br>  &#125;<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  initialValues === <span class="hljs-literal">undefined</span> ? (<br>    &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>  ) : (<br>    &lt;ProForm<br>      initialValues=&#123;initialValues&#125;<br>      onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>        editUser(values)<br>      &#125;&#125;&gt;<br>      &lt;ProFormText<br>        name=<span class="hljs-string">&quot;name&quot;</span><br>        label=<span class="hljs-string">&quot;昵称&quot;</span><br>        placeholder=<span class="hljs-string">&quot;请输入昵称&quot;</span><br>        rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入昵称&#x27;</span> &#125;]&#125;<br>      /&gt;<br>      &lt;ProFormText<br>        name=<span class="hljs-string">&quot;email&quot;</span><br>        label=<span class="hljs-string">&quot;邮箱&quot;</span><br>        placeholder=<span class="hljs-string">&quot;请输入邮箱&quot;</span><br>        rules=&#123;[<br>          &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span> &#125;,<br>          &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span> &#125;,<br>        ]&#125;<br>      /&gt;<br>    &lt;/ProForm&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-调用封装的Edit组件"><a href="#2-调用封装的Edit组件" class="headerlink" title="2.调用封装的Edit组件"></a>2.调用封装的<code>Edit</code>组件</h4><p>在\src\pages\User\index.jsx 中，导入编辑组件<code>import Edit from &#39;./components/Edit&#39;;</code><br>调用了<code>Edit</code>组件并且多传一个被编辑用户 id <code>editId=&#123;editId&#125;</code>给子组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Avatar, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getUsers, lockUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> Create <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Create&#x27;</span><br><span class="hljs-keyword">import</span> Edit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Edit&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [isModalVisibleEdit, setisModalVisibleEdit] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取用户列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getUsers(params)<br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 禁启用</span><br>  <span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function"><span class="hljs-params">show</span> =&gt;</span> &#123;<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-comment">// 控制编辑用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModalEdit = <span class="hljs-function">(<span class="hljs-params">show, id</span>) =&gt;</span> &#123;<br>    setisModalVisibleEdit(show)<br>    setEditId(id)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;avatar_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatar_url&#125;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;32&#125;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>&#125; /&gt;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否禁用&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_locked&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;启用&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;禁用&quot;</span><br>          defaultChecked=&#123;record.is_locked === <span class="hljs-number">0</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModalEdit(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br>      &lt;Create isModalVisible=&#123;isModalVisible&#125; isShowModal=&#123;isShowModal&#125; actionRef=&#123;actionRef&#125; /&gt;<br><br>      &#123;!isModalVisibleEdit ? (<br>        <span class="hljs-string">&#x27;&#x27;</span><br>      ) : (<br>        &lt;Edit<br>          isModalVisible=&#123;isModalVisibleEdit&#125;<br>          isShowModal=&#123;isShowModalEdit&#125;<br>          actionRef=&#123;actionRef&#125;<br>          editId=&#123;editId&#125;<br>        /&gt;<br>      )&#125;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><p>其中关键代码<br>这里设置了编辑模态框的打开或者关闭，并且设置被编辑用户 id，传给<code>Edit</code>子组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [isModalVisibleEdit, setisModalVisibleEdit] = useState(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>);<br><br><br><br><span class="hljs-comment">// 控制编辑用户模态框显示和隐藏</span><br><span class="hljs-keyword">const</span> isShowModalEdit = <span class="hljs-function">(<span class="hljs-params">show, id</span>) =&gt;</span> &#123;<br>  setisModalVisibleEdit(show);<br>  setEditId(id);<br>&#125;;<br><br><br><br>  &#123;<br>    title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>    render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModalEdit(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>  &#125;,<br></code></pre></div></td></tr></table></figure><p>这里也设置了三目运算，主要原因是因为每次编辑都会有不同的用户 id，在编辑组件时挂载时，触发<code>Edit</code>子组件的生命周期请求用户 id，编辑组件关闭时卸载生命周期</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//关键代码,  isModalVisibleEdit编辑模态框显示时，挂载生命周期获取用户详情，编辑模态框关闭时卸载生命周期函数</span><br>useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 发送请求，获取用户详情</span><br>  <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>    setinitialValues(&#123;<br>      name: response.name,<br>      email: response.email,<br>    &#125;)<br>  &#125;<br>&#125;, [])<br><br>&#123;<br>  !isModalVisibleEdit ? (<br>    <span class="hljs-string">&#x27;&#x27;</span><br>  ) : (<br>    &lt;Edit<br>      isModalVisible=&#123;isModalVisibleEdit&#125;<br>      isShowModal=&#123;isShowModalEdit&#125;<br>      actionRef=&#123;actionRef&#125;<br>      editId=&#123;editId&#125;<br>    /&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="5-5-封装编辑和添加用户"><a href="#5-5-封装编辑和添加用户" class="headerlink" title="5.5 封装编辑和添加用户"></a>5.5 封装编辑和添加用户</h2><p>1.在\src\pages\User\components 文件夹中，复制<code>Edit.jsx</code>并重命名<code>CreateOrEdit.jsx</code>，将<code>Create</code>组件和<code>Edit</code>组件合并在一起，通过有<code>editId</code>判断是编辑。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>用户`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;name&quot;</span><br>              label=<span class="hljs-string">&quot;昵称&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入昵称&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入昵称&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;email&quot;</span><br>              label=<span class="hljs-string">&quot;邮箱&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入邮箱&quot;</span><br>              rules=&#123;[<br>                &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入邮箱&#x27;</span> &#125;,<br>                &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;邮箱格式不正确&#x27;</span> &#125;,<br>              ]&#125;<br>            /&gt;<br>            &#123;<br>              <span class="hljs-comment">// 只有添加用户才有密码框</span><br>              editId !== <span class="hljs-literal">undefined</span> ? (<br>                <span class="hljs-string">&#x27;&#x27;</span><br>              ) : (<br>                &lt;ProFormText.Password<br>                  name=<span class="hljs-string">&quot;password&quot;</span><br>                  label=<span class="hljs-string">&quot;密码&quot;</span><br>                  placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span><br>                  rules=&#123;[<br>                    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入密码&#x27;</span> &#125;,<br>                    &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;密码最小6位&#x27;</span> &#125;,<br>                  ]&#125;<br>                /&gt;<br>              )<br>            &#125;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><p>2.在\src\pages\User\index.jsx 中导入<code>import CreateOrEdit from &#39;./components/CreateOrEdit&#39;;``CreateOrEdit</code>组件，将编辑和添加用户的方法改成相同的，并用过是否有<code>editId</code>来判断是编辑（有 id 是编辑）还是添加。最后删除掉\src\pages\User\components 文件夹中的<code>Create.jsx</code>和<code>Edit.jsx</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Avatar, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined, UserOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getUsers, lockUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> CreateOrEdit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/CreateOrEdit&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取用户列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getUsers(params)<br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 禁启用</span><br>  <span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建/添加用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function">(<span class="hljs-params">show, id = <span class="hljs-literal">undefined</span></span>) =&gt;</span> &#123;<br>    setEditId(id)<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;头像&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;avatar_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Avatar</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.avatar_url&#125;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&#123;32&#125;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">UserOutlined</span> /&gt;</span>&#125; /&gt;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;name&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;email&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否禁用&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_locked&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;启用&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;禁用&quot;</span><br>          defaultChecked=&#123;record.is_locked === <span class="hljs-number">0</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModal(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br><br>      &#123;<br>        <span class="hljs-comment">// 模态框隐藏的时候，不挂载组件，显示的时候挂载组件，这是为了触发子组件的生命周期</span><br>        !isModalVisible ? (<br>          <span class="hljs-string">&#x27;&#x27;</span><br>        ) : (<br>          &lt;CreateOrEdit<br>            isModalVisible=&#123;isModalVisible&#125;<br>            isShowModal=&#123;isShowModal&#125;<br>            actionRef=&#123;actionRef&#125;<br>            editId=&#123;editId&#125;<br>          /&gt;<br>        )<br>      &#125;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h1 id="六、商品列表"><a href="#六、商品列表" class="headerlink" title="六、商品列表"></a>六、商品列表</h1><h2 id="6-1-商品基本列表"><a href="#6-1-商品基本列表" class="headerlink" title="6.1 商品基本列表"></a>6.1 商品基本列表</h2><h3 id="6-1-1-商品列表接口"><a href="#6-1-1-商品列表接口" class="headerlink" title="6.1.1 商品列表接口"></a>6.1.1 商品列表接口</h3><h5 id="接口描述-9"><a href="#接口描述-9" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>商品列表</li></ul><h5 id="请求-URL-9"><a href="#请求-URL-9" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods</li></ul><h5 id="请求方式-9"><a href="#请求方式-9" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-6"><a href="#请求头部-6" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Query-请求参数-1"><a href="#Query-请求参数-1" class="headerlink" title="Query 请求参数"></a>Query 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>current</td><td>否</td><td>int</td><td>分页-当前页</td></tr><tr><td>title</td><td>否</td><td>string</td><td>商品名模糊搜索</td></tr><tr><td>category_id</td><td>否</td><td>int</td><td>分类</td></tr><tr><td>is_on</td><td>否</td><td>int</td><td>是否上架 0 不上架 1 上架</td></tr><tr><td>is_recommend</td><td>否</td><td>int</td><td>是否推荐 0 不推荐 1 推荐</td></tr><tr><td>include</td><td>否</td><td>string</td><td>包含额外的数据： category 分类，user 用户， comments 评论</td></tr></tbody></table><p><em>inlude 可以返回额外的数据， 多个使用，分隔， 比如：include=category,user,comments</em></p><h5 id="返回参数-5"><a href="#返回参数-5" class="headerlink" title="返回参数"></a>返回参数</h5><p><strong>data</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>自增长主键 ID</td></tr><tr><td>user_id</td><td>是</td><td>int</td><td>创建者</td></tr><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>sales</td><td>是</td><td>int</td><td>销量</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>cover_url</td><td>是</td><td>string</td><td>封面图 url</td></tr><tr><td>pics</td><td>是</td><td>array</td><td>小图集</td></tr><tr><td>pics_url</td><td>是</td><td>array</td><td>小图集 url</td></tr><tr><td>is_on</td><td>是</td><td>int</td><td>是否上架 0 不上架 1 上架</td></tr><tr><td>is_recommend</td><td>是</td><td>int</td><td>是否推荐 0 不推荐 1 推荐</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>注册时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>修改时间</td></tr></tbody></table><p><strong>meta.pagination</strong></p><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>total</td><td>是</td><td>int</td><td>数据总数</td></tr><tr><td>count</td><td>是</td><td>int</td><td>当前页数据</td></tr><tr><td>per_page</td><td>是</td><td>int</td><td>每页显示条数</td></tr><tr><td>current_page</td><td>是</td><td>int</td><td>当前页页码</td></tr><tr><td>total_pages</td><td>是</td><td>int</td><td>总页数</td></tr><tr><td>links.previous</td><td>是</td><td>string</td><td>上一页链接</td></tr><tr><td>links.next</td><td>是</td><td>string</td><td>下一页链接</td></tr></tbody></table><h5 id="返回示例-10"><a href="#返回示例-10" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;data&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;电脑11111电脑&quot;</span>,<br>            <span class="hljs-string">&quot;category_id&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;这是一个电脑1111&quot;</span>,<br>            <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>,<br>            <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">999</span>,<br>            <span class="hljs-string">&quot;sales&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;cover&quot;</span>: <span class="hljs-string">&quot;100x100.jpg&quot;</span>,<br>            <span class="hljs-string">&quot;cover_url&quot;</span>: <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/100x100.jpg&quot;</span>,<br>            <span class="hljs-string">&quot;pics&quot;</span>: [<br>                <span class="hljs-string">&quot;a.png&quot;</span>,<br>                <span class="hljs-string">&quot;b.png&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;pics_url&quot;</span>: [<br>                <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/a.png&quot;</span>,<br>                <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/b.png&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;details&quot;</span>: <span class="hljs-string">&quot;这是一个电脑这是一个电脑这是一个电脑这是一个电脑&quot;</span>,<br>            <span class="hljs-string">&quot;is_on&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;is_recommend&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T07:38:37.000000Z&quot;</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T10:13:45.000000Z&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;电脑2&quot;</span>,<br>            <span class="hljs-string">&quot;category_id&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;这是一个电脑&quot;</span>,<br>            <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>,<br>            <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">999</span>,<br>            <span class="hljs-string">&quot;sales&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;cover&quot;</span>: <span class="hljs-string">&quot;/imgs/img1.png&quot;</span>,<br>            <span class="hljs-string">&quot;cover_url&quot;</span>: <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com//imgs/img1.png&quot;</span>,<br>            <span class="hljs-string">&quot;pics&quot;</span>: [<br>                <span class="hljs-string">&quot;a.png&quot;</span>,<br>                <span class="hljs-string">&quot;b.png&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;pics_url&quot;</span>: [<br>                <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/a.png&quot;</span>,<br>                <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/b.png&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;details&quot;</span>: <span class="hljs-string">&quot;这是一个电脑这是一个电脑这是一个电脑这是一个电脑&quot;</span>,<br>            <span class="hljs-string">&quot;is_on&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;is_recommend&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T07:38:45.000000Z&quot;</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T07:38:45.000000Z&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-string">&quot;meta&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;pagination&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">7</span>,<br>            <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;per_page&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;current_page&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;total_pages&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-string">&quot;links&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;previous&quot;</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-string">&quot;next&quot;</span>: <span class="hljs-string">&quot;http://api.test/api/admin/goods?page=2&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-1-2-添加商品列表接口"><a href="#6-1-2-添加商品列表接口" class="headerlink" title="6.1.2 添加商品列表接口"></a>6.1.2 添加商品列表接口</h3><p>在\src\services 文件夹中复制<code>user.jsx</code>文件夹并重命名<code>goods.jsx</code><br>根据接口文档添加商品列表接口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-1-3-创建基本商品列表页面"><a href="#6-1-3-创建基本商品列表页面" class="headerlink" title="6.1.3 创建基本商品列表页面"></a>6.1.3 创建基本商品列表页面</h3><p>在\src\pages 文件夹中，复制<code>User</code>文件夹并重命名<code>Goods</code>，<br>修改基本页面，添加商品图片预览，<br>其中<code>valueType</code>是设置筛选的单选按钮，<code>valueEnum</code>是选项，可以枚举也可以直接列出来，<a href="https://procomponents.ant.design/components/table#valuetype---%E9%80%89%E6%8B%A9%E7%B1%BB">选择类</a>参考文档</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>valueEnum: &#123;<br>  <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已推荐&#x27;</span> &#125;,<br>  <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未推荐&#x27;</span> &#125;,<br>&#125;,<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Image, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getGoods &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/goods&#x27;</span><br><span class="hljs-keyword">import</span> CreateOrEdit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/CreateOrEdit&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取商品列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getGoods(params)<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 禁启用</span><br>  <span class="hljs-keyword">const</span> heandleLockUser = <span class="hljs-keyword">async</span> uid =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> lockUser(uid)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建/添加用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function">(<span class="hljs-params">show, id = <span class="hljs-literal">undefined</span></span>) =&gt;</span> &#123;<br>    setEditId(id)<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;商品图&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;cover_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Image<br>          width=&#123;<span class="hljs-number">64</span>&#125;<br>          src=&#123;record.cover_url&#125;<br>          placeholder=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">preview</span>=<span class="hljs-string">&#123;false&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.cover_url&#125;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;200&#125;</span> /&gt;</span></span>&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;标题&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;title&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;价格&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;price&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;库存&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;stock&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;销量&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;sales&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br><br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否上架&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_on&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;已上架&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;未上架&quot;</span><br>          defaultChecked=&#123;record.is_on === <span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>      valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>      valueEnum: &#123;<br>        <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已上架&#x27;</span> &#125;,<br>        <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未上架&#x27;</span> &#125;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否推荐&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_recommend&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;已推荐&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;未推荐&quot;</span><br>          defaultChecked=&#123;record.is_recommend === <span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleLockUser(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>      valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>      valueEnum: &#123;<br>        <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已推荐&#x27;</span> &#125;,<br>        <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未推荐&#x27;</span> &#125;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModal(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;用户列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br><br>      &#123;<br>        <span class="hljs-comment">// 模态框隐藏的时候，不挂载组件，显示的时候挂载组件，这是为了触发子组件的生命周期</span><br>        !isModalVisible ? (<br>          <span class="hljs-string">&#x27;&#x27;</span><br>        ) : (<br>          &lt;CreateOrEdit<br>            isModalVisible=&#123;isModalVisible&#125;<br>            isShowModal=&#123;isShowModal&#125;<br>            actionRef=&#123;actionRef&#125;<br>            editId=&#123;editId&#125;<br>          /&gt;<br>        )<br>      &#125;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h2 id="6-2-是否上架-推荐商品"><a href="#6-2-是否上架-推荐商品" class="headerlink" title="6.2 是否上架/推荐商品"></a>6.2 是否上架/推荐商品</h2><h3 id="6-2-1-商品上架和下架接口文档"><a href="#6-2-1-商品上架和下架接口文档" class="headerlink" title="6.2.1 商品上架和下架接口文档"></a>6.2.1 商品上架和下架接口文档</h3><h5 id="接口描述-10"><a href="#接口描述-10" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>上架和下架</li></ul><h5 id="请求-URL-10"><a href="#请求-URL-10" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods/{good}/on</li></ul><h5 id="请求方式-10"><a href="#请求方式-10" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PATCH</li></ul><h5 id="请求头部-7"><a href="#请求头部-7" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数-2"><a href="#RESET-参数-2" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>good</td><td>是</td><td>int</td><td>商品 id</td></tr></tbody></table><h5 id="返回示例-11"><a href="#返回示例-11" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 请求成功</li></ul><h3 id="6-2-2-商品推荐和不推荐接口文档"><a href="#6-2-2-商品推荐和不推荐接口文档" class="headerlink" title="6.2.2 商品推荐和不推荐接口文档"></a>6.2.2 商品推荐和不推荐接口文档</h3><h5 id="接口描述-11"><a href="#接口描述-11" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>推荐和不推荐</li></ul><h5 id="请求-URL-11"><a href="#请求-URL-11" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods/{good}/recommend</li></ul><h5 id="请求方式-11"><a href="#请求方式-11" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PATCH</li></ul><h5 id="请求头部-8"><a href="#请求头部-8" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数-3"><a href="#RESET-参数-3" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>good</td><td>是</td><td>int</td><td>商品 id</td></tr></tbody></table><h5 id="返回示例-12"><a href="#返回示例-12" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 请求成功</li></ul><h3 id="6-2-3-添加是否上架-推荐商品接口"><a href="#6-2-3-添加是否上架-推荐商品接口" class="headerlink" title="6.2.3 添加是否上架/推荐商品接口"></a>6.2.3 添加是否上架/推荐商品接口</h3><p>在\src\services\goods.js 中添加是否上架/推荐商品接口</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架和下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isOn</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/on`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 推荐和不推荐商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRecommend</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/recommend`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-2-4-添加是否上架-推荐商品方法"><a href="#6-2-4-添加是否上架-推荐商品方法" class="headerlink" title="6.2.4 添加是否上架/推荐商品方法"></a>6.2.4 添加是否上架/推荐商品方法</h3><p>在\src\pages\Goods\index.jsx 中,先导入接口<code>import &#123; getGoods, isOn, isRecommend &#125; from &#39;@/services/goods&#39;;</code><br>修改并添加是否上架/推荐商品方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PageContainer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-layout&#x27;</span><br><span class="hljs-keyword">import</span> ProTable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-table&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Button, Image, Switch, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; PlusOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getGoods, isOn, isRecommend &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/goods&#x27;</span><br><span class="hljs-keyword">import</span> CreateOrEdit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/CreateOrEdit&#x27;</span><br><br><span class="hljs-keyword">const</span> index = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [isModalVisible, setisModalVisible] = useState(<span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">const</span> [editId, setEditId] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 表格的ref，便于操作自定义操作表格</span><br>  <span class="hljs-keyword">const</span> actionRef = useRef()<br><br>  <span class="hljs-comment">// 获取商品列表数据</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> params =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> getGoods(params)<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      data: response.data,<br>      <span class="hljs-comment">// success 请返回 true，</span><br>      <span class="hljs-comment">// 不然 table 会停止解析数据，即使有数据</span><br>      success: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// 不传会使用 data 的长度，如果是分页一定要传</span><br>      total: response.meta.pagination.total,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 是否上架商品</span><br>  <span class="hljs-keyword">const</span> heandleIsOn = <span class="hljs-keyword">async</span> goodsId =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> isOn(goodsId)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 是否推荐商品</span><br>  <span class="hljs-keyword">const</span> heandleIsRecommend = <span class="hljs-keyword">async</span> goodsId =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> isRecommend(goodsId)<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">&#x27;操作成功！&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 控制新建/添加用户模态框显示和隐藏</span><br>  <span class="hljs-keyword">const</span> isShowModal = <span class="hljs-function">(<span class="hljs-params">show, id = <span class="hljs-literal">undefined</span></span>) =&gt;</span> &#123;<br>    setEditId(id)<br>    setisModalVisible(show)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> columns = [<br>    &#123;<br>      title: <span class="hljs-string">&#x27;商品图&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;cover_url&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Image<br>          width=&#123;<span class="hljs-number">64</span>&#125;<br>          src=&#123;record.cover_url&#125;<br>          placeholder=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Image</span> <span class="hljs-attr">preview</span>=<span class="hljs-string">&#123;false&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;record.cover_url&#125;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;200&#125;</span> /&gt;</span></span>&#125;<br>        /&gt;<br>      ),<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;标题&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;title&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;价格&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;price&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;库存&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;stock&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;销量&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;sales&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br><br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否上架&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_on&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;已上架&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;未上架&quot;</span><br>          defaultChecked=&#123;record.is_on === <span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleIsOn(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>      valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>      valueEnum: &#123;<br>        <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已上架&#x27;</span> &#125;,<br>        <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未上架&#x27;</span> &#125;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;是否推荐&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;is_recommend&#x27;</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> (<br>        &lt;Switch<br>          checkedChildren=<span class="hljs-string">&quot;已推荐&quot;</span><br>          unCheckedChildren=<span class="hljs-string">&quot;未推荐&quot;</span><br>          defaultChecked=&#123;record.is_recommend === <span class="hljs-number">1</span>&#125;<br>          onChange=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            heandleIsRecommend(record.id)<br>          &#125;&#125;<br>        /&gt;<br>      ),<br>      valueType: <span class="hljs-string">&#x27;radioButton&#x27;</span>,<br>      valueEnum: &#123;<br>        <span class="hljs-number">1</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;已推荐&#x27;</span> &#125;,<br>        <span class="hljs-number">0</span>: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;未推荐&#x27;</span> &#125;,<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>      dataIndex: <span class="hljs-string">&#x27;created_at&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    &#123;<br>      title: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>      hideInSearch: <span class="hljs-literal">true</span>,<br>      render: <span class="hljs-function">(<span class="hljs-params">_, record</span>) =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> isShowModal(true, record.id)&#125;&gt;编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>,<br>    &#125;,<br>  ]<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;PageContainer&gt;<br>      &lt;ProTable<br>        columns=&#123;columns&#125;<br>        actionRef=&#123;actionRef&#125;<br>        request=&#123;<span class="hljs-keyword">async</span> (params = &#123;&#125;) =&gt; getData(params)&#125;<br>        rowKey=<span class="hljs-string">&quot;id&quot;</span><br>        search=&#123;&#123;<br>          labelWidth: <span class="hljs-string">&#x27;auto&#x27;</span>,<br>        &#125;&#125;<br>        pagination=&#123;&#123;<br>          pageSize: <span class="hljs-number">10</span>,<br>        &#125;&#125;<br>        dateFormatter=<span class="hljs-string">&quot;string&quot;</span><br>        headerTitle=<span class="hljs-string">&quot;商品列表&quot;</span><br>        toolBarRender=&#123;<span class="hljs-function">() =&gt;</span> [<br>          &lt;Button<br>            key=<span class="hljs-string">&quot;button&quot;</span><br>            icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">PlusOutlined</span> /&gt;</span></span>&#125;<br>            type=<span class="hljs-string">&quot;primary&quot;</span><br>            onClick=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">true</span>)&#125;&gt;<br>            新建<br>          &lt;/Button&gt;,<br>        ]&#125;<br>      /&gt;<br><br>      &#123;<br>        <span class="hljs-comment">// 模态框隐藏的时候，不挂载组件，显示的时候挂载组件，这是为了触发子组件的生命周期</span><br>        !isModalVisible ? (<br>          <span class="hljs-string">&#x27;&#x27;</span><br>        ) : (<br>          &lt;CreateOrEdit<br>            isModalVisible=&#123;isModalVisible&#125;<br>            isShowModal=&#123;isShowModal&#125;<br>            actionRef=&#123;actionRef&#125;<br>            editId=&#123;editId&#125;<br>          /&gt;<br>        )<br>      &#125;<br>    &lt;/PageContainer&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> index<br></code></pre></div></td></tr></table></figure><h2 id="6-3-新建商品页面"><a href="#6-3-新建商品页面" class="headerlink" title="6.3 新建商品页面"></a>6.3 新建商品页面</h2><h3 id="6-3-1-添加商品接口文档"><a href="#6-3-1-添加商品接口文档" class="headerlink" title="6.3.1 添加商品接口文档"></a>6.3.1 添加商品接口文档</h3><h5 id="接口描述-12"><a href="#接口描述-12" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>添加商品</li></ul><h5 id="请求-URL-12"><a href="#请求-URL-12" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods</li></ul><h5 id="请求方式-12"><a href="#请求方式-12" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="请求头部-9"><a href="#请求头部-9" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Body-请求参数-3"><a href="#Body-请求参数-3" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>pics</td><td>否</td><td>array</td><td>小图集</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr></tbody></table><h5 id="返回示例-13"><a href="#返回示例-13" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 201 创建成功</li><li>状态码 400 请求错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;分类不存在&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br><br>&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;分类被禁用&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br><br>&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;只能向2级分类添加商品&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br><br>状态码 <span class="hljs-number">422</span> 参数错误<br>&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>: [<br>            <span class="hljs-string">&quot;标题 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;category_id&quot;</span>: [<br>            <span class="hljs-string">&quot;category id 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;description&quot;</span>: [<br>            <span class="hljs-string">&quot;描述 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;price&quot;</span>: [<br>            <span class="hljs-string">&quot;price 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;stock&quot;</span>: [<br>            <span class="hljs-string">&quot;stock 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;cover&quot;</span>: [<br>            <span class="hljs-string">&quot;cover 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;pics&quot;</span>: [<br>            <span class="hljs-string">&quot;pics 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;details&quot;</span>: [<br>            <span class="hljs-string">&quot;details 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-3-2-编辑添加商品页面"><a href="#6-3-2-编辑添加商品页面" class="headerlink" title="6.3.2 编辑添加商品页面"></a>6.3.2 编辑添加商品页面</h3><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，<a href="https://procomponents.ant.design/components/field-set">ProFormFields</a> 表单项 参考文档。<br>只是简单完成添加商品必须的页面</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123;<br>  ProFormText,<br>  ProFormTextArea,<br>  ProFormDigit,<br>  ProFormUploadButton,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormUploadButton<br>              label=<span class="hljs-string">&quot;上传封面图&quot;</span><br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              action=<span class="hljs-string">&quot;upload.do&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;详情&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>            /&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h2 id="6-4-处理商品分类"><a href="#6-4-处理商品分类" class="headerlink" title="6.4 处理商品分类"></a>6.4 处理商品分类</h2><h3 id="6-4-1-商品分类接口文档"><a href="#6-4-1-商品分类接口文档" class="headerlink" title="6.4.1 商品分类接口文档"></a>6.4.1 商品分类接口文档</h3><h5 id="接口描述-13"><a href="#接口描述-13" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>分类列表</li></ul><h5 id="请求-URL-13"><a href="#请求-URL-13" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/category</li></ul><h5 id="请求方式-13"><a href="#请求方式-13" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-10"><a href="#请求头部-10" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Query-请求参数-2"><a href="#Query-请求参数-2" class="headerlink" title="Query 请求参数"></a>Query 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>type</td><td>否</td><td>string</td><td>all 查所有分类，包含禁用的。不传则只返回非禁用的</td></tr></tbody></table><h5 id="返回参数-6"><a href="#返回参数-6" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>id</td><td>是</td><td>int</td><td>主键</td></tr><tr><td>pid</td><td>是</td><td>int</td><td>父级</td></tr><tr><td>name</td><td>是</td><td>string</td><td>名称</td></tr><tr><td>level</td><td>是</td><td>int</td><td>层级</td></tr><tr><td>status</td><td>是</td><td>int</td><td>状态： 0 正常 1 禁用</td></tr><tr><td>children</td><td>否</td><td>array</td><td>子类</td></tr></tbody></table><h5 id="返回示例-14"><a href="#返回示例-14" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">;[<br>  &#123;<br>    id: <span class="hljs-number">1</span>,<br>    pid: <span class="hljs-number">0</span>,<br>    name: <span class="hljs-string">&#x27;电子数码&#x27;</span>,<br>    level: <span class="hljs-number">1</span>,<br>    status: <span class="hljs-number">1</span>,<br>    children: [<br>      &#123;<br>        id: <span class="hljs-number">3</span>,<br>        pid: <span class="hljs-number">1</span>,<br>        name: <span class="hljs-string">&#x27;手机&#x27;</span>,<br>        level: <span class="hljs-number">2</span>,<br>        status: <span class="hljs-number">1</span>,<br>        children: [<br>          &#123;<br>            id: <span class="hljs-number">5</span>,<br>            pid: <span class="hljs-number">3</span>,<br>            name: <span class="hljs-string">&#x27;华为&#x27;</span>,<br>            level: <span class="hljs-number">3</span>,<br>            status: <span class="hljs-number">1</span>,<br>          &#125;,<br>          &#123;<br>            id: <span class="hljs-number">6</span>,<br>            pid: <span class="hljs-number">3</span>,<br>            name: <span class="hljs-string">&#x27;小米&#x27;</span>,<br>            level: <span class="hljs-number">3</span>,<br>            status: <span class="hljs-number">1</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>      &#123;<br>        id: <span class="hljs-number">4</span>,<br>        pid: <span class="hljs-number">1</span>,<br>        name: <span class="hljs-string">&#x27;电脑&#x27;</span>,<br>        level: <span class="hljs-number">2</span>,<br>        status: <span class="hljs-number">1</span>,<br>        children: [<br>          &#123;<br>            id: <span class="hljs-number">7</span>,<br>            pid: <span class="hljs-number">4</span>,<br>            name: <span class="hljs-string">&#x27;戴尔&#x27;</span>,<br>            level: <span class="hljs-number">3</span>,<br>            status: <span class="hljs-number">1</span>,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    id: <span class="hljs-number">2</span>,<br>    pid: <span class="hljs-number">0</span>,<br>    name: <span class="hljs-string">&#x27;服装衣帽&#x27;</span>,<br>    level: <span class="hljs-number">1</span>,<br>    status: <span class="hljs-number">1</span>,<br>    children: [<br>      &#123;<br>        id: <span class="hljs-number">9</span>,<br>        pid: <span class="hljs-number">2</span>,<br>        name: <span class="hljs-string">&#x27;男装&#x27;</span>,<br>        level: <span class="hljs-number">2</span>,<br>        status: <span class="hljs-number">1</span>,<br>        children: [],<br>      &#125;,<br>      &#123;<br>        id: <span class="hljs-number">10</span>,<br>        pid: <span class="hljs-number">2</span>,<br>        name: <span class="hljs-string">&#x27;女装&#x27;</span>,<br>        level: <span class="hljs-number">2</span>,<br>        status: <span class="hljs-number">1</span>,<br>        children: [],<br>      &#125;,<br>    ],<br>  &#125;,<br>]<br></code></pre></div></td></tr></table></figure><h3 id="6-4-2-添加分类列表接口–非禁用的分类"><a href="#6-4-2-添加分类列表接口–非禁用的分类" class="headerlink" title="6.4.2 添加分类列表接口–非禁用的分类"></a>6.4.2 添加分类列表接口–非禁用的分类</h3><p>在 src\services 中新建一个<code>category.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取分类列表-非禁用的分类</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCategory</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/category&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-4-3-添加商品分类Select组件"><a href="#6-4-3-添加商品分类Select组件" class="headerlink" title="6.4.3 添加商品分类Select组件"></a>6.4.3 添加商品分类<code>Select</code>组件</h3><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中<br>设置<code>options</code>为空，储存后端返回的数据 <code>const [options, setOptions] = useState([]);</code><br>在生命周期函数中<code>useEffect</code>请求查询分类数据</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 查询分类数据</span><br>  <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>  <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>  <span class="hljs-comment">// 发送请求，获取用户详情</span><br>  <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>    <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>    setinitialValues(&#123;<br>      name: response.name,<br>      email: response.email,<br>    &#125;)<br>  &#125;<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><p>其中需要加 <a href="https://ant.design/components/cascader-cn/#components-cascader-demo-lazy">Cascader</a> 级联选择，还要加<code>ProForm.Item</code>标签包裹<code>Cascader</code>，设置分类的<code>name</code>和<code>rules</code>等，<a href="https://procomponents.ant.design/components/field-set/#proformfields-%E8%A1%A8%E5%8D%95%E9%A1%B9">ProFormFields</a>表单项参考文档。<br>同时，后端返回来的字段和<code>Cascader</code>官方的文档字段不一样时，查看 API 文档<code>fieldNames</code>属性可以自定义字段</p><table><thead><tr><th><strong>fieldNames</strong></th><th>自定义 options 中 label name children 的字段</th><th>object</th><th>{ label: label, value: value, children: children }</th></tr></thead></table><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item name=<span class="hljs-string">&quot;category_id&quot;</span> label=<span class="hljs-string">&quot;分类&quot;</span> rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>  &lt;Cascader<br>    fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>    options=&#123;options&#125;<br>    placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>  /&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><p>然后导入<code>import &#123; getCategory &#125; from &#39;@/services/category&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123;<br>  ProFormText,<br>  ProFormTextArea,<br>  ProFormDigit,<br>  ProFormUploadButton,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormUploadButton<br>              label=<span class="hljs-string">&quot;上传封面图&quot;</span><br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              action=<span class="hljs-string">&quot;upload.do&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;详情&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>            /&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h2 id="6-5-封装-OSS-上传"><a href="#6-5-封装-OSS-上传" class="headerlink" title="6.5 封装 OSS 上传"></a>6.5 封装 OSS 上传</h2><h3 id="6-5-1-获取阿里云-OSS-Token-接口文档"><a href="#6-5-1-获取阿里云-OSS-Token-接口文档" class="headerlink" title="6.5.1 获取阿里云 OSS Token 接口文档"></a>6.5.1 获取阿里云 OSS Token 接口文档</h3><h5 id="接口描述-14"><a href="#接口描述-14" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>获取阿里云 OSS Token，用于前端直传文件使用</li></ul><h5 id="请求-URL-14"><a href="#请求-URL-14" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/auth/oss/token</li></ul><h5 id="请求方式-14"><a href="#请求方式-14" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-11"><a href="#请求头部-11" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="返回参数-7"><a href="#返回参数-7" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>accessid</td><td>是</td><td>string</td><td>accessid</td></tr><tr><td>host</td><td>是</td><td>string</td><td>host</td></tr><tr><td>policy</td><td>是</td><td>string</td><td>policy</td></tr><tr><td>signature</td><td>是</td><td>string</td><td>signature</td></tr><tr><td>expire</td><td>是</td><td>int</td><td>expire</td></tr><tr><td>callback</td><td>是</td><td>string</td><td>callback</td></tr><tr><td>callback-var</td><td>是</td><td>string</td><td>callback-var</td></tr><tr><td>dir</td><td>是</td><td>string</td><td>dir</td></tr></tbody></table><h5 id="返回示例-15"><a href="#返回示例-15" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;accessid&quot;</span>: <span class="hljs-string">&quot;C4jYcNjUFLSKHToP&quot;</span>,<br>    <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;http:/laravel_shop_api.luwnto.oss-cn-beijing.aliyuncs.com/&quot;</span>,<br>    <span class="hljs-string">&quot;policy&quot;</span>: <span class="hljs-string">&quot;eyJleHBpcmF0aW9uIjoiMjAyMC0xMi0yM1QwMToyMzo1OFoiLCJjb25kaXRpb25zIjpbWyJjb250ZW50LWxlbmd0aC1yYW5nZSIsMCwxMDQ4NTc2MDAwXSxbInN0YXJ0cy13aXRoIiwiJGtleSIsIiJdXX0=&quot;</span>,<br>    <span class="hljs-string">&quot;signature&quot;</span>: <span class="hljs-string">&quot;Vx3jPcUQXVQ7rKSJvYRHyYCS5pA=&quot;</span>,<br>    <span class="hljs-string">&quot;expire&quot;</span>: <span class="hljs-number">1608686638</span>,<br>    <span class="hljs-string">&quot;callback&quot;</span>: <span class="hljs-string">&quot;eyJjYWxsYmFja1VybCI6IiIsImNhbGxiYWNrQm9keSI6ImJ1Y2tldD0ke2J1Y2tldH0mZXRhZz0ke2V0YWd9JmZpbGVuYW1lPSR7b2JqZWN0fSZzaXplPSR7c2l6ZX0mbWltZVR5cGU9JHttaW1lVHlwZX0maGVpZ2h0PSR7aW1hZ2VJbmZvLmhlaWdodH0md2lkdGg9JHtpbWFnZUluZm8ud2lkdGh9JmZvcm1hdD0ke2ltYWdlSW5mby5mb3JtYXR9IiwiY2FsbGJhY2tCb2R5VHlwZSI6ImFwcGxpY2F0aW9uXC94LXd3dy1mb3JtLXVybGVuY29kZWQifQ==&quot;</span>,<br>    <span class="hljs-string">&quot;callback-var&quot;</span>: [],<br>    <span class="hljs-string">&quot;dir&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-5-2-添加阿里云-OSS-Token-接口"><a href="#6-5-2-添加阿里云-OSS-Token-接口" class="headerlink" title="6.5.2 添加阿里云 OSS Token 接口"></a>6.5.2 添加阿里云 OSS Token 接口</h3><p>在\src\services 文件夹中新建一个<code>commom.js</code>​</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取oss上传策略和签名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ossConfig</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/auth/oss/token&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-5-3-初步封装公共AliyunOSSUpload组件"><a href="#6-5-3-初步封装公共AliyunOSSUpload组件" class="headerlink" title="6.5.3 初步封装公共AliyunOSSUpload组件"></a>6.5.3 初步封装公共<code>AliyunOSSUpload</code>组件</h3><p>在 src\components 中新建<code>AliyunOSSUpload</code>文件夹<code>index.jsx</code>文件<br><a href="https://ant.design/components/upload-cn/#components-upload-demo-upload-with-aliyun-oss">Upload</a>参考文档</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Form, Upload, message, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; UploadOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ossConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/commom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AliyunOSSUpload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    OSSData: &#123;&#125;,<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>  &#125;<br><br>  <span class="hljs-comment">// 初始化获取oss上传签名</span><br>  init = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> OSSData = <span class="hljs-keyword">await</span> ossConfig()<br><br>      <span class="hljs-built_in">this</span>.setState(&#123;<br>        OSSData,<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      message.error(error)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 文件上传过程中触发的回调函数，直到上传完成</span><br>  onChange = <span class="hljs-function">(<span class="hljs-params">&#123; fileList &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; onChange &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Aliyun OSS:&#x27;</span>, fileList)<br>    <span class="hljs-keyword">if</span> (onChange) &#123;<br>      onChange([...fileList])<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 额外的上传参数</span><br>  getExtraData = <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      key: file.url,<br>      OSSAccessKeyId: OSSData.accessid, <span class="hljs-comment">// 注意查看后端返回的字段是否和官方的OSSData一致</span><br>      policy: OSSData.policy,<br>      Signature: OSSData.signature,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 选择文件之后，上传文件之前，执行的回调</span><br>  beforeUpload = <span class="hljs-keyword">async</span> file =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> expire = OSSData.expire * <span class="hljs-number">1000</span><br><br>    <span class="hljs-keyword">if</span> (expire &lt; <span class="hljs-built_in">Date</span>.now()) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> suffix = file.name.slice(file.name.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>))<br>    <span class="hljs-keyword">const</span> filename = <span class="hljs-built_in">Date</span>.now() + suffix<br>    file.url = OSSData.dir + filename<br><br>    <span class="hljs-keyword">return</span> file<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; value &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">const</span> props = &#123;<br>      name: <span class="hljs-string">&#x27;file&#x27;</span>,<br>      fileList: value,<br>      action: <span class="hljs-built_in">this</span>.state.OSSData.host,<br>      onChange: <span class="hljs-built_in">this</span>.onChange,<br>      <span class="hljs-comment">// onRemove: this.onRemove,</span><br>      data: <span class="hljs-built_in">this</span>.getExtraData,<br>      beforeUpload: <span class="hljs-built_in">this</span>.beforeUpload,<br>      listType: <span class="hljs-string">&#x27;picture&#x27;</span>,<br>      maxCount: <span class="hljs-number">1</span>,<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;Upload &#123;...props&#125;&gt;<br>        &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;Click to Upload&lt;/Button&gt;<br>      &lt;/Upload&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中注意额外上传的参数，后端返回的字段是否和阿里云 OSS 字段一致，</p><h3 id="6-5-4-在新建商品模态框中使用AliyunOSSUpload组件"><a href="#6-5-4-在新建商品模态框中使用AliyunOSSUpload组件" class="headerlink" title="6.5.4 在新建商品模态框中使用AliyunOSSUpload组件"></a>6.5.4 在新建商品模态框中使用<code>AliyunOSSUpload</code>组件</h3><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，先导入<code>AliyunOSSUpload</code>，最后在上传封面图标签后添加<code>&lt;AliyunOSSUpload /&gt;</code>标签</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123;<br>  ProFormText,<br>  ProFormTextArea,<br>  ProFormDigit,<br>  ProFormUploadButton,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormUploadButton<br>              label=<span class="hljs-string">&quot;上传封面图&quot;</span><br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              action=<span class="hljs-string">&quot;upload.do&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>            /&gt;<br><br>            &lt;AliyunOSSUpload /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;详情&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>            /&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h3 id="6-5-5-简单封装优化AliyunOSSUpload组件"><a href="#6-5-5-简单封装优化AliyunOSSUpload组件" class="headerlink" title="6.5.5 简单封装优化AliyunOSSUpload组件"></a>6.5.5 简单封装优化<code>AliyunOSSUpload</code>组件</h3><h4 id="1-将原来上传图片的ProFormUploadButton组件替换成AliyunOSSUpload组件"><a href="#1-将原来上传图片的ProFormUploadButton组件替换成AliyunOSSUpload组件" class="headerlink" title="1.将原来上传图片的ProFormUploadButton组件替换成AliyunOSSUpload组件"></a>1.将原来上传图片的<code>ProFormUploadButton</code>组件替换成<code>AliyunOSSUpload</code>组件</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，将原来上传图片的<code>ProFormUploadButton</code>组件替换为<code>AliyunOSSUpload</code>组件，添加验证规则并写成双标签，将在其中显示的内容写入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;cover&quot;</span><br>  label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>  &lt;AliyunOSSUpload&gt;点击上传商品主图&lt;/AliyunOSSUpload&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><h4 id="2-修改OSSData文件上传路径，简单封装优化AliyunOSSUpload组件"><a href="#2-修改OSSData文件上传路径，简单封装优化AliyunOSSUpload组件" class="headerlink" title="2.修改OSSData文件上传路径，简单封装优化AliyunOSSUpload组件"></a>2.修改<code>OSSData</code>文件上传路径，简单封装优化<code>AliyunOSSUpload</code>组件</h4><p>在\src\components\AliyunOSSUpload\index.jsx 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Upload, message, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; UploadOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ossConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/commom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AliyunOSSUpload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    OSSData: &#123;&#125;,<br>  &#125;<br><br>  <span class="hljs-comment">// 组件挂载完成后，进行初始化，获取oss配置</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>  &#125;<br><br>  <span class="hljs-comment">// 初始化获取oss上传签名</span><br>  init = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> OSSData = <span class="hljs-keyword">await</span> ossConfig()<br><br>      <span class="hljs-built_in">this</span>.setState(&#123;<br>        OSSData,<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      message.error(error)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 文件上传过程中触发的回调函数，直到上传完成</span><br>  onChange = <span class="hljs-function">(<span class="hljs-params">&#123; file &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (file.status === <span class="hljs-string">&#x27;done&#x27;</span>) message.success(<span class="hljs-string">&#x27;上传成功！&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// 额外的上传参数</span><br>  getExtraData = <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      key: file.key,<br>      OSSAccessKeyId: OSSData.accessid, <span class="hljs-comment">// 注意查看后端返回的字段是否和官方的OSSData一致</span><br>      policy: OSSData.policy,<br>      Signature: OSSData.signature,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 选择文件之后，上传文件之前，执行的回调</span><br>  beforeUpload = <span class="hljs-keyword">async</span> file =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> expire = OSSData.expire * <span class="hljs-number">1000</span><br><br>    <span class="hljs-comment">// 如果签名过期了就重新获取</span><br>    <span class="hljs-keyword">if</span> (expire &lt; <span class="hljs-built_in">Date</span>.now()) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> dir = <span class="hljs-string">&#x27;react/&#x27;</span> <span class="hljs-comment">// 定义上传的目录</span><br><br>    <span class="hljs-keyword">const</span> suffix = file.name.slice(file.name.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>))<br>    <span class="hljs-keyword">const</span> filename = OSSData.dir + dir + <span class="hljs-built_in">Date</span>.now() + suffix<br>    file.key = OSSData.dir + dir + filename <span class="hljs-comment">// 在getExtraData 函数中会用到，在云存储的文件的 key</span><br>    file.url = OSSData.host + OSSData.dir + dir + filename <span class="hljs-comment">// 上传完成后，用于显示内容</span><br><br>    <span class="hljs-keyword">return</span> file<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; value &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">const</span> props = &#123;<br>      name: <span class="hljs-string">&#x27;file&#x27;</span>,<br>      fileList: value,<br>      action: <span class="hljs-built_in">this</span>.state.OSSData.host,<br>      onChange: <span class="hljs-built_in">this</span>.onChange,<br>      <span class="hljs-comment">// onRemove: this.onRemove,</span><br>      data: <span class="hljs-built_in">this</span>.getExtraData,<br>      beforeUpload: <span class="hljs-built_in">this</span>.beforeUpload,<br>      listType: <span class="hljs-string">&#x27;picture&#x27;</span>,<br>      maxCount: <span class="hljs-number">1</span>,<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>      &lt;Upload &#123;...props&#125;&gt;<br>        &#123;<span class="hljs-comment">/* 将Button标签放在在AliyunOSSUpload组件里写，这里直接使用&#123;this.props.children&#125;，会报错 */</span>&#125;<br>        &#123;<span class="hljs-comment">/* 这里的解决方案是，Button标签封装在AliyunOSSUpload组件内部，其他函数使用AliyunOSSUpload组件时，只需要将AliyunOSSUpload写成双标签，里边写显示的文字 */</span>&#125;<br>        &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;&#123;<span class="hljs-built_in">this</span>.props.children&#125;&lt;/Button&gt;<br>      &lt;/Upload&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>修复上传主图，显示默认文字 bug</strong><br>其中<code>Upload</code>内部直接写<code>&#123;this.props.children&#125;</code>获取父组件的内容，无法渲染会报错，最后只需要在父组件中将<code>AliyunOSSUpload</code>写成双标签，里边写显示的文字。将<code>Button</code>封装在<code>AliyunOSSUpload</code>组件内部，自取显示内容即可解决</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Upload &#123;...props&#125;&gt;<br>  &#123;<span class="hljs-comment">/* 将Button标签放在在AliyunOSSUpload组件里写，这里直接使用&#123;this.props.children&#125;，会报错 */</span>&#125;<br>  &#123;<span class="hljs-comment">/* 这里的解决方案是，Button标签封装在AliyunOSSUpload组件内部，其他函数使用AliyunOSSUpload组件时，只需要将AliyunOSSUpload写成双标签，里边写显示的文字 */</span>&#125;<br>  &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;&#123;<span class="hljs-built_in">this</span>.props.children&#125;&lt;/Button&gt;<br>&lt;/Upload&gt;<br></code></pre></div></td></tr></table></figure><p>后期富文本编辑器将<strong>显示默认文字 bug</strong>解决了，可以将<code>button</code>封装在<code>AliyunOSSUpload</code></p><h4 id="3-限制上传文件类型为图片"><a href="#3-限制上传文件类型为图片" class="headerlink" title="3.限制上传文件类型为图片"></a>3.限制上传文件类型为图片</h4><p>在\src\components\AliyunOSSUpload\index.jsx 中，解构<code>accept</code>，并且设置<code>accept</code>的值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; value, accept &#125; = <span class="hljs-built_in">this</span>.props;<br>  <span class="hljs-keyword">const</span> props = &#123;<br>    accept: accept || <span class="hljs-string">&#x27;&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;file&#x27;</span>,<br>    fileList: value,<br>    action: <span class="hljs-built_in">this</span>.state.OSSData.host,<br>    onChange: <span class="hljs-built_in">this</span>.onChange,<br>    <span class="hljs-comment">// onRemove: this.onRemove,</span><br>    data: <span class="hljs-built_in">this</span>.getExtraData,<br>    beforeUpload: <span class="hljs-built_in">this</span>.beforeUpload,<br>    listType: <span class="hljs-string">&#x27;picture&#x27;</span>,<br>    maxCount: <span class="hljs-number">1</span>,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Upload &#123;...props&#125;&gt;<br>      &#123;<span class="hljs-comment">/* 将Button标签放在在AliyunOSSUpload组件里写，这里直接使用&#123;this.props.children&#125;，会报错 */</span>&#125;<br>      &#123;<span class="hljs-comment">/* 这里的解决方案是，Button标签封装在AliyunOSSUpload组件内部，其他函数使用AliyunOSSUpload组件时，只需要将AliyunOSSUpload写成双标签，里边写显示的文字 */</span>&#125;<br>      &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;&#123;<span class="hljs-built_in">this</span>.props.children&#125;&lt;/Button&gt;<br>    &lt;/Upload&gt;<br>  );<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，<code>AliyunOSSUpload</code>标签中设置<code>accept</code>属性，<br><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept">accept</a>参考文档，<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept">详情</a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;cover&quot;</span><br>  label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>  &lt;AliyunOSSUpload accept=<span class="hljs-string">&quot;image/*&quot;</span>&gt;点击上传商品主图&lt;/AliyunOSSUpload&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><p>但是其中也有一个 bug，<code>ProForm.Item</code>组件和我们封装的<code>AliyunOSSUpload</code>组件(或者第三方组件)并不关联，<code>ProForm.Item</code>当进行表单验证的时候，并没有包括<code>AliyunOSSUpload</code>。所以当文件上传成功之后，把文件的 key，设置成表单某个字段的值。</p><h4 id="4-关联ProForm-Item和AliyunOSSUpload，完成图片验证"><a href="#4-关联ProForm-Item和AliyunOSSUpload，完成图片验证" class="headerlink" title="4.关联ProForm.Item和AliyunOSSUpload，完成图片验证"></a>4.关联<code>ProForm.Item</code>和<code>AliyunOSSUpload</code>，完成图片验证</h4><h4 id="使用通用方式完成文件验证以及解除组件受控"><a href="#使用通用方式完成文件验证以及解除组件受控" class="headerlink" title="使用通用方式完成文件验证以及解除组件受控"></a>使用通用方式完成文件验证以及解除组件受控</h4><p>通过 <a href="https://ant.design/components/form-cn/#components-form-demo-control-hooks">Form.useForm</a> 对表单数据域进行交互。<br>在\src\pages\Goods\components\CreateOrEdit.jsx 中，为<code>ProForm</code>标签添加<code>form=&#123;formObj&#125;</code>控制实例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm<br>        form=&#123;formObj&#125;<br>        initialValues=&#123;initialValues&#125;<br>        onFinish=&#123;<span class="hljs-function">(<span class="hljs-params">values</span>) =&gt;</span> &#123;<br>          handleSubmit(values);<br>        &#125;&#125;<br>      &gt;<br></code></pre></div></td></tr></table></figure><p>定义<code>Form</code>实例和<code>setCoverKey</code>方法，用于当文件上传之后设置<code>cover</code>字段的<code>value</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义Form实例，用来操作表单</span><br><span class="hljs-keyword">const</span> [formObj] = ProForm.useForm()<br><br><span class="hljs-comment">// 文件上传成功后，设置cover字段的value</span><br><span class="hljs-keyword">const</span> setCoverKey = <span class="hljs-function"><span class="hljs-params">fileKey</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">cover</span>: fileKey &#125;)<br></code></pre></div></td></tr></table></figure><p>在<code>AliyunOSSUpload</code>组件中传入<code>setCoverKey</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span>&gt;<br>  点击上传商品主图<br>&lt;/AliyunOSSUpload&gt;<br></code></pre></div></td></tr></table></figure><p>在\src\components\AliyunOSSUpload\index.jsx 中设置上传文件的回调函数，将文件的<code>key</code>设置成文件某个字段的值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 文件上传过程中触发的回调函数，直到上传完成</span><br>onChange = <span class="hljs-function">(<span class="hljs-params">&#123; file &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (file.status === <span class="hljs-string">&#x27;done&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 上传成功之后，把文件的key，设置成表单某个字段的值</span><br>    <span class="hljs-built_in">this</span>.props.setCoverKey(file.key)<br>    message.success(<span class="hljs-string">&#x27;上传成功&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当点击上传文件时会报错<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622121030697-e1898d39-f9a8-4f0f-9b23-5f055fe79f41.png#clientId=u1314c606-21ea-4&from=paste&height=855&id=ued8660b4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=855&originWidth=1151&originalType=binary&size=76930&status=done&style=none&taskId=ube7311d5-7a2f-4889-95ac-3428b202387&width=1151" alt="image.png"><br>原因是当我们文件上传过程中触发的回调函数时通过 <code> // 文件上传成功后，设置cover字段的value const setCoverKey = (fileKey) =&gt; formObj.setFieldsValue(&#123; cover: fileKey &#125;);</code>设置了<code>ProForm.Item</code>中<code>name=&quot;cover&quot;</code>的值，<code>ProForm.Item</code>组件和<code>AliyunOSSUpload</code>组件形成了受控组件，<code>value</code>值被设置了，但是上传过程中触发的回调函数检测到文件还没有，拿不到文件就会报错。<br>查看<a href="https://ant.design/components/form-cn/#Form.Item">Form.Item</a>的 api 就有介绍<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622123548883-f5da8b27-70a4-455b-b39e-ac08b831ea6e.png#clientId=u1314c606-21ea-4&from=paste&height=343&id=uc94ee111&margin=%5Bobject%20Object%5D&name=image.png&originHeight=343&originWidth=1206&originalType=binary&size=61746&status=done&style=none&taskId=u0c1c7d0a-41dc-4b6d-b04f-3d07f9e95ad&width=1206" alt="image.png"><br><strong>解决办法</strong>：用<code>div</code>标签将<code>AliyunOSSUpload</code>组件包裹，<code>div</code>成为<code>ProForm.Item</code>的第一个子组件，他们两个形成受控组件，<code>div</code>受它控制。<code>AliyunOSSUpload</code>组件可以验证但是不受控，就解决了这个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123;<br>  ProFormText,<br>  ProFormTextArea,<br>  ProFormDigit,<br>  ProFormUploadButton,<br>  UploadOutlined,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 定义Form实例，用来操作表单</span><br>  <span class="hljs-keyword">const</span> [formObj] = ProForm.useForm()<br><br>  <span class="hljs-comment">// 文件上传成功后，设置cover字段的value</span><br>  <span class="hljs-keyword">const</span> setCoverKey = <span class="hljs-function"><span class="hljs-params">fileKey</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">cover</span>: fileKey &#125;)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            form=&#123;formObj&#125;<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br><br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>              &lt;div&gt;<br>                &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span>&gt;<br>                  点击上传商品主图<br>                &lt;/AliyunOSSUpload&gt;<br>              &lt;/div&gt;<br>            &lt;/ProForm.Item&gt;<br><br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;详情&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>            /&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h2 id="6-6-使用富文本编辑器"><a href="#6-6-使用富文本编辑器" class="headerlink" title="6.6 使用富文本编辑器"></a>6.6 使用富文本编辑器</h2><h3 id="6-6-1-安装富文本编辑器"><a href="#6-6-1-安装富文本编辑器" class="headerlink" title="6.6.1 安装富文本编辑器"></a>6.6.1 安装富文本编辑器</h3><p>富文本编辑器文档在<a href="https://ant.design/index-cn">antd</a>官网=&gt;组件=&gt;社区精选组件可以找到<br>​</p><p>我们选择的是<a href="https://github.com/margox/braft-editor">braft-editor</a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn add braft-editor<br></code></pre></div></td></tr></table></figure><h3 id="6-6-2-封装富文本编辑器"><a href="#6-6-2-封装富文本编辑器" class="headerlink" title="6.6.2 封装富文本编辑器"></a>6.6.2 封装富文本编辑器</h3><h4 id="1-简单封装文本编辑器"><a href="#1-简单封装文本编辑器" class="headerlink" title="1.简单封装文本编辑器"></a>1.简单封装文本编辑器</h4><p>在\src\components 文件夹中，新建<code>Editor</code>文件夹，并在<code>Editor</code>下新建 i<code>ndex.jsx</code>和<code>index.less</code>文件<br>在\src\components\Editor\index.less 中设置基本样式</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.my-component &#123;<br>  border: 1px solid #d1d1d1;<br>  border-radius: 5px;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>参考<a href="https://www.yuque.com/braft-editor/be/lzwpnr">braft-editor</a>官方手册将<code>EditorDemo</code>拷贝，将不用的暂时注释掉，并引入样式<code>import &#39;./index.less&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// 引入编辑器组件</span><br><span class="hljs-keyword">import</span> BraftEditor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-editor&#x27;</span><br><span class="hljs-comment">// 引入编辑器样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EditorDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-comment">// 创建一个空的editorState作为初始值</span><br>    editorState: BraftEditor.createEditorState(<span class="hljs-literal">null</span>),<br>  &#125;<br><br>  <span class="hljs-comment">// async componentDidMount() &#123;</span><br>  <span class="hljs-comment">//   // 假设此处从服务端获取html格式的编辑器内容</span><br>  <span class="hljs-comment">//   const htmlContent = await fetchEditorContent();</span><br>  <span class="hljs-comment">//   // 使用BraftEditor.createEditorState将html字符串转换为编辑器需要的editorStat</span><br>  <span class="hljs-comment">//   this.setState(&#123;</span><br>  <span class="hljs-comment">//     editorState: BraftEditor.createEditorState(htmlContent),</span><br>  <span class="hljs-comment">//   &#125;);</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-comment">// submitContent = async () =&gt; &#123;</span><br>  <span class="hljs-comment">//   // 在编辑器获得焦点时按下ctrl+s会执行此方法</span><br>  <span class="hljs-comment">//   // 编辑器内容提交到服务端之前，可直接调用editorState.toHTML()来获取HTML格式的内容</span><br>  <span class="hljs-comment">//   const htmlContent = this.state.editorState.toHTML();</span><br>  <span class="hljs-comment">//   const result = await saveEditorContent(htmlContent);</span><br>  <span class="hljs-comment">// &#125;;</span><br><br>  handleEditorChange = <span class="hljs-function"><span class="hljs-params">editorState</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123; editorState &#125;)<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; editorState &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&quot;my-component&quot;</span>&gt;<br>        &lt;BraftEditor<br>          value=&#123;editorState&#125;<br>          onChange=&#123;<span class="hljs-built_in">this</span>.handleEditorChange&#125;<br>          <span class="hljs-comment">// onSave=&#123;this.submitContent&#125;</span><br>        /&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-使用富文本编辑器"><a href="#2-使用富文本编辑器" class="headerlink" title="2.使用富文本编辑器"></a>2.使用富文本编辑器</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中引入<code>import Editor from &#39;@/components/Editor&#39;;</code><br>将原来商品详情<code>ProFormTextArea</code>组件的换成<code>ProForm.Item</code>组件并使用 <code>&lt;Editor /&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;details&quot;</span><br>  label=<span class="hljs-string">&quot;商品详情&quot;</span><br>  placeholder=<span class="hljs-string">&quot;请输入商品详情&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;&gt;<br>  &lt;Editor /&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><h4 id="3-处理富文本编辑器表单验证"><a href="#3-处理富文本编辑器表单验证" class="headerlink" title="3.处理富文本编辑器表单验证"></a>3.处理富文本编辑器表单验证</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，给<code>Editor</code>传入一个设置<code>details</code>字段的<code>value</code>的方法<br>将富文本输入的内容设置成<code>details</code>字段的<code>value</code>，并添加这个方法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 文件上传成功后，设置details字段的value</span><br><span class="hljs-keyword">const</span> setDetails = <span class="hljs-function"><span class="hljs-params">content</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">details</span>: content &#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">    &lt;ProForm.Item<br>      name=<span class="hljs-string">&quot;details&quot;</span><br>      label=<span class="hljs-string">&quot;商品详情&quot;</span><br>      rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>    &gt;<br>      &lt;Editor setDetails=&#123;setDetails&#125; /&gt;<br>    &lt;/ProForm.Item&gt;<br>  &lt;/ProForm&gt;<br>)<br></code></pre></div></td></tr></table></figure><p>在\src\components\Editor\index.jsx 中，接调用 editorState.toHTML()来获取 HTML 格式的内容，调用父组件的函数，将编辑器输入的内容传递回去</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">handleEditorChange = <span class="hljs-function"><span class="hljs-params">editorState</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 更新编辑器的状态</span><br>  <span class="hljs-built_in">this</span>.setState(&#123; editorState &#125;)<br>  <span class="hljs-comment">// 要判断输入的内容，如果有内容设置输入的内容；如果没有内容设置成空字符串</span><br>  <span class="hljs-comment">// 为什么要这样判断，因为即使是空内容editorState.toHTML()也是一对空标签，不能直接给表单使用</span><br>  <span class="hljs-keyword">if</span> (!editorState.isEmpty()) &#123;<br>    <span class="hljs-comment">// 可直接调用editorState.toHTML()来获取HTML格式的内容</span><br>    <span class="hljs-keyword">const</span> content = editorState.toHTML()<br>    <span class="hljs-comment">// 调用父组件的函数，将编辑器输入的内容传递回去</span><br>    <span class="hljs-built_in">this</span>.props.setDetails(content)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">this</span>.props.setDetails(<span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中当富文本获取到焦点时，并没有写入任何内容，但是<code>editorState.toHTML()</code>也是一对空标签<code>&lt;p&gt;&lt;/p&gt;</code>，不能直接给表单使用<br>调用<code>editorState.isEmpty()</code>会判断是否为空，没有写入任何内容会返回 true，并设置成空字符串<br>​</p><h3 id="6-6-3-富文本编辑器集成阿里-OSS-上传"><a href="#6-6-3-富文本编辑器集成阿里-OSS-上传" class="headerlink" title="6.6.3 富文本编辑器集成阿里 OSS 上传"></a>6.6.3 富文本编辑器集成阿里 OSS 上传</h3><h4 id="1-自定义控件–插入图片"><a href="#1-自定义控件–插入图片" class="headerlink" title="1.自定义控件–插入图片"></a>1.自定义控件–插入图片</h4><p>集成<a href="https://braft.margox.cn/demos/antd-upload">Ant Design</a>上传组件<br>在\src\components\Editor\index.jsx 中，引入自定义控件–插入图片的例子，适当修改。<br>在<code>AliyunOSSUpload</code>组件添加<code>insertImage</code>方法，图片上传完成后执行此方法，将<code>url</code>传给父组件用来在编译器中显示图片。<code>showUploadList</code>用来控制是否展示文件列表 <a href="https://ant.design/components/upload-cn/#API"><strong>showUploadList</strong></a><strong>文档</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// 引入编辑器组件</span><br><span class="hljs-keyword">import</span> BraftEditor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-editor&#x27;</span><br><span class="hljs-comment">// 引入编辑器样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ContentUtils &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-utils&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EditorDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-comment">// 创建一个空的editorState作为初始值</span><br>    editorState: BraftEditor.createEditorState(<span class="hljs-literal">null</span>),<br>  &#125;<br><br>  <span class="hljs-comment">// async componentDidMount() &#123;</span><br>  <span class="hljs-comment">//   // 假设此处从服务端获取html格式的编辑器内容</span><br>  <span class="hljs-comment">//   const htmlContent = await fetchEditorContent();</span><br>  <span class="hljs-comment">//   // 使用BraftEditor.createEditorState将html字符串转换为编辑器需要的editorStat</span><br>  <span class="hljs-comment">//   this.setState(&#123;</span><br>  <span class="hljs-comment">//     editorState: BraftEditor.createEditorState(htmlContent),</span><br>  <span class="hljs-comment">//   &#125;);</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-comment">// 编辑器内容改变的时候执行</span><br>  handleEditorChange = <span class="hljs-function"><span class="hljs-params">editorState</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 更新编辑器的状态</span><br>    <span class="hljs-built_in">this</span>.setState(&#123; editorState &#125;)<br>    <span class="hljs-comment">// 要判断输入的内容，如果有内容设置输入的内容；如果没有内容设置成空字符串</span><br>    <span class="hljs-comment">// 为什么要这样判断，因为即使是空内容editorState.toHTML()也是一对空标签，不能直接给表单使用</span><br>    <span class="hljs-keyword">if</span> (!editorState.isEmpty()) &#123;<br>      <span class="hljs-comment">// 可直接调用editorState.toHTML()来获取HTML格式的内容</span><br>      <span class="hljs-keyword">const</span> content = editorState.toHTML()<br>      <span class="hljs-comment">// 调用父组件的函数，将编辑器输入的内容传递回去</span><br>      <span class="hljs-built_in">this</span>.props.setDetails(content)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.props.setDetails(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 图片上传完成后执行此方法，用来在编译器中显示图片</span><br>  insertImage = <span class="hljs-function"><span class="hljs-params">url</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      editorState: ContentUtils.insertMedias(<span class="hljs-built_in">this</span>.state.editorState, [<br>        &#123;<br>          type: <span class="hljs-string">&#x27;IMAGE&#x27;</span>,<br>          url,<br>        &#125;,<br>      ]),<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 自定义控件--插入图片</span><br>    <span class="hljs-keyword">const</span> extendControls = [<br>      &#123;<br>        key: <span class="hljs-string">&#x27;antd-uploader&#x27;</span>,<br>        type: <span class="hljs-string">&#x27;component&#x27;</span>,<br>        component: (<br>          &lt;AliyunOSSUpload insertImage=&#123;<span class="hljs-built_in">this</span>.insertImage&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">false</span>&#125;&gt;<br>            &#123;<span class="hljs-comment">/* 这里的按钮最好加上type=&quot;button&quot;，以避免在表单容器中触发表单提交，用Antd的Button组件则无需如此 */</span>&#125;<br>            &lt;button<br>              type=<span class="hljs-string">&quot;button&quot;</span><br>              className=<span class="hljs-string">&quot;control-item button upload-button&quot;</span><br>              data-title=<span class="hljs-string">&quot;插入图片&quot;</span>&gt;<br>              插入图片<br>            &lt;/button&gt;<br>          &lt;/AliyunOSSUpload&gt;<br>        ),<br>      &#125;,<br>    ]<br><br>    <span class="hljs-keyword">const</span> &#123; editorState &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&quot;my-component&quot;</span>&gt;<br>        &lt;BraftEditor<br>          value=&#123;editorState&#125;<br>          onChange=&#123;<span class="hljs-built_in">this</span>.handleEditorChange&#125;<br>          extendControls=&#123;extendControls&#125;<br>        /&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-添加富文本图片显示，修复显示默认文字-bug"><a href="#2-添加富文本图片显示，修复显示默认文字-bug" class="headerlink" title="2.添加富文本图片显示，修复显示默认文字 bug"></a>2.添加富文本图片显示，修复显示默认文字 bug</h4><p>在\src\components\AliyunOSSUpload\index.jsx 中，<code>insertImage(file.url)</code>在文件上传完成之后，如果需要 url，那么返回 url 给父组件。<br>添加解构<code>showUploadList</code>，默认展示文件列表，<br>修复直接使用{this.props.children}，会报错的 bug</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Upload, message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ossConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/commom&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AliyunOSSUpload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    OSSData: &#123;&#125;,<br>  &#125;<br><br>  <span class="hljs-comment">// 组件挂载完成后，进行初始化获取oss配置</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>  &#125;<br><br>  <span class="hljs-comment">// 初始化获取oss上传签名</span><br>  init = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> OSSData = <span class="hljs-keyword">await</span> ossConfig()<br><br>      <span class="hljs-built_in">this</span>.setState(&#123;<br>        OSSData,<br>      &#125;)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      message.error(error)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 文件上传过程中触发的回调函数，直到上传完成</span><br>  onChange = <span class="hljs-function">(<span class="hljs-params">&#123; file &#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (file.status === <span class="hljs-string">&#x27;done&#x27;</span>) &#123;<br>      <span class="hljs-keyword">const</span> &#123; setCoverKey, insertImage &#125; = <span class="hljs-built_in">this</span>.props<br>      <span class="hljs-keyword">if</span> (setCoverKey) &#123;<br>        <span class="hljs-comment">// 上传成功之后，把文件的key，设置成表单某个字段的值</span><br>        setCoverKey(file.key)<br>      &#125;<br><br>      <span class="hljs-comment">// 上传完成之后，如果需要url，那么返回url给父组件</span><br>      <span class="hljs-keyword">if</span> (insertImage) &#123;<br>        insertImage(file.url)<br>      &#125;<br><br>      message.success(<span class="hljs-string">&#x27;上传成功&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 额外的上传参数</span><br>  getExtraData = <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      key: file.key,<br>      OSSAccessKeyId: OSSData.accessid, <span class="hljs-comment">// 注意查看后端返回的字段是否和官方的OSSData一致</span><br>      policy: OSSData.policy,<br>      Signature: OSSData.signature,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 选择文件之后，上传文件之前，执行的回调</span><br>  beforeUpload = <span class="hljs-keyword">async</span> file =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; OSSData &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">const</span> expire = OSSData.expire * <span class="hljs-number">1000</span><br><br>    <span class="hljs-comment">// 如果签名过期了就重新获取</span><br>    <span class="hljs-keyword">if</span> (expire &lt; <span class="hljs-built_in">Date</span>.now()) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.init()<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> dir = <span class="hljs-string">&#x27;react/&#x27;</span> <span class="hljs-comment">// 定义上传的目录</span><br><br>    <span class="hljs-keyword">const</span> suffix = file.name.slice(file.name.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>))<br>    <span class="hljs-keyword">const</span> filename = OSSData.dir + dir + <span class="hljs-built_in">Date</span>.now() + suffix<br>    file.key = OSSData.dir + dir + filename <span class="hljs-comment">// 在getExtraData 函数中会用到，在云存储的文件的 key</span><br>    file.url = OSSData.host + OSSData.dir + dir + filename <span class="hljs-comment">// 上传完成后，用于显示内容</span><br><br>    <span class="hljs-keyword">return</span> file<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; value, accept, showUploadList &#125; = <span class="hljs-built_in">this</span>.props<br>    <span class="hljs-keyword">const</span> props = &#123;<br>      accept: accept || <span class="hljs-string">&#x27;&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;file&#x27;</span>,<br>      fileList: value,<br>      action: <span class="hljs-built_in">this</span>.state.OSSData.host,<br>      onChange: <span class="hljs-built_in">this</span>.onChange,<br>      <span class="hljs-comment">// onRemove: this.onRemove,</span><br>      data: <span class="hljs-built_in">this</span>.getExtraData,<br>      beforeUpload: <span class="hljs-built_in">this</span>.beforeUpload,<br>      listType: <span class="hljs-string">&#x27;picture&#x27;</span>,<br>      maxCount: <span class="hljs-number">1</span>,<br>      showUploadList,<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (<br>      &lt;Upload &#123;...props&#125;&gt;<br>        &#123;<span class="hljs-comment">/* 将Button标签放在在AliyunOSSUpload组件里写，这里直接使用&#123;this.props.children&#125;，会报错 */</span>&#125;<br>        &#123;<span class="hljs-comment">/* 这里的解决方案是，Button标签封装在AliyunOSSUpload组件内部，其他函数使用AliyunOSSUpload组件时，只需要将AliyunOSSUpload写成双标签，里边写显示的文字 */</span>&#125;<br>        &#123;<span class="hljs-comment">/* &lt;Button icon=&#123;&lt;UploadOutlined /&gt;&#125;&gt;&#123;this.props.children&#125;&lt;/Button&gt; */</span>&#125;<br>        &#123;<span class="hljs-comment">/* 修复直接使用&#123;this.props.children&#125;，会报错的bug */</span>&#125;<br>        &#123;<span class="hljs-built_in">this</span>.props.children&#125;<br>      &lt;/Upload&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，给<code>AliyunOSSUpload</code>组件传值<code>showUploadList=&#123;true&#125;</code>显示文件图片，并将<code>Button</code>在<code>AliyunOSSUpload</code>中写</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText, ProFormTextArea, ProFormDigit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; UploadOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; showUser, updateUser, addUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/user&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><span class="hljs-keyword">import</span> Editor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Editor&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setinitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 定义Form实例，用来操作表单</span><br>  <span class="hljs-keyword">const</span> [formObj] = ProForm.useForm()<br><br>  <span class="hljs-comment">// 文件上传成功后，设置cover字段的value</span><br>  <span class="hljs-keyword">const</span> setCoverKey = <span class="hljs-function"><span class="hljs-params">fileKey</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">cover</span>: fileKey &#125;)<br><br>  <span class="hljs-comment">// 文件上传成功后，设置details字段的value</span><br>  <span class="hljs-keyword">const</span> setDetails = <span class="hljs-function"><span class="hljs-params">content</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">details</span>: content &#125;)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取用户详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showUser(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      setinitialValues(&#123;<br>        name: response.name,<br>        email: response.email,<br>      &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加用户</span><br>      response = <span class="hljs-keyword">await</span> addUser(values)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新用户</span><br>      response = <span class="hljs-keyword">await</span> updateUser(editId, values)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            form=&#123;formObj&#125;<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br><br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>              &lt;div&gt;<br>                &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>                  &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;点击上传商品主图&lt;/Button&gt;<br>                &lt;/AliyunOSSUpload&gt;<br>              &lt;/div&gt;<br>            &lt;/ProForm.Item&gt;<br><br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Editor setDetails=&#123;setDetails&#125; /&gt;<br>            &lt;/ProForm.Item&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h2 id="6-7-添加商品"><a href="#6-7-添加商品" class="headerlink" title="6.7 添加商品"></a>6.7 添加商品</h2><h3 id="6-7-1-添加商品接口文档"><a href="#6-7-1-添加商品接口文档" class="headerlink" title="6.7.1 添加商品接口文档"></a>6.7.1 添加商品接口文档</h3><h5 id="接口描述-15"><a href="#接口描述-15" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>添加商品</li></ul><h5 id="请求-URL-15"><a href="#请求-URL-15" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods</li></ul><h5 id="请求方式-15"><a href="#请求方式-15" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>POST</li></ul><h5 id="请求头部-12"><a href="#请求头部-12" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="Body-请求参数-4"><a href="#Body-请求参数-4" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>pics</td><td>否</td><td>array</td><td>小图集</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr></tbody></table><h5 id="返回示例-16"><a href="#返回示例-16" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 201 创建成功</li><li>状态码 400 请求错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>: [<br>            <span class="hljs-string">&quot;标题 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;category_id&quot;</span>: [<br>            <span class="hljs-string">&quot;category id 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;description&quot;</span>: [<br>            <span class="hljs-string">&quot;描述 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;price&quot;</span>: [<br>            <span class="hljs-string">&quot;price 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;stock&quot;</span>: [<br>            <span class="hljs-string">&quot;stock 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;cover&quot;</span>: [<br>            <span class="hljs-string">&quot;cover 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;pics&quot;</span>: [<br>            <span class="hljs-string">&quot;pics 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;details&quot;</span>: [<br>            <span class="hljs-string">&quot;details 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-7-2-添加添加商品接口"><a href="#6-7-2-添加添加商品接口" class="headerlink" title="6.7.2 添加添加商品接口"></a>6.7.2 添加添加商品接口</h3><p>在\src\services\goods.js 中，添加商品接口和获取商品列表接口是同一个接口，但是获取商品列表是<code>get</code>请求，添加商品是<code>post</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架和下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isOn</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/on`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 推荐和不推荐商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRecommend</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/recommend`</span>)<br>&#125;<br><br><span class="hljs-comment">// 添加商品</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，引入<code>import &#123; addGoods &#125; from &#39;@/services/goods&#39;;</code>添加商品接口<br>在提交表单时，执行添加</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br><span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>  <span class="hljs-built_in">console</span>.log(values)<br>  <span class="hljs-keyword">let</span> response = []<br>  <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-comment">// 执行添加</span><br>    <span class="hljs-comment">// 发送请求，添加商品</span><br>    response = <span class="hljs-keyword">await</span> addGoods(&#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 执行编辑</span><br>    <span class="hljs-comment">// 发送请求，更新商品</span><br>    <span class="hljs-comment">// response = await updateUser(editId, values);</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>    message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>    <span class="hljs-comment">// 刷新表格数据</span><br>    actionRef.current.reload()<br>    <span class="hljs-comment">// 关闭模态框</span><br>    isShowModal(<span class="hljs-literal">false</span>)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1622267547002-39018e6f-c9c3-43ab-bd26-4f99fa84e9ef.png#clientId=u07f7d054-2036-4&from=paste&height=306&id=u983b8f51&margin=%5Bobject%20Object%5D&name=image.png&originHeight=306&originWidth=672&originalType=binary&size=19356&status=done&style=none&taskId=u1ef4a3f6-2392-467e-b148-1a2ada35a53&width=672" alt="image.png"><br>其中我们要添加<code>category_id</code>二级分类的商品在 <code>response = await addGoods(&#123; ...values, category_id: values.category_id[1] &#125;);</code>中，我们先将<code>...values</code>展开，随后再处理二级分类的商品</p><h2 id="6-8-修改商品"><a href="#6-8-修改商品" class="headerlink" title="6.8 修改商品"></a>6.8 修改商品</h2><h3 id="6-8-1-商品详情接口文档、修改商品接口文档"><a href="#6-8-1-商品详情接口文档、修改商品接口文档" class="headerlink" title="6.8.1 商品详情接口文档、修改商品接口文档"></a>6.8.1 商品详情接口文档、修改商品接口文档</h3><h5 id="接口描述-16"><a href="#接口描述-16" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>商品详情</li></ul><h5 id="请求-URL-16"><a href="#请求-URL-16" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods/{good}</li></ul><h5 id="请求方式-16"><a href="#请求方式-16" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>GET</li></ul><h5 id="请求头部-13"><a href="#请求头部-13" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="REST-参数"><a href="#REST-参数" class="headerlink" title="REST 参数"></a>REST 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>good</td><td>是</td><td>int</td><td>商品 ID</td></tr></tbody></table><h5 id="Query-请求参数-3"><a href="#Query-请求参数-3" class="headerlink" title="Query 请求参数"></a>Query 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>include</td><td>否</td><td>string</td><td>包含额外的数据： category 分类，user 用户， comments 评论</td></tr></tbody></table><p><em>inlude 可以返回额外的数据， 多个使用 ， 分隔， 比如： include=category,user,comments</em></p><h5 id="返回参数-8"><a href="#返回参数-8" class="headerlink" title="返回参数"></a>返回参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必含</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>user_id</td><td>是</td><td>int</td><td>创建者</td></tr><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>sales</td><td>是</td><td>int</td><td>销量</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>cover_url</td><td>是</td><td>string</td><td>封面图 url</td></tr><tr><td>pics</td><td>是</td><td>array</td><td>小图集</td></tr><tr><td>pics_url</td><td>是</td><td>array</td><td>小图集 url</td></tr><tr><td>is_on</td><td>是</td><td>int</td><td>是否上架 0 不上架 1 上架</td></tr><tr><td>is_recommend</td><td>是</td><td>int</td><td>是否推荐 0 不推荐 1 推荐</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr><tr><td>category</td><td>否</td><td>object</td><td>额外的 分类 数据，使用 include 才会返回</td></tr><tr><td>user</td><td>否</td><td>object</td><td>额外的 用户 数据，使用 include 才会返回</td></tr><tr><td>comments</td><td>否</td><td>object</td><td>额外的 评论 数数，使用 include 才会返回</td></tr><tr><td>created_at</td><td>是</td><td>timestamp</td><td>添加时间</td></tr><tr><td>updated_at</td><td>是</td><td>timestamp</td><td>修改时间</td></tr></tbody></table><h5 id="返回示例-17"><a href="#返回示例-17" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 200 请求成功</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;电脑11111电脑&quot;</span>,<br>    <span class="hljs-string">&quot;category_id&quot;</span>: <span class="hljs-number">7</span>,<br>    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;这是一个电脑1111&quot;</span>,<br>    <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">5000</span>,<br>    <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">999</span>,<br>    <span class="hljs-string">&quot;sales&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;cover&quot;</span>: <span class="hljs-string">&quot;100x100.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;cover_url&quot;</span>: <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/100x100.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;pics&quot;</span>: [<br>        <span class="hljs-string">&quot;a.png&quot;</span>,<br>        <span class="hljs-string">&quot;b.png&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;pics_url&quot;</span>: [<br>        <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/a.png&quot;</span>,<br>        <span class="hljs-string">&quot;https://laravel-shop-api.oss-cn-beijing.aliyuncs.com/b.png&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;details&quot;</span>: <span class="hljs-string">&quot;这是一个电脑这是一个电脑这是一个电脑这是一个电脑&quot;</span>,<br>    <span class="hljs-string">&quot;is_on&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;is_recommend&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T07:38:37.000000Z&quot;</span>,<br>    <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-string">&quot;2020-12-12T10:13:45.000000Z&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="接口描述-17"><a href="#接口描述-17" class="headerlink" title="接口描述"></a>接口描述</h5><ul><li>修改商品</li></ul><h5 id="请求-URL-17"><a href="#请求-URL-17" class="headerlink" title="请求 URL"></a>请求 URL</h5><ul><li>/api/admin/goods/{good}</li></ul><h5 id="请求方式-17"><a href="#请求方式-17" class="headerlink" title="请求方式"></a>请求方式</h5><ul><li>PUT</li></ul><h5 id="请求头部-14"><a href="#请求头部-14" class="headerlink" title="请求头部"></a>请求头部</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Authorization</td><td>是</td><td>string</td><td>JWT token</td></tr></tbody></table><h5 id="RESET-参数-4"><a href="#RESET-参数-4" class="headerlink" title="RESET 参数"></a>RESET 参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>good</td><td>是</td><td>int</td><td>商品 id</td></tr></tbody></table><h5 id="Body-请求参数-5"><a href="#Body-请求参数-5" class="headerlink" title="Body 请求参数"></a>Body 请求参数</h5><table><thead><tr><th><strong>参数名</strong></th><th><strong>必选</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>category_id</td><td>是</td><td>int</td><td>分类</td></tr><tr><td>title</td><td>是</td><td>string</td><td>标题</td></tr><tr><td>description</td><td>是</td><td>string</td><td>描述</td></tr><tr><td>price</td><td>是</td><td>int</td><td>价格</td></tr><tr><td>stock</td><td>是</td><td>int</td><td>库存</td></tr><tr><td>cover</td><td>是</td><td>string</td><td>封面图</td></tr><tr><td>pics</td><td>否</td><td>array</td><td>小图集</td></tr><tr><td>details</td><td>是</td><td>string</td><td>详情</td></tr></tbody></table><h5 id="返回示例-18"><a href="#返回示例-18" class="headerlink" title="返回示例"></a>返回示例</h5><ul><li>状态码 204 成功</li><li>状态码 400 请求错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;分类不存在&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;分类被禁用&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;只能向2级分类添加商品&quot;</span>,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">400</span>,<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ul><li>状态码 422 参数错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The given data was invalid.&quot;</span>,<br>    <span class="hljs-string">&quot;errors&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>: [<br>            <span class="hljs-string">&quot;标题 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;category_id&quot;</span>: [<br>            <span class="hljs-string">&quot;category id 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;description&quot;</span>: [<br>            <span class="hljs-string">&quot;描述 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;price&quot;</span>: [<br>            <span class="hljs-string">&quot;price 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;stock&quot;</span>: [<br>            <span class="hljs-string">&quot;stock 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;cover&quot;</span>: [<br>            <span class="hljs-string">&quot;cover 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;pics&quot;</span>: [<br>            <span class="hljs-string">&quot;pics 不能为空。&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;details&quot;</span>: [<br>            <span class="hljs-string">&quot;details 不能为空。&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;status_code&quot;</span>: <span class="hljs-number">422</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-8-2-添加商品详情接口、修改商品接口"><a href="#6-8-2-添加商品详情接口、修改商品接口" class="headerlink" title="6.8.2 添加商品详情接口、修改商品接口"></a>6.8.2 添加商品详情接口、修改商品接口</h3><p>在\src\services\goods.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架和下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isOn</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/on`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 推荐和不推荐商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRecommend</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/recommend`</span>)<br>&#125;<br><br><span class="hljs-comment">// 添加商品</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 商品详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">editId</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showGoods</span>(<span class="hljs-params">editId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;editId&#125;</span>?include=category`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateGoods</span>(<span class="hljs-params">editId, params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.put(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>, &#123; params &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中商品详情接口，由于有二级列表所以要加上<code>?include=category</code></p><h3 id="6-8-3-获取商品详情数据并提交修改"><a href="#6-8-3-获取商品详情数据并提交修改" class="headerlink" title="6.8.3 获取商品详情数据并提交修改"></a>6.8.3 获取商品详情数据并提交修改</h3><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中先引入<code>import &#123; addGoods, showGoods, updateGoods &#125; from &#39;@/services/goods&#39;;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ProForm, &#123; ProFormText, ProFormTextArea, ProFormDigit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/pro-form&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Modal, message, Skeleton, Cascader, Button, Image &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span><br><span class="hljs-keyword">import</span> &#123; UploadOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ant-design/icons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; addGoods, showGoods, updateGoods &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/goods&#x27;</span><br><span class="hljs-keyword">import</span> &#123; getCategory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/services/category&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><span class="hljs-keyword">import</span> Editor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Editor&#x27;</span><br><br><span class="hljs-keyword">const</span> CreateOrEdit = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * isModalVisible 模态框是否显示</span><br><span class="hljs-comment">   * isShowModal 操作模态框显示隐藏的方法</span><br><span class="hljs-comment">   * actionRef 父组件传来的表格的引用，可以用来操作表格，比如刷新表单</span><br><span class="hljs-comment">   * editId 要编辑的id，添加的时候是undefined，只有编辑时才有</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> &#123; isModalVisible, isShowModal, actionRef, editId &#125; = props<br><br>  <span class="hljs-comment">// 将表单初始化的值设置成状态，在编辑的时候使用这个状态</span><br>  <span class="hljs-keyword">const</span> [initialValues, setInitialValues] = useState(<span class="hljs-literal">undefined</span>)<br>  <span class="hljs-keyword">const</span> [options, setOptions] = useState([])<br><br>  <span class="hljs-comment">// 定义Form实例，用来操作表单</span><br>  <span class="hljs-keyword">const</span> [formObj] = ProForm.useForm()<br><br>  <span class="hljs-comment">// 文件上传成功后，设置cover字段的value</span><br>  <span class="hljs-keyword">const</span> setCoverKey = <span class="hljs-function"><span class="hljs-params">fileKey</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">cover</span>: fileKey &#125;)<br><br>  <span class="hljs-comment">// 文件上传成功后，设置details字段的value</span><br>  <span class="hljs-keyword">const</span> setDetails = <span class="hljs-function"><span class="hljs-params">content</span> =&gt;</span> formObj.setFieldsValue(&#123; <span class="hljs-attr">details</span>: content &#125;)<br><br>  <span class="hljs-comment">// 添加或者编辑的描述</span><br>  <span class="hljs-keyword">const</span> type = editId === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;添加&#x27;</span> : <span class="hljs-string">&#x27;编辑&#x27;</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 查询分类数据</span><br>    <span class="hljs-keyword">const</span> resCategory = <span class="hljs-keyword">await</span> getCategory()<br>    <span class="hljs-keyword">if</span> (resCategory.status === <span class="hljs-literal">undefined</span>) setOptions(resCategory)<br><br>    <span class="hljs-comment">// 发送请求，获取商品详情</span><br>    <span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showGoods(editId)<br>      <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>      <span class="hljs-keyword">const</span> &#123; pid, id &#125; = response.category<br>      <span class="hljs-keyword">const</span> defaultCategory = pid === <span class="hljs-number">0</span> ? [id] : [pid, id]<br>      setInitialValues(&#123; ...response, <span class="hljs-attr">category_id</span>: defaultCategory &#125;)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> values =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = []<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加商品</span><br>      response = <span class="hljs-keyword">await</span> addGoods(&#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新商品</span><br>      response = <span class="hljs-keyword">await</span> updateGoods(editId, &#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>成功！`</span>)<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload()<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;Modal<br>      title=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;type&#125;</span>商品`</span>&#125;<br>      visible=&#123;isModalVisible&#125;<br>      onCancel=&#123;<span class="hljs-function">() =&gt;</span> isShowModal(<span class="hljs-literal">false</span>)&#125;<br>      footer=&#123;<span class="hljs-literal">null</span>&#125;<br>      destroyOnClose=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &#123;<br>        <span class="hljs-comment">// 只有是编辑的情况下，并且要显示的数据还有返回，才显示骨架框</span><br>        initialValues === <span class="hljs-literal">undefined</span> &amp;&amp; editId !== <span class="hljs-literal">undefined</span> ? (<br>          &lt;Skeleton active=&#123;<span class="hljs-literal">true</span>&#125; paragraph=&#123;&#123; <span class="hljs-attr">rows</span>: <span class="hljs-number">4</span> &#125;&#125; /&gt;<br>        ) : (<br>          &lt;ProForm<br>            form=&#123;formObj&#125;<br>            initialValues=&#123;initialValues&#125;<br>            onFinish=&#123;<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>              handleSubmit(values)<br>            &#125;&#125;&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;category_id&quot;</span><br>              label=<span class="hljs-string">&quot;分类&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Cascader<br>                fieldNames=&#123;&#123; <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;id&#x27;</span> &#125;&#125;<br>                options=&#123;options&#125;<br>                placeholder=<span class="hljs-string">&quot;请输入分类&quot;</span><br>              /&gt;<br>            &lt;/ProForm.Item&gt;<br>            &lt;ProFormText<br>              name=<span class="hljs-string">&quot;title&quot;</span><br>              label=<span class="hljs-string">&quot;商品名&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品名&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品名&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormTextArea<br>              name=<span class="hljs-string">&quot;description&quot;</span><br>              label=<span class="hljs-string">&quot;描述&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品描述&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品描述&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;price&quot;</span><br>              label=<span class="hljs-string">&quot;价格&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品价格&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商商品价格&#x27;</span> &#125;]&#125;<br>            /&gt;<br>            &lt;ProFormDigit<br>              name=<span class="hljs-string">&quot;stock&quot;</span><br>              label=<span class="hljs-string">&quot;库存&quot;</span><br>              placeholder=<span class="hljs-string">&quot;请输入商品库存&quot;</span><br>              min=&#123;<span class="hljs-number">0</span>&#125;<br>              max=&#123;<span class="hljs-number">99999999</span>&#125;<br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品库存&#x27;</span> &#125;]&#125;<br>            /&gt;<br><br>            &lt;ProFormText name=<span class="hljs-string">&quot;cover&quot;</span> hidden=&#123;<span class="hljs-literal">true</span>&#125; /&gt;<br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;cover&quot;</span><br>              label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;&gt;<br>              &lt;div&gt;<br>                &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>                  &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;点击上传商品主图&lt;/Button&gt;<br>                &lt;/AliyunOSSUpload&gt;<br>                &#123;!initialValues.cover_url ? (<br>                  <span class="hljs-string">&#x27;&#x27;</span><br>                ) : (<br>                  &lt;Image width=&#123;<span class="hljs-number">200</span>&#125; src=&#123;initialValues.cover_url&#125; /&gt;<br>                )&#125;<br>              &lt;/div&gt;<br>            &lt;/ProForm.Item&gt;<br><br>            &lt;ProForm.Item<br>              name=<span class="hljs-string">&quot;details&quot;</span><br>              label=<span class="hljs-string">&quot;商品详情&quot;</span><br>              rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;&gt;<br>              &lt;Editor setDetails=&#123;setDetails&#125; content=&#123;initialValues.details&#125; /&gt;<br>            &lt;/ProForm.Item&gt;<br>          &lt;/ProForm&gt;<br>        )<br>      &#125;<br>    &lt;/Modal&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> CreateOrEdit<br></code></pre></div></td></tr></table></figure><h4 id="1-获取商品列表，处理商品分类"><a href="#1-获取商品列表，处理商品分类" class="headerlink" title="1.获取商品列表，处理商品分类"></a>1.获取商品列表，处理商品分类</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中<br>后端字段和前端设置的字段一样能够直接赋值，所以先将数据<code>...response</code>展开。后单独设置<code>category_id: defaultCategory</code>，因为有二级菜单，后端用的数组表示，所以解构<code>response.category</code>分别将二级菜单<code>pid</code>，一级菜单<code>id</code>填入数组赋值给<code>category_id</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送请求，获取商品详情</span><br><span class="hljs-keyword">if</span> (editId !== <span class="hljs-literal">undefined</span>) &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> showGoods(editId)<br>  <span class="hljs-comment">// 获取数据之后,修改状态；状态改变，组件重新渲染，骨架框消失，编辑表单出现</span><br>  <span class="hljs-keyword">const</span> &#123; pid, id &#125; = response.category<br>  <span class="hljs-keyword">const</span> defaultCategory = pid === <span class="hljs-number">0</span> ? [id] : [pid, id]<br>  setInitialValues(&#123; ...response, <span class="hljs-attr">category_id</span>: defaultCategory &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-处理图片获取"><a href="#2-处理图片获取" class="headerlink" title="2.处理图片获取"></a>2.处理图片获取</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中,<br>先处理图片显示，用三目运算符判断原来是否有图片，没有则为空，有则添加图片<code>&lt;Image width=&#123;200&#125; src=&#123;initialValues.cover_url&#125; /&gt;</code><br>但是我们在点击上传图片时需要上传<code>cover</code>，当我们添加新图片时<code>cover</code>会被重新设置，所以将它隐藏起来<br><code>&lt;ProFormText name=&quot;cover&quot; hidden=&#123;true&#125; /&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProFormText name=<span class="hljs-string">&quot;cover&quot;</span> hidden=&#123;<span class="hljs-literal">true</span>&#125; /&gt;<br>&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;cover&quot;</span><br>  label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>&gt;<br>  &lt;div&gt;<br>    &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;点击上传商品主图&lt;/Button&gt;<br>    &lt;/AliyunOSSUpload&gt;<br>    &#123;!initialValues.cover_url ? (<br>      <span class="hljs-string">&#x27;&#x27;</span><br>    ) : (<br>      &lt;Image width=&#123;<span class="hljs-number">200</span>&#125; src=&#123;initialValues.cover_url&#125; /&gt;<br>    )&#125;<br>  &lt;/div&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><h4 id="3-处理富文本显示"><a href="#3-处理富文本显示" class="headerlink" title="3.处理富文本显示"></a>3.处理富文本显示</h4><p>在 src\pages\Goods\components\CreateOrEdit.jsx 中，在<code>Editor</code>组件设置<code>content</code>接收到原来的值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Editor setDetails=&#123;setDetails&#125; content=&#123;initialValues.details&#125; /&gt;<br></code></pre></div></td></tr></table></figure><p>在\src\components\Editor\index.jsx 中，，设置显示富文本的内容</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">// 引入编辑器组件</span><br><span class="hljs-keyword">import</span> BraftEditor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-editor&#x27;</span><br><span class="hljs-comment">// 引入编辑器样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;braft-editor/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.less&#x27;</span><br><span class="hljs-keyword">import</span> AliyunOSSUpload <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/AliyunOSSUpload&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ContentUtils &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;braft-utils&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EditorDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  state = &#123;<br>    <span class="hljs-comment">// 创建一个空的editorState作为初始值</span><br>    editorState: BraftEditor.createEditorState(<span class="hljs-built_in">this</span>.props.content ?? <span class="hljs-literal">null</span>),<br>  &#125;<br><br>  <span class="hljs-comment">// 编辑器内容改变的时候执行</span><br>  handleEditorChange = <span class="hljs-function"><span class="hljs-params">editorState</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 更新编辑器的状态</span><br>    <span class="hljs-built_in">this</span>.setState(&#123; editorState &#125;)<br>    <span class="hljs-comment">// 要判断输入的内容，如果有内容设置输入的内容；如果没有内容设置成空字符串</span><br>    <span class="hljs-comment">// 为什么要这样判断，因为即使是空内容editorState.toHTML()也是一对空标签，不能直接给表单使用</span><br>    <span class="hljs-keyword">if</span> (!editorState.isEmpty()) &#123;<br>      <span class="hljs-comment">// 可直接调用editorState.toHTML()来获取HTML格式的内容</span><br>      <span class="hljs-keyword">const</span> content = editorState.toHTML()<br>      <span class="hljs-comment">// 调用父组件的函数，将编辑器输入的内容传递回去</span><br>      <span class="hljs-built_in">this</span>.props.setDetails(content)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.props.setDetails(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 图片上传完成后执行此方法，用来在编译器中显示图片</span><br>  insertImage = <span class="hljs-function"><span class="hljs-params">url</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123;<br>      editorState: ContentUtils.insertMedias(<span class="hljs-built_in">this</span>.state.editorState, [<br>        &#123;<br>          type: <span class="hljs-string">&#x27;IMAGE&#x27;</span>,<br>          url,<br>        &#125;,<br>      ]),<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// 自定义控件--插入图片</span><br>    <span class="hljs-keyword">const</span> extendControls = [<br>      &#123;<br>        key: <span class="hljs-string">&#x27;antd-uploader&#x27;</span>,<br>        type: <span class="hljs-string">&#x27;component&#x27;</span>,<br>        component: (<br>          &lt;AliyunOSSUpload insertImage=&#123;<span class="hljs-built_in">this</span>.insertImage&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">false</span>&#125;&gt;<br>            &#123;<span class="hljs-comment">/* 这里的按钮最好加上type=&quot;button&quot;，以避免在表单容器中触发表单提交，用Antd的Button组件则无需如此 */</span>&#125;<br>            &lt;button<br>              type=<span class="hljs-string">&quot;button&quot;</span><br>              className=<span class="hljs-string">&quot;control-item button upload-button&quot;</span><br>              data-title=<span class="hljs-string">&quot;插入图片&quot;</span>&gt;<br>              插入图片<br>            &lt;/button&gt;<br>          &lt;/AliyunOSSUpload&gt;<br>        ),<br>      &#125;,<br>    ]<br><br>    <span class="hljs-keyword">const</span> &#123; editorState &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div className=<span class="hljs-string">&quot;my-component&quot;</span>&gt;<br>        &lt;BraftEditor<br>          value=&#123;editorState&#125;<br>          onChange=&#123;<span class="hljs-built_in">this</span>.handleEditorChange&#125;<br>          extendControls=&#123;extendControls&#125;<br>        /&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中<code>editorState: BraftEditor.createEditorState(this.props.content ?? null),</code>是关键代码，</p><p><code>this.props.content ?? null</code>是三目运算符简写，如果<code>this.props.content</code>有值就传值显示在富文本上，没有就<code>null</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">state = &#123;<br>  <span class="hljs-comment">// 创建一个空的editorState作为初始值</span><br>  editorState: BraftEditor.createEditorState(<span class="hljs-built_in">this</span>.props.content ?? <span class="hljs-literal">null</span>),<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-提交表单更新商品"><a href="#4-提交表单更新商品" class="headerlink" title="4.提交表单更新商品"></a>4.提交表单更新商品</h4><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，添加<code>updateGoods</code>接口</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// 提交表单，执行编辑或者添加</span><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-keyword">async</span> (values) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> response = [];<br>    <span class="hljs-keyword">if</span> (editId === <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 执行添加</span><br>      <span class="hljs-comment">// 发送请求，添加商品</span><br>      response = <span class="hljs-keyword">await</span> addGoods(&#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 执行编辑</span><br>      <span class="hljs-comment">// 发送请求，更新商品</span><br>      response = <span class="hljs-keyword">await</span> updateGoods(editId, &#123; ...values, <span class="hljs-attr">category_id</span>: values.category_id[<span class="hljs-number">1</span>] &#125;);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-literal">undefined</span>) &#123;<br>      message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-keyword">type</span>&#125;</span>成功！`</span>);<br>      <span class="hljs-comment">// 刷新表格数据</span><br>      actionRef.current.reload();<br>      <span class="hljs-comment">// 关闭模态框</span><br>      isShowModal(<span class="hljs-literal">false</span>);<br>    &#125;<br>  &#125;;<br></code></pre></div></td></tr></table></figure><h1 id="七、项目总结和优化"><a href="#七、项目总结和优化" class="headerlink" title="七、项目总结和优化"></a>七、项目总结和优化</h1><h2 id="7-1-优化新建时报错"><a href="#7-1-优化新建时报错" class="headerlink" title="7.1 优化新建时报错"></a>7.1 优化新建时报错</h2><p>在\src\pages\Goods\components\CreateOrEdit.jsx 中，由于<code>initialValues</code>没有初始化，刚开始是<code>undefined</code>，所以添加一个判断</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;cover&quot;</span><br>  label=<span class="hljs-string">&quot;上传商品主图&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请选择商品主图&#x27;</span> &#125;]&#125;<br>&gt;<br>  &lt;div&gt;<br>    &lt;AliyunOSSUpload setCoverKey=&#123;setCoverKey&#125; accept=<span class="hljs-string">&quot;image/*&quot;</span> showUploadList=&#123;<span class="hljs-literal">true</span>&#125;&gt;<br>      &lt;Button icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UploadOutlined</span> /&gt;</span></span>&#125;&gt;点击上传商品主图&lt;/Button&gt;<br>    &lt;/AliyunOSSUpload&gt;<br>    &#123;initialValues === <span class="hljs-literal">undefined</span> || !initialValues.cover_url ? (<br>      <span class="hljs-string">&#x27;&#x27;</span><br>    ) : (<br>      &lt;Image<br>        width=&#123;<span class="hljs-number">200</span>&#125;<br>        src=&#123;initialValues === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;&#x27;</span> : initialValues.cover_url&#125;<br>      /&gt;<br>    )&#125;<br>  &lt;/div&gt;<br>&lt;/ProForm.Item&gt;<br><br>&lt;ProForm.Item<br>  name=<span class="hljs-string">&quot;details&quot;</span><br>  label=<span class="hljs-string">&quot;商品详情&quot;</span><br>  rules=&#123;[&#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入商品详情&#x27;</span> &#125;]&#125;<br>&gt;<br>  &lt;Editor<br>    setDetails=&#123;setDetails&#125;<br>    content=&#123;initialValues === <span class="hljs-literal">undefined</span> ? <span class="hljs-string">&#x27;&#x27;</span> : initialValues.details&#125;<br>  /&gt;<br>&lt;/ProForm.Item&gt;<br></code></pre></div></td></tr></table></figure><h2 id="7-2-优化刷新重定向问题"><a href="#7-2-优化刷新重定向问题" class="headerlink" title="7.2 优化刷新重定向问题"></a>7.2 优化刷新重定向问题</h2><p>在\src\models\user.js 中，先判断是请求的接口否有<code>userInfo.id</code>，有的话才将用户信息存入<code>localStorage</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取用户信息</span><br>*<span class="hljs-function"><span class="hljs-title">fetchCurrent</span>(<span class="hljs-params">_, &#123; call, put &#125;</span>)</span> &#123;<br>  <span class="hljs-comment">// 查看localstorage是否有用户信息，没有再去请求</span><br>  <span class="hljs-keyword">let</span> userInfo = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>));<br>  <span class="hljs-keyword">if</span> (!userInfo) &#123;<br>    userInfo = <span class="hljs-keyword">yield</span> call(queryCurrent);<br><br>    <span class="hljs-comment">// 判断是否获取到用户信息，再把用户信息存入localstorage</span><br>    <span class="hljs-keyword">if</span> (userInfo.id !== <span class="hljs-literal">undefined</span>) <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>, <span class="hljs-built_in">JSON</span>.stringify(userInfo));<br><br>    <span class="hljs-comment">// 完善登录，修复BUG：有时候userInfo返回的是useCache=false被误存入localStorage，错误的userInfo导致页面一直刷新</span><br>    <span class="hljs-comment">// if (userInfo.useCache !== false) localStorage.setItem(&#x27;userInfo&#x27;, JSON.stringify(userInfo));</span><br>  &#125;<br>  <span class="hljs-keyword">yield</span> put(&#123;<br>    type: <span class="hljs-string">&#x27;saveCurrentUser&#x27;</span>,<br>    payload: userInfo,<br>  &#125;);<br>&#125;,<br></code></pre></div></td></tr></table></figure><h2 id="7-3-优化-401-异常处理重定向到登录页"><a href="#7-3-优化-401-异常处理重定向到登录页" class="headerlink" title="7.3 优化 401 异常处理重定向到登录页"></a>7.3 优化 401 异常处理重定向到登录页</h2><p>在\src\utils\request.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 处理401的情况</span><br><span class="hljs-keyword">if</span> (status === <span class="hljs-number">401</span>) &#123;<br>  <span class="hljs-comment">// 清空用户本地缓存的token和用户信息</span><br>  <span class="hljs-comment">// 删除本地存储的token和userInfo</span><br>  <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;access_token&#x27;</span>)<br>  <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>)<br><br>  <span class="hljs-comment">// 跳转到登录页</span><br>  <span class="hljs-comment">// 重定向到登录页</span><br>  history.replace(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="7-4-修复传参问题"><a href="#7-4-修复传参问题" class="headerlink" title="7.4 修复传参问题"></a>7.4 修复传参问题</h2><h3 id="关于-request-第二参数，常用两个传参方式"><a href="#关于-request-第二参数，常用两个传参方式" class="headerlink" title="关于 request 第二参数，常用两个传参方式"></a>关于 request 第二参数，常用两个传参方式</h3><p>1.params 传参，也就是 query 传参，多用于 get 请求，查询数据使用，类型是对象或者 URLSearchParams<br>2.data 传参，也就是 body 传参，多用于提交表单数据，类型是 any，推荐使用对象</p><p>在\src\services\user.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addUser</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/users&#x27;</span>, &#123; data &#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateUser</span>(<span class="hljs-params">editId, data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.put(<span class="hljs-string">`/admin/users/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>, &#123; data &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\services\login.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeAccountLogin</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/auth/login&#x27;</span>, &#123;<br>    method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    data,<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logout</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/auth/logout&#x27;</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在\src\services\goods.js 中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-comment">// 获取商品列表</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGoods</span>(<span class="hljs-params">params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; params &#125;)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架和下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isOn</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/on`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 推荐和不推荐商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;商品id&#125;</span> <span class="hljs-variable">goodsid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRecommend</span>(<span class="hljs-params">goodsId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.patch(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;goodsId&#125;</span>/recommend`</span>)<br>&#125;<br><br><span class="hljs-comment">// 添加商品</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addGoods</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.post(<span class="hljs-string">&#x27;/admin/goods&#x27;</span>, &#123; data &#125;)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 商品详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">editId</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showGoods</span>(<span class="hljs-params">editId</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;editId&#125;</span>?include=category`</span>)<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">params</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateGoods</span>(<span class="hljs-params">editId, data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request.put(<span class="hljs-string">`/admin/goods/<span class="hljs-subst">$&#123;editId&#125;</span>`</span>, &#123; data &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd Pro</tag>
      
      <tag>React</tag>
      
      <tag>Umi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>errorBoundary错误边界</title>
    <link href="/2021/05/13/errorBoundary%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C/"/>
    <url>/2021/05/13/errorBoundary%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h2><p>错误边界：用来捕获后代组件错误，渲染出备用页面<br>​</p><p>子组件出现错误，导致组件不可控，出现穿透影响其他组件显示<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620891793939-814a3455-ac2e-45eb-9d24-eb78ca4677df.png#clientId=ud80257e6-e9cf-4&from=paste&height=384&id=u362f825b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=384&originWidth=1290&originalType=binary&size=453765&status=done&style=none&taskId=u67a5be2c-356d-4896-a5fc-de771370360&width=1290" alt="image.png"></p><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><p>只能捕获后代组件生命周期产生的错误，比如<code>render</code>里产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误<br>​</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>在父组件中设置<code>getDerivedStateFromError</code>，当后代组件出现错误时，<code>getDerivedStateFromError</code>就会触发，并且携带错误信息。（常常调用API中的数据时会出错）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React，&#123;Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> Children <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./children&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>state = &#123;<span class="hljs-attr">hasError</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;<br><br>    <span class="hljs-comment">// 生命周期函数，一旦后台组件报错，就会触发</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">getDerivedStateFromError</span>(<span class="hljs-params">error</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(error);<br>      <span class="hljs-comment">// 在render之前触发</span><br>      <span class="hljs-comment">// 返回新的state</span><br>      <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span> &#125;;<br>  &#125;<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;h3&gt;我是Parent组件&lt;/h3&gt;<br>      &#123;<span class="hljs-built_in">this</span>.state.hasError ? <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>请求繁忙，请稍后再试...<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span> : <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Children</span> /&gt;</span></span>&#125;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p><code>getDerivedStateFromError</code>配合<code>componentDidCatch</code>使用，<code>componentDidCatch</code>是出现错误时执行，一般用于统计并记录错误的信息</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 生命周期函数，一旦后台组件报错，就会触发</span><br><span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">getDerivedStateFromError</span>(<span class="hljs-params">error</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(error);<br>    <span class="hljs-comment">// 在render之前触发</span><br>    <span class="hljs-comment">// 返回新的state</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">hasError</span>: <span class="hljs-literal">true</span>&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">componentDidCatch</span>(<span class="hljs-params">error, info</span>)</span> &#123;<br>    <span class="hljs-comment">// 统计页面的错误,发送请求发送到后台去</span><br>    <span class="hljs-built_in">console</span>.log(error, info);<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>错误边界</tag>
      
      <tag>组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组件间的通信方式总结</title>
    <link href="/2021/05/13/%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2021/05/13/%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="组件间的关系"><a href="#组件间的关系" class="headerlink" title="组件间的关系:"></a>组件间的关系:</h2><ul><li><strong>父子组件</strong></li><li><strong>兄弟组件(非嵌套组件)</strong></li><li><strong>祖孙组件(跨级组件)</strong></li></ul><h2 id="几种通信方式："><a href="#几种通信方式：" class="headerlink" title="几种通信方式："></a>几种通信方式：</h2><ol><li><strong>props</strong>:<ol><li><code>childen props</code></li><li><code>render props</code></li></ol></li><li><strong>消息订阅-发布</strong>：<code>pubs-sub</code>、<code>event</code>等</li><li><strong>集中式管理</strong>：<code>redux</code>、<code>dva</code>等</li><li><strong>conText</strong>：生产者-消费者模式</li></ol><h2 id="比较好的搭配方式："><a href="#比较好的搭配方式：" class="headerlink" title="比较好的搭配方式："></a>比较好的搭配方式：</h2><p><strong>父子组件</strong>：<code>props</code><br><strong>兄弟组件</strong>：消息订阅-发布、集中式管理<br>**祖孙组件(跨级组件)**：消息订阅-发布、集中式管理、<code>conText</code>(开发用的少，封装插件用的多)<br>​</p>]]></content>
    
    
    <categories>
      
      <category>组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>组件</tag>
      
      <tag>通信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Antd Pro 快速上手</title>
    <link href="/2021/05/07/Antd%20Pro%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <url>/2021/05/07/Antd%20Pro%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<p>Antd Pro官网<a href="https://pro.ant.design/docs/getting-started-cn">https://pro.ant.design/docs/getting-started-cn</a></p><h2 id="第一步，安装-umi"><a href="#第一步，安装-umi" class="headerlink" title="第一步，安装 umi"></a>第一步，安装 umi</h2><p><code>yarn create umi</code></p><h2 id="第二步，选择-ant-design-pro"><a href="#第二步，选择-ant-design-pro" class="headerlink" title="第二步，选择 ant-design-pro"></a>第二步，选择 ant-design-pro</h2><p><code>ant-design-pro </code><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620363053142-3ecfe8fa-5853-4fbd-a60e-0c803f88ea0d.png#clientId=uebac18f4-dbcb-4&from=paste&height=308&id=uac99949c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=308&originWidth=723&originalType=binary&size=34564&status=done&style=none&taskId=u13af6859-cfb9-4785-b5b3-e5f1ce86d6a&width=723" alt="image.png"><br>根据需求选择不同的版本、语言、完整区块或核心脚手架</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">success Installed <span class="hljs-string">&quot;create-umi@0.26.0&quot;</span> <span class="hljs-keyword">with</span> binaries:<br>      - create-umi<br>? Select the boilerplate type ant-design-pro<br><br>? ? Be the first to experience the <span class="hljs-keyword">new</span> umi@<span class="hljs-number">3</span> ? Pro V4<br>? ? Which language <span class="hljs-keyword">do</span> you want to use? JavaScript<br>? ? Do you need all the blocks or a simple scaffold? complete<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620363334538-4e1f62b4-024c-46ae-961f-016f35ad995b.png#clientId=uebac18f4-dbcb-4&from=paste&height=380&id=u6c4ab34f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=380&originWidth=723&originalType=binary&size=48746&status=done&style=none&taskId=u74320950-d639-4bd7-bff5-48e0366e982&width=723" alt="image.png"></p><h2 id="第三步，安装依赖包"><a href="#第三步，安装依赖包" class="headerlink" title="第三步，安装依赖包"></a>第三步，安装依赖包</h2><p>推荐使用<code>yarn install </code>，如果安装失败 清理缓存<code>yarn cache clean</code>，重新安装多试几次<br><code>yarn install </code><br>安装完成<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620364412433-a0fbda2e-cad0-4e62-a5d9-c0a131e45a7f.png#clientId=uebac18f4-dbcb-4&from=paste&height=348&id=ue0103481&margin=%5Bobject%20Object%5D&name=image.png&originHeight=348&originWidth=717&originalType=binary&size=47155&status=done&style=none&taskId=u273cdc48-904a-46cb-a8a1-c4585953c84&width=717" alt="image.png"><br>启动<br><code>yarn start</code>   </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn run v1<span class="hljs-number">.22</span><span class="hljs-number">.5</span><br>$ cross-env UMI_ENV=dev umi dev<br>Starting the development server...<br><br>√ Webpack<br>  Compiled successfully <span class="hljs-keyword">in</span> <span class="hljs-number">47.</span>11s<br><br> DONE  Compiled successfully <span class="hljs-keyword">in</span> 47119ms                              下午<span class="hljs-number">1</span>:<span class="hljs-number">28</span>:<span class="hljs-number">37</span><br><br><br>  App running at:<br>  - Local:   http:<span class="hljs-comment">//localhost:8001 (copied to clipboard)</span><br>  - Network: http:<span class="hljs-comment">//192.168.43.198:8001</span><br></code></pre></div></td></tr></table></figure><p>点击<a href="http://localhost:8001/">http://localhost:8001</a>进入<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620365347570-94ccfe46-b7e6-4dc1-98a0-caaf4053969a.png#clientId=uebac18f4-dbcb-4&from=paste&height=1006&id=uaa9c11dd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1006&originWidth=1901&originalType=binary&size=166904&status=done&style=none&taskId=u68d647f6-675d-4ade-b0cc-9b74827ab1e&width=1901" alt="image.png"></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>我们已经为你生成了一个完整的开发框架，提供了涵盖中后台开发的各类功能和坑位，下面是整个项目的目录结构。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">├── config                   # umi 配置，包含路由，构建等配置<br>├── mock                     # 本地模拟数据<br>├── public<br>│   └── favicon.png          # Favicon<br>├── src<br>│   ├── assets               # 本地静态资源<br>│   ├── components           # 业务通用组件<br>│   ├── e2e                  # 集成测试用例<br>│   ├── layouts              # 通用布局<br>│   ├── models               # 全局 dva model<br>│   ├── pages                # 业务页面入口和常用模板<br>│   ├── services             # 后台接口服务<br>│   ├── utils                # 工具库<br>│   ├── locales              # 国际化资源<br>│   ├── global.less          # 全局样式<br>│   └── global.ts            # 全局 JS<br>├── tests                    # 测试工具<br>├── README.md<br>└── package.json<br></code></pre></div></td></tr></table></figure><h3 id="页面代码结构推荐"><a href="#页面代码结构推荐" class="headerlink" title="页面代码结构推荐"></a>页面代码结构推荐</h3><p>为了让项目代码组织更加规范，让开发能够更方便的定位到相关页面组件代码，我们定义了一套规范，该规范当前只作为推荐的指导，并非强制。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">src<br>├── components<br>└── pages<br>    ├── Welcome        <span class="hljs-comment">// 路由组件下不应该再包含其他路由组件，基于这个约定就能清楚的区分路由组件和非路由组件了</span><br>    |   ├── components <span class="hljs-comment">// 对于复杂的页面可以再自己做更深层次的组织，但建议不要超过三层</span><br>    |   ├── Form.tsx<br>    |   ├── index.tsx  <span class="hljs-comment">// 页面组件的代码</span><br>    |   └── index.less <span class="hljs-comment">// 页面样式</span><br>    ├── Order          <span class="hljs-comment">// 路由组件下不应该再包含其他路由组件，基于这个约定就能清楚的区分路由组件和非路由组件了</span><br>    |   ├── index.tsx<br>    |   └── index.less<br>    ├── user           <span class="hljs-comment">// 一系列页面推荐通过小写的单一字母做 group 目录</span><br>    |   ├── components <span class="hljs-comment">// group 下公用的组件集合</span><br>    |   ├── Login      <span class="hljs-comment">// group 下的页面 Login</span><br>    |   ├── Register   <span class="hljs-comment">// group 下的页面 Register</span><br>    |   └── util.ts    <span class="hljs-comment">// 这里可以有一些共用方法之类，不做推荐和约束，看业务场景自行做组织</span><br>    └── *              <span class="hljs-comment">// 其它页面组件代码</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UmiJS</tag>
      
      <tag>Antd</tag>
      
      <tag>Antd Pro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在React中antd实现前端在线解析csv文件</title>
    <link href="/2021/05/06/%E5%9C%A8React%E4%B8%ADantd%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E5%9C%A8%E7%BA%BF%E8%A7%A3%E6%9E%90csv%E6%96%87%E4%BB%B6/"/>
    <url>/2021/05/06/%E5%9C%A8React%E4%B8%ADantd%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E5%9C%A8%E7%BA%BF%E8%A7%A3%E6%9E%90csv%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-在本地新建一个-csv文件"><a href="#1-在本地新建一个-csv文件" class="headerlink" title="1.在本地新建一个.csv文件"></a>1.在本地新建一个.csv文件</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620230292970-83538686-34c1-4ecc-a87e-ef8672bf09b4.png#clientId=ufe86c338-c935-4&from=paste&height=285&id=uf8151a50&margin=%5Bobject%20Object%5D&name=image.png&originHeight=304&originWidth=812&originalType=binary&size=38517&status=done&style=none&taskId=u466fec12-80f5-4c74-b6cd-d72bbb4ec8a&width=762" alt="image.png"></p><h2 id="2-实现代码"><a href="#2-实现代码" class="headerlink" title="2.实现代码"></a>2.实现代码</h2><p>安装<code>papaparse</code>和<code>jschardet</code>插件，<code>npm install papapars</code>、<code>npm install jschardet</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Upload, Button, Icon &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><span class="hljs-keyword">import</span> Papa <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;papaparse&#x27;</span>; <span class="hljs-comment">// 解析scv插件 市面上使用较多的</span><br><span class="hljs-keyword">import</span> jschardet <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jschardet&#x27;</span>; <span class="hljs-comment">// 编码识别</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Csv</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>    <span class="hljs-built_in">this</span>.state = &#123;<br>      csvParseData: [],<br>    &#125;;<br>  &#125;<br>  <span class="hljs-comment">// 检查编排</span><br>  checkEncoding = <span class="hljs-function">(<span class="hljs-params">base64Str</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//这种方式得到的是一种二进制串</span><br>    <span class="hljs-keyword">const</span> str = atob(base64Str.split(<span class="hljs-string">&quot;;base64,&quot;</span>)[<span class="hljs-number">1</span>]); <span class="hljs-comment">// atob  方法 Window 对象 定义和用法 atob() 方法用于解码使用 base-64 编码的字符</span><br>    <span class="hljs-comment">//要用二进制格式</span><br>    <span class="hljs-keyword">let</span> encoding = jschardet.detect(str);<br>    encoding = encoding.encoding;<br>    <span class="hljs-comment">// 有时候会识别错误</span><br>    <span class="hljs-keyword">if</span>(encoding == <span class="hljs-string">&quot;windows-1252&quot;</span>)&#123;<br>      encoding = <span class="hljs-string">&quot;ANSI&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> encoding;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> _this = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">const</span> props = &#123;<br>      beforeUpload: <span class="hljs-function"><span class="hljs-params">file</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> fReader = <span class="hljs-keyword">new</span> FileReader();<br>        fReader.readAsDataURL(file); <span class="hljs-comment">//  readAsDataURL 读取本地文件 得到的是一个base64值</span><br>        fReader.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>)</span>&#123;<span class="hljs-comment">// 读取文件成功</span><br>          <span class="hljs-keyword">const</span> data = evt.target.result;<br>          <span class="hljs-keyword">const</span> encoding = _this.checkEncoding(data);<br>          <span class="hljs-comment">//papaparse.js 用来解析转换成二维数组</span><br>          Papa.parse(file, &#123;<br>            encoding: encoding,<br>            complete: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">results</span>) </span>&#123;        <span class="hljs-comment">// UTF8 \r\n与\n混用时有可能会出问题</span><br>              <span class="hljs-keyword">const</span> res = results.data;<br>              <span class="hljs-keyword">if</span>(res[res.length - <span class="hljs-number">1</span>] === <span class="hljs-string">&quot;&quot;</span>)&#123;    <span class="hljs-comment">//去除最后的空行 有些解析数据尾部会多出空格</span><br>                res.pop();<br>              &#125;<br>              <span class="hljs-comment">// 当前res 就是二维数组的值 数据拿到了 那么在前端如何处理渲染 就根据需求再做进一步操作了</span><br>              _this.setState(res);<br>              <span class="hljs-built_in">console</span>.log(res)<br>            &#125;<br>          &#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;Upload &#123;...props&#125;&gt;<br>        &lt;Button&gt;<br>          &lt;Icon type=<span class="hljs-string">&quot;upload&quot;</span> /&gt; 点击上传csv<br>        &lt;/Button&gt;<br>      &lt;/Upload&gt;<br>    );<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-获取结果"><a href="#3-获取结果" class="headerlink" title="3.获取结果"></a>3.获取结果</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620230653971-df05dd7f-67c9-462c-b843-17e4c4451006.png#clientId=ufe86c338-c935-4&from=paste&height=262&id=u93bb8177&margin=%5Bobject%20Object%5D&name=image.png&originHeight=262&originWidth=591&originalType=binary&size=32406&status=done&style=none&taskId=u2df8a61a-af48-4a59-a221-c6914b2c20c&width=591" alt="image.png"><br><strong>如上图就是最终拿到的值 和我们新建测试的csv文件数据是一致的 中文也没有出现乱码 前端解析csv也就实现了</strong></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd</tag>
      
      <tag>React</tag>
      
      <tag>csv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个tcp连接能发几个http请求</title>
    <link href="/2021/05/05/%E4%B8%80%E4%B8%AAtcp%E8%BF%9E%E6%8E%A5%E8%83%BD%E5%8F%91%E5%87%A0%E4%B8%AAhttp%E8%AF%B7%E6%B1%82/"/>
    <url>/2021/05/05/%E4%B8%80%E4%B8%AAtcp%E8%BF%9E%E6%8E%A5%E8%83%BD%E5%8F%91%E5%87%A0%E4%B8%AAhttp%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>如果是http1.0，一个tcp连接只能发一个http请求，因为是HTTP/1.1开始才有Connection 头，引入了持续连接的概念，只要不断开，就能够持续发。所以一个tcp连接能发多个http请求。</p><p>HTTP/1.0 :一个tcp连接只能发一个http请求。每次服务端返回响应后TCP连接会断开。<br>HTTP/1.1: 默认开启Connection: keep-alive，一个TCP连接可以发多个http请求，但是多个请求是串行执行。（注意区别TCP的keep-alive）<br>HTTP/2: 引入了多路复用技术 和二进制分帧，同个域名下的请求只需要占用一个 TCP 连接，请求和响应是并行执行。</p><p>如果是HTTP 1.0 版本协议，一般情况下，不支持长连接，因此在每次请求发送完毕之后，TCP连接即会断开，因此一个TCP发送一个HTTP请求，但是有一种情况可以将一条TCP连接保持在活跃状态，那就是通过Connection和Keep-Alive首部，在请求头带上Connection: Keep-Alive，并且可以通过Keep-Alive通用首部中指定的，用逗号分隔的选项调节keep-alive的行为，如果客户端和服务端都支持，那么其实也可以发送多条，不过此方式也有限制，可以关注《HTTP 权威指南》4.5.5 节对于Keep-Alive连接的限制和规则；<br>而如果是HTTP 1.1 版本协议，支持了长连接，因此只要TCP连接不断开，便可以一直发送HTTP请求，持续不断，没有上限；<br>同样，如果是HTTP 2.0 版本协议，支持多用复用，一个TCP连接是可以并发多个HTTP请求的，同样也是支持长连接，因此只要不断开TCP的连接，HTTP请求数也是可以没有上限地持续发送，</p>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
      <tag>TCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅了解_React为何需要设定唯一key值</title>
    <link href="/2021/05/05/%E6%B5%85%E4%BA%86%E8%A7%A3-React%E4%B8%BA%E4%BD%95%E9%9C%80%E8%A6%81%E8%AE%BE%E5%AE%9A%E5%94%AF%E4%B8%80key%E5%80%BC/"/>
    <url>/2021/05/05/%E6%B5%85%E4%BA%86%E8%A7%A3-React%E4%B8%BA%E4%BD%95%E9%9C%80%E8%A6%81%E8%AE%BE%E5%AE%9A%E5%94%AF%E4%B8%80key%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="一、React规范"><a href="#一、React规范" class="headerlink" title="一、React规范"></a>一、React规范</h3><h4 id="1-1-react-key的作用"><a href="#1-1-react-key的作用" class="headerlink" title="1.1 react key的作用"></a>1.1 react key的作用</h4><p>当渲染重复数据的时候,React.diff会根据生成的key进行虚拟DOM渲染, 所以我们需要在遍历的地方都要加上key,例如map、for等等<br>同样, antd作为react的UI组件库, 有些地方也需要遵循react的key规范.例如 antd-table 在渲染前要求: 在 Table 中，dataSource 和 columns 里的数据值都需要指定 key 值。对于 dataSource 默认将每列数据的 key 属性作为唯一的标识。</p><h4 id="1-2-antd-table-key缺失"><a href="#1-2-antd-table-key缺失" class="headerlink" title="1.2 antd-table key缺失"></a>1.2 antd-table key缺失</h4><p>如果你的数据没有这个属性，务必使用 rowKey 来指定数据列的主键。若没有指定，控制台会出现以下的提示，表格组件也会出现各类奇怪的错误。<br>Each record in table should have a uniquekeyprop,or setrowKeyto an unique primary key.<br>虽然只是一个警告，但是这个会给页面table表格带来无法预测的错误</p><h4 id="1-3-antd-table-key相同"><a href="#1-3-antd-table-key相同" class="headerlink" title="1.3 antd-table key相同"></a>1.3 antd-table key相同</h4><p>这种情况感觉到的错误会比较明显:<strong>因为你在一个列上的操作,在相同key上的列也会响应！</strong><br>当鼠标滑过其中一个列并高亮的时候, 另一个列也会被高亮</p><h3 id="二、添加Key值"><a href="#二、添加Key值" class="headerlink" title="二、添加Key值"></a>二、添加Key值</h3><p>我们知道了为什么添加key, 以及不添加key值会出现什么情况</p><h4 id="2-1-完善dataSource和columns"><a href="#2-1-完善dataSource和columns" class="headerlink" title="2.1 完善dataSource和columns"></a>2.1 完善dataSource和columns</h4><p>每一行(dataSource)和每一列(columns)都应该要有一个唯一key值, 渲染的时候react才能准确知道是否需要修改.</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> columns = [&#123;<br>    key: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    title: <span class="hljs-string">&#x27;歌曲名字&#x27;</span>,<br>    dataIndex: <span class="hljs-string">&#x27;title&#x27;</span><br>&#125;]<br><br><span class="hljs-keyword">let</span> dataSource = [&#123;<br>    key: <span class="hljs-number">1</span>,<br>    title: <span class="hljs-string">&#x27;哑巴&#x27;</span><br>&#125;]<br><br>&lt;Table<br>    columns=&#123;columns&#125;<br>    dataSource=&#123;dataSource&#125;<br>/&gt;<br><br></code></pre></div></td></tr></table></figure><h4 id="2-2-直接在table上加上每一列key值-rowKey"><a href="#2-2-直接在table上加上每一列key值-rowKey" class="headerlink" title="2.2 直接在table上加上每一列key值:rowKey"></a>2.2 直接在table上加上每一列key值:rowKey</h4><p>但是注意: 这个key也是要求唯一的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Table<br>    rowKey=&#123;<span class="hljs-function">(<span class="hljs-params">record, index</span>) =&gt;</span> <span class="hljs-string">`complete<span class="hljs-subst">$&#123;record.id&#125;</span><span class="hljs-subst">$&#123;index&#125;</span>`</span>&#125;<br>    ...<br>/&gt;<br></code></pre></div></td></tr></table></figure><p>具体的可以查看官方文档:<a href="https://ant.design/components/table-cn/#Note">《antd-table》</a></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Antd</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UmiJS踩坑笔记</title>
    <link href="/2021/04/28/UmiJS%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/28/UmiJS%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="UmiJS-踩坑笔记"><a href="#UmiJS-踩坑笔记" class="headerlink" title="UmiJS 踩坑笔记"></a>UmiJS 踩坑笔记</h1><p><a href="https://umijs.org/zh-CN">UmiJS</a>官方网站</p><h2 id="UmiJS-快速上手"><a href="#UmiJS-快速上手" class="headerlink" title="UmiJS 快速上手"></a>UmiJS 快速上手</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1619615607819-3f8fffc7-323e-40f6-a748-4dc4ea86931c.png#clientId=u83cb3f88-d331-4&from=drop&id=u5afa3aa7&margin=%5Bobject%20Object%5D&name=UmiJS%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B1.png&originHeight=673&originWidth=531&originalType=binary&size=60366&status=done&style=none&taskId=ud835d141-fb42-432c-a714-1716b4c9270" alt="UmiJS快速上手1.png"></p><h2 id="官方未介绍目录结构"><a href="#官方未介绍目录结构" class="headerlink" title="官方未介绍目录结构"></a>官方未介绍目录结构</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1619615627002-2ae8f20c-fb55-40ab-a9d3-f01729f8bbe5.png#clientId=u83cb3f88-d331-4&from=drop&id=Q9Mfl&margin=%5Bobject%20Object%5D&name=%E5%AE%98%E6%96%B9%E6%9C%AA%E4%BB%8B%E7%BB%8D%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png&originHeight=210&originWidth=276&originalType=binary&size=29616&status=done&style=none&taskId=uec1d5b9f-1429-48bc-b5ee-853604d1238" alt="官方未介绍的目录结构.png"></p><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1619615653598-9a2bca24-9270-4dfd-a96b-ab6b0290f88c.png#clientId=u83cb3f88-d331-4&from=drop&id=u901e1e7e&margin=%5Bobject%20Object%5D&name=%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE.png&originHeight=581&originWidth=807&originalType=binary&size=88764&status=done&style=none&taskId=u3a7b0986-0e23-4043-addb-c3898e019e1" alt="常用配置.png"></p><h2 id="第一坑"><a href="#第一坑" class="headerlink" title="第一坑:"></a>第一坑:</h2><p>问题场景</p><h3 id="使用-umijs-umi-app-为模板，创建一个项目："><a href="#使用-umijs-umi-app-为模板，创建一个项目：" class="headerlink" title="使用 @umijs/umi-app 为模板，创建一个项目："></a>使用 @umijs/umi-app 为模板，创建一个项目：</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">yarn <span class="hljs-keyword">create</span> <span class="hljs-variable">@umijs</span><span class="hljs-operator">/</span>umi<span class="hljs-operator">-</span>app<br></code></pre></div></td></tr></table></figure><p>创建失败，报如下错误：</p><p>yarn create @umijs/umi-app 报错：文件名、目录名或卷标语法不正确。</p><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">think</span>@<span class="hljs-string">think-PC</span> <span class="hljs-string">MINGW64</span> /<span class="hljs-string">e</span>/<span class="hljs-string">zny-projects</span>/<span class="hljs-string">demo01-umi</span><br><span class="hljs-string"></span>$ <span class="hljs-string">yarn</span> <span class="hljs-string">create</span> @<span class="hljs-string">umijs</span>/<span class="hljs-string">umi-app</span><br><span class="hljs-string">yarn</span> <span class="hljs-string">create</span> <span class="hljs-string">v1</span>.<span class="hljs-string">22</span>.<span class="hljs-string">4</span><br><span class="hljs-string"></span>[<span class="hljs-string">1</span>/<span class="hljs-string">4</span>] <span class="hljs-string">Resolving</span> <span class="hljs-string">packages</span>...<br>[<span class="hljs-string">2</span>/<span class="hljs-string">4</span>] <span class="hljs-string">Fetching</span> <span class="hljs-string">packages</span>...<br><span class="hljs-string">info</span> <span class="hljs-string">fsevents</span>@<span class="hljs-string">2</span>.<span class="hljs-string">1</span>.<span class="hljs-string">2</span>: <span class="hljs-string">The</span> <span class="hljs-string">platform</span> <span class="hljs-string">&quot;win32&quot;</span> <span class="hljs-string">is</span> <span class="hljs-string">incompatible</span> <span class="hljs-string">with</span> <span class="hljs-string">this</span> <span class="hljs-string">module</span>.<br><span class="hljs-string">info</span> <span class="hljs-string">&quot;fsevents@2.1.2&quot;</span> <span class="hljs-string">is</span> <span class="hljs-string">an</span> <span class="hljs-string">optional</span> <span class="hljs-string">dependency</span> <span class="hljs-string">and</span> <span class="hljs-string">failed</span> <span class="hljs-string">compatibility</span> <span class="hljs-string">check</span>. <span class="hljs-string">Excluding</span> <span class="hljs-string">it</span> <span class="hljs-string">from</span> <span class="hljs-string">installation</span>.<br>[<span class="hljs-string">3</span>/<span class="hljs-string">4</span>] <span class="hljs-string">Linking</span> <span class="hljs-string">dependencies</span>...<br><span class="hljs-string">warning</span> <span class="hljs-string">&quot;@umijs/create-umi-app &gt; @umijs/utils &gt; @babel/register@7.8.6&quot;</span> <span class="hljs-string">has</span> <span class="hljs-string">unmet</span> <span class="hljs-string">peer</span> <span class="hljs-string">dependency</span> <span class="hljs-string">&quot;@babel/core@^7.0.0-0&quot;</span>.<br>[<span class="hljs-string">4</span>/<span class="hljs-string">4</span>] <span class="hljs-string">Building</span> <span class="hljs-string">fresh</span> <span class="hljs-string">packages</span>...<br><span class="hljs-string">success</span> <span class="hljs-string">Installed</span> <span class="hljs-string">&quot;@umijs/create-umi-app@3.0.12&quot;</span> <span class="hljs-string">with</span> <span class="hljs-string">binaries</span>:<br>      - <span class="hljs-built_in">create-umi-app</span><br><span class="hljs-built_in">文件名、目录名或卷标语法不正确。</span><br><span class="hljs-built_in">error</span> <span class="hljs-string">Command</span> <span class="hljs-string">failed</span>.<br><span class="hljs-string">Exit</span> <span class="hljs-string">code</span>: <span class="hljs-string">1</span><br><span class="hljs-string">Command</span>: <span class="hljs-string">D</span>:\<span class="hljs-string">Develop</span>\<span class="hljs-string">nodejs</span>\<span class="hljs-string">node_global</span>\<span class="hljs-string">bin</span>\<span class="hljs-built_in">create-umi-app</span><br><span class="hljs-built_in">Arguments:</span><br><span class="hljs-built_in">Directory:</span> <span class="hljs-string">E</span>:\<span class="hljs-string">zny-projects</span>\<span class="hljs-string">demo01-umi</span><br><span class="hljs-string">Output</span>:<br><br><span class="hljs-string">info</span> <span class="hljs-string">Visit</span> <span class="hljs-string">https</span>://<span class="hljs-string">yarnpkg</span>.<span class="hljs-string">com</span>/<span class="hljs-string">en</span>/<span class="hljs-string">docs</span>/<span class="hljs-string">cli</span>/<span class="hljs-string">create</span> <span class="hljs-string">for</span> <span class="hljs-string">documentation</span> <span class="hljs-string">about</span> <span class="hljs-string">this</span> <span class="hljs-string">command</span>.<br></code></pre></div></td></tr></table></figure><h3 id="解决：参考-https-github-com-yaoningvital-blog-issues-207"><a href="#解决：参考-https-github-com-yaoningvital-blog-issues-207" class="headerlink" title="解决：参考 https://github.com/yaoningvital/blog/issues/207"></a>解决：参考 <a href="https://github.com/yaoningvital/blog/issues/207">https://github.com/yaoningvital/blog/issues/207</a></h3><h4 id="1、我是用-npm-安装的-yarn-："><a href="#1、我是用-npm-安装的-yarn-：" class="headerlink" title="1、我是用 npm 安装的 yarn ："></a>1、我是用 npm 安装的 yarn ：</h4><p><code>npm i yarn tyarn -g</code></p><h4 id="2、我重新设定了-npm-全局包的安装位置-和-缓存位置。"><a href="#2、我重新设定了-npm-全局包的安装位置-和-缓存位置。" class="headerlink" title="2、我重新设定了 npm 全局包的安装位置 和 缓存位置。"></a>2、我重新设定了 npm 全局包的安装位置 和 缓存位置。</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 查看 npm 全局包的安装位置</span><br>npm config get prefix    <span class="hljs-comment">// D:\Develop\nodejs\node_global</span><br><span class="hljs-comment">// 查看 npm 缓存位置</span><br>npm config get cache   <span class="hljs-comment">// D:\Develop\nodejs\node_cache</span><br></code></pre></div></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/17041261/77241598-5e534680-6c2f-11ea-9266-55213f7e8ace.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354317219-b0c1900f-d228-4cfd-8c09-f0e7bf3247b4.png#clientId=ud2174ff5-2007-4&from=paste&height=215&id=ua885d2a1&margin=%5Bobject%20Object%5D&originHeight=215&originWidth=362&originalType=url&status=done&style=none&taskId=u4605e564-37d4-4b61-80bc-4a808e97f89&width=362"></a></p><h4 id="3、查看-yarn-命令的目录："><a href="#3、查看-yarn-命令的目录：" class="headerlink" title="3、查看 yarn 命令的目录："></a>3、查看 yarn 命令的目录：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn <span class="hljs-built_in">global</span> bin<br><span class="hljs-comment">// D:\Develop\nodejs\node_global\bin</span><br></code></pre></div></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/17041261/77241622-b7bb7580-6c2f-11ea-82b6-2b8647d98d59.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354317246-c1dad564-34e5-40ca-8696-b19567c78b33.png#clientId=ud2174ff5-2007-4&from=paste&height=99&id=ud9b1e309&margin=%5Bobject%20Object%5D&originHeight=99&originWidth=333&originalType=url&status=done&style=none&taskId=u336a4b32-60ab-4af6-ba0f-edec767eec2&width=333"></a></p><h4 id="4、将获取到的-yarn-命令的目录配置到环境变量-Path-上。"><a href="#4、将获取到的-yarn-命令的目录配置到环境变量-Path-上。" class="headerlink" title="4、将获取到的 yarn 命令的目录配置到环境变量 Path 上。"></a>4、将获取到的 yarn 命令的目录配置到环境变量 Path 上。</h4><p><a href="https://user-images.githubusercontent.com/17041261/77241558-97d78200-6c2e-11ea-9d16-7768b6498f9b.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354318302-73a57f4b-1d54-46c6-b884-2df930e624e2.png#clientId=ud2174ff5-2007-4&from=paste&height=726&id=u0ebe29a1&margin=%5Bobject%20Object%5D&originHeight=726&originWidth=642&originalType=url&status=done&style=none&taskId=ucb8a706d-2fad-4d28-bce3-35bcf7d4d76&width=642"></a><br>到这一步之后，我再尝试执行命令<code>yarn create @umijs/umi-app</code>，问题并没有解决，还是报同样的错误。</p><h4 id="5、查看-yarn-的全局安装位置："><a href="#5、查看-yarn-的全局安装位置：" class="headerlink" title="5、查看 yarn 的全局安装位置："></a>5、查看 yarn 的全局安装位置：</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn <span class="hljs-built_in">global</span> bin<br><span class="hljs-comment">// D:\Develop\nodejs\node_global\bin</span><br></code></pre></div></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/17041261/77241671-88593880-6c30-11ea-90d1-2e56ccd5d0a2.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354317996-2ea0b9d7-507e-4dea-aaf6-e0ee2ef37bf6.png#clientId=ud2174ff5-2007-4&from=paste&height=105&id=uae18da4c&margin=%5Bobject%20Object%5D&originHeight=105&originWidth=388&originalType=url&status=done&style=none&taskId=u481a446c-d2b6-4323-9355-c13c89e86ce&width=388"></a><br>可以发现，yarn 的全局安装位置 和 bin 的位置不一致。</p><h4 id="6、修改-yarn-的全局安装位置"><a href="#6、修改-yarn-的全局安装位置" class="headerlink" title="6、修改 yarn 的全局安装位置"></a>6、修改 yarn 的全局安装位置</h4><p>将 yarn 的全局安装位置 修改为和 npm 的一致。<br>因为我的 npm 的位置是 “D:\Develop\nodejs”，那么我在 “D:\Develop” 下创建一个 yarn 文件夹，在 yarn 文件夹下再创建一个 global 文件夹和一个 cache 文件夹。<br>然后执行下面的命令，来设置 yarn 的全局安装位置和 缓存位置：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn config set <span class="hljs-built_in">global</span>-folder <span class="hljs-string">&quot;D:\Develop\yarn\global&quot;</span><br>yarn config set cache-folder <span class="hljs-string">&quot;D:\Develop\yarn\cache&quot;</span><br></code></pre></div></td></tr></table></figure><p><a href="https://user-images.githubusercontent.com/17041261/77241766-01a55b00-6c32-11ea-975e-142238576a38.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354318206-a4447745-bf56-4489-9eef-fbb2f29eb2a5.png#clientId=ud2174ff5-2007-4&from=paste&height=166&id=u303b2fc3&margin=%5Bobject%20Object%5D&originHeight=166&originWidth=482&originalType=url&status=done&style=none&taskId=ueeb844d7-3608-4be1-bfa0-12e86f3cfb1&width=482"></a><a href="https://user-images.githubusercontent.com/17041261/77241782-24377400-6c32-11ea-8cfb-7d44bb437e61.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354319864-35bece77-a4c7-4a1b-b18a-f900067ce972.png#clientId=ud2174ff5-2007-4&from=paste&height=168&id=u39b3e83e&margin=%5Bobject%20Object%5D&originHeight=168&originWidth=482&originalType=url&status=done&style=none&taskId=u25081924-59c8-43d2-89c9-f1fc6f3effe&width=482"></a></p><h4 id="7、再查看-yarn-的全局安装位置-和缓存位置"><a href="#7、再查看-yarn-的全局安装位置-和缓存位置" class="headerlink" title="7、再查看 yarn 的全局安装位置 和缓存位置"></a>7、再查看 yarn 的全局安装位置 和缓存位置</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$ yarn <span class="hljs-built_in">global</span> dir<br><span class="hljs-comment">// D:\Develop\yarn\global</span><br><br><br>$ yarn cache dir<br><span class="hljs-comment">// D:\Develop\yarn\cache\v6</span><br></code></pre></div></td></tr></table></figure><p>说明上一步的修改操作成功。</p><h4 id="8、再执行-yarn-create-umijs-umi-app"><a href="#8、再执行-yarn-create-umijs-umi-app" class="headerlink" title="8、再执行 yarn create @umijs/umi-app"></a>8、再执行 yarn create @umijs/umi-app</h4><p>再执行 ：<br><code>yarn create @umijs/umi-app</code><br>操作成功：<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620354320114-d0e48a33-0a61-4733-ad7c-7c8496f85e58.png#clientId=ud2174ff5-2007-4&from=paste&height=752&id=u2098019d&margin=%5Bobject%20Object%5D&originHeight=752&originWidth=981&originalType=url&status=done&style=none&taskId=u34227728-c3be-4875-9885-39d6803a4bf&width=981"></p><h2 id="第二坑："><a href="#第二坑：" class="headerlink" title="第二坑："></a>第二坑：</h2><h3 id="在yarn-build打包好，准备在serve服务器上本地验证"><a href="#在yarn-build打包好，准备在serve服务器上本地验证" class="headerlink" title="在yarn build打包好，准备在serve服务器上本地验证"></a>在<code>yarn build</code>打包好，准备在<code>serve</code>服务器上本地验证</h3><p>umi 官方文档显示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">本地验证<br>发布之前，可以通过 serve 做本地验证，<br><br><br>$ yarn <span class="hljs-built_in">global</span> add serve<br>$ serve ./dist<br><br>   ┌────────────────────────────────────────────────────┐<br>   │                                                    │<br>   │   Serving!                                         │<br>   │                                                    │<br>   │   - Local:            http:<span class="hljs-comment">//localhost:5000        │</span><br>   │   - On Your Network:  http:<span class="hljs-comment">//192.168.12.34:5000    │</span><br>   │                                                    │<br>   │   Copied local address to clipboard!               │<br>   │                                                    │<br>   └────────────────────────────────────────────────────┘<br></code></pre></div></td></tr></table></figure><p>结果在 vscode 下报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">PS E:\前端自学\react1\融职商场后台管理\umijs\myapp&gt; serve --version<br>serve : 无法将“serve”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，<br>如果包括路径，请确保路径正确，然后再试一次。<br>所在位置 行:<span class="hljs-number">1</span> 字符: <span class="hljs-number">1</span><br>+ serve --version<br>+ ~~~~~<br>    + CategoryInfo          : ObjectNotFound: (serve:<span class="hljs-built_in">String</span>) [], CommandNotFoundException<br>    + FullyQualifiedErrorId : CommandNotFoundException<br></code></pre></div></td></tr></table></figure><h3 id="解决：最后在改在-CMD-命令行里执行成功"><a href="#解决：最后在改在-CMD-命令行里执行成功" class="headerlink" title="解决：最后在改在 CMD 命令行里执行成功"></a>解决：最后在改在 CMD 命令行里执行成功</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Microsoft Windows [版本 <span class="hljs-number">10.0</span><span class="hljs-number">.19041</span><span class="hljs-number">.685</span>]<br>(c) <span class="hljs-number">2020</span> Microsoft Corporation. 保留所有权利。<br><br>E:\前端自学\react1\融职商场后台管理\umijs\myapp&gt;serve ./dist<br><br>   ┌────────────────────────────────────────────────────┐<br>   │                                                    │<br>   │   Serving!                                         │<br>   │                                                    │<br>   │   - Local:            http:<span class="hljs-comment">//localhost:5000        │</span><br>   │   - On Your Network:  http:<span class="hljs-comment">//192.168.43.198:5000   │</span><br>   │                                                    │<br>   │   Copied local address to clipboard!               │<br>   │                                                    │<br>   └────────────────────────────────────────────────────┘<br></code></pre></div></td></tr></table></figure><h2 id="第三坑："><a href="#第三坑：" class="headerlink" title="第三坑："></a>第三坑：</h2><h3 id="配置publicPath、outputPath"><a href="#配置publicPath、outputPath" class="headerlink" title="配置publicPath、outputPath"></a>配置<code>publicPath</code>、<code>outputPath</code></h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">publicPath:<span class="hljs-string">&#x27;https://xxx.com/cdn/&#x27;</span>,<br>outputPath:<span class="hljs-string">&#x27;build&#x27;</span>,<br></code></pre></div></td></tr></table></figure><p><code>publicPath</code>:暂时无效果<br><code>outputPath</code>:未新建并打包到<code>build</code></p><h3 id="解决：重新启动项目，需要多试几次publicPath、outputPath，"><a href="#解决：重新启动项目，需要多试几次publicPath、outputPath，" class="headerlink" title="解决：重新启动项目，需要多试几次publicPath、outputPath，"></a>解决：重新启动项目，需要多试几次<code>publicPath</code>、<code>outputPath</code>，</h3><h2 id="第四坑："><a href="#第四坑：" class="headerlink" title="第四坑："></a>第四坑：</h2><h3 id="使用dva插件时，执行命令umi-dva-list-model时："><a href="#使用dva插件时，执行命令umi-dva-list-model时：" class="headerlink" title="使用dva插件时，执行命令umi dva list model时："></a>使用<code>dva</code>插件时，执行命令<code>umi dva list model</code>时：</h3><p>umi : 无法将“umi”项识别为 cmdlet、函数、脚本文件或可运行程序的名称</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">umi : 无法将“umi”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。<br>+ umi dva list model<br>+ ~~~<br>    + CategoryInfo          : ObjectNotFound: (umi:<span class="hljs-built_in">String</span>) [], CommandNotFoundException<br>    + FullyQualifiedErrorId : CommandNotFoundException<br></code></pre></div></td></tr></table></figure><h3 id="解决：umi-dva-list-model命令前加上yarn，"><a href="#解决：umi-dva-list-model命令前加上yarn，" class="headerlink" title="解决：umi dva list model命令前加上yarn，"></a>解决：<code>umi dva list model</code>命令前加上<code>yarn</code>，</h3><p>使用<code>npm</code>也不行。<br>执行结果如下：<br><code>yarn umi dva list model </code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn run v1<span class="hljs-number">.22</span><span class="hljs-number">.5</span><br>$ E:\umijs\myapp\node_modules\.bin\umi dva list model<br><br>  Models <span class="hljs-keyword">in</span> your project:<br><br><br>  Totally <span class="hljs-number">0.</span><br><br>Done <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span>92s.<br></code></pre></div></td></tr></table></figure><p>umijsDemo <a href="https://github.com/13982720426/UmiJS-Learning-record.git">https://github.com/13982720426/UmiJS-Learning-record.git</a></p><h2 id="第五坑："><a href="#第五坑：" class="headerlink" title="第五坑："></a>第五坑：</h2><h3 id="使用-umi-ui-时配置-UMI-UI-1-umi-dev"><a href="#使用-umi-ui-时配置-UMI-UI-1-umi-dev" class="headerlink" title="使用 umi-ui 时配置 UMI_UI=1 umi dev"></a>使用 umi-ui 时配置 UMI_UI=1 umi dev</h3><p>在 umi_ui\package.json 中配置了</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&quot;start:umi-ui&quot;</span>: <span class="hljs-string">&quot;UMI_UI=1 umi dev&quot;</span>,<br></code></pre></div></td></tr></table></figure><p>但是使用<code>yarn start:umi-ui</code>启动时 ‘UMI_UI’ 不是内部或外部命令，也不是可运行的程序</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn run v1<span class="hljs-number">.22</span><span class="hljs-number">.5</span><br>$ UMI_UI=<span class="hljs-number">1</span> umi dev<br><span class="hljs-string">&#x27;UMI_UI&#x27;</span> 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。<br>error Command failed <span class="hljs-keyword">with</span> exit code <span class="hljs-number">1.</span><br>info Visit https:<span class="hljs-comment">//yarnpkg.com/en/docs/cli/run for documentation about this command.</span><br></code></pre></div></td></tr></table></figure><h3 id="解决：最后直接使用yarn-start命令"><a href="#解决：最后直接使用yarn-start命令" class="headerlink" title="解决：最后直接使用yarn start命令"></a>解决：最后直接使用<code>yarn start</code>命令</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">yarn run v1<span class="hljs-number">.22</span><span class="hljs-number">.5</span><br>$ umi dev<br>🚀 Starting Umi UI using umi@<span class="hljs-number">3.4</span><span class="hljs-number">.14</span>...<br>🌈 Umi UI mini Ready on port <span class="hljs-number">3000.</span><br>Starting the development server...<br><br>√ Webpack<br>  Compiled successfully <span class="hljs-keyword">in</span> <span class="hljs-number">4.</span>46s<br><br> DONE  Compiled successfully <span class="hljs-keyword">in</span> 4461ms                                                                                                            下午<span class="hljs-number">9</span>:<span class="hljs-number">00</span>:<span class="hljs-number">37</span><br><br>  App running at:<br>  - Local:   http:<span class="hljs-comment">//localhost:8000 (copied to clipboard)</span><br>  - Network: http:<span class="hljs-comment">//192.168.43.198:8000</span><br> WAIT  Compiling...                                                                                                                               下午<span class="hljs-number">9</span>:<span class="hljs-number">00</span>:<span class="hljs-number">37</span><br><br>√ Webpack<br>  Compiled successfully <span class="hljs-keyword">in</span> <span class="hljs-number">252.</span>95ms<br><br> DONE  Compiled successfully <span class="hljs-keyword">in</span> 253ms<br></code></pre></div></td></tr></table></figure><p>打开浏览器结果成功了<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620306125136-3308a634-5ac9-4ddb-aa45-58e65e8319d6.png#clientId=u6cfb84fd-a9b2-4&from=paste&height=515&id=u6091b497&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1030&originWidth=1920&originalType=binary&size=72547&status=done&style=none&taskId=u6a22e13d-26c9-4c6f-bc19-1310cbbdd2a&width=960" alt="浏览器运行成功.png"></p><p>点击右下角悬浮球，就出现了控制台<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620306502779-d8e2c5ba-5ab5-4f3b-b5a6-b927bad01c3a.png#clientId=u6cfb84fd-a9b2-4&from=paste&height=509&id=u4044a1d4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=684&originWidth=1009&originalType=binary&size=55596&status=done&style=none&taskId=ub258df9a-0821-4105-b907-72122d217fe&width=750.4921875" alt="打开umi-ui控制台.png"></p><p>umi-uiDome <a href="https://github.com/13982720426/umi-ui.git">https://github.com/13982720426/umi-ui.git</a></p><h2 id="第六坑："><a href="#第六坑：" class="headerlink" title="第六坑："></a>第六坑：</h2><h3 id="antd-pro-结合-uimjs-使用，安装工作台模板时报错"><a href="#antd-pro-结合-uimjs-使用，安装工作台模板时报错" class="headerlink" title="antd pro 结合 uimjs 使用，安装工作台模板时报错"></a>antd pro 结合 uimjs 使用，安装工作台模板时报错</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620554810078-4732a126-1597-4c36-a85b-e3d73e289c1e.png#clientId=ue197a22d-e4ed-4&from=paste&height=795&id=u0f63c27e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=795&originWidth=1041&originalType=binary&size=157913&status=done&style=none&taskId=u2f8c00ab-9f8d-4a0f-8c2c-2beddbe4466&width=1041" alt="image.png"><br>终端显示<code>Execute task error Error: Error: Command failed: npm install -d bizcharts@^3.5.3-beta.0 prop-types@^15.5.10 --registry=[https://registry.npm.taobao.org](https://registry.npm.taobao.org) --save</code><br>安装失败</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Bundle <span class="hljs-keyword">with</span> webpack <span class="hljs-number">5.</span>..<br>Execute task error <span class="hljs-built_in">Error</span>: <span class="hljs-built_in">Error</span>: Command failed: npm install -d bizcharts@^<span class="hljs-number">3.5</span><span class="hljs-number">.3</span>-beta<span class="hljs-number">.0</span> prop-types@^<span class="hljs-number">15.5</span><span class="hljs-number">.10</span> --registry=https:<span class="hljs-comment">//registry.npm.taobao.org --save</span><br><span class="hljs-literal">undefined</span><br><span class="hljs-literal">undefined</span><br></code></pre></div></td></tr></table></figure><h3 id="解决：在终端使用-cnpm-手动安装"><a href="#解决：在终端使用-cnpm-手动安装" class="headerlink" title="解决：在终端使用 cnpm 手动安装"></a>解决：在终端使用 cnpm 手动安装</h3><p><code>cnpm install -d bizcharts@^3.5.3-beta.0 prop-types@^15.5.10 --registry=[https://registry.npm.taobao.org](https://registry.npm.taobao.org) --save</code><br>安装成功</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>/<span class="hljs-number">2</span>] prop-types@^<span class="hljs-number">15.5</span><span class="hljs-number">.10</span> installed at node_modules\_prop-types@<span class="hljs-number">15.7</span><span class="hljs-number">.2</span>@prop-types<br>[<span class="hljs-number">2</span>/<span class="hljs-number">2</span>] bizcharts@^<span class="hljs-number">3.5</span><span class="hljs-number">.3</span>-beta<span class="hljs-number">.0</span> installed at node_modules\_bizcharts@<span class="hljs-number">3.5</span><span class="hljs-number">.9</span>@bizcharts<br>Recently updated (since <span class="hljs-number">2021</span>-<span class="hljs-number">05</span>-<span class="hljs-number">02</span>): <span class="hljs-number">9</span> packages (detail see file E:\前端自学\react1\融职商场后台管理\antd_pro_simple\node_modules\.recently_updates.txt)<br>  Today:<br>    → bizcharts@<span class="hljs-number">3.5</span><span class="hljs-number">.9</span> › @antv/g2@<span class="hljs-number">3.5</span><span class="hljs-number">.15</span> › venn.js@<span class="hljs-number">0.2</span><span class="hljs-number">.20</span> › fmin@<span class="hljs-number">0.0</span><span class="hljs-number">.2</span> › tape@<span class="hljs-number">4.13</span><span class="hljs-number">.3</span> › string.prototype.trim@<span class="hljs-number">1.2</span><span class="hljs-number">.4</span> › es-abstract@<span class="hljs-number">1.18</span><span class="hljs-number">.0</span> › es-to-primitive@<span class="hljs-number">1.2</span><span class="hljs-number">.1</span> › is-symbol@^<span class="hljs-number">1.0</span><span class="hljs-number">.2</span>(<span class="hljs-number">1.0</span><span class="hljs-number">.4</span>) (<span class="hljs-number">03</span>:<span class="hljs-number">12</span>:<span class="hljs-number">11</span>)<br>All packages installed (<span class="hljs-number">117</span> packages installed <span class="hljs-keyword">from</span> npm registry, used 8s(network 8s), speed <span class="hljs-number">816.</span>88kB/s, json <span class="hljs-number">113</span>(<span class="hljs-number">383.</span>88kB), tarball <span class="hljs-number">5.</span>97MB)<br></code></pre></div></td></tr></table></figure><h2 id="第七坑："><a href="#第七坑：" class="headerlink" title="第七坑："></a>第七坑：</h2><h3 id="在-mock-文件夹中，无法直接打印数据在浏览器上显示"><a href="#在-mock-文件夹中，无法直接打印数据在浏览器上显示" class="headerlink" title="在 mock 文件夹中，无法直接打印数据在浏览器上显示"></a>在 mock 文件夹中，无法直接打印数据在浏览器上显示</h3><p>官方文档解释很少，在<code>express</code>第四版上查看<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620666389853-f734fd75-4f0e-494c-9220-68989d491061.png#clientId=u2ebfdb81-5df4-4&from=paste&height=462&id=ue6d064e4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=462&originWidth=607&originalType=binary&size=37678&status=done&style=none&taskId=u1f60bb4f-ed44-4499-9558-3eee42d51fc&width=607" alt="image.png"><br>mock 类似后端，无法直接在浏览器中 consloe.log(req)打印出数据</p><h3 id="解决：查看express官网，进去-v4-版本-Request-目录"><a href="#解决：查看express官网，进去-v4-版本-Request-目录" class="headerlink" title="解决：查看express官网，进去 v4 版本 Request 目录"></a>解决：查看<a href="https://www.expressjs.com.cn/4x/api.html">express</a>官网，进去 v4 版本 Request 目录</h3><p>在 Request 目录下按住 ctrl+f 搜索 app.post<img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620667002424-8dc60de2-b10d-4e74-be83-dd4266c657be.png#clientId=u2ebfdb81-5df4-4&from=paste&height=521&id=ue76268fb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=521&originWidth=1236&originalType=binary&size=129622&status=done&style=none&taskId=u9b56d5b2-1a25-46bc-8d3d-050726a6cfe&width=1236" alt="image.png"><br>得知在<code>req.body</code>可以获取到 mock 中的数据，并能通过<code>console.log(req.body)</code>打印到浏览器上</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-keyword">var</span> app = express()<br><br>app.use(express.json()) <span class="hljs-comment">// for parsing application/json</span><br>app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;)) <span class="hljs-comment">// for parsing application/x-www-form-urlencoded</span><br><br>app.post(<span class="hljs-string">&#x27;/profile&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(req.body)<br>  res.json(req.body)<br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UI</category>
      
      <category>Umi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UmiJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React-Hooks</title>
    <link href="/2021/04/26/React-Hooks/"/>
    <url>/2021/04/26/React-Hooks/</url>
    
    <content type="html"><![CDATA[<p>在 React 的世界中，有容器组件和 UI 组件之分，在 React Hooks 出现之前，UI 组件我们可以使用函数，无状态组件来展示 UI，而对于容器组件，函数组件就显得无能为力，我们依赖于类组件来获取数据，处理数据，并向下传递参数给 UI 组件进行渲染。在我看来，使用 React Hooks 相比于从前的类组件有以下几点好处：</p><ol><li>代码可读性更强，原本同一块功能的代码逻辑被拆分在了不同的生命周期函数中，容易使开发者不利于维护和迭代，通过 React Hooks 可以将功能代码聚合，方便阅读维护</li><li>组件树层级变浅，在原本的代码中，我们经常使用 HOC/render props 等方式来复用组件的状态，增强功能等，无疑增加了组件树层数及渲染，而在 React Hooks 中，这些功能都可以通过强大的自定义的 Hooks 来实现</li></ol><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="第一步：安装-node-js"><a href="#第一步：安装-node-js" class="headerlink" title="第一步：安装 node.js"></a>第一步：安装 node.js</h3><p>官网下载安装<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><h3 id="第二步：安装-create-react-app-脚手架工具"><a href="#第二步：安装-create-react-app-脚手架工具" class="headerlink" title="第二步：安装 create-react-app 脚手架工具"></a>第二步：安装 create-react-app 脚手架工具</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">cnpm <span class="hljs-keyword">install</span> -g create-react-app<br></code></pre></div></td></tr></table></figure><h3 id="第三步：创建-react-项目"><a href="#第三步：创建-react-项目" class="headerlink" title="第三步：创建 react 项目"></a>第三步：创建 react 项目</h3><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">demo01</span><br></code></pre></div></td></tr></table></figure><p>在<code>npm start</code>启动项目时可能会出错</p><p>删除 node_modules 文件夹，在项目下的命令行输出入<code>cnpm install</code>重新安装依赖包</p><h3 id="第四步：精简代码"><a href="#第四步：精简代码" class="headerlink" title="第四步：精简代码"></a>第四步：精简代码</h3><p>vscode 打开项目，精简代码</p><p>demo01\src\Example.js 新建一个文件</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1619433406968-7ac16ccc-f4b6-46b3-85c0-18c6c370c43d.png#clientId=uc8289952-89bf-4&from=ui&id=uaf31030f&margin=%5Bobject%20Object%5D&name=image-20210206164703130.png&originHeight=356&originWidth=1237&originalType=binary&size=42622&status=done&style=none&taskId=u0dd03524-250c-4cfe-8d7d-f24c4a54ce6" alt="image-20210206164703130.png"></p><p>Example.js 中原来 react 写法</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props)<br>    <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div&gt;<br>        &lt;p&gt; You clicked &#123;<span class="hljs-built_in">this</span>.state.count&#125; times&lt;/p&gt;<br>        &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.addCount.bind(<span class="hljs-built_in">this</span>)&#125;&gt;Click me&lt;/button&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">addCount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">count</span>: <span class="hljs-built_in">this</span>.state.count + <span class="hljs-number">1</span> &#125;)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>并在 inde.js 中调用<code>import Example from &#39;./Example&#39;</code>以及<code>&lt;Example&gt;</code></p><p>hooks 写法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//函数执行几次？ n+1次 因为useState执行时有缓存，不会将count重新设置成0，会继续累加</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;函数执行&#x27;</span>)<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt; You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;&gt;<br>        Click me<br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example<br></code></pre></div></td></tr></table></figure><p>useState 有两个参数<code>[count,setCount]</code>, count 就是元素的状态，setCount 是更新元素状态的方法，<br><code>const [count, setCount] = useState(0)</code>//是 ES6 解构赋值写法，useState(0)等于{ count: 0 }</p><p>Example()函数执行几次？ n+1 次 因为 React 底层做了处理，useState 执行时有缓存，将上一次执行的状态保存，不会将 count 重新设置成 0，会继续累加</p><p>hooks 是 react 新特性，react16.8 以上才可以用</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620837974413-7e5a0df2-d39d-4d56-984c-3a947b560d9b.png#clientId=u27aee433-b580-4&from=paste&height=626&id=u1d574cbd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=626&originWidth=597&originalType=binary&size=131735&status=done&style=none&taskId=u1b437a1a-bf49-4539-8716-517cd30fb86&width=597" alt="image.png"></p><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p>在 demo01\src\Example2.js 中，先写一个错误例子<code>useState</code>不能用在条件语句中</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">let</span> showSex = <span class="hljs-literal">true</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [age, setAge] = useState(<span class="hljs-number">18</span>)<br>  <span class="hljs-keyword">if</span> (showSex) &#123;<br>    <span class="hljs-keyword">const</span> [sex, setSex] = useState(<span class="hljs-string">&#x27;男&#x27;</span>) <span class="hljs-comment">//useState不能用在条件语句中</span><br>    showSex = <span class="hljs-literal">false</span><br>  &#125;<br>  <span class="hljs-keyword">const</span> [work, setWork] = useState(<span class="hljs-string">&#x27;程序员&#x27;</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;JS今年：&#123;age&#125;&lt;/p&gt;<br>      &lt;p&gt;性别：&#123;sex&#125;&lt;/p&gt;<br>      &lt;p&gt;工作：&#123;work&#125;&lt;/p&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example2<br></code></pre></div></td></tr></table></figure><p>正确写法<strong>就是 React Hooks 不能出现在条件判断语句中，因为它必须有完全一样的渲染顺序</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [age, setAge] = useState(<span class="hljs-number">18</span>)<br>  <span class="hljs-keyword">const</span> [sex, setSex] = useState(<span class="hljs-string">&#x27;男&#x27;</span>)<br>  <span class="hljs-keyword">const</span> [work, setWork] = useState(<span class="hljs-string">&#x27;程序员&#x27;</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;JS今年：&#123;age&#125;&lt;/p&gt;<br>      &lt;p&gt;性别：&#123;sex&#125;&lt;/p&gt;<br>      &lt;p&gt;工作：&#123;work&#125;&lt;/p&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example2<br></code></pre></div></td></tr></table></figure><h2 id="useEffect-代替常用生命周期函数"><a href="#useEffect-代替常用生命周期函数" class="headerlink" title="useEffect 代替常用生命周期函数"></a>useEffect 代替常用生命周期函数</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620838071339-fdcbd33f-d03d-4af1-acea-6e8ea66c6b7a.png#clientId=u27aee433-b580-4&from=paste&height=520&id=u264d2652&margin=%5Bobject%20Object%5D&name=image.png&originHeight=520&originWidth=521&originalType=binary&size=119902&status=done&style=none&taskId=u2a1d051c-d6f3-44c5-b983-3081a6b5ddf&width=521" alt="image.png"><br>useEffect 是异步</p><h3 id="原始的方式"><a href="#原始的方式" class="headerlink" title="原始的方式"></a>原始的方式</h3><p>先用原始的方式把计数器的 Demo 增加两个生命周期函数<code>componentDidMount</code>和<code>componentDidUpdate</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props)<br>    <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`componentDidMount=&gt;You clicked <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.state.count&#125;</span> times`</span>)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">componentDidUpdate</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`componentDidUpdate=&gt;You clicked <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.state.count&#125;</span> times`</span>)<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div&gt;<br>        &lt;p&gt; You clicked &#123;<span class="hljs-built_in">this</span>.state.count&#125; times&lt;/p&gt;<br>        &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.addCount.bind(<span class="hljs-built_in">this</span>)&#125;&gt;Click me&lt;/button&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">addCount</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">count</span>: <span class="hljs-built_in">this</span>.state.count + <span class="hljs-number">1</span> &#125;)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="useEffect-实现-componentDidUpdate-生命周期函数"><a href="#useEffect-实现-componentDidUpdate-生命周期函数" class="headerlink" title="useEffect 实现 componentDidUpdate 生命周期函数"></a>useEffect 实现 componentDidUpdate 生命周期函数</h3><p><code>useEffect</code>不传参数时，监听所有的状态，类似<code>componentDidUpdate</code>，只要页面的 state 或者 model 中的 state 中定义的变量值发生改变,这个方法就会执行</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;componentDidUpdate&#x27;</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="useEffect-实现-componentDidMonut-生命周期函数"><a href="#useEffect-实现-componentDidMonut-生命周期函数" class="headerlink" title="useEffect 实现 componentDidMonut 生命周期函数"></a>useEffect 实现 componentDidMonut 生命周期函数</h3><p><code>useEffect</code>传第二个参数时[ ]，第二个参数是要监听哪些状态的改变，类似<code>componentDidMonut</code>，组件挂在完成后执行</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;componentDidMonut&#x27;</span>)<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><h3 id="使用React-Hooks的情况下"><a href="#使用React-Hooks的情况下" class="headerlink" title="使用React Hooks的情况下"></a>使用<code>React Hooks</code>的情况下</h3><p>我们可以使用下面的代码来完成上边代码的生命周期效果，代码如下（修改了以前的 diamond）： 记得要先引入<code>useEffect</code>后，才可以正常使用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br>  <span class="hljs-comment">//---关键代码---------start-------</span><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`useEffect=&gt;You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>)<br>  &#125;)<br>  <span class="hljs-comment">//useEffect不传参数时，类似componentDidUpdate，useEffect传第二个参数时，类似componentDidMonut</span><br>  <span class="hljs-comment">//      useEffect(()=&gt;&#123;</span><br>  <span class="hljs-comment">//       console.log(`useEffect=&gt;You clicked $&#123;count&#125; times`)</span><br>  <span class="hljs-comment">//   &#125;,[])</span><br><br>  <span class="hljs-comment">//---关键代码---------end-------</span><br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;&gt;<br>        click me<br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example<br></code></pre></div></td></tr></table></figure><h3 id="useEffect-两个注意点"><a href="#useEffect-两个注意点" class="headerlink" title="useEffect 两个注意点"></a>useEffect 两个注意点</h3><ol><li>React 首次渲染和之后的每次渲染都会调用一遍<code>useEffect</code>函数，而之前我们要用两个生命周期函数分别表示首次渲染(componentDidMonut)和更新导致的重新渲染(componentDidUpdate)。</li><li>useEffect 中定义的函数的执行不会阻碍浏览器更新视图，也就是说这些函数时异步执行的，而<code>componentDidMonut</code>和<code>componentDidUpdate</code>中的代码都是同步执行的。个人认为这个有好处也有坏处吧，比如我们要根据页面的大小，然后绘制当前弹出窗口的大小，如果时异步的就不好操作了。</li></ol><h3 id="useEffect-实现-componentWillUnmount-生命周期函数"><a href="#useEffect-实现-componentWillUnmount-生命周期函数" class="headerlink" title="useEffect 实现 componentWillUnmount 生命周期函数"></a>useEffect 实现 componentWillUnmount 生命周期函数</h3><p>在 useEffect 函数里<code>return ( )=&gt;&#123; &#125;</code>再 return 一个函数，这个函数会在组件卸载之前执行类似<code>componentWillUnmount</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">//返回的是一个函数，这个函数会在组件卸载之前执行类似componentWillUnmount</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;componentWillUnmount.....&#x27;</span>)<br>  &#125;<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><p>在写 React 应用的时候，在组件中经常用到<code>componentWillUnmount</code>生命周期函数（组件将要被卸载时执行）。比如我们的定时器要清空，避免发生内存泄漏;比如登录状态要取消掉，避免下次进入信息出错。定时器没有关闭等</p><h4 id="useEffect-关闭定时器"><a href="#useEffect-关闭定时器" class="headerlink" title="useEffect 关闭定时器"></a>useEffect 关闭定时器</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">React.useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    setCount(<span class="hljs-function"><span class="hljs-params">count</span> =&gt;</span> count + <span class="hljs-number">1</span>)<br>  &#125;, <span class="hljs-number">1000</span>)<br>  <span class="hljs-comment">//返回的是一个函数，这个函数会在组件卸载之前执行</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">clearInterval</span>(timer)<br>  &#125;<br>&#125;, [])<br></code></pre></div></td></tr></table></figure><h4 id="useEffect-解绑副作用"><a href="#useEffect-解绑副作用" class="headerlink" title="useEffect 解绑副作用"></a>useEffect 解绑副作用</h4><p>学习<code>React Hooks</code> 时，我们要改掉生命周期函数的概念（人往往有先入为主的毛病，所以很难改掉），因为<code>Hooks</code>叫它副作用，所以<code>componentWillUnmount</code>也可以理解成解绑副作用。这里为了演示用<code>useEffect</code>来实现类似<code>componentWillUnmount</code>效果，先安装<code>React-Router</code>路由,进入项目根本录，使用<code>npm</code>进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install --save react-router-dom<br></code></pre></div></td></tr></table></figure><p>然后打开<code>Example.js</code>文件，进行改写代码，先引入对应的<code>React-Router</code>组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; BrowserRouter <span class="hljs-keyword">as</span> Router, Route, Link &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br></code></pre></div></td></tr></table></figure><p>在文件中编写两个新组件，因为这两个组件都非常的简单，所以就不单独建立一个新的文件来写了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSPang.com<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">List</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>List-Page<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>有了这两个组件后，接下来可以编写路由配置，在以前的计数器代码中直接增加就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">return</span> (<br>  &lt;div&gt;<br>    &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>    &lt;button<br>      onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>        setCount(count + <span class="hljs-number">1</span>)<br>      &#125;&#125;&gt;<br>      click me<br>    &lt;/button&gt;<br><br>    &lt;Router&gt;<br>      &lt;ul&gt;<br>        &lt;li&gt;<br>          &#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>          &lt;Link to=<span class="hljs-string">&quot;/&quot;</span>&gt;首页&lt;/Link&gt;&#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>        &lt;/li&gt;<br>        &lt;li&gt;<br>          &lt;Link to=<span class="hljs-string">&quot;/list/&quot;</span>&gt;列表&lt;/Link&gt;&#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>        &lt;/li&gt;<br>      &lt;/ul&gt;<br>      &lt;Route path=<span class="hljs-string">&quot;/&quot;</span> exact component=&#123;Index&#125; /&gt;<br>      &lt;Route path=<span class="hljs-string">&quot;/list/&quot;</span> component=&#123;List&#125; /&gt;<br>    &lt;/Router&gt;<br>  &lt;/div&gt;<br>)<br></code></pre></div></td></tr></table></figure><p>然后到浏览器中查看一下，看看组件和路由是否可用。如果可用，我们现在可以调整<code>useEffect</code>了。在两个新组件中分别加入<code>useEffect()</code>函数:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;useEffect=&gt;老弟，你来了！Index页面&#x27;</span>)<br>        )<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSPang.com<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">List</span>(<span class="hljs-params"></span>) </span>&#123;<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;useEffect=&gt;老弟，你来了！List页面&#x27;</span>)<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>List-Page<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时候我们点击<code>Link</code>进入任何一个组件，在浏览器中都会打印出对应的一段话。这时候可以用<strong>返回一个函数的形式进行解绑</strong>，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;useEffect=&gt;老弟你来了！Index页面&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;老弟，你走了!Index页面&#x27;</span>)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSPang.com<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时候你在浏览器中预览，我们仿佛实现了<code>componentWillUnmount</code>方法。但这只是好像实现了，当点击计数器按钮时，你会发现<code>老弟，你走了!Index页面</code>，也出现了。这到底是怎么回事那？其实每次状态发生变化，<code>useEffect</code>都进行了解绑。</p><h4 id="useEffect-的第二个参数"><a href="#useEffect-的第二个参数" class="headerlink" title="useEffect 的第二个参数"></a>useEffect 的第二个参数</h4><p>那到底要如何实现类似<code>componentWillUnmount</code>的效果那?这就需要请出<code>useEffect</code>的第二个参数，它是一个数组，数组中可以写入很多状态对应的变量，意思是当状态值发生变化时，我们才进行解绑。但是当传空数组<code>[]</code>时，就是当组件将被销毁时才进行解绑，这也就实现了<code>componentWillUnmount</code>的生命周期函数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;useEffect=&gt;老弟你来了！Index页面&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;老弟，你走了!Index页面&#x27;</span>)<br>    &#125;<br>  &#125;, [])<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSPang.com<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>为了更加深入了解第二个参数的作用，把计数器的代码也加上<code>useEffect</code>和解绑方法，并加入第二个参数为空数组。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`useEffect=&gt;You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;====================&#x27;</span>)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;&gt;<br>        click me<br>      &lt;/button&gt;<br><br>      &lt;Router&gt;<br>        &lt;ul&gt;<br>          &lt;li&gt;<br>            &#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>            &lt;Link to=<span class="hljs-string">&quot;/&quot;</span>&gt;首页&lt;/Link&gt;&#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>          &lt;/li&gt;<br>          &lt;li&gt;<br>            &lt;Link to=<span class="hljs-string">&quot;/list/&quot;</span>&gt;列表&lt;/Link&gt;&#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>          &lt;/li&gt;<br>        &lt;/ul&gt;<br>        &lt;Route path=<span class="hljs-string">&quot;/&quot;</span> exact component=&#123;Index&#125; /&gt;<br>        &lt;Route path=<span class="hljs-string">&quot;/list/&quot;</span> component=&#123;List&#125; /&gt;<br>      &lt;/Router&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时候的代码是不能执行解绑副作用函数的。但是如果我们想每次<code>count</code>发生变化，我们都进行解绑，只需要在第二个参数的数组里加入<code>count</code>变量就可以了。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`useEffect=&gt;You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;====================&#x27;</span>)<br>    &#125;<br>  &#125;, [count])<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;&gt;<br>        click me<br>      &lt;/button&gt;<br><br>      &lt;Router&gt;<br>        &lt;ul&gt;<br>          &lt;li&gt;<br>            &#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>            &lt;Link to=<span class="hljs-string">&quot;/&quot;</span>&gt;首页&lt;/Link&gt;&#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>          &lt;/li&gt;<br>          &lt;li&gt;<br>            &lt;Link to=<span class="hljs-string">&quot;/list/&quot;</span>&gt;列表&lt;/Link&gt;&#123;<span class="hljs-string">&#x27; &#x27;</span>&#125;<br>          &lt;/li&gt;<br>        &lt;/ul&gt;<br>        &lt;Route path=<span class="hljs-string">&quot;/&quot;</span> exact component=&#123;Index&#125; /&gt;<br>        &lt;Route path=<span class="hljs-string">&quot;/list/&quot;</span> component=&#123;List&#125; /&gt;<br>      &lt;/Router&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时候只要<code>count</code>状态发生变化，都会执行解绑副作用函数，浏览器的控制台也就打印出了一串<code>=================</code>。</p><h2 id="useContext-让父子组件传值更简单"><a href="#useContext-让父子组件传值更简单" class="headerlink" title="useContext 让父子组件传值更简单"></a>useContext 让父子组件传值更简单</h2><p>有了<code>useState</code>和<code>useEffect</code>已经可以实现大部分的业务逻辑了，但是<code>React Hooks</code>中还是有很多好用的<code>Hooks</code>函数的，比如<code>useContext</code>和<code>useReducer</code>。</p><p>在用类声明组件时，父子组件的传值是通过组件属性和<code>props</code>进行的，那现在使用方法(Function)来声明组件，已经没有了<code>constructor</code>构造函数也就没有了 props 的接收，那父子组件的传值就成了一个问题。<code>React Hooks</code> 为我们准备了<code>useContext</code>。这节课就学习一下<code>useContext</code>，它可以帮助我们跨越组件层级直接传递变量，实现共享。需要注意的是<code>useContext</code>和<code>redux</code>的作用是不同的，一个解决的是组件之间值传递的问题，一个是应用中统一管理状态的问题，但通过和<code>useReducer</code>的配合使用，可以实现类似<code>Redux</code>的作用。</p><p>这就好比玩游戏时有很多英雄，英雄的最总目的都是赢得比赛，但是作用不同，有负责输出的，有负责抗伤害的，有负责治疗的。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620885452357-4883a907-5a9b-4e79-ac57-f7f5d72478d7.png#clientId=u27aee433-b580-4&from=paste&height=723&id=u1cfe21a1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=723&originWidth=848&originalType=binary&size=153410&status=done&style=none&taskId=u60181efe-1980-41ac-9f3d-79ce2166371&width=848" alt="image.png"></p><blockquote><p><code>Context</code>的作用就是对它所包含的组件树提供全局共享数据的一种技术。</p></blockquote><h3 id="createContext-函数创建-context"><a href="#createContext-函数创建-context" class="headerlink" title="createContext 函数创建 context"></a>createContext 函数创建 context</h3><p>直接在<code>src</code>目录下新建一个文件<code>Example4.js</code>,然后拷贝<code>Example.js</code>里的代码，并进行修改，删除路由部分和副作用的代码，只留计数器的核心代码就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example4</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;&gt;<br>        click me<br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example4<br></code></pre></div></td></tr></table></figure><p>然后修改一下<code>index.js</code>让它渲染这个<code>Example4.js</code>组件，修改的代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">import</span> Example <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Example4&#x27;</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Example</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></div></td></tr></table></figure><p>之后在<code>Example4.js</code>中引入<code>createContext</code>函数，并使用得到一个组件，然后在<code>return</code>方法中进行使用。先看代码，然后我再解释。<br>创建<code>Context</code>容器对象要在祖组件和后代组件都能调用的地方<br><code>const CountContext = createContext()//CountContext首字母大写，因为是组件</code><br>在祖组件中使用<code>&lt;CountContext.Provider value=&#123;count&#125;&gt; &lt;/CountContext.Provider&gt;</code>，将<code>count</code>传递给后代组件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">//===关键代码</span><br><span class="hljs-keyword">const</span> CountContext = createContext() <span class="hljs-comment">//CountContext首字母大写，因为是组件</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example4</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setCount(count + <span class="hljs-number">1</span>)<br>        &#125;&#125;&gt;<br>        click me<br>      &lt;/button&gt;<br>      &#123;<span class="hljs-comment">/*======关键代码 */</span>&#125;<br>      &lt;CountContext.Provider value=&#123;count&#125;&gt;&lt;/CountContext.Provider&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example4<br></code></pre></div></td></tr></table></figure><p>这段代码就相当于把<code>count</code>变量允许跨层级实现传递和使用了（也就是实现了上下文），当父组件的<code>count</code>变量发生变化时，子组件也会发生变化。接下来我们就看看一个<code>React Hooks</code>的组件如何接收到这个变量。</p><h3 id="useContext-接收上下文变量"><a href="#useContext-接收上下文变量" class="headerlink" title="useContext 接收上下文变量"></a>useContext 接收上下文变量</h3><p>已经有了上下文变量，剩下的就时如何接收了，接收这个直接使用 useContext 就可以，但是在使用前需要新进行引入<code>useContext</code>（不引入是没办法使用的）。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, createContext, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br></code></pre></div></td></tr></table></figure><p>引入后写一个<code>Counter</code>组件，只是显示上下文中的<code>count</code>变量代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> count = useContext(CountContext) <span class="hljs-comment">//一句话就可以得到count</span><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>得到后就可以显示出来了，但是要记得在<code>&lt;CountContext.Provider&gt;</code>的闭合标签中,代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;CountContext.Provider value=&#123;count&#125;&gt;<br>  &lt;Counter /&gt;<br>&lt;/CountContext.Provider&gt;<br></code></pre></div></td></tr></table></figure><p>其实<code>useContext</code>的用法比以前时简单很多，既然简单，就没必要讲解的那么难，希望小伙伴这节课都能 get 到知识点，完善自己的知识体系。</p><h2 id="useReducer-介绍和简单使用"><a href="#useReducer-介绍和简单使用" class="headerlink" title="useReducer 介绍和简单使用"></a>useReducer 介绍和简单使用</h2><p>上节课学习了<code>useContext</code>函数，那这节课开始学习一下<code>useReducer</code>，因为他们两个很像，并且合作可以完成类似的 Redux 库的操作。在开发中使用<code>useReducer</code>可以让代码具有更好的可读性和可维护性，并且会给测试提供方便。那我们彻底的学习一下<code>useReducer</code>。这节课我们只是简单的学习一下<code>useReducer</code>语法和使用方法，尽量避免<code>Redux</code>的一些操作。这样讲更容易让不了解<code>Redux</code>的小伙伴接受。</p><h3 id="reducer-到底是什么？"><a href="#reducer-到底是什么？" class="headerlink" title="reducer 到底是什么？"></a>reducer 到底是什么？</h3><p>为了更好的理解<code>useReducer</code>，所以先要了解 JavaScript 里的<code>Redcuer</code>是什么。它的兴起是从<code>Redux</code>广泛使用开始的，但不仅仅存在<code>Redux</code>中，可以使用 JavaScript 来完成<code>Reducer</code>操作。那<code>reducer</code>其实就是一个函数，这个函数接收两个参数，一个是状态，一个用来控制业务逻辑的判断参数。我们举一个最简单的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countReducer</span>(<span class="hljs-params">state, action</span>) </span>&#123;<br>  <span class="hljs-keyword">switch</span> (action.type) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;add&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sub&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面的代码就是 Reducer，你主要理解的就是这种形式和两个参数的作用，一个参数是状态，一个参数是如何控制状态。</p><h3 id="useReducer-的使用"><a href="#useReducer-的使用" class="headerlink" title="useReducer 的使用"></a>useReducer 的使用</h3><p>了解 reducer 的含义后，就可以讲 useReducer 了，它也是 React hooks 提供的函数，可以增强我们的<code>Reducer</code>，实现类似 Redux 的功能。我们新建一个<code>Example5.js</code>的文件，然后用 useReducer 实现计数器的加减双向操作。（此部分代码的介绍可以看视频来学习）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ReducerDemo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, dispatch] = useReducer(<span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">switch</span> (action) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;add&#x27;</span>:<br>        <span class="hljs-keyword">return</span> state + <span class="hljs-number">1</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sub&#x27;</span>:<br>        <span class="hljs-keyword">return</span> state - <span class="hljs-number">1</span><br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">return</span> state<br>    &#125;<br>  &#125;, <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;h2&gt;现在的分数是&#123;count&#125;&lt;/h2&gt;<br>      &lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> dispatch(<span class="hljs-string">&#x27;add&#x27;</span>)&#125;&gt;Increment&lt;/button&gt;<br>      &lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> dispatch(<span class="hljs-string">&#x27;sub&#x27;</span>)&#125;&gt;Decrement&lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ReducerDemo<br></code></pre></div></td></tr></table></figure><p>这段代码是 useReducer 的最简单实现了，这时候可以在浏览器中实现了计数器的增加减少。</p><p>修改<code>index.js</code>文件，让<code>ReducerDemo</code>组件起作用。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">import</span> Example <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Example5&#x27;</span><br><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Example</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></div></td></tr></table></figure><p>这节课就先到这里，小伙伴们一定对<code>useReducer</code>有所了解啦，那下节课我们在来用一个具体的例子，实现类似<code>Redux</code>的用法。</p><h3 id="useReducer-代替-Redux-小案例-1"><a href="#useReducer-代替-Redux-小案例-1" class="headerlink" title="useReducer 代替 Redux 小案例-1"></a>useReducer 代替 Redux 小案例-1</h3><p>使用<code>useContext</code>和<code>useReducer</code>是可以实现类似<code>Redux</code>的效果，并且一些简单的个人项目，完全可以用下面的方案代替 Redux，这种做法要比 Redux 简单一些。因为<code>useContext</code>和<code>useReducer</code>在前两节课已经学习过了，所以我们这节课把精力就放在如何模拟出<code>Redux</code>的效果。如果你目前还不能掌握基本的语法，可以再复习一下前两节的知识点。</p><blockquote><p>本节课程参考了掘金上缪宇的文章 ，文章地址:<a href="https://juejin.im/post/5ceb37c851882520724c7504">https://juejin.im/post/5ceb37c851882520724c7504</a></p></blockquote><h4 id="理论上的可行性"><a href="#理论上的可行性" class="headerlink" title="理论上的可行性"></a>理论上的可行性</h4><p>我们先从理论层面看看替代<code>Redux</code>的可能性，其实如果你对两个函数有所了解，只要我们巧妙的结合，这种替代方案是完全可行的。</p><p><code>useContext</code>：可访问全局状态，避免一层层的传递状态。这符合<code>Redux</code>其中的一项规则，就是状态全局化，并能统一管理。</p><p><code>useReducer</code>：通过 action 的传递，更新复杂逻辑的状态，主要是可以实现类似<code>Redux</code>中的<code>Reducer</code>部分，实现业务逻辑的可行性。</p><p>经过我们在理论上的分析是完全可行的，接下来我们就用一个简单实例来看一下具体的实现方法。那这节课先实现<code>useContext</code>部分（也就是状态共享），下节再继续讲解<code>useReducer</code>部分（控制业务逻辑）。</p><h4 id="编写基本-UI-组件"><a href="#编写基本-UI-组件" class="headerlink" title="编写基本 UI 组件"></a>编写基本 UI 组件</h4><p>既然是一个实例，就需要有些界面的东西，小伙伴们不要觉的烦。在<code>/src</code>目录下新建一个文件夹<code>Example6</code>，有了文件夹后，在文件夹下面建立一个<code>showArea.js</code>文件。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ShowArea</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color:</span> &#x27;<span class="hljs-attr">blue</span>&#x27; &#125;&#125;&gt;</span>字体颜色为blue<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ShowArea<br></code></pre></div></td></tr></table></figure><p>显示区域写完后，新建一个<code>Buttons.js</code>文件，用来编写按钮，这个是两个按钮，一个红色一个黄色。先不写其他任何业务逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Buttons</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;button&gt;红色&lt;/button&gt;<br>      &lt;button&gt;黄色&lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Buttons<br></code></pre></div></td></tr></table></figure><p>然后再编写一个组合他们的<code>Example6.js</code>组件，引入两个新编写的组件<code>ShowArea</code>和<code>Buttons</code>，并用<code>&lt;div&gt;</code>标签给包裹起来。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ShowArea <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ShowArea&#x27;</span><br><span class="hljs-keyword">import</span> Buttons <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Buttons&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example6</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;ShowArea /&gt;<br>      &lt;Buttons /&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example6<br></code></pre></div></td></tr></table></figure><p>这步做完，需要到<code>/src</code>目录下的<code>index.js</code>中引入一下<code>Example6.js</code>文件，引入后 React 才能正确渲染出刚写的 UI 组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">import</span> Example <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Example6/Example6&#x27;</span><br><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Example</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></div></td></tr></table></figure><p>做完这步可以简单的预览一下 UI 效果，虽然很丑，但是只要能满足学习需求就可以了。我们虽然都是前端，但是在学习时没必要追求漂亮的页面，关键时把知识点弄明白。我们写这么多文件，也就是要为接下来的知识点服务，其实这些组件都是陪衬罢了。</p><h4 id="编写颜色共享组件color-js"><a href="#编写颜色共享组件color-js" class="headerlink" title="编写颜色共享组件color.js"></a>编写颜色共享组件<code>color.js</code></h4><p>有了 UI 组件后，就可以写一些业务逻辑了，这节课我们先实现状态共享，这个就是利用<code>useContext</code>。建立一个<code>color.js</code>文件，然后写入下面的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ColorContext = createContext(&#123;&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> Color = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ColorContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color:</span> &#x27;<span class="hljs-attr">blue</span>&#x27; &#125;&#125;&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ColorContext.Provider</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码中引入了<code>createContext</code>用来创建共享上下文<code>ColorContext</code>组件，然后我们要用<code>&#123;props.children&#125;</code>来显示对应的子组件。详细解释我在视频中讲解吧。</p><p>有了这个组件后，我们就可以把<code>Example6.js</code>进行改写，让她可以共享状态。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ShowArea <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ShowArea&#x27;</span><br><span class="hljs-keyword">import</span> Buttons <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Buttons&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Color &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./color&#x27;</span> <span class="hljs-comment">//引入Color组件</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example6</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;Color&gt;<br>        &lt;ShowArea /&gt;<br>        &lt;Buttons /&gt;<br>      &lt;/Color&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example6<br></code></pre></div></td></tr></table></figure><p>然后再改写<code>showArea.js</code>文件，我们会引入<code>useContext</code>和在<code>color.js</code>中声明的<code>ColorContext</code>，让组件可以接收全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ColorContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./color&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ShowArea</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123; color &#125; = useContext(ColorContext)<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color:</span> <span class="hljs-attr">color</span> &#125;&#125;&gt;</span>字体颜色为&#123;color&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ShowArea<br></code></pre></div></td></tr></table></figure><p>这时候就通过<code>useContext</code>实现了状态的共享，可以到浏览器中看一下效果。然后我们下节课再实现复杂逻辑状态的变化。</p><h3 id="useReducer-代替-Redux-小案例-2"><a href="#useReducer-代替-Redux-小案例-2" class="headerlink" title="useReducer 代替 Redux 小案例-2"></a>useReducer 代替 Redux 小案例-2</h3><h4 id="在-color-js-中添加-Reducer"><a href="#在-color-js-中添加-Reducer" class="headerlink" title="在 color.js 中添加 Reducer"></a>在 color.js 中添加 Reducer</h4><p>颜色（state）管理的代码我们都放在了<code>color.js</code>中，所以在文件里添加一个 reducer，用于处理颜色更新的逻辑。先声明一个 reducer 的函数，它就是 JavaScript 中的普通函数，在讲<code>useReducer</code>的时候已经详细讲过了。有了 reducer 后，在 Color 组件里使用<code>useReducer</code>,这样 Color 组件就有了那个共享状态和处理业务逻辑的能力，跟以前使用的<code>Redux</code>几乎一样了。之后修改一下共享状态。我们来看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; createContext, useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ColorContext = createContext(&#123;&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> UPDATE_COLOR = <span class="hljs-string">&#x27;UPDATE_COLOR&#x27;</span><br><br><span class="hljs-keyword">const</span> reducer = <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">switch</span> (action.type) &#123;<br>    <span class="hljs-keyword">case</span> UPDATE_COLOR:<br>      <span class="hljs-keyword">return</span> action.color<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> Color = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [color, dispatch] = useReducer(reducer, <span class="hljs-string">&#x27;blue&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ColorContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color</span>, <span class="hljs-attr">dispatch</span> &#125;&#125;&gt;</span>&#123;props.children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ColorContext.Provider</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意，这时候我们共享出去的状态变成了 color 和 dispatch,如果不共享出去 dispatch，你是没办法完成按钮的相应事件的。</p><h4 id="通过-dispatch-修改状态"><a href="#通过-dispatch-修改状态" class="headerlink" title="通过 dispatch 修改状态"></a>通过 dispatch 修改状态</h4><p>目前程序已经有了处理共享状态的业务逻辑能力，接下来就可以在<code>buttons.js</code>使用<code>dispatch</code>来完成按钮的相应操作了。先引入<code>useContext</code>、<code>ColorContext</code>和<code>UPDATE_COLOR</code>，然后写<code>onClick</code>事件就可以了。代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ColorContext, UPDATE_COLOR &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./color&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Buttons</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> &#123; dispatch &#125; = useContext(ColorContext)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          dispatch(&#123; <span class="hljs-attr">type</span>: UPDATE_COLOR, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span> &#125;)<br>        &#125;&#125;&gt;<br>        红色<br>      &lt;/button&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          dispatch(&#123; <span class="hljs-attr">type</span>: UPDATE_COLOR, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;yellow&#x27;</span> &#125;)<br>        &#125;&#125;&gt;<br>        黄色<br>      &lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Buttons<br></code></pre></div></td></tr></table></figure><p>这样代码就编写完成了，用<code>useContext</code>和<code>useReducer</code>实现了 Redux 的效果，这个代码编写过程比 Redux 要简单，但是也是有一定难度的。希望第一次接触的小伙伴能自己动手写 5 遍以上，把这种模式掌握好。</p><h2 id="useMemo-优化-React-Hooks-程序性能"><a href="#useMemo-优化-React-Hooks-程序性能" class="headerlink" title="useMemo 优化 React Hooks 程序性能"></a>useMemo 优化 React Hooks 程序性能</h2><p><code>useMemo</code>主要用来解决使用 React hooks 产生的无用渲染的性能问题。使用 function 的形式来声明组件，失去了<code>shouldCompnentUpdate</code>（在组件更新之前）这个生命周期，也就是说我们没有办法通过组件更新前条件来决定组件是否更新。而且在函数组件中，也不再区分<code>mount</code>和<code>update</code>两个状态，这意味着函数组件的每一次调用都会执行内部的所有逻辑，就带来了非常大的性能损耗。<code>useMemo</code>和<code>useCallback</code>都是解决上述性能问题的，这节课先学习<code>useMemo</code>.</p><h3 id="性能问题展示案例"><a href="#性能问题展示案例" class="headerlink" title="性能问题展示案例"></a>性能问题展示案例</h3><p>先编写一下刚才所说的性能问题，建立两个组件,一个父组件一个子组件，组件上由两个按钮，一个是小红，一个是志玲，点击哪个，那个就像我们走来了。在<code>/src</code>文件夹下，新建立一个<code>Example7</code>的文件夹，在文件夹下建立一个<code>Example7.js</code>文件.然后先写第一个父组件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example7</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [xiaohong, setXiaohong] = useState(<span class="hljs-string">&#x27;小红待客状态&#x27;</span>)<br>  <span class="hljs-keyword">const</span> [zhiling, setZhiling] = useState(<span class="hljs-string">&#x27;志玲待客状态&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setXiaohong(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime())<br>        &#125;&#125;&gt;<br>        小红<br>      &lt;/button&gt;<br>      &lt;button<br>        onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>          setZhiling(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() + <span class="hljs-string">&#x27;,志玲向我们走来了&#x27;</span>)<br>        &#125;&#125;&gt;<br>        志玲<br>      &lt;/button&gt;<br>      &lt;ChildComponent name=&#123;xiaohong&#125;&gt;&#123;zhiling&#125;&lt;/ChildComponent&gt;<br>    &lt;/&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>父组件调用了子组件，子组件我们输出两个姑娘的状态，显示在界面上。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChildComponent</span>(<span class="hljs-params">&#123; name, children &#125;</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeXiaohong</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;她来了，她来了。小红向我们走来了&#x27;</span>)<br>    <span class="hljs-keyword">return</span> name + <span class="hljs-string">&#x27;,小红向我们走来了&#x27;</span><br>  &#125;<br><br>  <span class="hljs-keyword">const</span> actionXiaohong = changeXiaohong(name)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &lt;div&gt;&#123;actionXiaohong&#125;&lt;/div&gt;<br>      &lt;div&gt;&#123;children&#125;&lt;/div&gt;<br>    &lt;/&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后再导出父组件，让<code>index.js</code>可以渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example7<br></code></pre></div></td></tr></table></figure><p>这时候你会发现在浏览器中点击<code>志玲</code>按钮，小红对应的方法都会执行，结果虽然没变，但是每次都执行，这就是性能的损耗。目前只有子组件，业务逻辑也非常简单，如果是一个后台查询，这将产生严重的后果。所以这个问题必须解决。当我们点击<code>志玲</code>按钮时，小红对应的<code>changeXiaohong</code>方法不能执行，只有在点击<code>小红</code>按钮时才能执行。</p><h3 id="useMemo-优化性能"><a href="#useMemo-优化性能" class="headerlink" title="useMemo 优化性能"></a>useMemo 优化性能</h3><p>其实只要使用<code>useMemo</code>，然后给她传递第二个参数，参数匹配成功，才会执行。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChildComponent</span>(<span class="hljs-params">&#123; name, children &#125;</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeXiaohong</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;她来了，她来了。小红向我们走来了&#x27;</span>)<br>    <span class="hljs-keyword">return</span> name + <span class="hljs-string">&#x27;,小红向我们走来了&#x27;</span><br>  &#125;<br><br>  <span class="hljs-keyword">const</span> actionXiaohong = useMemo(<span class="hljs-function">() =&gt;</span> changeXiaohong(name), [name])<br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &lt;div&gt;&#123;actionXiaohong&#125;&lt;/div&gt;<br>      &lt;div&gt;&#123;children&#125;&lt;/div&gt;<br>    &lt;/&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这时在浏览器中点击一下<code>志玲</code>按钮，<code>changeXiaohong</code>就不再执行了。也节省了性能的消耗。案例只是让你更好理解，你还要从程序本身看到优化的作用。好的程序员对自己写的程序都是会进行不断优化的，这种没必要的性能浪费也是绝对不允许的，所以<code>useMemo</code>的使用在工作中还是比较多的。希望小伙伴们可以掌握。</p><h3 id="useRef-获取-DOM-元素和保存变量"><a href="#useRef-获取-DOM-元素和保存变量" class="headerlink" title="useRef 获取 DOM 元素和保存变量"></a>useRef 获取 DOM 元素和保存变量</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2625525/1620868911084-e2962f91-eb6a-49df-b223-285f0dfb893e.png#clientId=u27aee433-b580-4&from=paste&height=235&id=u0e1c6e04&margin=%5Bobject%20Object%5D&name=image.png&originHeight=235&originWidth=445&originalType=binary&size=45666&status=done&style=none&taskId=u32ead6cc-3632-497c-893d-3d21a7eec32&width=445" alt="image.png"></p><p><code>useRef</code>在工作中虽然用的不多，但是也不能缺少。它有两个主要的作用:</p><ul><li>用<code>useRef</code>获取 React JSX 中的 DOM 元素，获取后你就可以控制 DOM 的任何东西了。但是一般不建议这样来作，React 界面的变化可以通过状态来控制。</li><li>用<code>useRef</code>来保存变量，这个在工作中也很少能用到，我们有了<code>useContext</code>这样的保存其实意义不大，但是这是学习，也要把这个特性讲一下。</li></ul><p>界面上有一个文本框，在文本框的旁边有一个按钮，当我们点击按钮时，在控制台打印出<code>input</code>的 DOM 元素，并进行复制到 DOM 中的 value 上。这一切都是通过<code>useRef</code>来实现。</p><p>在<code>/src</code>文件夹下新建一个<code>Example8.js</code>文件，然后先引入 useRef，编写业务逻辑代码如下:</p><p>当点击按钮时，你可以看到在浏览器中的控制台完整的打印出了 DOM 的所有东西，并且界面上的<code>&lt;input/&gt;</code>框的 value 值也输出了我们写好的<code>Hello ,JSPang</code>。这一切说明我们可以使用 useRef 获取 DOM 元素，并且可以通过 useRef 控制 DOM 的属性和值。</p><p>这个操作在实际开发中用的并不多，但我们还是要讲解一下。就是<code>useRef</code>可以保存 React 中的变量。我们这里就写一个文本框，文本框用来改变<code>text</code>状态。又用<code>useRef</code>把<code>text</code>状态进行保存，最后打印在控制台上。写这段代码你会觉的很绕，其实显示开发中没必要这样写，用一个 state 状态就可以搞定，这里只是为了展示知识点。</p><p>接着上面的代码来写，就没必要重新写一个文件了。先用<code>useState</code>声明了一个<code>text</code>状态和<code>setText</code>函数。然后编写界面，界面就是一个文本框。然后输入的时候不断变化。</p><p>这时想每次<code>text</code>发生状态改变，保存到一个变量中或者说是<code>useRef</code>中，这时候就可以使用<code>useRef</code>了。先声明一个<code>textRef</code>变量，他其实就是<code>useRef</code>函数。然后使用<code>useEffect</code>函数实现每次状态变化都进行变量修改，并打印。最后的全部代码如下。</p><p>这时候就可以实现每次状态修改，同时保存到<code>useRef</code>中了。也就是我们说的保存变量的功能。那<code>useRef</code>的主要功能就是获得 DOM 和变量保存，我们都已经讲过了。你的编码能力有增加了一些，让我们一起加油。</p><h3 id="useRef-获取-DOM-元素"><a href="#useRef-获取-DOM-元素" class="headerlink" title="useRef 获取 DOM 元素"></a>useRef 获取 DOM 元素</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example8</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> onButtonClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    inputEl.current.value = <span class="hljs-string">&#x27;Hello ,JSPang&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(inputEl) <span class="hljs-comment">//输出获取到的DOM节点</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &#123;<span class="hljs-comment">/*保存input的ref到inputEl */</span>&#125;<br>      &lt;input ref=&#123;inputEl&#125; type=<span class="hljs-string">&quot;text&quot;</span> /&gt;<br>      &lt;button onClick=&#123;onButtonClick&#125;&gt;在input上展示文字&lt;/button&gt;<br>    &lt;/&gt;<br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example8<br></code></pre></div></td></tr></table></figure><h3 id="useRef-保存普通变量"><a href="#useRef-保存普通变量" class="headerlink" title="useRef 保存普通变量"></a>useRef 保存普通变量</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example8</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> onButtonClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    inputEl.current.value = <span class="hljs-string">&#x27;Hello ,useRef&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(inputEl)<br>  &#125;<br>  <span class="hljs-keyword">const</span> [text, setText] = useState(<span class="hljs-string">&#x27;jspang&#x27;</span>)<br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &#123;<span class="hljs-comment">/*保存input的ref到inputEl */</span>&#125;<br>      &lt;input ref=&#123;inputEl&#125; type=<span class="hljs-string">&quot;text&quot;</span> /&gt;<br>      &lt;button onClick=&#123;onButtonClick&#125;&gt;在input上展示文字&lt;/button&gt;<br>      &lt;br /&gt;<br>      &lt;br /&gt;<br>      &lt;input<br>        value=&#123;text&#125;<br>        onChange=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>          setText(e.target.value)<br>        &#125;&#125;<br>      /&gt;<br>    &lt;/&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example8<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useRef, useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example8</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> inputEl = useRef(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> onButtonClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    inputEl.current.value = <span class="hljs-string">&#x27;Hello ,useRef&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(inputEl)<br>  &#125;<br>  <span class="hljs-comment">//-----------关键代码--------start</span><br>  <span class="hljs-keyword">const</span> [text, setText] = useState(<span class="hljs-string">&#x27;jspang&#x27;</span>)<br>  <span class="hljs-keyword">const</span> textRef = useRef()<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    textRef.current = text<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;textRef.current:&#x27;</span>, textRef.current)<br>  &#125;)<br>  <span class="hljs-comment">//----------关键代码--------------end</span><br>  <span class="hljs-keyword">return</span> (<br>    &lt;&gt;<br>      &#123;<span class="hljs-comment">/*保存input的ref到inputEl */</span>&#125;<br>      &lt;input ref=&#123;inputEl&#125; type=<span class="hljs-string">&quot;text&quot;</span> /&gt;<br>      &lt;button onClick=&#123;onButtonClick&#125;&gt;在input上展示文字&lt;/button&gt;<br>      &lt;br /&gt;<br>      &lt;br /&gt;<br>      &lt;input<br>        value=&#123;text&#125;<br>        onChange=&#123;<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>          setText(e.target.value)<br>        &#125;&#125;<br>      /&gt;<br>    &lt;/&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example8<br></code></pre></div></td></tr></table></figure><h2 id="自定义-Hooks-函数获取窗口大小"><a href="#自定义-Hooks-函数获取窗口大小" class="headerlink" title="自定义 Hooks 函数获取窗口大小"></a>自定义 Hooks 函数获取窗口大小</h2><p>其实自定义 Hooks 函数和用 Hooks 创建组件很相似，跟我们平时用 JavaScript 写函数几乎一模一样，可能就是多了些<code>React Hooks</code>的特性，自定义 Hooks 函数偏向于功能，而组件偏向于界面和业务逻辑。由于差别不大，所以使用起来也是很随意的。如果是小型项目是可以的，但是如果项目足够复杂，这会让项目结构不够清晰。所以学习自定义 Hooks 函数还是很有必要的。</p><h3 id="编写自定义函数"><a href="#编写自定义函数" class="headerlink" title="编写自定义函数"></a>编写自定义函数</h3><p>在实际开发中，为了界面更加美观。获取浏览器窗口的尺寸是一个经常使用的功能，这样经常使用的功能，就可以封装成一个自定义<code>Hooks</code>函数，记住一定要用 use 开头，这样才能区分出什么是组件，什么是自定义函数。</p><p>新建一个文件<code>Example9.js</code>,然后编写一个 useWinSize,编写时我们会用到<code>useState</code>、<code>useEffect</code>和<code>useCallback</code>所以先用<code>import</code>进行引入。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br></code></pre></div></td></tr></table></figure><p>然后编写函数，函数中先用 useState 设置<code>size</code>状态，然后编写一个每次修改状态的方法<code>onResize</code>，这个方法使用<code>useCallback</code>，目的是为了缓存方法(useMemo 是为了缓存变量)。 然后在第一次进入方法时用<code>useEffect</code>来注册<code>resize</code>监听时间。为了防止一直监听所以在方法移除时，使用 return 的方式移除监听。最后返回 size 变量就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useWinSize</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [size, setSize] = useState(&#123;<br>    width: <span class="hljs-built_in">document</span>.documentElement.clientWidth,<br>    height: <span class="hljs-built_in">document</span>.documentElement.clientHeight,<br>  &#125;)<br><br>  <span class="hljs-keyword">const</span> onResize = useCallback(<span class="hljs-function">() =&gt;</span> &#123;<br>    setSize(&#123;<br>      width: <span class="hljs-built_in">document</span>.documentElement.clientWidth,<br>      height: <span class="hljs-built_in">document</span>.documentElement.clientHeight,<br>    &#125;)<br>  &#125;, [])<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, onResize)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, onResize)<br>    &#125;<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> size<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这就是一个自定义函数，其实和我们以前写的 JS 函数没什么区别，所以这里也不做太多的介绍。</p><h3 id="编写组件并使用自定义函数"><a href="#编写组件并使用自定义函数" class="headerlink" title="编写组件并使用自定义函数"></a>编写组件并使用自定义函数</h3><p>自定义<code>Hooks</code>函数已经写好了，可以直接进行使用，用法和<code>JavaScript</code>的普通函数用起来是一样的。直接在<code>Example9</code>组件使用<code>useWinSize</code>并把结果实时展示在页面上。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example9</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> size = useWinSize()<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      页面Size:&#123;size.width&#125;x&#123;size.height&#125;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example9<br></code></pre></div></td></tr></table></figure><p>之后就可以在浏览器中预览一下结果，可以看到当我们放大缩小浏览器窗口时，页面上的结果都会跟着进行变化。说明自定义的函数起到了作用。</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React-Hooks</tag>
      
      <tag>生命周期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React路由传参</title>
    <link href="/2021/04/26/React%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82/"/>
    <url>/2021/04/26/React%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82/</url>
    
    <content type="html"><![CDATA[<h1 id="react-路由传参-3-种方式"><a href="#react-路由传参-3-种方式" class="headerlink" title="react 路由传参(3 种方式)"></a>react 路由传参(3 种方式)</h1><h2 id="1-params-传参-刷新页面后参数不消失，参数会在地址栏显示"><a href="#1-params-传参-刷新页面后参数不消失，参数会在地址栏显示" class="headerlink" title="1.params 传参(刷新页面后参数不消失，参数会在地址栏显示)"></a>1.params 传参(刷新页面后参数不消失，参数会在地址栏显示)</h2><p>路由页面:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Route path=<span class="hljs-string">&quot;/link/:id&quot;</span> component=&#123;Demo&#125;&gt;&lt;<span class="hljs-regexp">/Route&gt; /</span><span class="hljs-regexp">/注意要配置/</span>:id路由跳转并传递参数。<br></code></pre></div></td></tr></table></figure><p>链接方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Link to=&#123;<span class="hljs-string">&#x27;/link/&#x27;</span>+<span class="hljs-string">&#x27;xxx&#x27;</span>&#125;&gt;首页&lt;/Link&gt;<br><span class="hljs-comment">//或</span><br>&lt;Link to=&#123;&#123;<span class="hljs-attr">pathname</span>:<span class="hljs-string">&#x27;/link/&#x27;</span>+<span class="hljs-string">&#x27;xxx&#x27;</span>&#125;&#125;&gt;首页&lt;/Link&gt;<br></code></pre></div></td></tr></table></figure><p>js 方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.history.push(<span class="hljs-regexp">/link/</span><span class="hljs-string">&quot;+&#x27;xxx&#x27;)</span><br><span class="hljs-string">//或</span><br><span class="hljs-string">this.props.history.push(&#123;pathname:&#x27;/link/+&#x27;xxx&#x27;&#125;)</span><br></code></pre></div></td></tr></table></figure><p>获取参数:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.match.params.id <span class="hljs-comment">//注意这里是match而非history</span><br></code></pre></div></td></tr></table></figure><h2 id="2-query-传参-刷新页面后参数消失"><a href="#2-query-传参-刷新页面后参数消失" class="headerlink" title="2.query 传参(刷新页面后参数消失)"></a>2.query 传参(刷新页面后参数消失)</h2><p>路由页面:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Route path=<span class="hljs-string">&quot;/demo&quot;</span> component=&#123;Demo&#125;&gt;&lt;<span class="hljs-regexp">/Route&gt; /</span><span class="hljs-regexp">/无需配置路由跳转并传递参数</span><br></code></pre></div></td></tr></table></figure><p>链接方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Link to=&#123;&#123;<span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/link &quot;,query:&#123; id:22, name:&#x27;</span>dahuang<span class="hljs-string">&quot;&#125;&#125;&#125;&gt;XX&lt;/Link&gt;</span><br></code></pre></div></td></tr></table></figure><p>js 方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.history.push(&#123; <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/demo&#x27;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">22</span>, <span class="hljs-attr">namer</span>: <span class="hljs-string">&#x27;dahuang&#x27;</span> &#125; &#125;)<br></code></pre></div></td></tr></table></figure><p>获取参数:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.location.query.name<br></code></pre></div></td></tr></table></figure><h2 id="3-state-传参-刷新页面后参数不消失，state-传的参数是加密的"><a href="#3-state-传参-刷新页面后参数不消失，state-传的参数是加密的" class="headerlink" title="3.state 传参(刷新页面后参数不消失，state 传的参数是加密的)"></a>3.state 传参(刷新页面后参数不消失，state 传的参数是加密的)</h2><p>路由页面:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Route path=<span class="hljs-string">&quot;/link&quot;</span> component=&#123;Demo&#125;&gt;&lt;<span class="hljs-regexp">/Route&gt; /</span><span class="hljs-regexp">/无需配置路由跳转并传递参数</span><br></code></pre></div></td></tr></table></figure><p>链接方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;Link to=&#123;&#123;<span class="hljs-attr">pathname</span>:<span class="hljs-string">&#x27;/link&quot;,state:&#123;id:12,name:&#x27;</span>dahuang<span class="hljs-string">&#x27;&#125;&#125;&#125;&gt;XX&lt;/Link&gt;</span><br></code></pre></div></td></tr></table></figure><p>js 方式:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.history.push(&#123; <span class="hljs-attr">pathname</span>: <span class="hljs-string">&#x27;/demo&#x27;</span>, <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">12</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;dahuang&#x27;</span> &#125; &#125;)<br></code></pre></div></td></tr></table></figure><p>获取参数:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.props.location.state.name<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>React路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sass和Less</title>
    <link href="/2021/04/26/Sass%E5%92%8CLess/"/>
    <url>/2021/04/26/Sass%E5%92%8CLess/</url>
    
    <content type="html"><![CDATA[<h1 id="Sass和Less"><a href="#Sass和Less" class="headerlink" title="Sass和Less"></a>Sass和Less</h1><p>Sass和Less都属于CSS预处理器，CSS 预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，如：变量、语句、函数、继承等概念。将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行CSS的编码工作。</p><p><p>   官网地址： <a href="http://lesscss.org/">http://lesscss.org/</a></p><p>   VSCode插件：Easy LESS</p><p>   官网地址： <a href="https://sass-lang.com/">https://sass-lang.com/</a></p><p>   VSCode插件：Easy Sass</p><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><p>在Sass和Less文件夹中新建一个style2.scss文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box&#123;<br>    width: 200px;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>输入样式，会自动转换生成style2.css文件和压缩文件style2.min.css</p><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">//单行注释不会被编译</span><br><br><span class="hljs-comment">/*  </span><br><span class="hljs-comment">多行注释会被编译</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$number:123px;<br>.box2&#123;<br>    width:$number;<br>    height:$number;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="3-插值"><a href="#3-插值" class="headerlink" title="3.插值"></a>3.插值</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$number:123px;<br>$key:margin;<br>$i:<span class="hljs-number">2</span>;<br>.box#&#123;$i&#125;&#123;<br>    width:$number;<br>    height:$number;<br>    #&#123;$key&#125;:auto;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-作用域"><a href="#4-作用域" class="headerlink" title="4.作用域"></a>4.作用域</h3><p>高输出123px；宽输出456px；有顺序要求</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$number:123px;<br>.box3<br>&#123;<br>    height: $number;<br>    $number:456px;<br>    width: $number;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-选择器嵌套"><a href="#5-选择器嵌套" class="headerlink" title="5.选择器嵌套"></a>5.选择器嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-伪类嵌套"><a href="#6-伪类嵌套" class="headerlink" title="6.伪类嵌套"></a>6.伪类嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>    &amp;:hover&#123;<span class="hljs-comment">//不加&amp;符号会有空格</span><br>        color:red<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-属性嵌套"><a href="#7-属性嵌套" class="headerlink" title="7.属性嵌套"></a>7.属性嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>    &amp;:hover&#123;<span class="hljs-comment">//不加&amp;符号会有空格</span><br>        color:red;<br>        font:&#123;<br>            size:10px;<br>            weight:bold;<br>            family:宋体<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="8-运算"><a href="#8-运算" class="headerlink" title="8.运算"></a>8.运算</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$num:100px;<br>.box4&#123;<br>    width:$num*<span class="hljs-number">3</span>;<br>    height: $num+10px;<br>    <span class="hljs-comment">// height: $num+10em;//单位不同不能计算</span><br>    font:20px / <span class="hljs-number">1.5</span>;<span class="hljs-comment">//斜杠默认是分割</span><br>    padding:(20px / <span class="hljs-number">1.5</span>);<span class="hljs-comment">//加上括号可以计算</span><br>    color:#010203 * 2;//颜色也能进行运算<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">//自定义函数</span><br>@<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">$n,$m</span>)</span>&#123;<br>    @<span class="hljs-keyword">return</span> $n + $m;<br>&#125;<br>.box5&#123;<br>    width:round(<span class="hljs-number">3.</span>4px);<br>    height: percentage(<span class="hljs-number">0.2</span>);<span class="hljs-comment">//百分比</span><br>    margin: random();<span class="hljs-comment">//随机数可以产生</span><br>    padding: sqrt(<span class="hljs-number">25</span>%);<span class="hljs-comment">//不能开方</span><br>    font-size: sum(4px,5px);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="10-混入"><a href="#10-混入" class="headerlink" title="10.混入"></a>10.混入</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">@mixin show &#123;<span class="hljs-comment">//只混入 不渲染</span><br>    display: inline;<br>&#125;<br>@mixin <span class="hljs-function"><span class="hljs-title">hide</span>(<span class="hljs-params">$color</span>)</span> &#123;<span class="hljs-comment">//也能传参</span><br>    display: block;<br>    color: $color;<br>&#125;<br>.box6&#123;<br>    width: 100px;<br>    @include show;<br>    @include hide(red)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="11-无命名空间"><a href="#11-无命名空间" class="headerlink" title="11.无命名空间"></a>11.无命名空间</h3><h3 id="12-继承"><a href="#12-继承" class="headerlink" title="12.继承"></a>12.继承</h3><p>继承和混入很像，只是最后生成的代码是分开，还是分组的形式</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">%line&#123;<span class="hljs-comment">//.换成百分号就不会被渲染出来</span><br>    display: inline;<br>&#125;<br>.box7&#123;<br>    @extend %line;<br>&#125;<br>.box8&#123;<br>    @extend %line;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="13-合并"><a href="#13-合并" class="headerlink" title="13.合并"></a>13.合并</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$background:(<br>    a:url(a.png),<br>    b:url(b.png)<br>);<br>$transform:(<br>    a:scale(<span class="hljs-number">2</span>),<br>    b:rotate(30deg)<br>);<br>.box9&#123;<br>    background: map-values($background);<span class="hljs-comment">//逗号隔开效果</span><br>    transform:zip(map-values($transform)...);<span class="hljs-comment">//空格隔开效果</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="14-媒体查询"><a href="#14-媒体查询" class="headerlink" title="14.媒体查询"></a>14.媒体查询</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box10&#123;<br>    width:100px;<br>    @media all and (min-width:768px) &#123;<br>        width:600px;<br>    &#125;<br>    @media all and (min-width:1440px) &#123;<br>        width:900px;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="15-条件"><a href="#15-条件" class="headerlink" title="15.条件"></a>15.条件</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">$count:<span class="hljs-number">3</span>;<br>.box11&#123;<br>    @<span class="hljs-keyword">if</span>($count &gt; <span class="hljs-number">4</span>)&#123;<br>        width:100px + $count;<br>    &#125;<br>    @<span class="hljs-keyword">else</span>&#123;<br>        width: 10px + $count;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="16-循环"><a href="#16-循环" class="headerlink" title="16.循环"></a>16.循环</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@<span class="hljs-keyword">for</span> $i <span class="hljs-keyword">from</span> <span class="hljs-number">0</span> through <span class="hljs-number">2</span>&#123;<br>    .box-#&#123;$i&#125;&#123;<br>        width: 100px + $i;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="17-导入"><a href="#17-导入" class="headerlink" title="17.导入"></a>17.导入</h3><p>在Sass和Less中新建一个文件reset.scss</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">*&#123;<span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;padding: <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//写入样式</span><br>img&#123;<span class="hljs-attr">display</span>: block;&#125;<br><br></code></pre></div></td></tr></table></figure><p>在Sass和Less\style2.scss中引入reset.scss</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./reset.scss&#x27;</span><br></code></pre></div></td></tr></table></figure><h2 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h2><p>在Sass和Less文件夹中新建一个style.less文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box&#123;<br>    width: 100px;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>输入样式，会自动转换生成style.css文件</p><h3 id="1-注释-1"><a href="#1-注释-1" class="headerlink" title="1.注释"></a>1.注释</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">//单行注释不会被编译</span><br><br><span class="hljs-comment">/*  </span><br><span class="hljs-comment">多行注释会被编译</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h3 id="2-变量-1"><a href="#2-变量-1" class="headerlink" title="2.变量"></a>2.变量</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@number:123px;<br>.box2&#123;<br>    width:@number;<br>    height:@number;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-插值-1"><a href="#3-插值-1" class="headerlink" title="3.插值"></a>3.插值</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@number:123px;<br>@key:margin;<br>@i:<span class="hljs-number">2</span>;<br>.box@&#123;i&#125;&#123;<br>    width:@number;<br>    height:@number;<br>    @&#123;key&#125;:auto;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-作用域-1"><a href="#4-作用域-1" class="headerlink" title="4.作用域"></a>4.作用域</h3><p>宽高输出的都是456px；作用域有就近原则，局部变量优先找同区块的</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@number:123px;<br>.box3<br>&#123;<br>    height:@number;<br>    @number:456px;<br>    width:@number;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-选择器嵌套-1"><a href="#5-选择器嵌套-1" class="headerlink" title="5.选择器嵌套"></a>5.选择器嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="6-伪类嵌套-1"><a href="#6-伪类嵌套-1" class="headerlink" title="6.伪类嵌套"></a>6.伪类嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">ul&#123;<br>    list-style: none;<br>    li&#123;<br>        float:left;<br>        div&#123;<span class="hljs-attr">margin</span>: 10px;&#125;<br>        p&#123;<span class="hljs-attr">margin</span>: 20px;&#125;<br>    &#125;<br>    &amp;:hover&#123;<span class="hljs-comment">//不加&amp;符号会有空格</span><br>        color:red<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-无属性嵌套"><a href="#7-无属性嵌套" class="headerlink" title="7.无属性嵌套"></a>7.无属性嵌套</h3><h3 id="8-运算-1"><a href="#8-运算-1" class="headerlink" title="8.运算"></a>8.运算</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@num:100px;<br>.box4&#123;<br>    width:@num*<span class="hljs-number">3</span>;<br>    height: @num+10em;<br>    margin: 10em+@num;<span class="hljs-comment">//单位不同时，按照第一个计算</span><br>    font:20px / <span class="hljs-number">1.5</span>;<span class="hljs-comment">//斜杠默认是分割</span><br>    padding:(20px / <span class="hljs-number">1.5</span>);<span class="hljs-comment">//加上括号可以被计算转译</span><br>    padding:~<span class="hljs-string">&#x27;20px / 1.5&#x27;</span>;<span class="hljs-comment">//加上~&#x27; &#x27;防止转译，直接变成除(但是我不加的时候暂时也没有转译)</span><br>    color:#010203 * 2;//颜色也能进行<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="9-函数-1"><a href="#9-函数-1" class="headerlink" title="9.函数"></a>9.函数</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box5&#123;<br>    width:round(<span class="hljs-number">3.</span>4px);<br>    height: percentage(<span class="hljs-number">0.2</span>);<span class="hljs-comment">//百分比</span><br>    margin: random();<span class="hljs-comment">//随机数不能产生</span><br>    padding: sqrt(<span class="hljs-number">25</span>%);<span class="hljs-comment">//开方</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="10-混入-1"><a href="#10-混入-1" class="headerlink" title="10.混入"></a>10.混入</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.show&#123;<span class="hljs-comment">//不加括号会生成，再混入</span><br>    display: block;<br>&#125;<br>.hide(@color)&#123;<span class="hljs-comment">//加括号不生成，直接混入,还能传参</span><br>    display: inline;<br>&#125;<br>.box6&#123;<br>    width: 100px;<br>    .show;<br>    .hide(blue);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="11-命名空间"><a href="#11-命名空间" class="headerlink" title="11.命名空间"></a>11.命名空间</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">#<span class="hljs-function"><span class="hljs-title">nm</span>(<span class="hljs-params"></span>)</span>&#123;<br>    .show&#123;<span class="hljs-attr">display</span>: inline-block;&#125;<br>&#125;<br>.box7&#123;<br>    #nm.show;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="12-继承-1"><a href="#12-继承-1" class="headerlink" title="12.继承"></a>12.继承</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.line&#123;<br>    display: inline;<br>&#125;<br>.box7&#123;<br>    &amp;:extend(.line);<br>&#125;<br>.box8&#123;<br>    &amp;:extend(.line);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="13-合并-1"><a href="#13-合并-1" class="headerlink" title="13.合并"></a>13.合并</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.box9&#123;<br>    background+: url(a.png);<br>    background+: url(b.png);<span class="hljs-comment">//+号是用空格的形式隔开</span><br>    transform+_: scale(<span class="hljs-number">2</span>);<br>    transform+_: rotate(30deg);<span class="hljs-comment">//+_号是用空格隔开</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="14-媒体查询-1"><a href="#14-媒体查询-1" class="headerlink" title="14.媒体查询"></a>14.媒体查询</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">.box10&#123;<br>    width:100px;<br>    @media all and (min-width:768px) &#123;<br>        width:600px;<br>    &#125;<br>    @media all and (min-width:1440px) &#123;<br>        width:900px;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="15-条件-1"><a href="#15-条件-1" class="headerlink" title="15.条件"></a>15.条件</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@count:<span class="hljs-number">5</span>;<br>.get(@cn) <span class="hljs-function"><span class="hljs-title">when</span>(<span class="hljs-params">@cn &gt; <span class="hljs-number">4</span></span>)</span>&#123;<br>    width: 100px + @cn;<br>&#125;<br>.get(@cn) when (@cn &lt; <span class="hljs-number">4</span>)&#123;<br>    width: 10px + @cn;<br>&#125;<br>.box11&#123;<br>    .get(@count)<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="16-循环-1"><a href="#16-循环-1" class="headerlink" title="16.循环"></a>16.循环</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@count2:<span class="hljs-number">0</span>;<br>.get2(@cn) when (@cn&lt;<span class="hljs-number">3</span>)&#123;<span class="hljs-comment">//用递归</span><br>    .get2((@cn+<span class="hljs-number">1</span>));<br>    .box-@&#123;cn&#125;&#123;<br>        width: 100px + @cn;<br>    &#125;<br>&#125;<br>.get2(@count2);<br><br><br></code></pre></div></td></tr></table></figure><h3 id="17-导入-1"><a href="#17-导入-1" class="headerlink" title="17.导入"></a>17.导入</h3><p>在Sass和Less中新建一个文件reset.less</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">*&#123;<span class="hljs-attr">margin</span>: <span class="hljs-number">0</span>;padding: <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//写入样式</span><br></code></pre></div></td></tr></table></figure><p>在Sass和Less\style.less中引入reset.less</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">@<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./reset.less&#x27;</span>;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sass</tag>
      
      <tag>Less</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【置顶】这是第一条博客，欢迎大家来到我的博客，请尽情留言吧！</title>
    <link href="/2021/04/25/hello-world/"/>
    <url>/2021/04/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>这里是留言板！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
